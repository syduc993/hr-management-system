import React, { useState } from 'react';

// Import c√°c th√†nh ph·∫ßn v√† services c·∫ßn thi·∫øt
import Modal from '../common/Modal.jsx';
import RecruitmentModal from './RecruitmentModal.jsx';
import { ButtonLoading } from '../common/Loading.jsx';
import { useNotification } from '../../hooks/useNotification';
import { addWorkHistory } from '../../services/employee.js';

/**
 * Modal ƒë·ªÉ th√™m m·ªôt b·∫£n ghi L·ªãch s·ª≠ c√¥ng vi·ªác cho nh√¢n vi√™n.
 * N√≥ cho ph√©p ng∆∞·ªùi d√πng ch·ªçn m·ªôt "ƒê·ªÅ xu·∫•t tuy·ªÉn d·ª•ng" ƒë√£ c√≥ s·∫µn.
 * Logic ƒë∆∞·ª£c ƒëi·ªÅu ch·ªânh ƒë·ªÉ lu√¥n l√†m vi·ªác v·ªõi m·ªôt m·∫£ng c√°c ƒë·ªÅ xu·∫•t,
 * nh∆∞ng RecruitmentModal ƒë∆∞·ª£c c·∫•u h√¨nh ƒë·ªÉ ch·ªâ cho ph√©p ch·ªçn m·ªôt.
 *
 * @param {object} props
 * @param {boolean} props.isOpen - C·ªù ƒë·ªÉ ƒëi·ªÅu khi·ªÉn vi·ªác hi·ªÉn th·ªã modal.
 * @param {Function} props.onClose - H√†m ƒë·ªÉ ƒë√≥ng modal.
 * @param {object} props.employee - ƒê·ªëi t∆∞·ª£ng nh√¢n vi√™n ƒëang ƒë∆∞·ª£c th√™m l·ªãch s·ª≠.
 * @param {Function} props.onSave - H√†m callback ƒë∆∞·ª£c g·ªçi sau khi l∆∞u th√†nh c√¥ng.
 */
const AddWorkHistoryModal = ({ isOpen, onClose, employee, onSave }) => {
  // N·∫øu kh√¥ng c√≥ th√¥ng tin nh√¢n vi√™n, kh√¥ng render g√¨ c·∫£ ƒë·ªÉ tr√°nh l·ªói.
  if (!employee) return null;

  // State qu·∫£n l√Ω ƒë·ªÅ xu·∫•t d∆∞·ªõi d·∫°ng M·∫¢NG ƒë·ªÉ ƒë·ªìng nh·∫•t logic.
  const [selectedRecruitments, setSelectedRecruitments] = useState([]);
  const [isRecruitmentModalOpen, setIsRecruitmentModalOpen] = useState(false);
  const [isLoading, setIsLoading] = useState(false);
  
  // ‚úÖ TH√äM: State cho c√°c tr∆∞·ªùng m·ªõi
  const [workHistoryData, setWorkHistoryData] = useState({
    fromDate: '',
    toDate: '',
    hourlyRate: ''
  });
  
  const { showNotification } = useNotification();

  /**
   * X·ª≠ l√Ω khi ng∆∞·ªùi d√πng ch·ªçn m·ªôt ƒë·ªÅ xu·∫•t t·ª´ RecruitmentModal.
   * D√π RecruitmentModal c√≥ singleSelect=true, n√≥ v·∫´n ƒë∆∞·ª£c thi·∫øt k·∫ø ƒë·ªÉ tr·∫£ v·ªÅ m·ªôt m·∫£ng.
   * @param {Array<object>} recruitmentObject - M·∫£ng ch·ª©a ƒë·ªÅ xu·∫•t ƒë√£ ch·ªçn.
   */
  const handleRecruitmentSelect = (recruitmentObject) => {
    // Lu√¥n nh·∫≠n v·ªÅ m·ªôt m·∫£ng, k·ªÉ c·∫£ khi ch·ªâ c√≥ m·ªôt l·ª±a ch·ªçn.
    setSelectedRecruitments(recruitmentObject ? [recruitmentObject] : []);
    setIsRecruitmentModalOpen(false);
  };

  // ‚úÖ TH√äM: X·ª≠ l√Ω thay ƒë·ªïi d·ªØ li·ªáu form
  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setWorkHistoryData(prev => ({
      ...prev,
      [name]: value
    }));
  };

  // ‚úÖ TH√äM: Validation c√°c tr∆∞·ªùng m·ªõi
  const validateForm = () => {
    const errors = [];

    // Ki·ªÉm tra ƒë√£ ch·ªçn ƒë·ªÅ xu·∫•t
    if (selectedRecruitments.length === 0) {
      errors.push('Vui l√≤ng ch·ªçn m·ªôt ƒë·ªÅ xu·∫•t tuy·ªÉn d·ª•ng.');
    }

    // Ki·ªÉm tra c√°c tr∆∞·ªùng b·∫Øt bu·ªôc
    if (!workHistoryData.fromDate) {
      errors.push('T·ª´ ng√†y l√† b·∫Øt bu·ªôc.');
    }

    if (!workHistoryData.toDate) {
      errors.push('ƒê·∫øn ng√†y l√† b·∫Øt bu·ªôc.');
    }

    // Ki·ªÉm tra logic ng√†y
    if (workHistoryData.fromDate && workHistoryData.toDate) {
      const fromDate = new Date(workHistoryData.fromDate);
      const toDate = new Date(workHistoryData.toDate);
      
      if (toDate < fromDate) {
        errors.push('ƒê·∫øn ng√†y ph·∫£i l·ªõn h∆°n ho·∫∑c b·∫±ng T·ª´ ng√†y.');
      }
    }

    // Ki·ªÉm tra m·ª©c l∆∞∆°ng
    if (workHistoryData.hourlyRate && (isNaN(workHistoryData.hourlyRate) || parseFloat(workHistoryData.hourlyRate) < 0)) {
      errors.push('M·ª©c l∆∞∆°ng/gi·ªù ph·∫£i l√† s·ªë v√† kh√¥ng ƒë∆∞·ª£c √¢m.');
    }

    return errors;
  };

  /**
   * X·ª≠ l√Ω khi ng∆∞·ªùi d√πng nh·∫•n n√∫t "L∆∞u" ƒë·ªÉ g·ª≠i form.
   */
  const handleSubmit = async (e) => {
    e.preventDefault();

    // ‚úÖ C·∫¨P NH·∫¨T: S·ª≠ d·ª•ng validation m·ªõi
    const validationErrors = validateForm();
    if (validationErrors.length > 0) {
      showNotification(validationErrors.join(' '), 'warning');
      return;
    }

    if (isLoading) return;
    setIsLoading(true);

    try {
      // ‚úÖ C·∫¨P NH·∫¨T: API payload v·ªõi c√°c tr∆∞·ªùng m·ªõi
      const workHistoryPayload = {
        employeeId: employee.employeeId,
        requestNo: selectedRecruitments[0].requestNo,
        fromDate: workHistoryData.fromDate,
        toDate: workHistoryData.toDate,
        hourlyRate: workHistoryData.hourlyRate ? parseFloat(workHistoryData.hourlyRate) : undefined,
      };

      console.log('üì§ Sending work history payload:', workHistoryPayload);

      const response = await addWorkHistory(workHistoryPayload);

      if (response.success) {
        showNotification('Th√™m l·ªãch s·ª≠ c√¥ng vi·ªác th√†nh c√¥ng!', 'success');
        if (onSave) {
          onSave(); // G·ªçi callback ƒë·ªÉ ƒë√≥ng modal v√† refresh d·ªØ li·ªáu b√™n ngo√†i.
        }
      } else {
        showNotification(response.message || 'Th√™m l·ªãch s·ª≠ c√¥ng vi·ªác th·∫•t b·∫°i.', 'error');
      }
    } catch (error) {
      console.error('L·ªói khi th√™m l·ªãch s·ª≠ c√¥ng vi·ªác:', error);
      showNotification(error.message || 'L·ªói h·ªá th·ªëng, vui l√≤ng th·ª≠ l·∫°i.', 'error');
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <>
      {/* Modal ch√≠nh ƒë·ªÉ th√™m Work History */}
      <Modal
        isOpen={isOpen}
        onClose={onClose}
        title={`Th√™m L·ªãch s·ª≠ cho: ${employee.fullName}`}
        size="lg"
      >
        <form onSubmit={handleSubmit}>
          {/* Tr∆∞·ªùng hi·ªÉn th·ªã m√£ nh√¢n vi√™n (kh√¥ng cho s·ª≠a) */}
          <div className="mb-3">
            <label htmlFor="employeeIdDisplay" className="form-label">M√£ nh√¢n vi√™n</label>
            <input
              id="employeeIdDisplay"
              type="text"
              className="form-control"
              value={employee.employeeId}
              disabled
            />
          </div>

          {/* Khu v·ª±c ch·ªçn ƒê·ªÅ xu·∫•t tuy·ªÉn d·ª•ng */}
          <div className="mb-4">
            <label className="form-label d-block">ƒê·ªÅ xu·∫•t tuy·ªÉn d·ª•ng <span className="text-danger">*</span></label>
            
            {/* Hi·ªÉn th·ªã th√¥ng tin ƒë·ªÅ xu·∫•t n·∫øu ƒë√£ ch·ªçn */}
            {selectedRecruitments.length > 0 ? (
              <div className="card mt-2 border-success bg-light">
                <div className="card-body p-2">
                  <div className="d-flex justify-content-between align-items-center">
                    <div>
                      <strong className="d-block">M√£ ƒêX: {selectedRecruitments[0].requestNo}</strong>
                      <small className="text-muted">
                        V·ªã tr√≠: {selectedRecruitments[0].position} ‚Ä¢ Ph√≤ng ban: {selectedRecruitments[0].department}
                      </small>
                      <small className="d-block text-info">
                        Th·ªùi gian ƒêX: {selectedRecruitments[0].fromDateFormatted} - {selectedRecruitments[0].toDateFormatted}
                      </small>
                    </div>
                    <div className="d-flex align-items-center gap-1">
                      <button
                        type="button"
                        className="btn btn-sm btn-outline-primary border-0"
                        title="Thay ƒë·ªïi l·ª±a ch·ªçn"
                        onClick={() => setIsRecruitmentModalOpen(true)}
                      >
                        <i className="bi bi-pencil-square"></i>
                      </button>
                      <button
                        type="button"
                        className="btn btn-sm btn-outline-danger border-0"
                        title="B·ªè ch·ªçn"
                        onClick={() => setSelectedRecruitments([])} // Reset m·∫£ng v·ªÅ r·ªóng
                      >
                        <i className="bi bi-x-lg"></i>
                      </button>
                    </div>
                  </div>
                </div>
              </div>
            ) : (
              // Hi·ªÉn th·ªã n√∫t ch·ªçn n·∫øu ch∆∞a c√≥ ƒë·ªÅ xu·∫•t n√†o
              <div className="d-flex align-items-center gap-2 mt-2">
                <button
                  type="button"
                  className="btn btn-outline-primary"
                  onClick={() => setIsRecruitmentModalOpen(true)}
                >
                  <i className="bi bi-search me-2"></i>
                  Ch·ªçn ƒë·ªÅ xu·∫•t
                </button>
              </div>
            )}
          </div>

          {/* ‚úÖ TH√äM: C√°c tr∆∞·ªùng m·ªõi */}
          <div className="row mb-3">
            <div className="col-md-6">
              <label htmlFor="fromDate" className="form-label">
                T·ª´ ng√†y <span className="text-danger">*</span>
              </label>
              <input
                type="date"
                className="form-control"
                id="fromDate"
                name="fromDate"
                value={workHistoryData.fromDate}
                onChange={handleInputChange}
                disabled={isLoading}
              />
              <small className="form-text text-muted">
                Ng√†y b·∫Øt ƒë·∫ßu l√†m vi·ªác
              </small>
            </div>
            <div className="col-md-6">
              <label htmlFor="toDate" className="form-label">
                ƒê·∫øn ng√†y <span className="text-danger">*</span>
              </label>
              <input
                type="date"
                className="form-control"
                id="toDate"
                name="toDate"
                value={workHistoryData.toDate}
                onChange={handleInputChange}
                disabled={isLoading}
              />
              <small className="form-text text-muted">
                Ng√†y k·∫øt th√∫c l√†m vi·ªác
              </small>
            </div>
          </div>

          <div className="mb-3">
            <label htmlFor="hourlyRate" className="form-label">
              M·ª©c l∆∞∆°ng/gi·ªù (VNƒê)
            </label>
            <input
              type="number"
              className="form-control"
              id="hourlyRate"
              name="hourlyRate"
              value={workHistoryData.hourlyRate}
              onChange={handleInputChange}
              min="0"
              step="1000"
              placeholder="V√≠ d·ª•: 50000"
              disabled={isLoading}
            />
            <small className="form-text text-muted">
              ƒê·ªÉ tr·ªëng n·∫øu s·ª≠ d·ª•ng m·ª©c l∆∞∆°ng m·∫∑c ƒë·ªãnh. Nh·∫≠p s·ªë ƒë·ªÉ √°p d·ª•ng m·ª©c l∆∞∆°ng ƒë·∫∑c bi·ªát (ng√†y l·ªÖ, OT...)
            </small>
          </div>

          {/* ‚úÖ TH√äM: C·∫£nh b√°o validation */}
          {selectedRecruitments.length > 0 && (workHistoryData.fromDate || workHistoryData.toDate) && (
            <div className="alert alert-info small">
              <i className="fas fa-info-circle me-2"></i>
              <strong>L∆∞u √Ω:</strong> Kho·∫£ng th·ªùi gian l√†m vi·ªác ph·∫£i n·∫±m trong kho·∫£ng th·ªùi gian c·ªßa ƒë·ªÅ xu·∫•t tuy·ªÉn d·ª•ng ({selectedRecruitments[0].fromDateFormatted} - {selectedRecruitments[0].toDateFormatted}).
            </div>
          )}

          {/* C√°c n√∫t h√†nh ƒë·ªông ·ªü ch√¢n modal */}
          <div className="modal-footer px-0 pb-0 border-0">
            <button type="button" className="btn btn-secondary" onClick={onClose} disabled={isLoading}>
              H·ªßy
            </button>
            <ButtonLoading
              type="submit"
              className="btn btn-primary"
              loading={isLoading}
              // N√∫t L∆∞u b·ªã v√¥ hi·ªáu h√≥a khi ƒëang t·∫£i ho·∫∑c ch∆∞a ƒë·ªß th√¥ng tin
              disabled={isLoading || selectedRecruitments.length === 0 || !workHistoryData.fromDate || !workHistoryData.toDate}
            >
              Th√™m L·ªãch s·ª≠
            </ButtonLoading>
          </div>
        </form>
      </Modal>

      {/* Modal ph·ª• ƒë·ªÉ ch·ªçn ƒê·ªÅ xu·∫•t tuy·ªÉn d·ª•ng, ch·ªâ hi·ªán khi c·∫ßn */}
      {isRecruitmentModalOpen && (
        <RecruitmentModal
          isOpen={isRecruitmentModalOpen}
          onClose={() => setIsRecruitmentModalOpen(false)}
          onRecruitmentSelected={handleRecruitmentSelect}
          // Truy·ªÅn m·∫£ng ƒë√£ ch·ªçn v√†o ƒë·ªÉ modal bi·∫øt l·ª±a ch·ªçn hi·ªán t·∫°i
          selectedRecruitments={selectedRecruitments}
          // Lu√¥n gi·ªØ singleSelect=true ƒë·ªÉ ƒë·∫£m b·∫£o ng∆∞·ªùi d√πng ch·ªâ ch·ªçn 1
          singleSelect={true}
        />
      )}
    </>
  );
};

export default AddWorkHistoryModal;
