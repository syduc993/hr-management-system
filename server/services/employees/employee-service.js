// Employee management service
import BaseService from '../core/base-service.js';
import LarkClient from '../core/lark-client.js';
import CacheService from '../core/cache-service.js';
import WorkHistoryService from './work-history-service.js';


/**
 * @class EmployeeService
 * @description Qu·∫£n l√Ω c√°c nghi·ªáp v·ª• li√™n quan ƒë·∫øn th√¥ng tin nh√¢n vi√™n,
 * bao g·ªìm CRUD (t·∫°o, ƒë·ªçc, c·∫≠p nh·∫≠t, x√≥a) v√† c√°c ch·ª©c nƒÉng t√¨m ki·∫øm, ki·ªÉm tra.
 */
class EmployeeService extends BaseService {
    constructor() {
        super();
        this.tableName = 'employees';
        this.baseId = process.env.LARK_BASE_ID;
        this.tableId = process.env.LARK_EMPLOYEE_TABLE_ID;
        this.workHistoryService = new WorkHistoryService();
    }

    async initializeService() {
        // Initialize Lark Base connection
        console.log('Initializing Employee Service...');
        await this.workHistoryService.initializeService();
    }

    // =================================================================
    //  PUBLIC API METHODS - C√ÅC H√ÄM CUNG C·∫§P RA B√äN NGO√ÄI
    // =================================================================


    /**
     * L·∫•y to√†n b·ªô danh s√°ch nh√¢n vi√™n t·ª´ Lark, c√≥ h·ªó tr·ª£ cache.
     * @returns {Promise<Array<object>>} - M·∫£ng c√°c ƒë·ªëi t∆∞·ª£ng nh√¢n vi√™n.
     */
    async getAllEmployees() {
        try {

            const response = await LarkClient.getAllRecords(
                `/bitable/v1/apps/${this.baseId}/tables/${this.tableId}/records`
            );

            let employees = this.transformEmployeeData(response.data?.items || []);
            return employees;
        } catch (error) {
            console.error('‚ùå EMPLOYEE: Error fetching employees from Lark:', error.message);
            throw error;
        }
    }


    /**
     * L·∫•y th√¥ng tin m·ªôt nh√¢n vi√™n b·∫±ng record_id c·ªßa Lark, c√≥ h·ªó tr·ª£ cache.
     * @param {string} id - Record ID c·ªßa nh√¢n vi√™n trong Lark.
     * @returns {Promise<object|null>} - ƒê·ªëi t∆∞·ª£ng nh√¢n vi√™n ho·∫∑c null n·∫øu kh√¥ng t√¨m th·∫•y.
     */
    async getEmployeeById(id) {
        try {
            console.log(`üîç Getting employee by ID: ${id}`);
            
            const response = await LarkClient.get(
                `/bitable/v1/apps/${this.baseId}/tables/${this.tableId}/records/${id}`
            );
            
            if (response.data && response.data.record) {
                const transformedEmployee = this.transformEmployeeData([response.data.record])[0];
                console.log('‚úÖ Employee found:', transformedEmployee.employeeId);
                return transformedEmployee;
            }
            
            console.log('‚ùå Employee not found');
            return null;
            
        } catch (error) {
            console.error('‚ùå Error getting employee by ID:', error);
            throw error;
        }
    }


    /**
     * T√¨m ki·∫øm nh√¢n vi√™n d·ª±a tr√™n h·ªç t√™n, m√£ nh√¢n vi√™n, ho·∫∑c s·ªë ƒëi·ªán tho·∫°i.
     * @param {string} query - Chu·ªói t√¨m ki·∫øm.
     * @returns {Promise<Array<object>>} - M·∫£ng c√°c nh√¢n vi√™n ph√π h·ª£p.
     */
    async searchEmployees(query) {
        const employees = await this.getAllEmployees();

        if (!query) return employees;

        const searchTerm = query.toLowerCase();
        return employees.filter(emp =>
            emp.fullName.toLowerCase().includes(searchTerm) ||
            emp.employeeId.toLowerCase().includes(searchTerm) ||
            emp.phoneNumber.includes(searchTerm)
        );
    }

    /**
     * Th√™m m·ªôt nh√¢n vi√™n m·ªõi v√†o Lark Bitable.
     * @param {object} employeeData - D·ªØ li·ªáu nh√¢n vi√™n c·∫ßn th√™m.
     * @returns {Promise<object>} - K·∫øt qu·∫£ c·ªßa vi·ªác th√™m.
     */
    async addEmployee(employeeData) {
        try {
            const transformedData = this.transformEmployeeForLark(employeeData);

            const response = await LarkClient.post(`/bitable/v1/apps/${this.baseId}/tables/${this.tableId}/records`, {
                fields: transformedData
            });

            // Clear cache
            CacheService.delete('employees_all');
            
            return {
                success: true,
                employeeId: employeeData.employeeId,
                larkResponse: response 
            };
            
        } catch (error) {

            await this.handleError(error, 'addEmployee');
            throw error;
        }
    }


    /**
     * C·∫≠p nh·∫≠t th√¥ng tin m·ªôt nh√¢n vi√™n.
     * @param {string} id - Record ID c·ªßa nh√¢n vi√™n trong Lark.
     * @param {object} employeeData - D·ªØ li·ªáu c·∫ßn c·∫≠p nh·∫≠t.
     * @returns {Promise<object>} - Th√¥ng tin nh√¢n vi√™n sau khi c·∫≠p nh·∫≠t.
     */
    async updateEmployee(id, employeeData) {
        try {
            const transformedData = this.transformEmployeeForLark(employeeData);

            const response = await LarkClient.put(`/bitable/v1/apps/${this.baseId}/tables/${this.tableId}/records/${id}`, {
                fields: transformedData
            });

            // Clear cache
            CacheService.delete('employees_all');

            return this.transformEmployeeData([response.data.record])[0];
        } catch (error) {
            await this.handleError(error, 'updateEmployee');
            throw error;
        }
    }

    
    /**
     * X√≥a m·ªôt nh√¢n vi√™n kh·ªèi Lark.
     * @param {string} id - Record ID c·ªßa nh√¢n vi√™n trong Lark.
     * @returns {Promise<boolean>} - True n·∫øu x√≥a th√†nh c√¥ng.
     */
    async deleteEmployee(id) {
        try {
            await LarkClient.delete(`/bitable/v1/apps/${this.baseId}/tables/${this.tableId}/records/${id}`);

            // Clear cache
            CacheService.delete('employees_all');

            return true;
        } catch (error) {
            await this.handleError(error, 'deleteEmployee');
            throw error;
        }
    }


    /**
     * Ki·ªÉm tra xem m·ªôt m√£ nh√¢n vi√™n ƒë√£ t·ªìn t·∫°i hay ch∆∞a.
     * T·ªëi ∆∞u b·∫±ng c√°ch s·ª≠ d·ª•ng filter c·ªßa Lark API thay v√¨ t·∫£i to√†n b·ªô d·ªØ li·ªáu.
     * @param {string} employeeId - M√£ nh√¢n vi√™n c·∫ßn ki·ªÉm tra.
     * @returns {Promise<boolean>} - True n·∫øu m√£ ƒë√£ t·ªìn t·∫°i.
     */
    async checkEmployeeIdExists(employeeId) {
        try {
            console.log(`üîç EMPLOYEE: Checking for duplicate ID: ${employeeId}`);

            // ‚úÖ S·ª≠ d·ª•ng getAllRecords ƒë·ªÉ ƒë·∫£m b·∫£o ki·ªÉm tra tr√™n to√†n b·ªô nh√¢n vi√™n
            const response = await LarkClient.getAllRecords(
                `/bitable/v1/apps/${this.baseId}/tables/${this.tableId}/records`
            );
            const allEmployees = this.transformEmployeeData(response.data?.items || []);

            const exists = allEmployees.some(emp => emp.employeeId === employeeId);
            console.log(`‚úÖ EMPLOYEE: Duplicate check result: ${exists ? 'EXISTS' : 'NOT_EXISTS'}`);

            return exists;
        } catch (error) {
            console.error('‚ùå EMPLOYEE: Error checking for duplicate employee ID:', error);
            // An to√†n nh·∫•t l√† tr·∫£ v·ªÅ false ƒë·ªÉ kh√¥ng ch·∫∑n vi·ªác th√™m nh√¢n vi√™n n·∫øu API l·ªói
            return false;
        }
    }


    // =================================================================
    //  DATA TRANSFORMATION & UTILITY HELPERS
    // =================================================================


    /**
     * Chuy·ªÉn ƒë·ªïi d·ªØ li·ªáu nh√¢n vi√™n th√¥ t·ª´ Lark sang ƒë·ªãnh d·∫°ng chu·∫©n c·ªßa ·ª©ng d·ª•ng.
     * @param {Array<object>} larkData - M·∫£ng b·∫£n ghi t·ª´ Lark.
     * @returns {Array<object>} - M·∫£ng c√°c ƒë·ªëi t∆∞·ª£ng nh√¢n vi√™n ƒë√£ ƒë∆∞·ª£c ƒë·ªãnh d·∫°ng.
     */
    transformEmployeeData(larkData) {

        if (!Array.isArray(larkData)) {
            console.warn('‚ö†Ô∏è SERVICE: larkData is not an array:', typeof larkData);
            return [];
        }

        const transformed = larkData.map((record, index) => {
            const result = {
                id: record.record_id,
                employeeId: record.fields['M√£ nh√¢n vi√™n'] || '',
                fullName: record.fields['H·ªç t√™n'] || '',
                phoneNumber: record.fields['S·ªë ƒëi·ªán tho·∫°i'] || '',
                gender: record.fields['Gi·ªõi t√≠nh'] || '',
                position: record.fields['V·ªã tr√≠'] || '',
                bankAccount: record.fields['S·ªë t√†i kho·∫£n'] || '',
                bankName: record.fields['Ng√¢n h√†ng'] || '',
                recruitmentLink: record.fields['Link ƒë·ªÅ xu·∫•t tuy·ªÉn d·ª•ng'] || '',
                status: record.fields['Tr·∫°ng th√°i'] || 'active',
                createdAt: record.fields['Created At'] || new Date().toISOString(),
                updatedAt: record.fields['Updated At'] || new Date().toISOString()
            };

            return result;
        });

        return transformed;
    }


    /**
     * Chuy·ªÉn ƒë·ªïi d·ªØ li·ªáu nh√¢n vi√™n t·ª´ ·ª©ng d·ª•ng sang ƒë·ªãnh d·∫°ng `fields` m√† Lark API y√™u c·∫ßu.
     * @param {object} employeeData - D·ªØ li·ªáu nh√¢n vi√™n t·ª´ ·ª©ng d·ª•ng.
     * @returns {object} - ƒê·ªëi t∆∞·ª£ng `fields` ƒë·ªÉ g·ª≠i cho Lark.
     */
    transformEmployeeForLark(employeeData) {
        return {
            'M√£ nh√¢n vi√™n': employeeData.employeeId,
            'H·ªç t√™n': employeeData.fullName,
            'S·ªë ƒëi·ªán tho·∫°i': employeeData.phoneNumber,
            'Gi·ªõi t√≠nh': employeeData.gender,
            'V·ªã tr√≠': employeeData.position || '',
            'S·ªë t√†i kho·∫£n': employeeData.bankAccount,
            'Ng√¢n h√†ng': employeeData.bankName,
            'Link ƒë·ªÅ xu·∫•t tuy·ªÉn d·ª•ng': employeeData.recruitmentLink || '',
            'Tr·∫°ng th√°i': employeeData.status || 'active'
        };
    }



    generateEmployeeId(fullName, phoneNumber) {
        return `${fullName} - ${phoneNumber}`;
    }

}

export default EmployeeService;
