// src/services/employee.js

import { ApiClient } from './api.js';

const handleError = (error, context) => {
    const message = error.response?.data?.message || error.message || `L·ªói kh√¥ng x√°c ƒë·ªãnh khi ${context}.`;
    console.error(`‚ùå L·ªói Service API (${context}):`, message);
    throw new Error(message);
};

export const getEmployees = async () => {
    try {
        console.log('üì° SERVICE (FE): G·ªçi API l·∫•y danh s√°ch nh√¢n vi√™n...');
        const response = await ApiClient.get('/api/employees');
        
        // ‚úÖ S·ª¨A: Debug chi ti·∫øt response structure
        console.log('üîç EMPLOYEE SERVICE: Raw axios response:', response);
        console.log('üîç EMPLOYEE SERVICE: Response data type:', typeof response.data);
        console.log('üîç EMPLOYEE SERVICE: Response data keys:', response.data ? Object.keys(response.data) : 'NULL');
        console.log('üîç EMPLOYEE SERVICE: Response data:', response.data);
        
        if (!response.data) {
            throw new Error('Server kh√¥ng tr·∫£ v·ªÅ d·ªØ li·ªáu');
        }
        
        // ‚úÖ S·ª¨A: X·ª≠ l√Ω c·∫£ 2 tr∆∞·ªùng h·ª£p response structure
        
        // Tr∆∞·ªùng h·ª£p 1: Standard structure {success, data, message}
        if (typeof response.data.success !== 'undefined') {
            console.log('‚úÖ EMPLOYEE SERVICE: Found standard structure');
            console.log('  - success:', response.data.success);
            console.log('  - message:', response.data.message);
            console.log('  - data type:', Array.isArray(response.data.data) ? 'array' : typeof response.data.data);
            console.log('  - data length:', response.data.data?.length);
            
            if (!response.data.success) {
                throw new Error(response.data.message || 'Server tr·∫£ v·ªÅ l·ªói');
            }
            
            return response.data; // Tr·∫£ v·ªÅ {success: true, data: [...], message: "..."}
        }
        
        // Tr∆∞·ªùng h·ª£p 2: Backend tr·∫£ v·ªÅ array tr·ª±c ti·∫øp
        if (Array.isArray(response.data)) {
            console.log('‚úÖ EMPLOYEE SERVICE: Response is direct array, converting to standard structure');
            console.log('  - data length:', response.data.length);
            
            // Wrap array v√†o standard structure
            return {
                success: true,
                data: response.data,
                message: 'L·∫•y danh s√°ch nh√¢n vi√™n th√†nh c√¥ng'
            };
        }
        
        // Tr∆∞·ªùng h·ª£p 3: Unknown structure
        console.warn('‚ö†Ô∏è EMPLOYEE SERVICE: Unknown response structure, trying to extract data');
        
        // Th·ª≠ t√¨m array trong c√°c keys c·ªßa response
        const possibleArrays = Object.values(response.data).filter(val => Array.isArray(val));
        if (possibleArrays.length > 0) {
            console.log('‚úÖ EMPLOYEE SERVICE: Found array in response, using it as data');
            return {
                success: true,
                data: possibleArrays[0],
                message: 'L·∫•y danh s√°ch nh√¢n vi√™n th√†nh c√¥ng'
            };
        }
        
        throw new Error('Server tr·∫£ v·ªÅ d·ªØ li·ªáu kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng');
        
    } catch (error) {
        console.error('‚ùå EMPLOYEE SERVICE: Full error:', error);
        handleError(error, 'l·∫•y danh s√°ch nh√¢n vi√™n');
    }
};

// Gi·ªØ nguy√™n c√°c functions kh√°c...
export const addEmployee = async (employeeData) => {
    try {
        console.log('üì° SERVICE (FE): G·ªçi API th√™m nh√¢n vi√™n m·ªõi...', employeeData);
        const response = await ApiClient.post('/api/employees', employeeData);
        
        // ‚úÖ TH√äM: Debug v√† handle response structure
        console.log('üîç ADD EMPLOYEE SERVICE: Response:', response);
        
        if (!response) {
            throw new Error('Server kh√¥ng tr·∫£ v·ªÅ d·ªØ li·ªáu khi th√™m nh√¢n vi√™n');
        }
        
        // Handle different response structures
        if (typeof response.success !== 'undefined') {
            return response;
        }
        
        // Fallback: assume success if we got a response
        return {
            success: true,
            data: response,
            message: 'Th√™m nh√¢n vi√™n th√†nh c√¥ng'
        };
        
    } catch (error) {
        handleError(error, 'th√™m nh√¢n vi√™n m·ªõi');
    }
};

export const updateEmployee = async (id, employeeData) => {
    try {
        console.log(`üì° SERVICE (FE): G·ªçi API c·∫≠p nh·∫≠t nh√¢n vi√™n ID: ${id}...`, employeeData);
        const response = await ApiClient.put(`/api/employees/${id}`, employeeData);
        
        console.log('üîç DEBUG: PUT Response Status:', response.status);
        console.log('üîç DEBUG: PUT Response Headers:', response.headers);
        console.log('üîç DEBUG: PUT Response Data:', response.data);
        console.log('üîç DEBUG: PUT Response Full:', response);

        console.log('üîç UPDATE EMPLOYEE SERVICE: Response:', response);
        
        // Handle different response structures
        if (typeof response.success !== 'undefined') {
            return response;
        }
        
        return {
            success: true,
            data: response,
            message: 'C·∫≠p nh·∫≠t nh√¢n vi√™n th√†nh c√¥ng'
        };
        
    } catch (error) {
        handleError(error, 'c·∫≠p nh·∫≠t nh√¢n vi√™n');
    }
};

// export const deleteEmployee = async (id) => {
//     try {
//         console.log(`üì° SERVICE (FE): G·ªçi API x√≥a nh√¢n vi√™n ID: ${id}...`);
//         const response = await ApiClient.delete(`/api/employees/${id}`);
        
//         console.log('üîç DELETE EMPLOYEE SERVICE: Response:', response);
        
//         return {
//             success: true,
//             message: 'X√≥a nh√¢n vi√™n th√†nh c√¥ng'
//         };
//     } catch (error) {
//         handleError(error, 'x√≥a nh√¢n vi√™n');
//     }
// };


export const deleteEmployee = async (id) => {
    try {
        console.log(`üì° SERVICE (FE): G·ªçi API x√≥a nh√¢n vi√™n ID: ${id}...`);
        const response = await ApiClient.delete(`/api/employees/${id}`);
        
        console.log('üîç DELETE EMPLOYEE SERVICE: Response:', response);
        
        // ‚úÖ TH√äM: Hi·ªÉn th·ªã th√¥ng tin chi ti·∫øt t·ª´ backend
        if (response.data?.deletedWorkHistories > 0) {
            console.log(`‚úÖ Deleted ${response.data.deletedWorkHistories} work history records`);
        }
        
        return {
            success: true,
            message: response.message || 'X√≥a nh√¢n vi√™n th√†nh c√¥ng',
            data: response.data
        };
        
    } catch (error) {
        console.error('‚ùå Delete employee service error:', error);
        
        // ‚úÖ TH√äM: Better error message
        let errorMessage = 'L·ªói khi x√≥a nh√¢n vi√™n';
        
        try {
            const errorData = JSON.parse(error.message);
            errorMessage = errorData.message || errorMessage;
        } catch (parseError) {
            errorMessage = error.message || errorMessage;
        }
        
        throw new Error(errorMessage);
    }
};



export const getApprovedRecruitmentRequests = async () => {
    try {
        console.log('üì° SERVICE (FE): G·ªçi API l·∫•y danh s√°ch ƒë·ªÅ xu·∫•t tuy·ªÉn d·ª•ng...');
        //const response = await ApiClient.get('/api/recruitment');

        //Th√™m filter theo status
        const response = await ApiClient.get('/api/recruitment', {
            status: 'Approved,Under Review'
        });
        console.log('üîç RECRUITMENT SERVICE: Response:', response);
        
        // Handle different response structures
        if (typeof response.success !== 'undefined') {
            return response.data || [];
        }
        
        if (Array.isArray(response)) {
            return response;
        }
        
        if (Array.isArray(response.data)) {
            return response.data;
        }
        
        return [];
    } catch (error) {
        console.error('‚ùå Recruitment service error:', error);
        return []; // Return empty array instead of throwing
    }
};

export const getWorkHistory = async (employeeId) => {
    try {
        console.log(`üì° SERVICE (FE): G·ªçi API l·∫•y l·ªãch s·ª≠ c√¥ng vi·ªác: ${employeeId}...`);
        const response = await ApiClient.get(`/api/employees/${employeeId}/work-history`);
        
        console.log('üîç WORK HISTORY SERVICE: Response:', response);
        
        // Handle different response structures
        if (typeof response.success !== 'undefined') {
            return response.data || [];
        }
        
        if (Array.isArray(response)) {
            return response;
        }
        
        if (Array.isArray(response.data)) {
            return response.data;
        }
        
        return [];
    } catch (error) {
        console.error('‚ùå Work history service error:', error);
        return [];
    }
};

export const addWorkHistory = async (workHistoryData) => {
    try {
        console.log('üì° SERVICE (FE): G·ªçi API th√™m l·ªãch s·ª≠ c√¥ng vi·ªác...', workHistoryData);
        const response = await ApiClient.post('/api/employees/work-history', workHistoryData);
        
        console.log('üîç ADD WORK HISTORY SERVICE: Response:', response);
        
        // Handle different response structures
        if (typeof response.success !== 'undefined') {
            return response;
        }
        
        return {
            success: true,
            data: response,
            message: 'Th√™m l·ªãch s·ª≠ c√¥ng vi·ªác th√†nh c√¥ng'
        };
    } catch (error) {
        handleError(error, 'th√™m l·ªãch s·ª≠ c√¥ng vi·ªác');
    }
};

// ‚úÖ TH√äM M·ªöI: Update work history
export const updateWorkHistory = async (id, workHistoryData) => {
    try {
        console.log(`üì° SERVICE (FE): G·ªçi API c·∫≠p nh·∫≠t l·ªãch s·ª≠ c√¥ng vi·ªác ID: ${id}...`, workHistoryData);
        const response = await ApiClient.put(`/api/employees/work-history/${id}`, workHistoryData);
        
        console.log('üîç UPDATE WORK HISTORY SERVICE: Response:', response);
        
        // Handle different response structures
        if (typeof response.success !== 'undefined') {
            return response;
        }
        
        return {
            success: true,
            data: response,
            message: 'C·∫≠p nh·∫≠t l·ªãch s·ª≠ c√¥ng vi·ªác th√†nh c√¥ng'
        };
        
    } catch (error) {
        handleError(error, 'c·∫≠p nh·∫≠t l·ªãch s·ª≠ c√¥ng vi·ªác');
    }
};

// ‚úÖ TH√äM M·ªöI: Delete work history
export const deleteWorkHistory = async (id) => {
    try {
        console.log(`üì° SERVICE (FE): G·ªçi API x√≥a l·ªãch s·ª≠ c√¥ng vi·ªác ID: ${id}...`);
        const response = await ApiClient.delete(`/api/employees/work-history/${id}`);
        
        console.log('üîç DELETE WORK HISTORY SERVICE: Response:', response);
        
        return {
            success: true,
            message: 'X√≥a l·ªãch s·ª≠ c√¥ng vi·ªác th√†nh c√¥ng'
        };
        
    } catch (error) {
        handleError(error, 'x√≥a l·ªãch s·ª≠ c√¥ng vi·ªác');
    }
};
