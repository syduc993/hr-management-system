================================================================================
              PH√ÇN T√çCH C·∫§U TR√öC D·ª∞ √ÅN V√Ä N·ªòI DUNG CODE
================================================================================

1. C·∫§U TR√öC TH∆Ø M·ª§C:
----------------------------------------
hr-management-system/
‚îú‚îÄ‚îÄ Getcode.ipynb
‚îú‚îÄ‚îÄ index.html
‚îú‚îÄ‚îÄ node_modules/
‚îú‚îÄ‚îÄ package-lock.json
‚îú‚îÄ‚îÄ package.json
‚îú‚îÄ‚îÄ project_analysis.txt
‚îú‚îÄ‚îÄ server/
‚îÇ   ‚îú‚îÄ‚îÄ config/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ database.js
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ lark-config.js
‚îÇ   ‚îú‚îÄ‚îÄ controllers/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ attendanceController.js
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ authController.js
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ dashboardController.js
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ employeeController.js
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ recruitmentController.js
‚îÇ   ‚îú‚îÄ‚îÄ middleware/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ auth.js
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ validation.js
‚îÇ   ‚îú‚îÄ‚îÄ routes/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ attendance.js
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ auth.js
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ employees.js
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ recruitment.js
‚îÇ   ‚îú‚îÄ‚îÄ server.js
‚îÇ   ‚îî‚îÄ‚îÄ services/
‚îÇ       ‚îú‚îÄ‚îÄ attendance/
‚îÇ       ‚îÇ   ‚îú‚îÄ‚îÄ attendance-service.js
‚îÇ       ‚îÇ   ‚îú‚îÄ‚îÄ attendance-validator.js
‚îÇ       ‚îÇ   ‚îî‚îÄ‚îÄ index.js
‚îÇ       ‚îú‚îÄ‚îÄ auth/
‚îÇ       ‚îÇ   ‚îú‚îÄ‚îÄ auth-service.js
‚îÇ       ‚îÇ   ‚îú‚îÄ‚îÄ index.js
‚îÇ       ‚îÇ   ‚îî‚îÄ‚îÄ session-service.js
‚îÇ       ‚îú‚îÄ‚îÄ core/
‚îÇ       ‚îÇ   ‚îú‚îÄ‚îÄ base-service.js
‚îÇ       ‚îÇ   ‚îú‚îÄ‚îÄ cache-service.js
‚îÇ       ‚îÇ   ‚îú‚îÄ‚îÄ index.js
‚îÇ       ‚îÇ   ‚îî‚îÄ‚îÄ lark-client.js
‚îÇ       ‚îú‚îÄ‚îÄ employees/
‚îÇ       ‚îÇ   ‚îú‚îÄ‚îÄ employee-service.js
‚îÇ       ‚îÇ   ‚îú‚îÄ‚îÄ employee-validator.js
‚îÇ       ‚îÇ   ‚îú‚îÄ‚îÄ index.js
‚îÇ       ‚îÇ   ‚îî‚îÄ‚îÄ work-history-service.js
‚îÇ       ‚îú‚îÄ‚îÄ index.js
‚îÇ       ‚îú‚îÄ‚îÄ lark-service-manager.js
‚îÇ       ‚îú‚îÄ‚îÄ master-data/
‚îÇ       ‚îÇ   ‚îú‚îÄ‚îÄ index.js
‚îÇ       ‚îÇ   ‚îú‚îÄ‚îÄ master-data-validator.js
‚îÇ       ‚îÇ   ‚îú‚îÄ‚îÄ position-service.js
‚îÇ       ‚îÇ   ‚îî‚îÄ‚îÄ store-service.js
‚îÇ       ‚îú‚îÄ‚îÄ recruitment/
‚îÇ       ‚îÇ   ‚îú‚îÄ‚îÄ index.js
‚îÇ       ‚îÇ   ‚îú‚îÄ‚îÄ recruitment-service.js
‚îÇ       ‚îÇ   ‚îî‚îÄ‚îÄ recruitment-validator.js
‚îÇ       ‚îî‚îÄ‚îÄ utils/
‚îÇ           ‚îú‚îÄ‚îÄ error-handler.js
‚îÇ           ‚îú‚îÄ‚îÄ index.js
‚îÇ           ‚îú‚îÄ‚îÄ response-formatter.js
‚îÇ           ‚îî‚îÄ‚îÄ service-factory.js
‚îú‚îÄ‚îÄ src/
‚îÇ   ‚îú‚îÄ‚îÄ App.jsx
‚îÇ   ‚îú‚îÄ‚îÄ components/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ attendance/
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ AttendanceFilters.jsx
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ AttendanceLogs.jsx
‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ EmployeeHours.jsx
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ auth/
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ LoginForm.jsx
‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ ProtectedRoute.jsx
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ common/
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ Alert.jsx
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ Loading.jsx
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ Modal.jsx
‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ Table.jsx
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ dashboard/
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ Dashboard.jsx
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ HRDashboard.jsx
‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ StatsCard.jsx
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ employee/
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ AddWorkHistoryModal.jsx
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ EmployeeEditModal.jsx
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ EmployeeForm.jsx
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ EmployeeList.jsx
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ EmployeeTable.jsx
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ RecruitmentModal.jsx
‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ WorkHistoryModal.jsx
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ layout/
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ Layout.jsx
‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ ResponsiveNavigation.jsx
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ masterdata/
‚îÇ   ‚îÇ       ‚îú‚îÄ‚îÄ PositionManager.jsx
‚îÇ   ‚îÇ       ‚îî‚îÄ‚îÄ StoreManager.jsx
‚îÇ   ‚îú‚îÄ‚îÄ contexts/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ AppContext.jsx
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ AuthContext.jsx
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ NotificationContext.jsx
‚îÇ   ‚îú‚îÄ‚îÄ hooks/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ useApi.js
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ useAttendance.js
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ useAuth.js
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ useEmployees.js
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ useNotification.js
‚îÇ   ‚îú‚îÄ‚îÄ main.jsx
‚îÇ   ‚îú‚îÄ‚îÄ pages/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ AttendanceLogsPage.jsx
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ DashboardPage.jsx
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ EmployeeManagementPage.jsx
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ HRDashboardPage.jsx
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ LoginPage.jsx
‚îÇ   ‚îú‚îÄ‚îÄ services/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ api.js
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ auth.js
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ employee.js
‚îÇ   ‚îî‚îÄ‚îÄ styles/
‚îÇ       ‚îú‚îÄ‚îÄ components.css
‚îÇ       ‚îî‚îÄ‚îÄ globals.css
‚îî‚îÄ‚îÄ vite.config.js

2. PH√ÇN T√çCH C√ÅC FILE CODE V√Ä N·ªòI DUNG:
----------------------------------------

üü® JAVASCRIPT/TYPESCRIPT FILES:
==================================================

üìÅ File: .\vite.config.js
------------------------------
üì§ EXPORTS:
   ‚Ä¢ defineConfig (d√≤ng 5)

üìÑ N·ªòI DUNG FILE:
==============================
// vite.config.js
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'

export default defineConfig({
  plugins: [react()],
  server: {
    port: 3000,
    proxy: {
      '/api': {
        target: 'http://localhost:8080',
        changeOrigin: true,
      }
    }
  }
})

==============================

üìÅ File: .\server\server.js
------------------------------

üìÑ N·ªòI DUNG FILE:
==============================
// server/server.js
import dotenv from 'dotenv';

// Configure dotenv FIRST
dotenv.config();

// Import c√°c modules AFTER ƒë√£ config dotenv
import express from 'express';
import cors from 'cors';
import session from 'express-session';
import path from 'path';
import { fileURLToPath } from 'url';

// ES6 module equivalent of __dirname
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Import service manager AFTER dotenv config
import larkServiceManager from './services/lark-service-manager.js';

// Import routes
import authRoutes from './routes/auth.js';
import employeeRoutes from './routes/employees.js';
import attendanceRoutes from './routes/attendance.js';
import recruitmentRoutes from './routes/recruitment.js';

const app = express();
const PORT = process.env.PORT || 8080;

// Middleware
app.use(cors({
    origin: 'http://localhost:3000',
    credentials: true
}));

app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// Session configuration
app.use(session({
    secret: process.env.SESSION_SECRET || 'your-secret-key',
    resave: false,
    saveUninitialized: false,
    cookie: { secure: false, maxAge: 24 * 60 * 60 * 1000 }
}));

// API Routes
app.use('/api/auth', authRoutes);
app.use('/api/employees', employeeRoutes);
app.use('/api/attendance', attendanceRoutes);
app.use('/api/recruitment', recruitmentRoutes);

// Health check endpoint
app.get('/api/health', (req, res) => {
    res.json({
        status: 'OK',
        timestamp: new Date().toISOString(),
        services: {
            larkServiceManager: larkServiceManager.initialized
        }
    });
});

// Root endpoint
app.get('/', (req, res) => {
    res.json({
        message: 'HR Management System API',
        version: '1.0.0',
        timestamp: new Date().toISOString()
    });
});

// Start server with proper initialization
app.listen(PORT, async () => {
    console.log(`Server running on http://localhost:${PORT}`);
    
    try {
        await larkServiceManager.init();
        console.log('Server fully initialized and ready');
    } catch (error) {
        console.error('Service initialization failed:', error.message);
        console.log('Server running but services unavailable');
    }
});

==============================

üìÅ File: .\server\config\database.js
------------------------------
üì§ EXPORTS:
   ‚Ä¢ 
    users,
    roles
 (d√≤ng 48)

üìÑ N·ªòI DUNG FILE:
==============================
// Demo users data (in production, use real database)
const users = {
    admin: {
        id: 'admin',
        username: 'admin',
        password: 'admin123',
        role: 'admin',
        fullName: 'System Admin'
    },
    hr: {
        id: 'hr',
        username: 'hr',
        password: 'hr123',
        role: 'hr',
        fullName: 'HR Manager'
    },
    sales: {
        id: 'sales',
        username: 'sales',
        password: 'sales123',
        role: 'sales_manager',
        fullName: 'Sales Manager'
    },
    finance: {
        id: 'finance',
        username: 'finance',
        password: 'finance123',
        role: 'finance_manager',
        fullName: 'Finance Manager'
    },
    director: {
        id: 'director',
        username: 'director',
        password: 'director123',
        role: 'director',
        fullName: 'Director'
    }
};

const roles = {
    admin: 'Admin',
    hr: 'HR',
    sales_manager: 'Tr∆∞·ªüng ph√≤ng kinh doanh',
    finance_manager: 'Tr∆∞·ªüng ph√≤ng t√†i ch√≠nh k·∫ø to√°n',
    director: 'T·ªïng gi√°m ƒë·ªëc'
};

export {
    users,
    roles
};

==============================

üìÅ File: .\server\config\lark-config.js
------------------------------
üîß FUNCTIONS:
   ‚Ä¢ validateLarkConfig (d√≤ng 2) - arrow function
üì§ EXPORTS:
   ‚Ä¢ const (d√≤ng 2)
   ‚Ä¢ const (d√≤ng 24)

üìÑ N·ªòI DUNG FILE:
==============================
// server/config/lark-config.js
export const validateLarkConfig = () => {
    const requiredVars = [
        'LARK_APP_ID',
        'LARK_APP_SECRET', 
        'LARK_BASE_ID',
        'LARK_EMPLOYEE_TABLE_ID',
        'LARK_ATTENDANCE_TABLE_ID',
        'LARK_RECRUITMENT_TABLE_ID',
        'LARK_STORE_TABLE_ID',
        'LARK_POSITION_TABLE_ID',
        'LARK_WORK_HISTORY_TABLE_ID'
    ];

    const missing = requiredVars.filter(key => !process.env[key]);
    
    if (missing.length > 0) {
        throw new Error(`‚ùå Missing Lark configuration: ${missing.join(', ')}`);
    }
    
    console.log('‚úÖ Lark configuration validated');
};

export const larkConfig = {
    appId: process.env.LARK_APP_ID,
    appSecret: process.env.LARK_APP_SECRET,
    baseId: process.env.LARK_BASE_ID,
    tables: {
        employee: process.env.LARK_EMPLOYEE_TABLE_ID,
        attendance: process.env.LARK_ATTENDANCE_TABLE_ID,
        recruitment: process.env.LARK_RECRUITMENT_TABLE_ID,
        store: process.env.LARK_STORE_TABLE_ID,
        position: process.env.LARK_POSITION_TABLE_ID,
        workHistory: process.env.LARK_WORK_HISTORY_TABLE_ID
    }
};

==============================

üìÅ File: .\server\controllers\attendanceController.js
------------------------------
üì§ EXPORTS:
   ‚Ä¢ const (d√≤ng 5)
   ‚Ä¢ const (d√≤ng 21)
   ‚Ä¢ const (d√≤ng 37)
   ‚Ä¢ const (d√≤ng 53)

üìÑ N·ªòI DUNG FILE:
==============================
// server/controllers/attendanceController.js
import larkServiceManager from '../services/lark-service-manager.js';
import { formatResponse } from '../services/utils/response-formatter.js';

export const getAttendanceLogs = async (req, res) => {
    try {
        const filters = req.query;
        const logs = await larkServiceManager.getAttendanceLogs(filters);
        res.json(formatResponse(true, 'L·∫•y b·∫£n ghi ch·∫•m c√¥ng th√†nh c√¥ng', logs));
    } catch (error) {
        console.error('‚ùå Controller: getAttendanceLogs failed:', error);
        res.status(500).json(formatResponse(
            false, 
            `L·ªói khi l·∫•y b·∫£n ghi ch·∫•m c√¥ng: ${error.message}`, 
            null, 
            'ATTENDANCE_LOAD_FAILED'
        ));
    }
};

export const addAttendanceLog = async (req, res) => {
    try {
        const attendanceData = req.body;
        const result = await larkServiceManager.addAttendanceLog(attendanceData);
        res.json(formatResponse(true, 'Th√™m b·∫£n ghi ch·∫•m c√¥ng th√†nh c√¥ng', result));
    } catch (error) {
        console.error('‚ùå Controller: addAttendanceLog failed:', error);
        res.status(500).json(formatResponse(
            false, 
            `L·ªói khi th√™m b·∫£n ghi ch·∫•m c√¥ng: ${error.message}`, 
            null, 
            'ATTENDANCE_ADD_FAILED'
        ));
    }
};

export const getEmployeeHours = async (req, res) => {
    try {
        const employeeHours = await larkServiceManager.getEmployeeHours();
        res.json(formatResponse(true, 'L·∫•y t·ªïng gi·ªù c√¥ng th√†nh c√¥ng', employeeHours));
    } catch (error) {
        console.error('‚ùå Controller: getEmployeeHours failed:', error);
        res.status(500).json(formatResponse(
            false, 
            `L·ªói khi l·∫•y t·ªïng gi·ªù c√¥ng: ${error.message}`, 
            null, 
            'EMPLOYEE_HOURS_LOAD_FAILED'
        ));
    }
};

// server/controllers/attendanceController.js
export const getAttendanceStats = async (req, res) => {
    try {
        console.log('üìä GETTING ATTENDANCE STATS...');
        
        const attendanceService = larkServiceManager.getService('attendance');
        
        console.log('‚è∞ Getting attendance logs...');
        const attendanceLogs = await attendanceService.getAttendanceLogs();
        console.log('‚úÖ Attendance logs fetched:', attendanceLogs.length);
        
        const stats = {
            totalAttendanceLogs: attendanceLogs.length,
            todayLogs: attendanceLogs.filter(log => {
                const today = new Date().toISOString().split('T')[0];
                return log.date === today;
            }).length,
            thisWeekLogs: attendanceLogs.filter(log => {
                const logDate = new Date(log.date);
                const today = new Date();
                const weekAgo = new Date(today.getTime() - 7 * 24 * 60 * 60 * 1000);
                return logDate >= weekAgo && logDate <= today;
            }).length
        };
        
        console.log('üìä Attendance stats calculated:', stats);
        
        res.json(formatResponse(true, 'L·∫•y th·ªëng k√™ ch·∫•m c√¥ng th√†nh c√¥ng', stats));
        
    } catch (error) {
        console.error('‚ùå Controller: getAttendanceStats failed:', error);
        res.status(500).json(formatResponse(
            false, 
            `Kh√¥ng th·ªÉ l·∫•y th·ªëng k√™ ch·∫•m c√¥ng: ${error.message}`, 
            null, 
            'ATTENDANCE_STATS_LOAD_FAILED'
        ));
    }
};

==============================

üìÅ File: .\server\controllers\authController.js
------------------------------
üîß FUNCTIONS:
   ‚Ä¢ login (d√≤ng 3) - arrow function
   ‚Ä¢ logout (d√≤ng 30) - arrow function
   ‚Ä¢ getProfile (d√≤ng 39) - arrow function
üì§ EXPORTS:
   ‚Ä¢ 
    login,
    logout,
    getProfile
 (d√≤ng 43)

üìÑ N·ªòI DUNG FILE:
==============================
import { users } from '../config/database.js';

const login = (req, res) => {
    const { username, password } = req.body;
    
    const user = users[username];
    if (!user) {
        return res.status(401).json({ error: 'Invalid credentials' });
    }
    
    if (user.password !== password) {
        return res.status(401).json({ error: 'Invalid credentials' });
    }
    
    req.session.user = {
        id: user.id,
        username: user.username,
        role: user.role,
        fullName: user.fullName
    };
    
    const response = { 
        message: 'Login successful',
        user: req.session.user
    };
    
    res.json(response);
};

const logout = (req, res) => {
    req.session.destroy((err) => {
        if (err) {
            return res.status(500).json({ error: 'Could not log out' });
        }
        res.json({ message: 'Logout successful' });
    });
};

const getProfile = (req, res) => {
    res.json({ user: req.user });
};

export {
    login,
    logout,
    getProfile
};

==============================

üìÅ File: .\server\controllers\dashboardController.js
------------------------------
üì§ EXPORTS:
   ‚Ä¢ const (d√≤ng 5)

üìÑ N·ªòI DUNG FILE:
==============================
// server/controllers/dashboardController.js (M·ªöI)
import larkServiceManager from '../services/lark-service-manager.js';
import { formatResponse } from '../services/utils/response-formatter.js';

export const getDashboardStats = async (req, res) => {
    try {
        console.log('üìä GETTING DASHBOARD STATS...');
        
        const employeeService = larkServiceManager.getService('employee');
        const attendanceService = larkServiceManager.getService('attendance');
        
        // ‚úÖ T√°ch ri√™ng, handle error ƒë·ªôc l·∫≠p
        let employeeStats = {
            totalEmployees: 0,
            activeEmployees: 0,
            error: null
        };
        
        let attendanceStats = {
            totalAttendanceLogs: 0,
            todayLogs: 0,
            error: null
        };
        
        // Get employee stats
        try {
            const employees = await employeeService.getAllEmployees();
            employeeStats = {
                totalEmployees: employees.length,
                activeEmployees: employees.filter(emp => emp.status === 'active').length,
                error: null
            };
        } catch (error) {
            console.error('‚ùå Employee stats error:', error);
            employeeStats.error = 'Kh√¥ng th·ªÉ t·∫£i th·ªëng k√™ nh√¢n vi√™n';
        }
        
        // Get attendance stats
        try {
            const logs = await attendanceService.getAttendanceLogs();
            const today = new Date().toISOString().split('T')[0];
            attendanceStats = {
                totalAttendanceLogs: logs.length,
                todayLogs: logs.filter(log => log.date === today).length,
                error: null
            };
        } catch (error) {
            console.error('‚ùå Attendance stats error:', error);
            attendanceStats.error = 'Kh√¥ng th·ªÉ t·∫£i th·ªëng k√™ ch·∫•m c√¥ng';
        }
        
        const dashboardData = {
            employee: employeeStats,
            attendance: attendanceStats,
            timestamp: new Date().toISOString()
        };
        
        res.json(formatResponse(true, 'L·∫•y th·ªëng k√™ dashboard th√†nh c√¥ng', dashboardData));
        
    } catch (error) {
        console.error('‚ùå Dashboard stats error:', error);
        res.status(500).json(formatResponse(
            false, 
            `L·ªói h·ªá th·ªëng: ${error.message}`, 
            null, 
            'DASHBOARD_STATS_ERROR'
        ));
    }
};

==============================

üìÅ File: .\server\controllers\employeeController.js
------------------------------
üèõÔ∏è  CLASSES:
   ‚Ä¢ EmployeeController (d√≤ng 7)
üì§ EXPORTS:
   ‚Ä¢ const (d√≤ng 553)
   ‚Ä¢ const (d√≤ng 554)
   ‚Ä¢ const (d√≤ng 555)
   ‚Ä¢ const (d√≤ng 556)
   ‚Ä¢ const (d√≤ng 557)
   ‚Ä¢ const (d√≤ng 558)
   ‚Ä¢ const (d√≤ng 559)
   ‚Ä¢ const (d√≤ng 560)
   ‚Ä¢ const (d√≤ng 561)
   ‚Ä¢ const (d√≤ng 564)
   ‚Ä¢ const (d√≤ng 565)
   ‚Ä¢ const (d√≤ng 566)
   ‚Ä¢ const (d√≤ng 567)
   ‚Ä¢ const (d√≤ng 570)
   ‚Ä¢ const (d√≤ng 571)
   ‚Ä¢ const (d√≤ng 572)
   ‚Ä¢ const (d√≤ng 573)
   ‚Ä¢  EmployeeController  (d√≤ng 576)

üìÑ N·ªòI DUNG FILE:
==============================
// server/controllers/employeeController.js
import larkServiceManager from '../services/lark-service-manager.js';
import { formatResponse } from '../services/utils/response-formatter.js';
import { EmployeeValidator } from '../services/employees/index.js';


class EmployeeController {
    /**
     * Get all employees
     * @route GET /api/employees
     */
    async getAllEmployees(req, res) {
        try {
            const employees = await larkServiceManager.getAllEmployees();
            res.json(formatResponse(true, 'L·∫•y danh s√°ch nh√¢n vi√™n th√†nh c√¥ng', employees));
        } catch (error) {
            console.error('‚ùå Controller: getAllEmployees failed:', error);
            res.status(500).json(formatResponse(
                false, 
                `Kh√¥ng th·ªÉ t·∫£i danh s√°ch nh√¢n vi√™n: ${error.message}`, 
                null, 
                'EMPLOYEE_LOAD_FAILED'
            ));
        }
    }


    /**
     * Add new employee with work history support
     * @route POST /api/employees
     */
    async addEmployee(req, res) {
        try {
            const { fullName, phoneNumber, gender, hourlyRate, bankAccount, bankName, workHistoryData } = req.body;
            
            // Validate employee data
            const employeeErrors = EmployeeValidator.validateEmployeeData({
                fullName, phoneNumber, gender, hourlyRate, bankAccount, bankName
            });
            
            if (employeeErrors.length > 0) {
                return res.status(400).json(formatResponse(
                    false, 
                    employeeErrors.join(', '), 
                    null, 
                    'VALIDATION_ERROR'
                ));
            }


            // Validate work history
            if (!workHistoryData || workHistoryData.length === 0) {
                return res.status(400).json(formatResponse(
                    false, 
                    'Vui l√≤ng ch·ªçn √≠t nh·∫•t m·ªôt ƒë·ªÅ xu·∫•t tuy·ªÉn d·ª•ng', 
                    null, 
                    'WORK_HISTORY_REQUIRED'
                ));
            }


            // Check for duplicate request numbers
            const requestNos = workHistoryData.map(item => item.requestNo);
            const uniqueRequestNos = [...new Set(requestNos)];
            if (requestNos.length !== uniqueRequestNos.length) {
                return res.status(400).json(formatResponse(
                    false, 
                    'Kh√¥ng ƒë∆∞·ª£c tr√πng l·∫∑p Request No.', 
                    null, 
                    'DUPLICATE_REQUEST_NO'
                ));
            }


            // Generate employee ID
            const employeeId = this.generateEmployeeId(fullName, phoneNumber);
            
            // Check for duplicate employee ID
            const isDuplicate = await larkServiceManager.checkEmployeeIdExists(employeeId);
            if (isDuplicate) {
                return res.status(409).json(formatResponse(
                    false, 
                    'M√£ nh√¢n vi√™n ƒë√£ t·ªìn t·∫°i trong h·ªá th·ªëng', 
                    null, 
                    'DUPLICATE_EMPLOYEE_ID'
                ));
            }
            
            // Prepare employee data
            const employeeData = {
                employeeId,
                fullName,
                phoneNumber,
                gender,
                hourlyRate: parseFloat(hourlyRate),
                bankAccount,
                bankName,
                recruitmentLink: workHistoryData.map(item => item.requestNo).join(', '),
                status: 'active',
                createdAt: new Date().toISOString()
            };


            // Create employee
            const employee = await larkServiceManager.addEmployee(employeeData);
            
            // Add work history entries with duplicate check
            const workHistoryResults = [];
            for (const historyEntry of workHistoryData) {
                // ‚úÖ CHECK DUPLICATE cho t·ª´ng item
                const workHistoryExists = await larkServiceManager.checkWorkHistoryExists(employeeId, historyEntry.requestNo);
                
                if (workHistoryExists) {
                    return res.status(409).json(formatResponse(
                        false, 
                        `Work History ƒë√£ t·ªìn t·∫°i: ${employeeId} - ${historyEntry.requestNo}`, 
                        null, 
                        'DUPLICATE_WORK_HISTORY'
                    ));
                }
                
                // N·∫øu kh√¥ng tr√πng, th√™m work history
                const workHistory = await larkServiceManager.addWorkHistory({
                    employeeId: employeeId,
                    requestNo: historyEntry.requestNo
                });
                workHistoryResults.push(workHistory);
            }

            res.json(formatResponse(true, 'Th√™m nh√¢n vi√™n th√†nh c√¥ng', {
                employee,
                workHistory: workHistoryResults
            }));

            
        } catch (error) {
            console.error('‚ùå Controller: addEmployee failed:', error);
            
            if (error.message.includes('DUPLICATE_EMPLOYEE_ID')) {
                return res.status(409).json(formatResponse(
                    false, 
                    'M√£ nh√¢n vi√™n ƒë√£ t·ªìn t·∫°i trong h·ªá th·ªëng', 
                    null, 
                    'DUPLICATE_EMPLOYEE_ID'
                ));
            }
            
            res.status(500).json(formatResponse(
                false, 
                `L·ªói h·ªá th·ªëng khi th√™m nh√¢n vi√™n: ${error.message}`, 
                null, 
                'EMPLOYEE_ADD_FAILED'
            ));
        }
    }


    /**
     * Update employee
     * @route PUT /api/employees/:id
     */
    async updateEmployee(req, res) {
        try {
            const { id } = req.params;
            const { fullName, phoneNumber, gender, hourlyRate, bankAccount, bankName, recruitmentLink, status } = req.body;
            
            // Generate new employee ID with updated info
            const employeeId = this.generateEmployeeId(fullName, phoneNumber);
            
            const updatedData = {
                employeeId,
                fullName,
                phoneNumber,
                gender,
                hourlyRate: parseFloat(hourlyRate),
                bankAccount,
                bankName,
                recruitmentLink: recruitmentLink || '',
                status,
                updatedAt: new Date().toISOString()
            };
            
            const employee = await larkServiceManager.updateEmployee(id, updatedData);
            
            res.json(formatResponse(true, 'C·∫≠p nh·∫≠t nh√¢n vi√™n th√†nh c√¥ng', { employee }));
            
        } catch (error) {
            console.error('‚ùå Controller: updateEmployee failed:', error);
            res.status(500).json(formatResponse(
                false, 
                `L·ªói khi c·∫≠p nh·∫≠t nh√¢n vi√™n: ${error.message}`, 
                null, 
                'EMPLOYEE_UPDATE_FAILED'
            ));
        }
    }


    /**
     * Delete employee
     * @route DELETE /api/employees/:id
     */
    async deleteEmployee(req, res) {
        try {
            const { id } = req.params;
            await larkServiceManager.deleteEmployee(id);
            res.json(formatResponse(true, 'X√≥a nh√¢n vi√™n th√†nh c√¥ng'));
        } catch (error) {
            console.error('‚ùå Controller: deleteEmployee failed:', error);
            res.status(500).json(formatResponse(
                false, 
                `L·ªói khi x√≥a nh√¢n vi√™n: ${error.message}`, 
                null, 
                'EMPLOYEE_DELETE_FAILED'
            ));
        }
    }


    /**
     * Get employee statistics for dashboard
     * @route GET /api/employees/stats
     */
    async getEmployeeStats(req, res) {
        try {
            const employeeService = larkServiceManager.getService('employee');
            const employees = await employeeService.getAllEmployees();
            
            const stats = {
                totalEmployees: employees.length,
                activeEmployees: employees.filter(emp => emp.status === 'active').length,
                inactiveEmployees: employees.filter(emp => emp.status === 'inactive').length
            };
            
            res.json(formatResponse(true, 'L·∫•y th·ªëng k√™ nh√¢n vi√™n th√†nh c√¥ng', stats));
            
        } catch (error) {
            console.error('‚ùå Controller: getEmployeeStats failed:', error);
            res.status(500).json(formatResponse(
                false, 
                `Kh√¥ng th·ªÉ l·∫•y th·ªëng k√™ nh√¢n vi√™n: ${error.message}`, 
                null, 
                'EMPLOYEE_STATS_LOAD_FAILED'
            ));
        }
    }


    /**
     * Search employees
     * @route GET /api/employees/search
     */
    async searchEmployees(req, res) {
        try {
            const { q } = req.query;
            const employees = await larkServiceManager.searchEmployees(q);
            res.json(formatResponse(true, 'T√¨m ki·∫øm th√†nh c√¥ng', employees));
        } catch (error) {
            console.error('‚ùå Controller: searchEmployees failed:', error);
            res.status(500).json(formatResponse(
                false, 
                `L·ªói khi t√¨m ki·∫øm nh√¢n vi√™n: ${error.message}`, 
                null, 
                'EMPLOYEE_SEARCH_FAILED'
            ));
        }
    }


    /**
     * Get recruitment requests
     * @route GET /api/employees/recruitment-requests
     */
    async getRecruitmentRequests(req, res) {
        try {
            const { status, approvalStatus, requester, department } = req.query;
            
            const filters = {};
            if (status) filters.status = status;
            if (approvalStatus) filters.approvalStatus = approvalStatus;
            if (requester) filters.requester = requester;
            if (department) filters.department = department;
            
            const requests = await larkServiceManager.getRecruitmentRequests(filters);
            res.json(formatResponse(true, 'L·∫•y danh s√°ch y√™u c·∫ßu tuy·ªÉn d·ª•ng th√†nh c√¥ng', requests));
            
        } catch (error) {
            console.error('‚ùå Controller: getRecruitmentRequests failed:', error);
            res.status(500).json(formatResponse(
                false, 
                `Kh√¥ng th·ªÉ t·∫£i y√™u c·∫ßu tuy·ªÉn d·ª•ng: ${error.message}`, 
                null, 
                'RECRUITMENT_LOAD_FAILED'
            ));
        }
    }


    /**
     * Get employee work history
     * @route GET /api/employees/:employeeId/work-history
     */
    async getEmployeeWorkHistory(req, res) {
        try {
            const { employeeId } = req.params;
            const workHistory = await larkServiceManager.getWorkHistoryByEmployee(employeeId);
            res.json(formatResponse(true, 'L·∫•y l·ªãch s·ª≠ l√†m vi·ªác th√†nh c√¥ng', workHistory));
        } catch (error) {
            console.error('‚ùå Controller: getEmployeeWorkHistory failed:', error);
            res.status(500).json(formatResponse(
                false, 
                `L·ªói khi l·∫•y l·ªãch s·ª≠ l√†m vi·ªác: ${error.message}`, 
                null, 
                'WORK_HISTORY_LOAD_FAILED'
            ));
        }
    }


    /**
     * Add work history for employee
     * @route POST /api/employees/work-history
     */
    async addWorkHistory(req, res) {
        try {
            const { employeeId, requestNo } = req.body;
            
            if (!employeeId || !requestNo) {
                return res.status(400).json(formatResponse(
                    false, 
                    'Thi·∫øu th√¥ng tin b·∫Øt bu·ªôc', 
                    null, 
                    'VALIDATION_ERROR'
                ));
            }
            
            const workHistory = await larkServiceManager.addWorkHistory({
                employeeId,
                requestNo
            });
            
            res.json(formatResponse(true, 'Th√™m work history th√†nh c√¥ng', { workHistory }));
            
        } catch (error) {
            console.error('‚ùå Controller: addWorkHistory failed:', error);
            res.status(500).json(formatResponse(
                false, 
                `L·ªói khi th√™m work history: ${error.message}`, 
                null, 
                'WORK_HISTORY_ADD_FAILED'
            ));
        }
    }


    // ==================== STORE MANAGEMENT ====================
    async getStores(req, res) {
        try {
            const stores = await larkServiceManager.getAllStores();
            res.json(formatResponse(true, 'L·∫•y danh s√°ch c·ª≠a h√†ng th√†nh c√¥ng', stores));
        } catch (error) {
            console.error('‚ùå Controller: getStores failed:', error);
            res.status(500).json(formatResponse(
                false, 
                `L·ªói khi t·∫£i danh s√°ch c·ª≠a h√†ng: ${error.message}`, 
                null, 
                'STORE_LOAD_FAILED'
            ));
        }
    }


    async addStore(req, res) {
        try {
            const { storeName, address } = req.body;
            
            if (!storeName || !address) {
                return res.status(400).json(formatResponse(
                    false, 
                    'Thi·∫øu th√¥ng tin b·∫Øt bu·ªôc', 
                    null, 
                    'VALIDATION_ERROR'
                ));
            }


            const store = {
                storeName,
                address,
                status: 'active',
                createdAt: new Date().toISOString()
            };
            
            const result = await larkServiceManager.addStore(store);
            res.json(formatResponse(true, 'Th√™m c·ª≠a h√†ng th√†nh c√¥ng', { store: result }));
            
        } catch (error) {
            console.error('‚ùå Controller: addStore failed:', error);
            res.status(500).json(formatResponse(
                false, 
                `L·ªói khi th√™m c·ª≠a h√†ng: ${error.message}`, 
                null, 
                'STORE_ADD_FAILED'
            ));
        }
    }


    async updateStore(req, res) {
        try {
            const { id } = req.params;
            const updatedData = {
                ...req.body,
                updatedAt: new Date().toISOString()
            };
            
            const result = await larkServiceManager.updateStore(id, updatedData);
            res.json(formatResponse(true, 'C·∫≠p nh·∫≠t c·ª≠a h√†ng th√†nh c√¥ng', { store: result }));
            
        } catch (error) {
            console.error('‚ùå Controller: updateStore failed:', error);
            res.status(500).json(formatResponse(
                false, 
                `L·ªói khi c·∫≠p nh·∫≠t c·ª≠a h√†ng: ${error.message}`, 
                null, 
                'STORE_UPDATE_FAILED'
            ));
        }
    }


    async deleteStore(req, res) {
        try {
            const { id } = req.params;
            await larkServiceManager.deleteStore(id);
            res.json(formatResponse(true, 'X√≥a c·ª≠a h√†ng th√†nh c√¥ng'));
        } catch (error) {
            console.error('‚ùå Controller: deleteStore failed:', error);
            res.status(500).json(formatResponse(
                false, 
                `L·ªói khi x√≥a c·ª≠a h√†ng: ${error.message}`, 
                null, 
                'STORE_DELETE_FAILED'
            ));
        }
    }


    // ==================== POSITION MANAGEMENT ====================
    async getPositions(req, res) {
        try {
            const positions = await larkServiceManager.getAllPositions();
            res.json(formatResponse(true, 'L·∫•y danh s√°ch v·ªã tr√≠ th√†nh c√¥ng', positions));
        } catch (error) {
            console.error('‚ùå Controller: getPositions failed:', error);
            res.status(500).json(formatResponse(
                false, 
                `L·ªói khi t·∫£i danh s√°ch v·ªã tr√≠: ${error.message}`, 
                null, 
                'POSITION_LOAD_FAILED'
            ));
        }
    }


    async addPosition(req, res) {
        try {
            const { positionName, description } = req.body;
            
            if (!positionName) {
                return res.status(400).json(formatResponse(
                    false, 
                    'Thi·∫øu th√¥ng tin b·∫Øt bu·ªôc', 
                    null, 
                    'VALIDATION_ERROR'
                ));
            }


            const position = {
                positionName,
                description: description || '',
                status: 'active',
                createdAt: new Date().toISOString()
            };
            
            const result = await larkServiceManager.addPosition(position);
            res.json(formatResponse(true, 'Th√™m v·ªã tr√≠ th√†nh c√¥ng', { position: result }));
            
        } catch (error) {
            console.error('‚ùå Controller: addPosition failed:', error);
            res.status(500).json(formatResponse(
                false, 
                `L·ªói khi th√™m v·ªã tr√≠: ${error.message}`, 
                null, 
                'POSITION_ADD_FAILED'
            ));
        }
    }


    async updatePosition(req, res) {
        try {
            const { id } = req.params;
            const updatedData = {
                ...req.body,
                updatedAt: new Date().toISOString()
            };
            
            const result = await larkServiceManager.updatePosition(id, updatedData);
            res.json(formatResponse(true, 'C·∫≠p nh·∫≠t v·ªã tr√≠ th√†nh c√¥ng', { position: result }));
            
        } catch (error) {
            console.error('‚ùå Controller: updatePosition failed:', error);
            res.status(500).json(formatResponse(
                false, 
                `L·ªói khi c·∫≠p nh·∫≠t v·ªã tr√≠: ${error.message}`, 
                null, 
                'POSITION_UPDATE_FAILED'
            ));
        }
    }


    async deletePosition(req, res) {
        try {
            const { id } = req.params;
            await larkServiceManager.deletePosition(id);
            res.json(formatResponse(true, 'X√≥a v·ªã tr√≠ th√†nh c√¥ng'));
        } catch (error) {
            console.error('‚ùå Controller: deletePosition failed:', error);
            res.status(500).json(formatResponse(
                false, 
                `L·ªói khi x√≥a v·ªã tr√≠: ${error.message}`, 
                null, 
                'POSITION_DELETE_FAILED'
            ));
        }
    }


    // ==================== HELPER METHODS ====================
    generateEmployeeId(fullName, phoneNumber) {
        return `${fullName} - ${phoneNumber}`;
    }
}


// Export instance methods
const employeeController = new EmployeeController();


export const getAllEmployees = employeeController.getAllEmployees.bind(employeeController);
export const addEmployee = employeeController.addEmployee.bind(employeeController);
export const updateEmployee = employeeController.updateEmployee.bind(employeeController);
export const deleteEmployee = employeeController.deleteEmployee.bind(employeeController);
export const getEmployeeStats = employeeController.getEmployeeStats.bind(employeeController);
export const searchEmployees = employeeController.searchEmployees.bind(employeeController);
export const getRecruitmentRequests = employeeController.getRecruitmentRequests.bind(employeeController);
export const getEmployeeWorkHistory = employeeController.getEmployeeWorkHistory.bind(employeeController);
export const addWorkHistory = employeeController.addWorkHistory.bind(employeeController);


export const getStores = employeeController.getStores.bind(employeeController);
export const addStore = employeeController.addStore.bind(employeeController);
export const updateStore = employeeController.updateStore.bind(employeeController);
export const deleteStore = employeeController.deleteStore.bind(employeeController);


export const getPositions = employeeController.getPositions.bind(employeeController);
export const addPosition = employeeController.addPosition.bind(employeeController);
export const updatePosition = employeeController.updatePosition.bind(employeeController);
export const deletePosition = employeeController.deletePosition.bind(employeeController);


export { EmployeeController };

==============================

üìÅ File: .\server\controllers\recruitmentController.js
------------------------------
üì§ EXPORTS:
   ‚Ä¢ const (d√≤ng 5)

üìÑ N·ªòI DUNG FILE:
==============================
// server/controllers/recruitmentController.js
import larkServiceManager from '../services/lark-service-manager.js';
import { formatResponse } from '../services/utils/response-formatter.js';

export const getRecruitmentRequests = async (req, res) => {
    try {
        const filters = req.query;
        const requests = await larkServiceManager.getRecruitmentRequests(filters);
        res.json(formatResponse(true, 'L·∫•y danh s√°ch ƒë·ªÅ xu·∫•t th√†nh c√¥ng', requests));
    } catch (error) {
        console.error('‚ùå Controller: getRecruitmentRequests failed:', error);
        res.status(500).json(formatResponse(
            false, 
            `L·ªói khi l·∫•y danh s√°ch ƒë·ªÅ xu·∫•t: ${error.message}`, 
            null, 
            'RECRUITMENT_LOAD_FAILED'
        ));
    }
};

==============================

üìÅ File: .\server\middleware\auth.js
------------------------------
üîß FUNCTIONS:
   ‚Ä¢ authenticateUser (d√≤ng 1) - arrow function
   ‚Ä¢ authorizeRoles (d√≤ng 9) - arrow function
üì§ EXPORTS:
   ‚Ä¢ 
    authenticateUser,
    authorizeRoles
 (d√≤ng 18)

üìÑ N·ªòI DUNG FILE:
==============================
const authenticateUser = (req, res, next) => {
    if (!req.session || !req.session.user) {
        return res.status(401).json({ error: 'Unauthorized' });
    }
    req.user = req.session.user;
    next();
};

const authorizeRoles = (...roles) => {
    return (req, res, next) => {
        if (!req.user || !roles.includes(req.user.role)) {
            return res.status(403).json({ error: 'Forbidden' });
        }
        next();
    };
};

export {
    authenticateUser,
    authorizeRoles
};

==============================

üìÅ File: .\server\middleware\validation.js
------------------------------
üèõÔ∏è  CLASSES:
   ‚Ä¢ ValidationMiddleware (d√≤ng 5)
üì§ EXPORTS:
   ‚Ä¢ ValidationMiddleware (d√≤ng 29)

üìÑ N·ªòI DUNG FILE:
==============================
// server/middleware/validation.js (M·ªöI)
//import ResponseFormatter from '../utils/response-formatter.js';
import { formatResponse } from '../services/utils/response-formatter.js';

class ValidationMiddleware {
    static validateEmployee(req, res, next) {
        const { fullName, phoneNumber, gender, hourlyRate, bankAccount, bankName } = req.body;
        
        const errors = [];
        
        if (!fullName || fullName.trim().length < 2) {
            errors.push('H·ªç t√™n ph·∫£i c√≥ √≠t nh·∫•t 2 k√Ω t·ª±');
        }
        
        if (!phoneNumber || !/^\d{10,11}$/.test(phoneNumber)) {
            errors.push('S·ªë ƒëi·ªán tho·∫°i kh√¥ng h·ª£p l·ªá');
        }
        
        if (errors.length > 0) {
            return res.status(400).json(
                formatResponse(false, errors.join(', '), null, 'VALIDATION_ERROR')
            );
        }
        
        next();
    }
}

export default ValidationMiddleware;

==============================

üìÅ File: .\server\routes\attendance.js
------------------------------
üì§ EXPORTS:
   ‚Ä¢ router (d√≤ng 18)

üìÑ N·ªòI DUNG FILE:
==============================
// server/routes/attendance.js
import express from 'express';
import { 
    getAttendanceLogs, 
    addAttendanceLog, 
    getEmployeeHours,
    getAttendanceStats
} from '../controllers/attendanceController.js';
import { authenticateUser } from '../middleware/auth.js';

const router = express.Router();

router.get('/logs', authenticateUser, getAttendanceLogs);
router.post('/logs', authenticateUser, addAttendanceLog);
router.get('/employee-hours', authenticateUser, getEmployeeHours);
router.get('/stats', authenticateUser, getAttendanceStats);  // ‚úÖ Route m·ªõi

export default router;

==============================

üìÅ File: .\server\routes\auth.js
------------------------------
üì§ EXPORTS:
   ‚Ä¢ router (d√≤ng 11)

üìÑ N·ªòI DUNG FILE:
==============================
import express from 'express';
import { login, logout, getProfile } from '../controllers/authController.js';
import { authenticateUser } from '../middleware/auth.js';

const router = express.Router();

router.post('/login', login);
router.post('/logout', logout);
router.get('/profile', authenticateUser, getProfile);

export default router;

==============================

üìÅ File: .\server\routes\employees.js
------------------------------
üì§ EXPORTS:
   ‚Ä¢ router (d√≤ng 70)

üìÑ N·ªòI DUNG FILE:
==============================
// server/routes/employees.js
import express from 'express';
import { 
    getAllEmployees, 
    addEmployee, 
    updateEmployee, 
    deleteEmployee, 
    getEmployeeStats, 
    searchEmployees, 
    getRecruitmentRequests, 
    getEmployeeWorkHistory, 
    addWorkHistory, 
    getStores, 
    addStore, 
    updateStore, 
    deleteStore, 
    getPositions, 
    addPosition, 
    updatePosition, 
    deletePosition 
} from '../controllers/employeeController.js';
import { authenticateUser, authorizeRoles } from '../middleware/auth.js';

const router = express.Router();

// ==================== EMPLOYEE ROUTES ====================
// GET routes should come before parameterized routes
router.get('/stats', authenticateUser, getEmployeeStats);
router.get('/search', authenticateUser, searchEmployees);
router.get('/', authenticateUser, getAllEmployees);

// Employee CRUD operations
router.post('/', authenticateUser, authorizeRoles('hr', 'admin'), addEmployee);
router.put('/:id', authenticateUser, authorizeRoles('hr', 'admin'), updateEmployee);
router.delete('/:id', authenticateUser, authorizeRoles('hr', 'admin'), deleteEmployee);

// ==================== WORK HISTORY ROUTES ====================
// Work history routes - S·ª¨A ƒê·ªÇ T∆Ø∆†NG TH√çCH V·ªöI CLIENT
router.get('/:employeeId/work-history', authenticateUser, getEmployeeWorkHistory);
router.post('/work-history', authenticateUser, authorizeRoles('hr', 'admin'), addWorkHistory);

// ==================== RECRUITMENT ROUTES ====================
// Recruitment requests route - moved up to avoid conflicts
router.get('/recruitment-requests', authenticateUser, getRecruitmentRequests);

// ==================== STORE ROUTES ====================
// Store management routes
router.get('/stores', authenticateUser, getStores);
router.post('/stores', authenticateUser, authorizeRoles('hr', 'admin'), addStore);
router.put('/stores/:id', authenticateUser, authorizeRoles('hr', 'admin'), updateStore);
router.delete('/stores/:id', authenticateUser, authorizeRoles('hr', 'admin'), deleteStore);

// ==================== POSITION ROUTES ====================
// Position management routes
router.get('/positions', authenticateUser, getPositions);
router.post('/positions', authenticateUser, authorizeRoles('hr', 'admin'), addPosition);
router.put('/positions/:id', authenticateUser, authorizeRoles('hr', 'admin'), updatePosition);
router.delete('/positions/:id', authenticateUser, authorizeRoles('hr', 'admin'), deletePosition);

// ==================== ERROR HANDLING ====================
// Handle 404 for unmatched routes
router.use('*', (req, res) => {
    res.status(404).json({
        success: false,
        error: 'Route not found',
        path: req.originalUrl
    });
});

export default router;

==============================

üìÅ File: .\server\routes\recruitment.js
------------------------------
üì§ EXPORTS:
   ‚Ä¢ router (d√≤ng 10)

üìÑ N·ªòI DUNG FILE:
==============================
// server/routes/recruitment.js
import express from 'express';
import { getRecruitmentRequests } from '../controllers/recruitmentController.js';
import { authenticateUser } from '../middleware/auth.js';

const router = express.Router();

router.get('/', authenticateUser, getRecruitmentRequests);

export default router;

==============================

üìÅ File: .\server\services\index.js
------------------------------
üì§ EXPORTS:
   ‚Ä¢ file (d√≤ng 1)
   ‚Ä¢  default as ServiceFactory  (d√≤ng 11)

üìÑ N·ªòI DUNG FILE:
==============================
// Main services export file
export * from './core/index.js';
export * from './auth/index.js';
export * from './employee/index.js';
export * from './attendance/index.js';
export * from './recruitment/index.js';
export * from './master-data/index.js';
export * from './utils/index.js';

// Export service factory for easy access
export { default as ServiceFactory } from './utils/service-factory.js';

==============================

üìÅ File: .\server\services\lark-service-manager.js
------------------------------
üèõÔ∏è  CLASSES:
   ‚Ä¢ LarkServiceManager (d√≤ng 9)
üì§ EXPORTS:
   ‚Ä¢ new (d√≤ng 202)

üìÑ N·ªòI DUNG FILE:
==============================
// server/services/lark-service-manager.js
import { EmployeeService, WorkHistoryService } from './employees/index.js';
import { AttendanceService } from './attendance/index.js';
import { RecruitmentService } from './recruitment/index.js';
import { StoreService, PositionService } from './master-data/index.js';
import { AuthService, SessionService } from './auth/index.js';
import { validateLarkConfig } from '../config/lark-config.js';

class LarkServiceManager {
    constructor() {
        this.services = {};
        this.initialized = false;
    }

    async init() {
        if (this.initialized) return;

        try {
            console.log('üöÄ Initializing Lark Service Manager...');
            
            // Validate configuration first
            validateLarkConfig();
            
            // Initialize all services
            this.services.employee = new EmployeeService();
            this.services.workHistory = new WorkHistoryService();
            this.services.attendance = new AttendanceService();
            this.services.recruitment = new RecruitmentService();
            this.services.store = new StoreService();
            this.services.position = new PositionService();
            this.services.auth = new AuthService();
            this.services.session = new SessionService();

            // Initialize each service
            await Promise.all([
                this.services.employee.init(),
                this.services.workHistory.init(),
                this.services.attendance.init(),
                this.services.recruitment.init(),
                this.services.store.init(),
                this.services.position.init(),
                this.services.auth.init(),
                this.services.session.init()
            ]);

            this.initialized = true;
            console.log('‚úÖ All Lark services initialized successfully');
            
        } catch (error) {
            console.error('‚ùå Lark Service Manager initialization failed:', error);
            throw new Error(`Service Manager initialization failed: ${error.message}`);
        }
    }

    async ensureInitialized() {
        if (!this.initialized) {
            await this.init();
        }
    }

    // Get specific service for advanced operations
    getService(serviceName) {
        if (!this.services[serviceName]) {
            throw new Error(`Service '${serviceName}' not found. Available services: ${Object.keys(this.services).join(', ')}`);
        }
        return this.services[serviceName];
    }

    // ==================== EMPLOYEE METHODS ====================
    async getAllEmployees() {
        await this.ensureInitialized();
        return await this.services.employee.getAllEmployees();
    }

    async addEmployee(employeeData) {
        await this.ensureInitialized();
        return await this.services.employee.addEmployee(employeeData);
    }

    async updateEmployee(id, employeeData) {
        await this.ensureInitialized();
        return await this.services.employee.updateEmployee(id, employeeData);
    }

    async deleteEmployee(id) {
        await this.ensureInitialized();
        return await this.services.employee.deleteEmployee(id);
    }

    async checkEmployeeIdExists(employeeId) {
        await this.ensureInitialized();
        return await this.services.employee.checkEmployeeIdExists(employeeId);
    }

    async searchEmployees(query) {
        await this.ensureInitialized();
        return await this.services.employee.searchEmployees(query);
    }

    // ==================== WORK HISTORY METHODS ====================
    async getWorkHistoryByEmployee(employeeId) {
        await this.ensureInitialized();
        return await this.services.workHistory.getWorkHistoryByEmployee(employeeId);
    }

    async addWorkHistory(workHistoryData) {
        await this.ensureInitialized();
        return await this.services.workHistory.addWorkHistory(workHistoryData);
    }

    async checkWorkHistoryExists(employeeId, requestNo) {
        await this.ensureInitialized();
        return await this.services.workHistory.checkWorkHistoryExists(employeeId, requestNo);
    }
    
    // ==================== ATTENDANCE METHODS ====================
    async getAttendanceLogs(filters = {}) {
        await this.ensureInitialized();
        return await this.services.attendance.getAttendanceLogs(filters);
    }

    async addAttendanceLog(attendanceData) {
        await this.ensureInitialized();
        return await this.services.attendance.addAttendanceLog(attendanceData);
    }

    async getEmployeeHours() {
        await this.ensureInitialized();
        return await this.services.attendance.getEmployeeHours();
    }

    // ==================== RECRUITMENT METHODS ====================
    async getRecruitmentRequests(filters = {}) {
        await this.ensureInitialized();
        return await this.services.recruitment.getRecruitmentRequests(filters);
    }

    async addRecruitmentRequest(requestData) {
        await this.ensureInitialized();
        return await this.services.recruitment.addRecruitmentRequest(requestData);
    }

    // ==================== STORE METHODS ====================
    async getAllStores() {
        await this.ensureInitialized();
        return await this.services.store.getAllStores();
    }

    async addStore(storeData) {
        await this.ensureInitialized();
        return await this.services.store.addStore(storeData);
    }

    async updateStore(id, storeData) {
        await this.ensureInitialized();
        return await this.services.store.updateStore(id, storeData);
    }

    async deleteStore(id) {
        await this.ensureInitialized();
        return await this.services.store.deleteStore(id);
    }

    // ==================== POSITION METHODS ====================
    async getAllPositions() {
        await this.ensureInitialized();
        return await this.services.position.getAllPositions();
    }

    async addPosition(positionData) {
        await this.ensureInitialized();
        return await this.services.position.addPosition(positionData);
    }

    async updatePosition(id, positionData) {
        await this.ensureInitialized();
        return await this.services.position.updatePosition(id, positionData);
    }

    async deletePosition(id) {
        await this.ensureInitialized();
        return await this.services.position.deletePosition(id);
    }

    // ==================== RECRUITMENT METHODS ====================
    async getRecruitmentRequests(filters = {}) {
        await this.ensureInitialized();
        return await this.services.recruitment.getRecruitmentRequests(filters);
    }

    async addRecruitmentRequest(requestData) {
        await this.ensureInitialized();
        return await this.services.recruitment.addRecruitmentRequest(requestData);
    }

    async updateRecruitmentRequest(id, requestData) {
        await this.ensureInitialized();
        return await this.services.recruitment.updateRecruitmentRequest(id, requestData);
    }
}

export default new LarkServiceManager();

==============================

üìÅ File: .\server\services\attendance\attendance-service.js
------------------------------
üèõÔ∏è  CLASSES:
   ‚Ä¢ AttendanceService (d√≤ng 6)
üì§ EXPORTS:
   ‚Ä¢ AttendanceService (d√≤ng 155)

üìÑ N·ªòI DUNG FILE:
==============================
// Attendance service
import BaseService from '../core/base-service.js';
import LarkClient from '../core/lark-client.js';
import CacheService from '../core/cache-service.js';

class AttendanceService extends BaseService {
    constructor() {
        super();
        this.baseId = process.env.LARK_BASE_ID;
        this.tableId = process.env.LARK_ATTENDANCE_TABLE_ID;
    }

    async initializeService() {
        console.log('Initializing Attendance Service...');
    }

    async getAttendanceLogs(filters = {}) {
        const cacheKey = `attendance_logs_${JSON.stringify(filters)}`;
        let logs = CacheService.get(cacheKey);
        
        if (!logs) {
            try {
                let filterString = '';
                if (filters.employeeId) {
                    filterString = `AND(CurrentValue.[Employee ID] = "${filters.employeeId}")`;
                }
                
                const response = await LarkClient.get(`/bitable/v1/apps/${this.baseId}/tables/${this.tableId}/records`, {
                    filter: filterString
                });

                logs = this.transformAttendanceData(response.data?.items || []);
                
                // Apply date filters if provided
                if (filters.dateFrom || filters.dateTo) {
                    logs = this.filterByDateRange(logs, filters.dateFrom, filters.dateTo);
                }
                
                CacheService.set(cacheKey, logs, 300000); // 5 minutes
            } catch (error) {
                console.error('Error fetching attendance logs:', error);
                logs = this.getMockAttendanceLogs();
            }
        }
        
        return logs;
    }

    async addAttendanceLog(attendanceData) {
        try {
            const transformedData = this.transformAttendanceForLark(attendanceData);
            
            const response = await LarkClient.post(`/bitable/v1/apps/${this.baseId}/tables/${this.tableId}/records`, {
                fields: transformedData
            });

            // Clear cache
            CacheService.clear();
            
            return this.transformAttendanceData([response.data])[0];
        } catch (error) {
            await this.handleError(error, 'addAttendanceLog');
            throw error;
        }
    }

    async getEmployeeHours() {
        const logs = await this.getAttendanceLogs();
        const employeeHours = {};
        
        logs.forEach(log => {
            if (!employeeHours[log.employeeId]) {
                employeeHours[log.employeeId] = {
                    totalHours: 0,
                    totalDays: 0
                };
            }
            
            employeeHours[log.employeeId].totalHours += log.totalHours || 0;
            employeeHours[log.employeeId].totalDays += 1;
        });
        
        return employeeHours;
    }

    filterByDateRange(logs, dateFrom, dateTo) {
        return logs.filter(log => {
            const logDate = new Date(log.date);
            const fromDate = dateFrom ? new Date(dateFrom) : null;
            const toDate = dateTo ? new Date(dateTo) : null;
            
            if (fromDate && logDate < fromDate) return false;
            if (toDate && logDate > toDate) return false;
            
            return true;
        });
    }

    calculateTotalHours(timeIn, timeOut) {
        if (!timeIn || !timeOut) return 0;
        
        const inTime = new Date(`1970-01-01T${timeIn}`);
        const outTime = new Date(`1970-01-01T${timeOut}`);
        
        const diffMs = outTime - inTime;
        return Math.max(0, diffMs / (1000 * 60 * 60)); // Convert to hours
    }

    transformAttendanceData(larkData) {
        return larkData.map(record => {
            const timeIn = record.fields['Time In'] || '';
            const timeOut = record.fields['Time Out'] || '';
            const totalHours = this.calculateTotalHours(timeIn, timeOut);
            
            return {
                id: record.record_id,
                employeeId: record.fields['Employee ID'] || '',
                date: record.fields['Date'] || '',
                timeIn: timeIn,
                timeOut: timeOut,
                totalHours: totalHours,
                notes: record.fields['Notes'] || '',
                createdAt: record.fields['Created At'] || new Date().toISOString()
            };
        });
    }

    transformAttendanceForLark(attendanceData) {
        return {
            'Employee ID': attendanceData.employeeId,
            'Date': attendanceData.date,
            'Time In': attendanceData.timeIn,
            'Time Out': attendanceData.timeOut,
            'Notes': attendanceData.notes || '',
            'Created At': new Date().toISOString()
        };
    }

    getMockAttendanceLogs() {
        return [
            {
                id: 'att_001',
                employeeId: 'Nguy·ªÖn VƒÉn A - 0123456789',
                date: '2025-01-15',
                timeIn: '08:00',
                timeOut: '17:00',
                totalHours: 8,
                notes: 'L√†m vi·ªác b√¨nh th∆∞·ªùng',
                createdAt: new Date().toISOString()
            }
        ];
    }
}

export default AttendanceService;

==============================

üìÅ File: .\server\services\attendance\attendance-validator.js
------------------------------
üèõÔ∏è  CLASSES:
   ‚Ä¢ AttendanceValidator (d√≤ng 2)
üì§ EXPORTS:
   ‚Ä¢ AttendanceValidator (d√≤ng 56)

üìÑ N·ªòI DUNG FILE:
==============================
// Attendance validation service
class AttendanceValidator {
    static validateAttendanceData(attendanceData) {
        const errors = [];

        // Required fields validation
        if (!attendanceData.employeeId) {
            errors.push('Employee ID l√† b·∫Øt bu·ªôc');
        }

        if (!attendanceData.date) {
            errors.push('Ng√†y l√† b·∫Øt bu·ªôc');
        } else if (!this.isValidDate(attendanceData.date)) {
            errors.push('Ng√†y kh√¥ng h·ª£p l·ªá');
        }

        if (!attendanceData.timeIn) {
            errors.push('Th·ªùi gian v√†o l√† b·∫Øt bu·ªôc');
        } else if (!this.isValidTime(attendanceData.timeIn)) {
            errors.push('Th·ªùi gian v√†o kh√¥ng h·ª£p l·ªá');
        }

        if (!attendanceData.timeOut) {
            errors.push('Th·ªùi gian ra l√† b·∫Øt bu·ªôc');
        } else if (!this.isValidTime(attendanceData.timeOut)) {
            errors.push('Th·ªùi gian ra kh√¥ng h·ª£p l·ªá');
        }

        // Check if time out is after time in
        if (attendanceData.timeIn && attendanceData.timeOut) {
            if (!this.isTimeOutAfterTimeIn(attendanceData.timeIn, attendanceData.timeOut)) {
                errors.push('Th·ªùi gian ra ph·∫£i sau th·ªùi gian v√†o');
            }
        }

        return errors;
    }

    static isValidDate(dateString) {
        const date = new Date(dateString);
        return date instanceof Date && !isNaN(date);
    }

    static isValidTime(timeString) {
        const timeRegex = /^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$/;
        return timeRegex.test(timeString);
    }

    static isTimeOutAfterTimeIn(timeIn, timeOut) {
        const inTime = new Date(`1970-01-01T${timeIn}`);
        const outTime = new Date(`1970-01-01T${timeOut}`);
        return outTime > inTime;
    }
}

export default AttendanceValidator;

==============================

üìÅ File: .\server\services\attendance\index.js
------------------------------
üì§ EXPORTS:
   ‚Ä¢  default as AttendanceService  (d√≤ng 2)
   ‚Ä¢  default as AttendanceValidator  (d√≤ng 3)

üìÑ N·ªòI DUNG FILE:
==============================
// Attendance services exports
export { default as AttendanceService } from './attendance-service.js';
export { default as AttendanceValidator } from './attendance-validator.js';

==============================

üìÅ File: .\server\services\auth\auth-service.js
------------------------------
üèõÔ∏è  CLASSES:
   ‚Ä¢ AuthService (d√≤ng 5)
üì§ EXPORTS:
   ‚Ä¢ AuthService (d√≤ng 66)

üìÑ N·ªòI DUNG FILE:
==============================
// Authentication service
import BaseService from '../core/base-service.js';
import { users } from '../../config/database.js';

class AuthService extends BaseService {
    constructor() {
        super();
        this.activeSessions = new Map();
    }

    async validateCredentials(username, password) {
        const user = users[username];
        if (!user || user.password !== password) {
            throw new Error('Invalid credentials');
        }
        return user;
    }

    createSession(user) {
        const sessionData = {
            id: user.id,
            username: user.username,
            role: user.role,
            fullName: user.fullName,
            loginTime: new Date().toISOString()
        };
        
        this.activeSessions.set(user.id, sessionData);
        return sessionData;
    }

    validateSession(sessionId) {
        return this.activeSessions.get(sessionId);
    }

    destroySession(sessionId) {
        return this.activeSessions.delete(sessionId);
    }

    async login(credentials) {
        const { username, password } = credentials;
        
        const user = await this.validateCredentials(username, password);
        const sessionData = this.createSession(user);
        
        return {
            success: true,
            user: sessionData,
            message: 'Login successful'
        };
    }

    async logout(sessionId) {
        const destroyed = this.destroySession(sessionId);
        return {
            success: destroyed,
            message: destroyed ? 'Logout successful' : 'Session not found'
        };
    }

    getActiveUsers() {
        return Array.from(this.activeSessions.values());
    }
}

export default AuthService;

==============================

üìÅ File: .\server\services\auth\index.js
------------------------------
üì§ EXPORTS:
   ‚Ä¢  default as AuthService  (d√≤ng 2)
   ‚Ä¢  default as SessionService  (d√≤ng 3)

üìÑ N·ªòI DUNG FILE:
==============================
// Auth services exports
export { default as AuthService } from './auth-service.js';
export { default as SessionService } from './session-service.js';

==============================

üìÅ File: .\server\services\auth\session-service.js
------------------------------
üèõÔ∏è  CLASSES:
   ‚Ä¢ SessionService (d√≤ng 4)
üì§ EXPORTS:
   ‚Ä¢ SessionService (d√≤ng 69)

üìÑ N·ªòI DUNG FILE:
==============================
// Session management service
import BaseService from '../core/base-service.js';

class SessionService extends BaseService {
    constructor() {
        super();
        this.sessions = new Map();
        this.sessionTimeout = 24 * 60 * 60 * 1000; // 24 hours
    }

    createSession(user, req) {
        const sessionId = this.generateId('sess_');
        const sessionData = {
            id: sessionId,
            userId: user.id,
            user: user,
            createdAt: new Date().toISOString(),
            lastAccessed: new Date().toISOString(),
            ipAddress: req.ip || req.connection.remoteAddress,
            userAgent: req.get('User-Agent')
        };

        this.sessions.set(sessionId, sessionData);
        return sessionData;
    }

    getSession(sessionId) {
        const session = this.sessions.get(sessionId);
        if (!session) return null;

        // Check if session is expired
        const now = Date.now();
        const lastAccessed = new Date(session.lastAccessed).getTime();
        if (now - lastAccessed > this.sessionTimeout) {
            this.destroySession(sessionId);
            return null;
        }

        // Update last accessed
        session.lastAccessed = new Date().toISOString();
        this.sessions.set(sessionId, session);
        
        return session;
    }

    destroySession(sessionId) {
        return this.sessions.delete(sessionId);
    }

    cleanupExpiredSessions() {
        const now = Date.now();
        for (const [sessionId, session] of this.sessions.entries()) {
            const lastAccessed = new Date(session.lastAccessed).getTime();
            if (now - lastAccessed > this.sessionTimeout) {
                this.destroySession(sessionId);
            }
        }
    }

    getActiveSessions() {
        return Array.from(this.sessions.values());
    }

    getUserSessions(userId) {
        return Array.from(this.sessions.values()).filter(session => session.userId === userId);
    }
}

export default SessionService;

==============================

üìÅ File: .\server\services\core\base-service.js
------------------------------
üèõÔ∏è  CLASSES:
   ‚Ä¢ for (d√≤ng 1)
   ‚Ä¢ BaseService (d√≤ng 4)
üì§ EXPORTS:
   ‚Ä¢ class (d√≤ng 4)

üìÑ N·ªòI DUNG FILE:
==============================
// Abstract base class for all services
import { formatResponse } from '../utils/response-formatter.js';

export default class BaseService {
    constructor() {
        this.initialized = false;
        this.cache = new Map();
    }

    async init() {
        if (!this.initialized) {
            await this.initializeService();
            this.initialized = true;
        }
    }

    async initializeService() {
        // Override in subclasses
    }

    formatResponse(success, message, data = null, errorCode = null) {
        return formatResponse(success, message, data, errorCode);
    }

    validateRequired(data, fields) {
        const errors = [];
        fields.forEach(field => {
            if (!data[field]) {
                errors.push(`${field} l√† b·∫Øt bu·ªôc`);
            }
        });
        return errors;
    }

    generateId(prefix = '') {
        return `${prefix}${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
    }

    async handleError(error, operation) {
        console.error(`Error in ${operation}:`, error);
        throw error;
    }
}

==============================

üìÅ File: .\server\services\core\cache-service.js
------------------------------
üèõÔ∏è  CLASSES:
   ‚Ä¢ CacheService (d√≤ng 2)
üì§ EXPORTS:
   ‚Ä¢ new (d√≤ng 55)

üìÑ N·ªòI DUNG FILE:
==============================
// server/services/core/cache-service.js
class CacheService {
    constructor() {
        this.cache = new Map();
        this.ttl = new Map();
    }

    set(key, value, ttlMs = 300000) { // 5 minutes default
        this.cache.set(key, value);
        this.ttl.set(key, Date.now() + ttlMs);
    }

    get(key) {
        const expiry = this.ttl.get(key);
        if (expiry && Date.now() > expiry) {
            this.delete(key);
            return null;
        }
        return this.cache.get(key);
    }

    delete(key) {
        this.cache.delete(key);
        this.ttl.delete(key);
    }

    clear() {
        this.cache.clear();
        this.ttl.clear();
    }

    has(key) {
        const expiry = this.ttl.get(key);
        if (expiry && Date.now() > expiry) {
            this.delete(key);
            return false;
        }
        return this.cache.has(key);
    }

    size() {
        return this.cache.size;
    }

    cleanup() {
        const now = Date.now();
        for (const [key, expiry] of this.ttl.entries()) {
            if (now > expiry) {
                this.delete(key);
            }
        }
    }
}

export default new CacheService();

==============================

üìÅ File: .\server\services\core\index.js
------------------------------
üì§ EXPORTS:
   ‚Ä¢  default as BaseService  (d√≤ng 2)
   ‚Ä¢  default as LarkClient  (d√≤ng 3)
   ‚Ä¢  default as CacheService  (d√≤ng 4)

üìÑ N·ªòI DUNG FILE:
==============================
// Core services exports
export { default as BaseService } from './base-service.js';
export { default as LarkClient } from './lark-client.js';
export { default as CacheService } from './cache-service.js';

==============================

üìÅ File: .\server\services\core\lark-client.js
------------------------------
üèõÔ∏è  CLASSES:
   ‚Ä¢ LarkClient (d√≤ng 4)
üì§ EXPORTS:
   ‚Ä¢ new (d√≤ng 132)

üìÑ N·ªòI DUNG FILE:
==============================
// server/services/core/lark-client.js
import axios from 'axios';

class LarkClient {
    constructor() {
        // Kh√¥ng load env vars t·∫°i constructor
        this.baseURL = 'https://open.larksuite.com/open-apis';
        this.tenantAccessToken = null;
        this.tokenExpiry = null;
    }

    // Getter methods ƒë·ªÉ load env vars khi c·∫ßn
    get appId() {
        return process.env.LARK_APP_ID;
    }

    get appSecret() {
        return process.env.LARK_APP_SECRET;
    }

    async getTenantAccessToken() {
        console.log('üîë Getting tenant access token...');
        
        // Debug environment variables khi th·ª±c s·ª± s·ª≠ d·ª•ng
        console.log('üîç DEBUG Lark Credentials:');
        console.log('App ID:', this.appId ? `${this.appId.substring(0, 8)}...` : 'Missing');
        console.log('App Secret:', this.appSecret ? `${this.appSecret.substring(0, 8)}...` : 'Missing');
        
        if (!this.appId || !this.appSecret) {
            throw new Error('Lark credentials not configured properly');
        }
        
        if (this.tenantAccessToken && this.tokenExpiry > Date.now()) {
            console.log('‚úÖ Using cached access token');
            return this.tenantAccessToken;
        }

        try {
            console.log('üì° Requesting new access token from Lark...');
            const payload = {
                app_id: this.appId,
                app_secret: this.appSecret
            };
            
            console.log('üöÄ Sending request to:', `${this.baseURL}/auth/v3/tenant_access_token/internal`);
            console.log('üì¶ Payload keys:', Object.keys(payload));
            
            const response = await axios.post(`${this.baseURL}/auth/v3/tenant_access_token/internal`, payload);
            
            console.log('üì® Lark auth response:', {
                status: response.status,
                code: response.data.code,
                msg: response.data.msg
            });

            if (response.data.code === 0) {
                this.tenantAccessToken = response.data.tenant_access_token;
                this.tokenExpiry = Date.now() + (response.data.expire - 300) * 1000;
                console.log('‚úÖ Access token obtained successfully');
                console.log('Token expires in:', Math.floor((this.tokenExpiry - Date.now()) / 1000), 'seconds');
                return this.tenantAccessToken;
            } else {
                console.error('‚ùå Lark auth error:', response.data);
                throw new Error(`Lark Auth Error: ${response.data.msg}`);
            }
        } catch (error) {
            console.error('‚ùå Error getting tenant access token:', {
                message: error.message,
                response: error.response?.data,
                status: error.response?.status
            });
            throw error;
        }
    }

    async request(endpoint, options = {}) {
        console.log(`üìû Making Lark API request: ${options.method || 'GET'} ${endpoint}`);
        
        const token = await this.getTenantAccessToken();
        
        const config = {
            ...options,
            headers: {
                'Authorization': `Bearer ${token}`,
                'Content-Type': 'application/json',
                ...options.headers
            }
        };

        try {
            console.log('üîÑ Sending request to:', `${this.baseURL}${endpoint}`);
            const response = await axios(`${this.baseURL}${endpoint}`, config);
            
            console.log('‚úÖ Lark API response:', {
                status: response.status,
                dataLength: response.data ? JSON.stringify(response.data).length : 0
            });
            
            return response.data;
        } catch (error) {
            console.error('‚ùå Lark API Error:', {
                endpoint,
                status: error.response?.status,
                data: error.response?.data,
                message: error.message
            });
            throw error;
        }
    }

    async get(endpoint, params = {}) {
        console.log('üì• GET request:', endpoint, params);
        return this.request(endpoint, { method: 'GET', params });
    }

    async post(endpoint, data = {}) {
        console.log('üì§ POST request:', endpoint, { dataKeys: Object.keys(data) });
        return this.request(endpoint, { method: 'POST', data });
    }

    async put(endpoint, data = {}) {
        console.log('üìù PUT request:', endpoint, { dataKeys: Object.keys(data) });
        return this.request(endpoint, { method: 'PUT', data });
    }

    async delete(endpoint) {
        console.log('üóëÔ∏è DELETE request:', endpoint);
        return this.request(endpoint, { method: 'DELETE' });
    }
}

export default new LarkClient();

==============================

üìÅ File: .\server\services\employees\employee-service.js
------------------------------
üèõÔ∏è  CLASSES:
   ‚Ä¢ EmployeeService (d√≤ng 6)
üì§ EXPORTS:
   ‚Ä¢ EmployeeService (d√≤ng 259)

üìÑ N·ªòI DUNG FILE:
==============================
// Employee management service
import BaseService from '../core/base-service.js';
import LarkClient from '../core/lark-client.js';
import CacheService from '../core/cache-service.js';

class EmployeeService extends BaseService {
    constructor() {
        super();
        this.tableName = 'employees';
        this.baseId = process.env.LARK_BASE_ID;
        this.tableId = process.env.LARK_EMPLOYEE_TABLE_ID;
    }

    async initializeService() {
        // Initialize Lark Base connection
        console.log('Initializing Employee Service...');
    }

    // Th√™m v√†o ƒë·∫ßu method getAllEmployees
    async getAllEmployees() {
        console.log('\nüë• EMPLOYEE SERVICE: getAllEmployees called');
        
        const cacheKey = 'employees_all';
        let employees = CacheService.get(cacheKey);
        
        if (employees) {
            console.log('‚úÖ Using cached employees data:', employees.length, 'records');
            console.log('üîç SERVICE: Cached data sample:', employees[0]);
            return employees;
        }
        
        console.log('üì° SERVICE: Fetching employees from Lark API...');
        console.log('üîç SERVICE: Base ID:', this.baseId);
        console.log('üîç SERVICE: Table ID:', this.tableId);
        
        try {
            const response = await LarkClient.get(`/bitable/v1/apps/${this.baseId}/tables/${this.tableId}/records`);
            
            // üö® DEBUG: In ra response t·ª´ Lark API
            console.log('üîç SERVICE: Raw Lark response:', response);
            console.log('üîç SERVICE: Response.data:', response.data);
            console.log('üîç SERVICE: Response.data.items:', response.data?.items);
            
            if (response.data?.items && Array.isArray(response.data.items)) {
                console.log('üîç SERVICE: Items count:', response.data.items.length);
                if (response.data.items.length > 0) {
                    console.log('üîç SERVICE: First raw item:', response.data.items[0]);
                    console.log('üîç SERVICE: First item fields:', response.data.items[0].fields);
                }
            }
            
            employees = this.transformEmployeeData(response.data?.items || []);
            
            // üö® DEBUG: In ra d·ªØ li·ªáu sau khi transform
            console.log('üîç SERVICE: Transformed employees:', employees);
            console.log('‚úÖ SERVICE: Employees transformed:', employees.length, 'records');
            
            if (employees.length > 0) {
                console.log('üîç SERVICE: First transformed employee:', employees[0]);
            }
            
            CacheService.set(cacheKey, employees, 300000);
            console.log('üíæ SERVICE: Employees cached successfully');
            
        } catch (error) {
            console.error('‚ùå SERVICE: Error fetching employees from Lark:', error);
            console.log('üîÑ SERVICE: Using mock data fallback...');
            employees = this.getMockEmployees();
        }
        
        return employees;
    }

    async addEmployee(employeeData) {
        try {
            const transformedData = this.transformEmployeeForLark(employeeData);
            
            console.log('üì§ EMPLOYEE SERVICE: Sending data to Lark:', transformedData);
            console.log('üîç EMPLOYEE SERVICE: Base ID:', this.baseId);
            console.log('üîç EMPLOYEE SERVICE: Table ID:', this.tableId);
            console.log('üîç EMPLOYEE SERVICE: URL will be:', `/bitable/v1/apps/${this.baseId}/tables/${this.tableId}/records`);
            
            const response = await LarkClient.post(`/bitable/v1/apps/${this.baseId}/tables/${this.tableId}/records`, {
                fields: transformedData
            });

            console.log('üì• EMPLOYEE SERVICE: Raw Lark response:', response);
            console.log('üì• EMPLOYEE SERVICE: Response status:', response?.status);
            console.log('üì• EMPLOYEE SERVICE: Response data:', response?.data);

            // Clear cache
            CacheService.delete('employees_all');
            
            return {
                success: true,
                employeeId: employeeData.employeeId,
                larkResponse: response  // ‚úÖ TH√äM: Debug response
            };
            
        } catch (error) {
            console.error('‚ùå EMPLOYEE SERVICE: Full error:', error);
            console.error('‚ùå EMPLOYEE SERVICE: Error message:', error.message);
            console.error('‚ùå EMPLOYEE SERVICE: Error stack:', error.stack);
            await this.handleError(error, 'addEmployee');
            throw error;
        }
    }



    async updateEmployee(id, employeeData) {
        try {
            const transformedData = this.transformEmployeeForLark(employeeData);
            
            const response = await LarkClient.put(`/bitable/v1/apps/${this.baseId}/tables/${this.tableId}/records/${id}`, {
                fields: transformedData
            });

            // Clear cache
            CacheService.delete('employees_all');
            
            return this.transformEmployeeData([response.data])[0];
        } catch (error) {
            await this.handleError(error, 'updateEmployee');
            throw error;
        }
    }

    async deleteEmployee(id) {
        try {
            await LarkClient.delete(`/bitable/v1/apps/${this.baseId}/tables/${this.tableId}/records/${id}`);
            
            // Clear cache
            CacheService.delete('employees_all');
            
            return true;
        } catch (error) {
            await this.handleError(error, 'deleteEmployee');
            throw error;
        }
    }

    async checkEmployeeIdExists(employeeId) {
        const employees = await this.getAllEmployees();
        return employees.some(emp => emp.employeeId === employeeId);
    }

    async searchEmployees(query) {
        const employees = await this.getAllEmployees();
        
        if (!query) return employees;
        
        const searchTerm = query.toLowerCase();
        return employees.filter(emp => 
            emp.fullName.toLowerCase().includes(searchTerm) ||
            emp.employeeId.toLowerCase().includes(searchTerm) ||
            emp.phoneNumber.includes(searchTerm)
        );
    }

    //generateEmployeeId(fullName, phoneNumber) {
    //    return `${fullName} - ${phoneNumber}`;
    //}

    transformEmployeeData(larkData) {
        console.log('üîÑ SERVICE: Starting transform with data:', larkData);
        console.log('üîç SERVICE: LarkData length:', larkData?.length || 0);
        
        if (!Array.isArray(larkData)) {
            console.warn('‚ö†Ô∏è SERVICE: larkData is not an array:', typeof larkData);
            return [];
        }
        
        const transformed = larkData.map((record, index) => {
            console.log(`\nüîç SERVICE: Transforming record ${index}:`);
            console.log('üîç SERVICE: Record structure:', {
                record_id: record.record_id,
                fields: record.fields ? 'EXISTS' : 'MISSING',
                fieldsKeys: record.fields ? Object.keys(record.fields) : 'NO_FIELDS'
            });
            console.log('üîç SERVICE: Record fields content:', record.fields);
            
            const result = {
                id: record.record_id,
                // ‚úÖ S·ª¨A: S·ª≠ d·ª•ng t√™n c·ªôt ti·∫øng Vi·ªát t·ª´ Larkbase
                employeeId: record.fields['M√£ nh√¢n vi√™n'] || '',
                fullName: record.fields['H·ªç t√™n'] || '',
                phoneNumber: record.fields['S·ªë ƒëi·ªán tho·∫°i'] || '',
                gender: record.fields['Gi·ªõi t√≠nh'] || '',
                position: record.fields['V·ªã tr√≠'] || '',
                hourlyRate: record.fields['M·ª©c l∆∞∆°ng/gi·ªù'] || 0,
                bankAccount: record.fields['S·ªë t√†i kho·∫£n'] || '',
                bankName: record.fields['Ng√¢n h√†ng'] || '',
                recruitmentLink: record.fields['Link ƒë·ªÅ xu·∫•t tuy·ªÉn d·ª•ng'] || '',
                status: record.fields['Tr·∫°ng th√°i'] || 'active',
                createdAt: record.fields['Created At'] || new Date().toISOString(),
                updatedAt: record.fields['Updated At'] || new Date().toISOString()
            };
            
            console.log(`üîç SERVICE: Transformed record ${index}:`, result);
            return result;
        });
        
        console.log('‚úÖ SERVICE: Transform completed:', transformed);
        return transformed;
    }

    transformEmployeeForLark(employeeData) {
        return {
            'M√£ nh√¢n vi√™n': employeeData.employeeId,
            'H·ªç t√™n': employeeData.fullName,
            'S·ªë ƒëi·ªán tho·∫°i': employeeData.phoneNumber,
            'Gi·ªõi t√≠nh': employeeData.gender,
            'V·ªã tr√≠': employeeData.position || '',
            'M·ª©c l∆∞∆°ng/gi·ªù': employeeData.hourlyRate,
            'S·ªë t√†i kho·∫£n': employeeData.bankAccount,
            'Ng√¢n h√†ng': employeeData.bankName,
            'Link ƒë·ªÅ xu·∫•t tuy·ªÉn d·ª•ng': employeeData.recruitmentLink || '',
            'Tr·∫°ng th√°i': employeeData.status || 'active'
        };
    }

    getMockEmployees() {
        return [
            {
                id: 'emp_001',
                employeeId: 'Nguy·ªÖn VƒÉn A - 0123456789',
                fullName: 'Nguy·ªÖn VƒÉn A',
                phoneNumber: '0123456789',
                gender: 'Nam',
                position: 'Nh√¢n vi√™n b√°n h√†ng',
                hourlyRate: 50000,
                bankAccount: '123456789',
                bankName: 'Vietcombank',
                recruitmentLink: '20250620014',
                status: 'active',
                createdAt: new Date().toISOString(),
                updatedAt: new Date().toISOString()
            },
            {
                id: 'emp_002',
                employeeId: 'Tr·∫ßn Th·ªã B - 0987654321',
                fullName: 'Tr·∫ßn Th·ªã B',
                phoneNumber: '0987654321',
                gender: 'N·ªØ',
                position: 'Thu ng√¢n',
                hourlyRate: 45000,
                bankAccount: '987654321',
                bankName: 'Techcombank',
                recruitmentLink: '20250620017',
                status: 'active',
                createdAt: new Date().toISOString(),
                updatedAt: new Date().toISOString()
            }
        ];
    }
}

export default EmployeeService;

==============================

üìÅ File: .\server\services\employees\employee-validator.js
------------------------------
üèõÔ∏è  CLASSES:
   ‚Ä¢ EmployeeValidator (d√≤ng 2)
üì§ EXPORTS:
   ‚Ä¢ EmployeeValidator (d√≤ng 63)

üìÑ N·ªòI DUNG FILE:
==============================
// Employee validation service
class EmployeeValidator {
    static validateEmployeeData(employeeData) {
        const errors = [];

        // Required fields validation
        if (!employeeData.fullName || employeeData.fullName.trim().length < 2) {
            errors.push('H·ªç t√™n ph·∫£i c√≥ √≠t nh·∫•t 2 k√Ω t·ª±');
        }

        if (!employeeData.phoneNumber || !this.isValidPhoneNumber(employeeData.phoneNumber)) {
            errors.push('S·ªë ƒëi·ªán tho·∫°i kh√¥ng h·ª£p l·ªá');
        }

        if (!employeeData.gender || !['Nam', 'N·ªØ'].includes(employeeData.gender)) {
            errors.push('Gi·ªõi t√≠nh ph·∫£i l√† Nam ho·∫∑c N·ªØ');
        }

        if (!employeeData.hourlyRate || employeeData.hourlyRate <= 0) {
            errors.push('L∆∞∆°ng theo gi·ªù ph·∫£i l·ªõn h∆°n 0');
        }

        if (!employeeData.bankAccount || employeeData.bankAccount.trim().length < 6) {
            errors.push('S·ªë t√†i kho·∫£n ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±');
        }

        if (!employeeData.bankName || employeeData.bankName.trim().length < 2) {
            errors.push('T√™n ng√¢n h√†ng l√† b·∫Øt bu·ªôc');
        }

        return errors;
    }

    static isValidPhoneNumber(phoneNumber) {
        const phoneRegex = /^[0-9]{10,11}$/;
        return phoneRegex.test(phoneNumber);
    }

    static validateWorkHistoryData(workHistoryData) {
        const errors = [];

        if (!Array.isArray(workHistoryData) || workHistoryData.length === 0) {
            errors.push('Ph·∫£i c√≥ √≠t nh·∫•t m·ªôt work history entry');
        }

        const requestNos = workHistoryData.map(item => item.requestNo);
        const uniqueRequestNos = [...new Set(requestNos)];
        
        if (requestNos.length !== uniqueRequestNos.length) {
            errors.push('Kh√¥ng ƒë∆∞·ª£c tr√πng l·∫∑p Request No');
        }

        workHistoryData.forEach((item, index) => {
            if (!item.requestNo || item.requestNo.trim().length === 0) {
                errors.push(`Work history entry ${index + 1}: Request No l√† b·∫Øt bu·ªôc`);
            }
        });

        return errors;
    }
}

export default EmployeeValidator;

==============================

üìÅ File: .\server\services\employees\index.js
------------------------------
üì§ EXPORTS:
   ‚Ä¢  default as EmployeeService  (d√≤ng 2)
   ‚Ä¢  default as WorkHistoryService  (d√≤ng 3)
   ‚Ä¢  default as EmployeeValidator  (d√≤ng 4)

üìÑ N·ªòI DUNG FILE:
==============================
// Employee services exports
export { default as EmployeeService } from './employee-service.js';
export { default as WorkHistoryService } from './work-history-service.js';
export { default as EmployeeValidator } from './employee-validator.js';

==============================

üìÅ File: .\server\services\employees\work-history-service.js
------------------------------
üèõÔ∏è  CLASSES:
   ‚Ä¢ WorkHistoryService (d√≤ng 6)
üì§ EXPORTS:
   ‚Ä¢ WorkHistoryService (d√≤ng 132)

üìÑ N·ªòI DUNG FILE:
==============================
// Work history service
import BaseService from '../core/base-service.js';
import LarkClient from '../core/lark-client.js';


class WorkHistoryService extends BaseService {
    constructor() {
        super();
        this.baseId = process.env.LARK_BASE_ID;
        this.tableId = process.env.LARK_WORK_HISTORY_TABLE_ID;
    }


    async initializeService() {
        console.log('Initializing Work History Service...');
    }


    async getWorkHistoryByEmployee(employeeId) {
        try {
            const response = await LarkClient.get(`/bitable/v1/apps/${this.baseId}/tables/${this.tableId}/records`, {
                filter: `AND(CurrentValue.[Employee ID] = "${employeeId}")`
            });


            return this.transformWorkHistoryData(response.data?.items || []);
        } catch (error) {
            console.error('Error fetching work history:', error);
            return [];
        }
    }


    // ‚úÖ TH√äM METHOD M·ªöI
    async checkWorkHistoryExists(employeeId, requestNo) {
        try {
            console.log(`üîç WORK HISTORY: Checking duplicate (${employeeId}, ${requestNo})`);
            
            const response = await LarkClient.get(`/bitable/v1/apps/${this.baseId}/tables/${this.tableId}/records`);
            
            const records = response.data?.items || [];
            console.log(`üìã WORK HISTORY: Found ${records.length} total records`);
            
            // Check xem c√≥ record n√†o match (employeeId, requestNo) kh√¥ng
            const exists = records.some(record => {
                const fields = record.fields || {};
                const recordEmployeeId = fields['Employee ID'];
                const recordRequestNo = fields['Request No'];
                
                const isMatch = recordEmployeeId === employeeId && recordRequestNo === requestNo;
                
                if (isMatch) {
                    console.log(`‚ùå WORK HISTORY: Found duplicate - ${recordEmployeeId} / ${recordRequestNo}`);
                }
                
                return isMatch;
            });
            
            console.log(`‚úÖ WORK HISTORY: Duplicate check result: ${exists ? 'EXISTS' : 'NOT_EXISTS'}`);
            return exists;
            
        } catch (error) {
            console.error('‚ùå Error checking work history exists:', error);
            return false; // Safe fallback - cho ph√©p th√™m n·∫øu kh√¥ng check ƒë∆∞·ª£c
        }
    }

    async addWorkHistory(workHistoryData) {
        try {
            const transformedData = this.transformWorkHistoryForLark(workHistoryData);
            
            console.log('üì§ WORK HISTORY SERVICE: Sending data to Lark:', transformedData);
            console.log('üîç WORK HISTORY SERVICE: Base ID:', this.baseId);
            console.log('üîç WORK HISTORY SERVICE: Table ID:', this.tableId);
            console.log('üîç WORK HISTORY SERVICE: URL will be:', `/bitable/v1/apps/${this.baseId}/tables/${this.tableId}/records`);
            
            const response = await LarkClient.post(`/bitable/v1/apps/${this.baseId}/tables/${this.tableId}/records`, {
                fields: transformedData
            });

            console.log('üì• WORK HISTORY SERVICE: Raw Lark response:', response);
            console.log('üì• WORK HISTORY SERVICE: Response status:', response?.status);
            console.log('üì• WORK HISTORY SERVICE: Response data:', response?.data);

            return {
                success: true,
                employeeId: workHistoryData.employeeId,
                requestNo: workHistoryData.requestNo,
                larkResponse: response  // ‚úÖ TH√äM: Debug response
            };
            
        } catch (error) {
            console.error('‚ùå WORK HISTORY SERVICE: Full error:', error);
            console.error('‚ùå WORK HISTORY SERVICE: Error message:', error.message);
            console.error('‚ùå WORK HISTORY SERVICE: Error stack:', error.stack);
            await this.handleError(error, 'addWorkHistory');
            throw error;
        }
    }



    async deleteWorkHistory(id) {
        try {
            await LarkClient.delete(`/bitable/v1/apps/${this.baseId}/tables/${this.tableId}/records/${id}`);
            return true;
        } catch (error) {
            await this.handleError(error, 'deleteWorkHistory');
            throw error;
        }
    }


    transformWorkHistoryData(larkData) {
        return larkData.map(record => ({
            id: record.record_id,
            employeeId: record.fields['M√£ nh√¢n vi√™n'] || '',
            requestNo: record.fields['Request No.'] || ''
        }));
    }


    transformWorkHistoryForLark(workHistoryData) {
        return {
            'M√£ nh√¢n vi√™n': workHistoryData.employeeId,
            'Request No.': workHistoryData.requestNo
        };
    }
}


export default WorkHistoryService;

==============================

üìÅ File: .\server\services\master-data\index.js
------------------------------
üì§ EXPORTS:
   ‚Ä¢  default as StoreService  (d√≤ng 2)
   ‚Ä¢  default as PositionService  (d√≤ng 3)
   ‚Ä¢  default as MasterDataValidator  (d√≤ng 4)

üìÑ N·ªòI DUNG FILE:
==============================
// Master data services exports
export { default as StoreService } from './store-service.js';
export { default as PositionService } from './position-service.js';
export { default as MasterDataValidator } from './master-data-validator.js';

==============================

üìÅ File: .\server\services\master-data\master-data-validator.js
------------------------------
üèõÔ∏è  CLASSES:
   ‚Ä¢ MasterDataValidator (d√≤ng 2)
üì§ EXPORTS:
   ‚Ä¢ MasterDataValidator (d√≤ng 94)

üìÑ N·ªòI DUNG FILE:
==============================
// Master data validation service
class MasterDataValidator {
    static validateStoreData(storeData) {
        const errors = [];

        // Required fields validation
        if (!storeData.storeName || storeData.storeName.trim().length < 2) {
            errors.push('T√™n c·ª≠a h√†ng ph·∫£i c√≥ √≠t nh·∫•t 2 k√Ω t·ª±');
        }

        if (!storeData.address || storeData.address.trim().length < 5) {
            errors.push('ƒê·ªãa ch·ªâ ph·∫£i c√≥ √≠t nh·∫•t 5 k√Ω t·ª±');
        }

        // Status validation
        if (storeData.status && !['active', 'inactive'].includes(storeData.status)) {
            errors.push('Tr·∫°ng th√°i ph·∫£i l√† active ho·∫∑c inactive');
        }

        return errors;
    }

    static validatePositionData(positionData) {
        const errors = [];

        // Required fields validation
        if (!positionData.positionName || positionData.positionName.trim().length < 2) {
            errors.push('T√™n v·ªã tr√≠ ph·∫£i c√≥ √≠t nh·∫•t 2 k√Ω t·ª±');
        }

        // Description validation (optional but if provided must be reasonable)
        if (positionData.description && positionData.description.trim().length < 3) {
            errors.push('M√¥ t·∫£ ph·∫£i c√≥ √≠t nh·∫•t 3 k√Ω t·ª± n·∫øu ƒë∆∞·ª£c cung c·∫•p');
        }

        // Status validation
        if (positionData.status && !['active', 'inactive'].includes(positionData.status)) {
            errors.push('Tr·∫°ng th√°i ph·∫£i l√† active ho·∫∑c inactive');
        }

        return errors;
    }

    static validateMasterDataBatch(dataArray, type) {
        const errors = [];
        const names = [];

        dataArray.forEach((item, index) => {
            // Validate individual item
            let itemErrors = [];
            if (type === 'store') {
                itemErrors = this.validateStoreData(item);
            } else if (type === 'position') {
                itemErrors = this.validatePositionData(item);
            }

            if (itemErrors.length > 0) {
                errors.push(`Item ${index + 1}: ${itemErrors.join(', ')}`);
            }

            // Check for duplicate names
            const nameField = type === 'store' ? 'storeName' : 'positionName';
            if (item[nameField] && names.includes(item[nameField])) {
                errors.push(`Item ${index + 1}: T√™n ƒë√£ b·ªã tr√πng l·∫∑p trong batch`);
            } else if (item[nameField]) {
                names.push(item[nameField]);
            }
        });

        return errors;
    }

    static sanitizeStoreData(storeData) {
        return {
            storeName: storeData.storeName?.trim() || '',
            address: storeData.address?.trim() || '',
            status: storeData.status || 'active',
            createdAt: storeData.createdAt || new Date().toISOString(),
            updatedAt: new Date().toISOString()
        };
    }

    static sanitizePositionData(positionData) {
        return {
            positionName: positionData.positionName?.trim() || '',
            description: positionData.description?.trim() || '',
            status: positionData.status || 'active',
            createdAt: positionData.createdAt || new Date().toISOString(),
            updatedAt: new Date().toISOString()
        };
    }
}

export default MasterDataValidator;

==============================

üìÅ File: .\server\services\master-data\position-service.js
------------------------------
üèõÔ∏è  CLASSES:
   ‚Ä¢ PositionService (d√≤ng 6)
üì§ EXPORTS:
   ‚Ä¢ PositionService (d√≤ng 153)

üìÑ N·ªòI DUNG FILE:
==============================
// Position management service
import BaseService from '../core/base-service.js';
import LarkClient from '../core/lark-client.js';
import CacheService from '../core/cache-service.js';

class PositionService extends BaseService {
    constructor() {
        super();
        this.baseId = process.env.LARK_BASE_ID;
        this.tableId = process.env.LARK_POSITION_TABLE_ID;
    }

    async initializeService() {
        console.log('Initializing Position Service...');
    }

    async getAllPositions() {
        const cacheKey = 'positions_all';
        let positions = CacheService.get(cacheKey);
        
        if (!positions) {
            try {
                const response = await LarkClient.get(`/bitable/v1/apps/${this.baseId}/tables/${this.tableId}/records`);
                positions = this.transformPositionData(response.data?.items || []);
                CacheService.set(cacheKey, positions, 300000); // 5 minutes
            } catch (error) {
                console.error('Error fetching positions from Lark:', error);
                positions = this.getMockPositions();
            }
        }
        
        return positions;
    }

    async addPosition(positionData) {
        try {
            const transformedData = this.transformPositionForLark(positionData);
            
            const response = await LarkClient.post(`/bitable/v1/apps/${this.baseId}/tables/${this.tableId}/records`, {
                fields: transformedData
            });

            // Clear cache
            CacheService.delete('positions_all');
            
            return this.transformPositionData([response.data])[0];
        } catch (error) {
            await this.handleError(error, 'addPosition');
            throw error;
        }
    }

    async updatePosition(id, positionData) {
        try {
            const transformedData = this.transformPositionForLark(positionData);
            
            const response = await LarkClient.put(`/bitable/v1/apps/${this.baseId}/tables/${this.tableId}/records/${id}`, {
                fields: transformedData
            });

            // Clear cache
            CacheService.delete('positions_all');
            
            return this.transformPositionData([response.data])[0];
        } catch (error) {
            await this.handleError(error, 'updatePosition');
            throw error;
        }
    }

    async deletePosition(id) {
        try {
            await LarkClient.delete(`/bitable/v1/apps/${this.baseId}/tables/${this.tableId}/records/${id}`);
            
            // Clear cache
            CacheService.delete('positions_all');
            
            return true;
        } catch (error) {
            await this.handleError(error, 'deletePosition');
            throw error;
        }
    }

    async getActivePositions() {
        const positions = await this.getAllPositions();
        return positions.filter(position => position.status === 'active');
    }

    async searchPositions(query) {
        const positions = await this.getAllPositions();
        
        if (!query) return positions;
        
        const searchTerm = query.toLowerCase();
        return positions.filter(position => 
            position.positionName.toLowerCase().includes(searchTerm) ||
            (position.description && position.description.toLowerCase().includes(searchTerm))
        );
    }

    transformPositionData(larkData) {
        return larkData.map(record => ({
            id: record.record_id,
            positionName: record.fields['Position Name'] || '',
            description: record.fields['Description'] || '',
            status: record.fields['Status'] || 'active',
            createdAt: record.fields['Created At'] || new Date().toISOString(),
            updatedAt: record.fields['Updated At'] || new Date().toISOString()
        }));
    }

    transformPositionForLark(positionData) {
        return {
            'Position Name': positionData.positionName,
            'Description': positionData.description || '',
            'Status': positionData.status || 'active',
            'Created At': positionData.createdAt || new Date().toISOString(),
            'Updated At': positionData.updatedAt || new Date().toISOString()
        };
    }

    getMockPositions() {
        return [
            {
                id: 'pos_001',
                positionName: 'Nh√¢n vi√™n b√°n h√†ng',
                description: 'Nh√¢n vi√™n b√°n h√†ng t·∫°i c·ª≠a h√†ng',
                status: 'active',
                createdAt: new Date().toISOString(),
                updatedAt: new Date().toISOString()
            },
            {
                id: 'pos_002',
                positionName: 'Nh√¢n vi√™n kho',
                description: 'Nh√¢n vi√™n qu·∫£n l√Ω kho h√†ng',
                status: 'active',
                createdAt: new Date().toISOString(),
                updatedAt: new Date().toISOString()
            },
            {
                id: 'pos_003',
                positionName: 'Tr∆∞·ªüng ca',
                description: 'Tr∆∞·ªüng ca qu·∫£n l√Ω nh√¢n vi√™n',
                status: 'active',
                createdAt: new Date().toISOString(),
                updatedAt: new Date().toISOString()
            }
        ];
    }
}

export default PositionService;

==============================

üìÅ File: .\server\services\master-data\store-service.js
------------------------------
üèõÔ∏è  CLASSES:
   ‚Ä¢ StoreService (d√≤ng 6)
üì§ EXPORTS:
   ‚Ä¢ StoreService (d√≤ng 145)

üìÑ N·ªòI DUNG FILE:
==============================
// Store management service
import BaseService from '../core/base-service.js';
import LarkClient from '../core/lark-client.js';
import CacheService from '../core/cache-service.js';

class StoreService extends BaseService {
    constructor() {
        super();
        this.baseId = process.env.LARK_BASE_ID;
        this.tableId = process.env.LARK_STORE_TABLE_ID;
    }

    async initializeService() {
        console.log('Initializing Store Service...');
    }

    async getAllStores() {
        const cacheKey = 'stores_all';
        let stores = CacheService.get(cacheKey);
        
        if (!stores) {
            try {
                const response = await LarkClient.get(`/bitable/v1/apps/${this.baseId}/tables/${this.tableId}/records`);
                stores = this.transformStoreData(response.data?.items || []);
                CacheService.set(cacheKey, stores, 300000); // 5 minutes
            } catch (error) {
                console.error('Error fetching stores from Lark:', error);
                stores = this.getMockStores();
            }
        }
        
        return stores;
    }

    async addStore(storeData) {
        try {
            const transformedData = this.transformStoreForLark(storeData);
            
            const response = await LarkClient.post(`/bitable/v1/apps/${this.baseId}/tables/${this.tableId}/records`, {
                fields: transformedData
            });

            // Clear cache
            CacheService.delete('stores_all');
            
            return this.transformStoreData([response.data])[0];
        } catch (error) {
            await this.handleError(error, 'addStore');
            throw error;
        }
    }

    async updateStore(id, storeData) {
        try {
            const transformedData = this.transformStoreForLark(storeData);
            
            const response = await LarkClient.put(`/bitable/v1/apps/${this.baseId}/tables/${this.tableId}/records/${id}`, {
                fields: transformedData
            });

            // Clear cache
            CacheService.delete('stores_all');
            
            return this.transformStoreData([response.data])[0];
        } catch (error) {
            await this.handleError(error, 'updateStore');
            throw error;
        }
    }

    async deleteStore(id) {
        try {
            await LarkClient.delete(`/bitable/v1/apps/${this.baseId}/tables/${this.tableId}/records/${id}`);
            
            // Clear cache
            CacheService.delete('stores_all');
            
            return true;
        } catch (error) {
            await this.handleError(error, 'deleteStore');
            throw error;
        }
    }

    async getActiveStores() {
        const stores = await this.getAllStores();
        return stores.filter(store => store.status === 'active');
    }

    async searchStores(query) {
        const stores = await this.getAllStores();
        
        if (!query) return stores;
        
        const searchTerm = query.toLowerCase();
        return stores.filter(store => 
            store.storeName.toLowerCase().includes(searchTerm) ||
            store.address.toLowerCase().includes(searchTerm)
        );
    }

    transformStoreData(larkData) {
        return larkData.map(record => ({
            id: record.record_id,
            storeName: record.fields['Store Name'] || '',
            address: record.fields['Address'] || '',
            status: record.fields['Status'] || 'active',
            createdAt: record.fields['Created At'] || new Date().toISOString(),
            updatedAt: record.fields['Updated At'] || new Date().toISOString()
        }));
    }

    transformStoreForLark(storeData) {
        return {
            'Store Name': storeData.storeName,
            'Address': storeData.address,
            'Status': storeData.status || 'active',
            'Created At': storeData.createdAt || new Date().toISOString(),
            'Updated At': storeData.updatedAt || new Date().toISOString()
        };
    }

    getMockStores() {
        return [
            {
                id: 'store_001',
                storeName: '116 C·∫ßu Gi·∫•y',
                address: '116 C·∫ßu Gi·∫•y, H√† N·ªôi',
                status: 'active',
                createdAt: new Date().toISOString(),
                updatedAt: new Date().toISOString()
            },
            {
                id: 'store_002',
                storeName: 'Tr√¢m Tr·ªói',
                address: 'Tr√¢m Tr·ªói, H√† N·ªôi',
                status: 'active',
                createdAt: new Date().toISOString(),
                updatedAt: new Date().toISOString()
            }
        ];
    }
}

export default StoreService;

==============================

üìÅ File: .\server\services\recruitment\index.js
------------------------------
üì§ EXPORTS:
   ‚Ä¢  default as RecruitmentService  (d√≤ng 2)
   ‚Ä¢  default as RecruitmentValidator  (d√≤ng 3)

üìÑ N·ªòI DUNG FILE:
==============================
// Recruitment services exports
export { default as RecruitmentService } from './recruitment-service.js';
export { default as RecruitmentValidator } from './recruitment-validator.js';

==============================

üìÅ File: .\server\services\recruitment\recruitment-service.js
------------------------------
üèõÔ∏è  CLASSES:
   ‚Ä¢ RecruitmentService (d√≤ng 6)
üì§ EXPORTS:
   ‚Ä¢ RecruitmentService (d√≤ng 196)

üìÑ N·ªòI DUNG FILE:
==============================
// Recruitment service
import BaseService from '../core/base-service.js';
import LarkClient from '../core/lark-client.js';
import CacheService from '../core/cache-service.js';

class RecruitmentService extends BaseService {
    constructor() {
        super();
        this.baseId = process.env.LARK_BASE_ID;
        this.tableId = process.env.LARK_RECRUITMENT_TABLE_ID;
    }

    async initializeService() {
        console.log('Initializing Recruitment Service...');
    }

    async getRecruitmentRequests(filters = {}) {
        const cacheKey = `recruitment_requests_${JSON.stringify(filters)}`;
        let requests = CacheService.get(cacheKey);
        
        if (!requests) {
            try {
                let filterString = '';
                if (filters.status) {
                    filterString += `AND(CurrentValue.[Status] = "${filters.status}")`;
                }
                if (filters.department) {
                    filterString += `AND(CurrentValue.[Department] = "${filters.department}")`;
                }
                
                const response = await LarkClient.get(`/bitable/v1/apps/${this.baseId}/tables/${this.tableId}/records`, {
                    filter: filterString
                });

                requests = this.transformRecruitmentData(response.data?.items || []);
                CacheService.set(cacheKey, requests, 300000); // 5 minutes
            } catch (error) {
                console.error('Error fetching recruitment requests:', error);
                requests = this.getMockRecruitmentRequests();
            }
        }
        
        return requests;
    }

    async addRecruitmentRequest(requestData) {
        try {
            const transformedData = this.transformRecruitmentForLark(requestData);
            
            const response = await LarkClient.post(`/bitable/v1/apps/${this.baseId}/tables/${this.tableId}/records`, {
                fields: transformedData
            });

            // Clear cache
            CacheService.delete(`recruitment_requests_${JSON.stringify({})}`);
            
            return this.transformRecruitmentData([response.data])[0];
        } catch (error) {
            await this.handleError(error, 'addRecruitmentRequest');
            throw error;
        }
    }

    async updateRecruitmentRequest(id, requestData) {
        try {
            const transformedData = this.transformRecruitmentForLark(requestData);
            
            const response = await LarkClient.put(`/bitable/v1/apps/${this.baseId}/tables/${this.tableId}/records/${id}`, {
                fields: transformedData
            });

            // Clear cache
            CacheService.clear();
            
            return this.transformRecruitmentData([response.data])[0];
        } catch (error) {
            await this.handleError(error, 'updateRecruitmentRequest');
            throw error;
        }
    }


    transformRecruitmentData(larkData) {
        console.log('üîÑ RECRUITMENT: Starting transform with data:', larkData);
        
        return larkData.map(record => {
            console.log('üîç RECRUITMENT: Processing record:', record.fields);
            
            const result = {
                id: record.record_id,
                // ‚úÖ S·ª¨A: Extract Request No t·ª´ object structure
                requestNo: this.extractRequestNo(record.fields['Request No.']),
                // ‚úÖ S·ª¨A: Extract Requester t·ª´ array structure  
                requester: this.extractRequesterName(record.fields['Requester']),
                status: record.fields['Status'] || '',
                department: record.fields['Details_Ph√≤ng ban'] || record.fields['Department'] || '',
                quantity: record.fields['Details_S·ªë l∆∞·ª£ng c·∫ßn tuy·ªÉn'] || record.fields['Quantity'] || '',
                gender: record.fields['Details_Gi·ªõi t√≠nh'] || record.fields['Gender'] || '',
                fromDate: record.fields['Details_T·ª´ ng√†y'] || record.fields['From Date'] || '',
                toDate: record.fields['Details_ƒê·∫øn ng√†y'] || record.fields['To Date'] || '',
                position: record.fields['Details_V·ªã tr√≠'] || record.fields['Position'] || '',
                approvalStatus: record.fields['Status'] || 'pending'
            };
            
            console.log('üîç RECRUITMENT: Transformed result:', result);
            return result;
        });
    }

    // ‚úÖ TH√äM: Method ƒë·ªÉ extract Request No t·ª´ object
    extractRequestNo(requestNoData) {
        if (!requestNoData) return '';
        
        // N·∫øu l√† object v·ªõi structure { "link": "...", "text": "202507140017" }
        if (typeof requestNoData === 'object' && requestNoData.text) {
            return requestNoData.text;
        }
        
        // N·∫øu l√† string tr·ª±c ti·∫øp
        if (typeof requestNoData === 'string') {
            return requestNoData;
        }
        
        // Fallback
        return requestNoData.toString();
    }

    // ‚úÖ TH√äM: Method ƒë·ªÉ extract Requester t·ª´ array
    extractRequesterName(requesterData) {
        if (!requesterData) return '';
        
        // N·∫øu l√† array [{ "name": "236LH.Nguy·ªÖn Huy Th√†nh", ... }]
        if (Array.isArray(requesterData)) {
            return requesterData.map(user => 
                user.name || user.en_name || user.id || 'Unknown'
            ).join(', ');
        }
        
        // N·∫øu l√† object { "name": "236LH.Nguy·ªÖn Huy Th√†nh", ... }
        if (typeof requesterData === 'object') {
            return requesterData.name || requesterData.en_name || requesterData.id || 'Unknown';
        }
        
        // N·∫øu l√† string tr·ª±c ti·∫øp
        return requesterData.toString();
    }


    transformRecruitmentForLark(requestData) {
        return {
            'Request No': requestData.requestNo,
            'Requester': requestData.requester,
            'Status': requestData.status,
            'Department': requestData.department,
            'Quantity': requestData.quantity,
            'Gender': requestData.gender,
            'From Date': requestData.fromDate,
            'To Date': requestData.toDate,
            'Approval Status': requestData.approvalStatus || 'pending',
            'Created At': requestData.createdAt || new Date().toISOString()
        };
    }

    getMockRecruitmentRequests() {
        return [
            {
                id: '20250620014',
                requestNo: '20250620014',
                requester: 'Rikkei Test',
                status: 'ƒêang tuy·ªÉn d·ª•ng',
                department: '116 C·∫ßu Gi·∫•y',
                quantity: '2',
                gender: 'Nam/N·ªØ',
                fromDate: '2025-06-20',
                toDate: '2025-07-20',
                approvalStatus: 'approved',
                createdAt: '2025-06-20T00:00:00.000Z'
            },
            {
                id: '20250620017',
                requestNo: '20250620017',
                requester: 'Rikkei Test',
                status: 'ƒêang tuy·ªÉn d·ª•ng',
                department: 'Tr√¢m Tr·ªói',
                quantity: '1',
                gender: 'N·ªØ',
                fromDate: '2025-06-20',
                toDate: '2025-07-20',
                approvalStatus: 'approved',
                createdAt: '2025-06-20T00:00:00.000Z'
            }
        ];
    }
}

export default RecruitmentService;

==============================

üìÅ File: .\server\services\recruitment\recruitment-validator.js
------------------------------
üèõÔ∏è  CLASSES:
   ‚Ä¢ RecruitmentValidator (d√≤ng 2)
üì§ EXPORTS:
   ‚Ä¢ RecruitmentValidator (d√≤ng 61)

üìÑ N·ªòI DUNG FILE:
==============================
// Recruitment validation service
class RecruitmentValidator {
    static validateRecruitmentData(requestData) {
        const errors = [];

        // Required fields validation
        if (!requestData.requestNo) {
            errors.push('Request No l√† b·∫Øt bu·ªôc');
        }

        if (!requestData.requester) {
            errors.push('Requester l√† b·∫Øt bu·ªôc');
        }

        if (!requestData.department) {
            errors.push('Department l√† b·∫Øt bu·ªôc');
        }

        if (!requestData.quantity || requestData.quantity <= 0) {
            errors.push('Quantity ph·∫£i l·ªõn h∆°n 0');
        }

        if (!requestData.gender) {
            errors.push('Gender l√† b·∫Øt bu·ªôc');
        }

        if (!requestData.fromDate) {
            errors.push('From Date l√† b·∫Øt bu·ªôc');
        } else if (!this.isValidDate(requestData.fromDate)) {
            errors.push('From Date kh√¥ng h·ª£p l·ªá');
        }

        if (!requestData.toDate) {
            errors.push('To Date l√† b·∫Øt bu·ªôc');
        } else if (!this.isValidDate(requestData.toDate)) {
            errors.push('To Date kh√¥ng h·ª£p l·ªá');
        }

        // Check if toDate is after fromDate
        if (requestData.fromDate && requestData.toDate) {
            if (!this.isToDateAfterFromDate(requestData.fromDate, requestData.toDate)) {
                errors.push('To Date ph·∫£i sau From Date');
            }
        }

        return errors;
    }

    static isValidDate(dateString) {
        const date = new Date(dateString);
        return date instanceof Date && !isNaN(date);
    }

    static isToDateAfterFromDate(fromDate, toDate) {
        const from = new Date(fromDate);
        const to = new Date(toDate);
        return to >= from;
    }
}

export default RecruitmentValidator;

==============================

üìÅ File: .\server\services\utils\error-handler.js
------------------------------
üèõÔ∏è  CLASSES:
   ‚Ä¢ ErrorHandler (d√≤ng 4)
üì§ EXPORTS:
   ‚Ä¢ ErrorHandler (d√≤ng 136)

üìÑ N·ªòI DUNG FILE:
==============================
// Centralized error handling utilities
import ResponseFormatter from './response-formatter.js';

class ErrorHandler {
    static handleLarkError(error) {
        if (error.response?.data?.code) {
            const larkCode = error.response.data.code;
            const larkMessage = error.response.data.msg || 'Lark API Error';
            
            switch (larkCode) {
                case 99991663:
                    return ResponseFormatter.formatError('App access token invalid', 'LARK_AUTH_ERROR');
                case 99991664:
                    return ResponseFormatter.formatError('Tenant access token invalid', 'LARK_AUTH_ERROR');
                case 99991665:
                    return ResponseFormatter.formatError('User access token invalid', 'LARK_AUTH_ERROR');
                case 230002:
                    return ResponseFormatter.formatError('Base not found', 'LARK_BASE_NOT_FOUND');
                case 230003:
                    return ResponseFormatter.formatError('Table not found', 'LARK_TABLE_NOT_FOUND');
                case 230004:
                    return ResponseFormatter.formatError('Record not found', 'LARK_RECORD_NOT_FOUND');
                case 1254006:
                    return ResponseFormatter.formatError('Rate limit exceeded', 'LARK_RATE_LIMIT');
                default:
                    return ResponseFormatter.formatError(`Lark API Error: ${larkMessage}`, 'LARK_API_ERROR');
            }
        }
        
        return ResponseFormatter.formatError('Unknown Lark API error', 'LARK_UNKNOWN_ERROR');
    }

    static handleValidationError(errors) {
        const message = Array.isArray(errors) ? errors.join(', ') : errors;
        return ResponseFormatter.formatError(message, 'VALIDATION_ERROR');
    }

    static handleDatabaseError(error) {
        console.error('Database error:', error);
        
        if (error.code === 'ECONNREFUSED') {
            return ResponseFormatter.formatError('Database connection failed', 'DATABASE_CONNECTION_ERROR');
        }
        
        if (error.code === 'ER_DUP_ENTRY') {
            return ResponseFormatter.formatError('Duplicate entry', 'DUPLICATE_ENTRY');
        }
        
        return ResponseFormatter.formatError('Database operation failed', 'DATABASE_ERROR');
    }

    static handleNetworkError(error) {
        console.error('Network error:', error);
        
        if (error.code === 'ENOTFOUND') {
            return ResponseFormatter.formatError('Service not found', 'SERVICE_NOT_FOUND');
        }
        
        if (error.code === 'ECONNRESET') {
            return ResponseFormatter.formatError('Connection reset', 'CONNECTION_RESET');
        }
        
        if (error.code === 'ETIMEDOUT') {
            return ResponseFormatter.formatError('Request timeout', 'REQUEST_TIMEOUT');
        }
        
        return ResponseFormatter.formatError('Network error', 'NETWORK_ERROR');
    }

    static handleGenericError(error, operation = 'operation') {
        console.error(`Error in ${operation}:`, error);
        
        // Check for specific error types
        if (error.isAxiosError) {
            if (error.response?.status === 401) {
                return ResponseFormatter.formatUnauthorized('Authentication required');
            }
            
            if (error.response?.status === 403) {
                return ResponseFormatter.formatForbidden('Access forbidden');
            }
            
            if (error.response?.status === 404) {
                return ResponseFormatter.formatNotFound('Resource');
            }
            
            if (error.response?.status >= 500) {
                return ResponseFormatter.formatServerError('External service error');
            }
            
            return this.handleLarkError(error);
        }
        
        // Check for validation errors
        if (error.name === 'ValidationError') {
            return this.handleValidationError(error.message);
        }
        
        // Check for database errors
        if (error.code && error.code.startsWith('ER_')) {
            return this.handleDatabaseError(error);
        }
        
        // Check for network errors
        if (error.code && ['ENOTFOUND', 'ECONNRESET', 'ETIMEDOUT'].includes(error.code)) {
            return this.handleNetworkError(error);
        }
        
        // Default generic error
        return ResponseFormatter.formatServerError(`Error in ${operation}: ${error.message}`);
    }

    static async wrapAsync(fn, operation = 'operation') {
        try {
            return await fn();
        } catch (error) {
            throw this.handleGenericError(error, operation);
        }
    }

    static logError(error, context = {}) {
        const errorInfo = {
            message: error.message,
            stack: error.stack,
            context,
            timestamp: new Date().toISOString()
        };
        
        console.error('Error logged:', JSON.stringify(errorInfo, null, 2));
        
        // In production, you might want to send this to a logging service
        // like Winston, Sentry, or CloudWatch
    }
}

export default ErrorHandler;

==============================

üìÅ File: .\server\services\utils\index.js
------------------------------
üì§ EXPORTS:
   ‚Ä¢ commonly (d√≤ng 6)
   ‚Ä¢  default as ResponseFormatter, formatResponse  (d√≤ng 2)
   ‚Ä¢  default as ServiceFactory  (d√≤ng 3)
   ‚Ä¢  default as ErrorHandler  (d√≤ng 4)
   ‚Ä¢ 
    getEmployeeService,
    getWorkHistoryService,
    getAttendanceService,
    getRecruitmentService,
    getStoreService,
    getPositionService,
    getAuthService,
    getSessionService
 (d√≤ng 7)

üìÑ N·ªòI DUNG FILE:
==============================
// Utilities services exports
export { default as ResponseFormatter, formatResponse } from './response-formatter.js';
export { default as ServiceFactory } from './service-factory.js';
export { default as ErrorHandler } from './error-handler.js';

// Re-export commonly used functions
export {
    getEmployeeService,
    getWorkHistoryService,
    getAttendanceService,
    getRecruitmentService,
    getStoreService,
    getPositionService,
    getAuthService,
    getSessionService
} from './service-factory.js';

==============================

üìÅ File: .\server\services\utils\response-formatter.js
------------------------------
üèõÔ∏è  CLASSES:
   ‚Ä¢ ResponseFormatter (d√≤ng 2)
üîß FUNCTIONS:
   ‚Ä¢ formatResponse (d√≤ng 81) - function declaration
üì§ EXPORTS:
   ‚Ä¢ function (d√≤ng 81)
   ‚Ä¢ ResponseFormatter (d√≤ng 85)

üìÑ N·ªòI DUNG FILE:
==============================
// Response formatting utilities
class ResponseFormatter {
    static formatResponse(success, message, data = null, errorCode = null) {
        const response = {
            success,
            message,
            timestamp: new Date().toISOString()
        };

        if (success && data) {
            response.data = data;
        }

        if (!success && errorCode) {
            response.errorCode = errorCode;
        }

        return response;
    }

    static formatSuccess(message, data = null) {
        return this.formatResponse(true, message, data);
    }

    static formatError(message, errorCode = null) {
        return this.formatResponse(false, message, null, errorCode);
    }

    static formatValidationError(errors) {
        return this.formatResponse(false, 'Validation failed', null, 'VALIDATION_ERROR');
    }

    static formatNotFound(resource) {
        return this.formatResponse(false, `${resource} not found`, null, 'NOT_FOUND');
    }

    static formatUnauthorized(message = 'Unauthorized access') {
        return this.formatResponse(false, message, null, 'UNAUTHORIZED');
    }

    static formatForbidden(message = 'Forbidden access') {
        return this.formatResponse(false, message, null, 'FORBIDDEN');
    }

    static formatServerError(message = 'Internal server error') {
        return this.formatResponse(false, message, null, 'SERVER_ERROR');
    }

    static formatPaginatedResponse(data, pagination) {
        return this.formatResponse(true, 'Success', {
            items: data,
            pagination: {
                page: pagination.page || 1,
                limit: pagination.limit || 10,
                total: pagination.total || 0,
                pages: Math.ceil((pagination.total || 0) / (pagination.limit || 10))
            }
        });
    }

    static formatBatchResponse(results) {
        const successCount = results.filter(r => r.success).length;
        const failureCount = results.length - successCount;

        return this.formatResponse(
            failureCount === 0,
            `Batch operation completed: ${successCount} successful, ${failureCount} failed`,
            {
                results,
                summary: {
                    total: results.length,
                    successful: successCount,
                    failed: failureCount
                }
            }
        );
    }
}

// Legacy function for backward compatibility
export function formatResponse(success, message, data = null, errorCode = null) {
    return ResponseFormatter.formatResponse(success, message, data, errorCode);
}

export default ResponseFormatter;

==============================

üìÅ File: .\server\services\utils\service-factory.js
------------------------------
üèõÔ∏è  CLASSES:
   ‚Ä¢ ServiceFactory (d√≤ng 9)
   ‚Ä¢ register (d√≤ng 15)
üîß FUNCTIONS:
   ‚Ä¢ getEmployeeService (d√≤ng 79) - arrow function
   ‚Ä¢ getWorkHistoryService (d√≤ng 80) - arrow function
   ‚Ä¢ getAttendanceService (d√≤ng 81) - arrow function
   ‚Ä¢ getRecruitmentService (d√≤ng 82) - arrow function
   ‚Ä¢ getStoreService (d√≤ng 83) - arrow function
   ‚Ä¢ getPositionService (d√≤ng 84) - arrow function
   ‚Ä¢ getAuthService (d√≤ng 85) - arrow function
   ‚Ä¢ getSessionService (d√≤ng 86) - arrow function
üì§ EXPORTS:
   ‚Ä¢ const (d√≤ng 79)
   ‚Ä¢ const (d√≤ng 80)
   ‚Ä¢ const (d√≤ng 81)
   ‚Ä¢ const (d√≤ng 82)
   ‚Ä¢ const (d√≤ng 83)
   ‚Ä¢ const (d√≤ng 84)
   ‚Ä¢ const (d√≤ng 85)
   ‚Ä¢ const (d√≤ng 86)
   ‚Ä¢ serviceFactory (d√≤ng 88)

üìÑ N·ªòI DUNG FILE:
==============================
// Service factory for dependency injection
import { EmployeeService } from '../employee/index.js';
import { WorkHistoryService } from '../employee/index.js';
import { AttendanceService } from '../attendance/index.js';
import { RecruitmentService } from '../recruitment/index.js';
import { StoreService, PositionService } from '../master-data/index.js';
import { AuthService, SessionService } from '../auth/index.js';

class ServiceFactory {
    constructor() {
        this.services = new Map();
        this.singletons = new Map();
    }

    // Register a service class
    register(name, ServiceClass, singleton = true) {
        this.services.set(name, { ServiceClass, singleton });
    }

    // Get service instance
    get(name) {
        const serviceConfig = this.services.get(name);
        if (!serviceConfig) {
            throw new Error(`Service '${name}' not found`);
        }

        const { ServiceClass, singleton } = serviceConfig;

        if (singleton) {
            if (!this.singletons.has(name)) {
                this.singletons.set(name, new ServiceClass());
            }
            return this.singletons.get(name);
        }

        return new ServiceClass();
    }

    // Initialize all services
    async initialize() {
        for (const [name, config] of this.services.entries()) {
            const service = this.get(name);
            if (service.init && typeof service.init === 'function') {
                await service.init();
            }
        }
    }

    // Clear all singleton instances
    clear() {
        this.singletons.clear();
    }

    // Get all service names
    getServiceNames() {
        return Array.from(this.services.keys());
    }

    // Check if service exists
    has(name) {
        return this.services.has(name);
    }
}

// Create and configure the global service factory
const serviceFactory = new ServiceFactory();

// Register core services
serviceFactory.register('employee', EmployeeService, true);
serviceFactory.register('workHistory', WorkHistoryService, true);
serviceFactory.register('attendance', AttendanceService, true);
serviceFactory.register('recruitment', RecruitmentService, true);
serviceFactory.register('store', StoreService, true);
serviceFactory.register('position', PositionService, true);
serviceFactory.register('auth', AuthService, true);
serviceFactory.register('session', SessionService, true);

// Helper functions for common service access
export const getEmployeeService = () => serviceFactory.get('employee');
export const getWorkHistoryService = () => serviceFactory.get('workHistory');
export const getAttendanceService = () => serviceFactory.get('attendance');
export const getRecruitmentService = () => serviceFactory.get('recruitment');
export const getStoreService = () => serviceFactory.get('store');
export const getPositionService = () => serviceFactory.get('position');
export const getAuthService = () => serviceFactory.get('auth');
export const getSessionService = () => serviceFactory.get('session');

export default serviceFactory;

==============================

üìÅ File: .\src\App.jsx
------------------------------
üîß FUNCTIONS:
   ‚Ä¢ App (d√≤ng 22) - arrow function
   ‚Ä¢ initializeGlobalUtilities (d√≤ng 70) - arrow function
   ‚Ä¢ isProtectedPage (d√≤ng 86) - arrow function
   ‚Ä¢ isPublicPage (d√≤ng 91) - arrow function
üì§ EXPORTS:
   ‚Ä¢ App (d√≤ng 192)

üìÑ N·ªòI DUNG FILE:
==============================
import React, { useEffect, useState } from 'react';
import { Routes, Route, Navigate, useLocation } from 'react-router-dom';
import { useAuth } from './hooks/useAuth';
import { useNotification } from './hooks/useNotification';

// Components
import Layout from './components/layout/Layout';
import Loading from './components/common/Loading';
import ProtectedRoute from './components/auth/ProtectedRoute';

// Pages
import LoginPage from './pages/LoginPage';
import DashboardPage from './pages/DashboardPage';
import EmployeeManagementPage from './pages/EmployeeManagementPage';
import AttendanceLogsPage from './pages/AttendanceLogsPage';
import HRDashboardPage from './pages/HRDashboardPage';


// Global styles
import './styles/globals.css';

const App = () => {
  const [loading, setLoading] = useState(true);
  const [initialized, setInitialized] = useState(false);
  const { user, checkAuth, loading: authLoading } = useAuth();
  const { showNotification } = useNotification();
  const location = useLocation();

  useEffect(() => {
    const initializeApp = async () => {
      try {
        console.log('üöÄ Starting React app initialization...');
        
        // Initialize global utilities
        initializeGlobalUtilities();
        
        // Check authentication for protected pages
        if (isProtectedPage()) {
          console.log('üîê Checking authentication...');
          const authUser = await checkAuth();
          if (!authUser && !isPublicPage()) {
            console.log('‚ùå Authentication failed for protected page');
            return;
          }
          console.log('‚úÖ Authentication check completed');
        }
        
        setInitialized(true);
        console.log('‚úÖ React app initialization completed successfully');
        
      } catch (error) {
        console.error('‚ùå App initialization error:', error);
        
        // More specific error handling
        if (error.name === 'TypeError') {
          showNotification('L·ªói t·∫£i module. Vui l√≤ng refresh trang.', 'error');
        } else if (error.message.includes('fetch')) {
          showNotification('L·ªói k·∫øt n·ªëi server. Vui l√≤ng ki·ªÉm tra m·∫°ng.', 'error');
        } else {
          showNotification('L·ªói kh·ªüi t·∫°o ·ª©ng d·ª•ng. Vui l√≤ng refresh trang.', 'error');
        }
      } finally {
        setLoading(false);
      }
    };

    initializeApp();
  }, []);

  const initializeGlobalUtilities = () => {
    try {
      // Initialize tooltips safely
      if (typeof window.bootstrap !== 'undefined') {
        const tooltipTriggerList = [].slice.call(
          document.querySelectorAll('[data-bs-toggle="tooltip"]')
        );
        tooltipTriggerList.map(tooltipTriggerEl => {
          return new window.bootstrap.Tooltip(tooltipTriggerEl);
        });
      }
    } catch (error) {
      console.warn('Error initializing tooltips:', error);
    }
  };

  const isProtectedPage = () => {
    const publicPaths = ['/', '/login'];
    return !publicPaths.includes(location.pathname);
  };

  const isPublicPage = () => {
    const publicPaths = ['/', '/login'];
    return publicPaths.includes(location.pathname);
  };

  // Show loading spinner during initialization
  if (loading || authLoading) {
    return (
      <div className="d-flex justify-content-center align-items-center min-vh-100">
        <Loading />
      </div>
    );
  }

  // Show error message if initialization failed
  if (!initialized) {
    return (
      <div className="container mt-5">
        <div className="alert alert-danger">
          <h4>L·ªói kh·ªüi t·∫°o ·ª©ng d·ª•ng</h4>
          <p>Kh√¥ng th·ªÉ kh·ªüi t·∫°o ·ª©ng d·ª•ng. Vui l√≤ng:</p>
          <ul>
            <li>Refresh l·∫°i trang (F5)</li>
            <li>Ki·ªÉm tra k·∫øt n·ªëi m·∫°ng</li>
            <li>Li√™n h·ªá IT support n·∫øu v·∫•n ƒë·ªÅ v·∫´n ti·∫øp t·ª•c</li>
          </ul>
          <button 
            className="btn btn-primary" 
            onClick={() => window.location.reload()}
          >
            Refresh Trang
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className="App">
      <Routes>
        {/* Public routes */}
        <Route 
          path="/login" 
          element={
            user ? <Navigate to="/dashboard" replace /> : <LoginPage />
          } 
        />
        
        {/* Protected routes with Layout */}
        <Route 
          path="/" 
          element={
            <ProtectedRoute>
              <Layout />
            </ProtectedRoute>
          }
        >
          {/* Default redirect */}
          <Route index element={<Navigate to="/dashboard" replace />} />
          
          {/* Dashboard routes */}
          <Route path="dashboard" element={<DashboardPage />} />
          <Route 
            path="hr-dashboard" 
            element={
              <ProtectedRoute requiredRoles={['hr', 'admin']}>
                <HRDashboardPage />
              </ProtectedRoute>
            } 
          />
          
          {/* Employee management routes */}
          <Route 
            path="employee-management" 
            element={
              <ProtectedRoute requiredRoles={['hr', 'admin']}>
                <EmployeeManagementPage />
              </ProtectedRoute>
            } 
          />
          
          {/* Attendance routes */}
          <Route path="attendance-logs" element={<AttendanceLogsPage />} />
        </Route>

        {/* Catch all route */}
        <Route 
          path="*" 
          element={
            user ? (
              <Navigate to="/dashboard" replace />
            ) : (
              <Navigate to="/login" replace />
            )
          } 
        />
      </Routes>
    </div>
  );
};

export default App;

==============================

üìÅ File: .\src\main.jsx
------------------------------

üìÑ N·ªòI DUNG FILE:
==============================
import React from 'react';
import ReactDOM from 'react-dom/client';
import { BrowserRouter } from 'react-router-dom';
import App from './App.jsx';
import { AuthProvider } from './contexts/AuthContext.jsx';
import { NotificationProvider } from './contexts/NotificationContext.jsx';

// Import Bootstrap CSS v√† FontAwesome
import 'bootstrap/dist/css/bootstrap.min.css';
import 'bootstrap/dist/js/bootstrap.bundle.min.js';
import '@fortawesome/fontawesome-free/css/all.min.css';
import './styles/globals.css';

// Global error handler
window.addEventListener('error', (e) => {
  console.error('Global error:', e.error);
  console.error('Error details:', {
    message: e.message,
    filename: e.filename,
    lineno: e.lineno,
    colno: e.colno
  });
});

// Global unhandled promise rejection handler
window.addEventListener('unhandledrejection', (e) => {
  console.error('Unhandled promise rejection:', e.reason);
  console.error('Promise:', e.promise);
});

// Initialize tooltips when DOM is ready
document.addEventListener('DOMContentLoaded', () => {
  if (typeof window.bootstrap !== 'undefined') {
    const tooltipTriggerList = [].slice.call(
      document.querySelectorAll('[data-bs-toggle="tooltip"]')
    );
    tooltipTriggerList.map(tooltipTriggerEl => {
      return new window.bootstrap.Tooltip(tooltipTriggerEl);
    });
  }
});

ReactDOM.createRoot(document.getElementById('root')).render(
  <React.StrictMode>
    <BrowserRouter>
      <AuthProvider>
        <NotificationProvider>
          <App />
        </NotificationProvider>
      </AuthProvider>
    </BrowserRouter>
  </React.StrictMode>
);

==============================

üìÅ File: .\src\components\attendance\AttendanceFilters.jsx
------------------------------
üîß FUNCTIONS:
   ‚Ä¢ AttendanceFilters (d√≤ng 3) - arrow function
   ‚Ä¢ handleFilterSubmit (d√≤ng 9) - arrow function
üì§ EXPORTS:
   ‚Ä¢ AttendanceFilters (d√≤ng 87)

üìÑ N·ªòI DUNG FILE:
==============================
import React from 'react';

const AttendanceFilters = ({ 
  employees, 
  filters, 
  onFilterChange, 
  onClearFilters 
}) => {
  const handleFilterSubmit = (e) => {
    e.preventDefault();
    const formData = new FormData(e.target);
    const newFilters = {
      employeeId: formData.get('employeeId'),
      dateFrom: formData.get('dateFrom'),
      dateTo: formData.get('dateTo')
    };
    
    // Remove empty filters
    Object.keys(newFilters).forEach(key => {
      if (!newFilters[key]) delete newFilters[key];
    });
    
    onFilterChange(newFilters);
  };

  return (
    <form onSubmit={handleFilterSubmit} id="filterForm">
      <div className="row">
        <div className="col-md-4">
          <label className="form-label">Nh√¢n vi√™n</label>
          <select 
            className="form-select" 
            name="employeeId"
            defaultValue={filters.employeeId || ''}
          >
            <option value="">T·∫•t c·∫£ nh√¢n vi√™n</option>
            {employees.map(employee => (
              <option key={employee.id} value={employee.employeeId}>
                {employee.employeeId} - {employee.fullName}
              </option>
            ))}
          </select>
        </div>
        
        <div className="col-md-3">
          <label className="form-label">T·ª´ ng√†y</label>
          <input 
            type="date" 
            className="form-control" 
            name="dateFrom"
            defaultValue={filters.dateFrom || ''}
          />
        </div>
        
        <div className="col-md-3">
          <label className="form-label">ƒê·∫øn ng√†y</label>
          <input 
            type="date" 
            className="form-control" 
            name="dateTo"
            defaultValue={filters.dateTo || ''}
          />
        </div>
        
        <div className="col-md-2">
          <label className="form-label">&nbsp;</label>
          <div className="d-grid gap-2">
            <button type="submit" className="btn btn-primary">
              <i className="fas fa-search me-2"></i>
              L·ªçc
            </button>
            <button 
              type="button" 
              className="btn btn-outline-secondary"
              onClick={onClearFilters}
            >
              <i className="fas fa-times me-2"></i>
              X√≥a
            </button>
          </div>
        </div>
      </div>
    </form>
  );
};

export default AttendanceFilters;

==============================

üìÅ File: .\src\components\attendance\AttendanceLogs.jsx
------------------------------
üîß FUNCTIONS:
   ‚Ä¢ AttendanceLogs (d√≤ng 3) - arrow function
üì§ EXPORTS:
   ‚Ä¢ AttendanceLogs (d√≤ng 45)

üìÑ N·ªòI DUNG FILE:
==============================
import React from 'react';

const AttendanceLogs = ({ logs }) => {
  if (!logs || logs.length === 0) {
    return (
      <div className="text-center py-4">
        <i className="fas fa-calendar-times fa-3x text-muted mb-3"></i>
        <p className="text-muted">Kh√¥ng c√≥ b·∫£n ghi ch·∫•m c√¥ng n√†o</p>
      </div>
    );
  }

  return (
    <div className="table-responsive">
      <table className="table table-striped table-hover">
        <thead className="table-dark">
          <tr>
            <th>M√£ nh√¢n vi√™n</th>
            <th>Ng√†y</th>
            <th>Gi·ªù v√†o</th>
            <th>Gi·ªù ra</th>
            <th>T·ªïng gi·ªù</th>
            <th>Ghi ch√∫</th>
          </tr>
        </thead>
        <tbody>
          {logs.map((log, index) => (
            <tr key={log.id || index}>
              <td>{log.employeeId}</td>
              <td>{log.date}</td>
              <td>{log.timeIn}</td>
              <td>{log.timeOut}</td>
              <td>
                <strong className="text-primary">{log.totalHours}</strong>
              </td>
              <td>{log.notes}</td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
};

export default AttendanceLogs;

==============================

üìÅ File: .\src\components\attendance\EmployeeHours.jsx
------------------------------
üîß FUNCTIONS:
   ‚Ä¢ EmployeeHours (d√≤ng 3) - arrow function
üì§ EXPORTS:
   ‚Ä¢ EmployeeHours (d√≤ng 69)

üìÑ N·ªòI DUNG FILE:
==============================
import React from 'react';

const EmployeeHours = ({ employees, employeeHours }) => {
  const hoursData = employees
    .map(employee => {
      const hours = employeeHours[employee.employeeId];
      return {
        ...employee,
        totalHours: hours ? hours.totalHours : 0
      };
    })
    .filter(emp => emp.totalHours > 0)
    .sort((a, b) => b.totalHours - a.totalHours);

  if (hoursData.length === 0) {
    return (
      <div className="text-center py-4">
        <i className="fas fa-clock fa-3x text-muted mb-3"></i>
        <p className="text-muted">Kh√¥ng c√≥ d·ªØ li·ªáu gi·ªù c√¥ng</p>
      </div>
    );
  }

  return (
    <div className="table-responsive">
      <table className="table table-striped table-hover">
        <thead className="table-dark">
          <tr>
            <th>M√£ nh√¢n vi√™n</th>
            <th>H·ªç t√™n</th>
            <th>T·ªïng gi·ªù c√¥ng</th>
            <th>S·ªë ng√†y</th>
            <th>Trung b√¨nh/ng√†y</th>
          </tr>
        </thead>
        <tbody>
          {hoursData.map((employee) => {
            const hours = employeeHours[employee.employeeId];
            const avgHours = hours ? (hours.totalHours / (hours.totalDays || 1)) : 0;
            
            return (
              <tr key={employee.id}>
                <td>{employee.employeeId}</td>
                <td>{employee.fullName}</td>
                <td>
                  <strong className="text-success">
                    {employee.totalHours.toFixed(1)} gi·ªù
                  </strong>
                </td>
                <td>
                  <span className="badge bg-info">
                    {hours ? hours.totalDays : 0} ng√†y
                  </span>
                </td>
                <td>
                  <span className="text-muted">
                    {avgHours.toFixed(1)} gi·ªù/ng√†y
                  </span>
                </td>
              </tr>
            );
          })}
        </tbody>
      </table>
    </div>
  );
};

export default EmployeeHours;

==============================

üìÅ File: .\src\components\auth\LoginForm.jsx
------------------------------

üìÑ N·ªòI DUNG FILE:
==============================

==============================

üìÅ File: .\src\components\auth\ProtectedRoute.jsx
------------------------------
üîß FUNCTIONS:
   ‚Ä¢ ProtectedRoute (d√≤ng 6) - arrow function
üì§ EXPORTS:
   ‚Ä¢ ProtectedRoute (d√≤ng 39)

üìÑ N·ªòI DUNG FILE:
==============================
import React from 'react';
import { Navigate, useLocation } from 'react-router-dom';
import { useAuth } from '../../hooks/useAuth';
import Loading from '../common/Loading';

const ProtectedRoute = ({ children, requiredRoles = [] }) => {
  const { user, loading } = useAuth();
  const location = useLocation();

  if (loading) {
    return <Loading fullScreen text="ƒêang ki·ªÉm tra quy·ªÅn truy c·∫≠p..." />;
  }

  if (!user) {
    return <Navigate to="/login" state={{ from: location }} replace />;
  }

  // Check role-based access
  if (requiredRoles.length > 0 && !requiredRoles.includes(user.role)) {
    return (
      <div className="container mt-5">
        <div className="alert alert-danger">
          <h4>Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p</h4>
          <p>B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p v√†o trang n√†y.</p>
          <button 
            className="btn btn-primary" 
            onClick={() => window.history.back()}
          >
            Quay l·∫°i
          </button>
        </div>
      </div>
    );
  }

  return children;
};

export default ProtectedRoute;

==============================

üìÅ File: .\src\components\common\Alert.jsx
------------------------------

üìÑ N·ªòI DUNG FILE:
==============================

==============================

üìÅ File: .\src\components\common\Loading.jsx
------------------------------
üîß FUNCTIONS:
   ‚Ä¢ Loading (d√≤ng 3) - arrow function
   ‚Ä¢ getSizeClass (d√≤ng 9) - arrow function
   ‚Ä¢ LoadingSpinner (d√≤ng 17) - arrow function
   ‚Ä¢ LoadingWrapper (d√≤ng 67) - arrow function
   ‚Ä¢ ButtonLoading (d√≤ng 75) - arrow function
üì§ EXPORTS:
   ‚Ä¢ const (d√≤ng 67)
   ‚Ä¢ const (d√≤ng 75)
   ‚Ä¢ Loading (d√≤ng 90)

üìÑ N·ªòI DUNG FILE:
==============================
import React from 'react';

const Loading = ({ 
  size = 'medium', 
  text = 'ƒêang t·∫£i...', 
  overlay = false,
  fullScreen = false 
}) => {
  const getSizeClass = () => {
    switch (size) {
      case 'small': return 'spinner-border-sm';
      case 'large': return 'spinner-border spinner-border-lg';
      default: return 'spinner-border';
    }
  };

  const LoadingSpinner = () => (
    <div className="d-flex flex-column align-items-center justify-content-center p-3">
      <div className={`${getSizeClass()} text-primary`} role="status">
        <span className="visually-hidden">Loading...</span>
      </div>
      {text && (
        <div className="mt-2 text-muted small">
          {text}
        </div>
      )}
    </div>
  );

  if (fullScreen) {
    return (
      <div 
        className="position-fixed top-0 start-0 w-100 h-100 d-flex align-items-center justify-content-center"
        style={{ 
          backgroundColor: 'rgba(255, 255, 255, 0.9)', 
          zIndex: 9999 
        }}
      >
        <div className="text-center">
          <div className="spinner-border spinner-border-lg text-primary" role="status">
            <span className="visually-hidden">Loading...</span>
          </div>
          <div className="mt-3 h5 text-muted">{text}</div>
        </div>
      </div>
    );
  }

  if (overlay) {
    return (
      <div 
        className="position-absolute top-0 start-0 w-100 h-100 d-flex align-items-center justify-content-center"
        style={{ 
          backgroundColor: 'rgba(255, 255, 255, 0.8)', 
          zIndex: 1000 
        }}
      >
        <LoadingSpinner />
      </div>
    );
  }

  return <LoadingSpinner />;
};

// Loading wrapper component for conditional loading states
export const LoadingWrapper = ({ loading, children, ...loadingProps }) => {
  if (loading) {
    return <Loading {...loadingProps} />;
  }
  return children;
};

// Inline loading component for buttons
export const ButtonLoading = ({ loading, children, disabled, ...props }) => {
  return (
    <button 
      {...props} 
      disabled={disabled || loading}
      className={`${props.className || ''} ${loading ? 'position-relative' : ''}`}
    >
      {loading && (
        <span className="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
      )}
      {children}
    </button>
  );
};

export default Loading;

==============================

üìÅ File: .\src\components\common\Modal.jsx
------------------------------
üîß FUNCTIONS:
   ‚Ä¢ Modal (d√≤ng 4) - arrow function
   ‚Ä¢ handleBackdropClick (d√≤ng 7) - arrow function
üì§ EXPORTS:
   ‚Ä¢ Modal (d√≤ng 38)

üìÑ N·ªòI DUNG FILE:
==============================
// src/components/common/Modal.jsx
import React from 'react';

const Modal = ({ isOpen, onClose, title, children, size = 'md' }) => {
  if (!isOpen) return null;

  const handleBackdropClick = (e) => {
    if (e.target === e.currentTarget) {
      onClose();
    }
  };

  return (
    <div 
      className="modal fade show d-block" 
      style={{ backgroundColor: 'rgba(0,0,0,0.5)' }}
      onClick={handleBackdropClick}
    >
      <div className={`modal-dialog modal-${size} modal-dialog-centered`}>
        <div className="modal-content">
          <div className="modal-header">
            <h5 className="modal-title">{title}</h5>
            <button 
              type="button" 
              className="btn-close" 
              onClick={onClose}
            ></button>
          </div>
          <div className="modal-body">
            {children}
          </div>
        </div>
      </div>
    </div>
  );
};

export default Modal;

==============================

üìÅ File: .\src\components\common\Table.jsx
------------------------------

üìÑ N·ªòI DUNG FILE:
==============================

==============================

üìÅ File: .\src\components\dashboard\Dashboard.jsx
------------------------------
üîß FUNCTIONS:
   ‚Ä¢ Dashboard (d√≤ng 8) - arrow function
üì§ EXPORTS:
   ‚Ä¢ Dashboard (d√≤ng 206)

üìÑ N·ªòI DUNG FILE:
==============================
// src/components/dashboard/Dashboard.jsx
import React, { useState, useEffect } from 'react';
import { useAuth } from '../../hooks/useAuth';
import { ApiClient } from '../../services/api';
import Loading from '../common/Loading';
import { useNotification } from '../../hooks/useNotification';

const Dashboard = () => {
  const [stats, setStats] = useState({});
  const [loading, setLoading] = useState(true);
  const { user } = useAuth();
  const { showNotification } = useNotification();

  useEffect(() => {
    loadStats();
    
    // Auto refresh every 5 minutes
    const interval = setInterval(loadStats, 5 * 60 * 1000);
    return () => clearInterval(interval);
  }, []);

  const loadStats = async () => {
    try {
      console.log('üîç Dashboard: Loading stats...');
      const response = await ApiClient.get('/api/employees/stats');
      
      console.log('üì® Dashboard: Raw response:', response);
      console.log('‚úÖ Dashboard: Response success:', response.success);
      console.log('üìä Dashboard: Response data:', response.data);
      
      // ‚úÖ FIX: S·ª≠ d·ª•ng response.data thay v√¨ response
      if (response.success && response.data) {
        console.log('‚úÖ Dashboard: Setting stats to:', response.data);
        setStats(response.data);
      } else {
        console.warn('‚ö†Ô∏è Dashboard: API returned success: false');
        showNotification('Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu th·ªëng k√™', 'warning');
      }
      
    } catch (error) {
      console.error('‚ùå Dashboard: Error loading stats:', error);
      showNotification('L·ªói khi t·∫£i th·ªëng k√™ dashboard', 'error');
    } finally {
      setLoading(false);
    }
  };

  const handleRefresh = async () => {
    setLoading(true);
    await loadStats();
    showNotification('ƒê√£ c·∫≠p nh·∫≠t d·ªØ li·ªáu dashboard', 'success');
  };

  // ‚úÖ DEBUG: Log current stats state
  console.log('üéØ Dashboard render - Current stats:', stats);
  console.log('üéØ Dashboard render - Loading:', loading);

  if (loading) {
    return <Loading fullScreen text="ƒêang t·∫£i dashboard..." />;
  }

  return (
    <div className="dashboard-page">
      {/* ‚úÖ DEBUG INFO - Remove this after fixing */}
      <div style={{ 
        background: '#f8f9fa', 
        border: '1px solid #dee2e6', 
        borderRadius: '0.25rem', 
        padding: '1rem', 
        marginBottom: '1rem' 
      }}>
        <h6 className="text-muted mb-2">üêõ DEBUG INFO:</h6>
        <small className="d-block">Raw stats: {JSON.stringify(stats)}</small>
        <small className="d-block">Total Employees: {stats.totalEmployees}</small>
        <small className="d-block">Active Employees: {stats.activeEmployees}</small>
        <small className="d-block">Inactive Employees: {stats.inactiveEmployees}</small>
      </div>

      {/* Header */}
      <div className="d-flex justify-content-between align-items-center mb-4">
        <div>
          <h1>Dashboard</h1>
          <p className="text-muted mb-0">Ch√†o m·ª´ng tr·ªü l·∫°i, {user?.fullName}!</p>
        </div>
        <button 
          className="btn btn-outline-primary"
          onClick={handleRefresh}
          disabled={loading}
        >
          <i className={`fas fa-sync-alt me-2 ${loading ? 'fa-spin' : ''}`}></i>
          L√†m m·ªõi
        </button>
      </div>

      {/* Stats Cards */}
      <div className="row mb-4">
        <div className="col-md-4 mb-3">
          <div className="card text-center bg-primary text-white h-100">
            <div className="card-body">
              <i className="fas fa-users fa-3x mb-3"></i>
              <h2 className="card-title" id="totalEmployees">
                {stats.totalEmployees || 0}
              </h2>
              <p className="card-text">T·ªïng nh√¢n vi√™n</p>
            </div>
          </div>
        </div>

        <div className="col-md-4 mb-3">
          <div className="card text-center bg-success text-white h-100">
            <div className="card-body">
              <i className="fas fa-user-check fa-3x mb-3"></i>
              <h2 className="card-title" id="activeEmployees">
                {stats.activeEmployees || 0}
              </h2>
              <p className="card-text">Nh√¢n vi√™n ho·∫°t ƒë·ªông</p>
            </div>
          </div>
        </div>

        <div className="col-md-4 mb-3">
          <div className="card text-center bg-info text-white h-100">
            <div className="card-body">
              <i className="fas fa-user-times fa-3x mb-3"></i>
              <h2 className="card-title" id="inactiveEmployees">
                {stats.inactiveEmployees || 0}
              </h2>
              <p className="card-text">Nh√¢n vi√™n kh√¥ng ho·∫°t ƒë·ªông</p>
            </div>
          </div>
        </div>
      </div>

      {/* Quick Actions */}
      <div className="row">
        <div className="col-12">
          <div className="card">
            <div className="card-header">
              <h5 className="card-title mb-0">Truy c·∫≠p nhanh</h5>
            </div>
            <div className="card-body">
              <div className="row">
                <div className="col-md-4 mb-3">
                  <a href="/attendance-logs" className="btn btn-outline-info w-100 h-100 d-flex flex-column justify-content-center">
                    <i className="fas fa-clock fa-2x mb-2"></i>
                    <span>Xem ch·∫•m c√¥ng</span>
                  </a>
                </div>

                {(user?.role === 'hr' || user?.role === 'admin') && (
                  <>
                    <div className="col-md-4 mb-3">
                      <a href="/employee-management" className="btn btn-outline-primary w-100 h-100 d-flex flex-column justify-content-center">
                        <i className="fas fa-users-cog fa-2x mb-2"></i>
                        <span>Qu·∫£n l√Ω nh√¢n vi√™n</span>
                      </a>
                    </div>
                    
                    <div className="col-md-4 mb-3">
                      <a href="/hr-dashboard" className="btn btn-outline-success w-100 h-100 d-flex flex-column justify-content-center">
                        <i className="fas fa-chart-bar fa-2x mb-2"></i>
                        <span>HR Dashboard</span>
                      </a>
                    </div>
                  </>
                )}
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* HR Functions */}
      {(user?.role === 'hr' || user?.role === 'admin') && (
        <div className="row mt-4">
          <div className="col-12">
            <div className="card">
              <div className="card-body text-center">
                <h5>Ch·ª©c nƒÉng HR</h5>
                <p className="text-muted">Truy c·∫≠p c√°c c√¥ng c·ª• d√†nh cho HR</p>
                <a 
                  href="https://forms.google.com/your-form-url" 
                  target="_blank"
                  rel="noopener noreferrer"
                  className="btn btn-outline-success me-2"
                >
                  <i className="fas fa-external-link-alt me-2"></i>
                  M·ªü Google Form tuy·ªÉn d·ª•ng
                </a>
                <a 
                  href="/hr-dashboard" 
                  className="btn btn-primary"
                >
                  <i className="fas fa-chart-line me-2"></i>
                  Xem b√°o c√°o HR
                </a>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default Dashboard;

==============================

üìÅ File: .\src\components\dashboard\HRDashboard.jsx
------------------------------

üìÑ N·ªòI DUNG FILE:
==============================

==============================

üìÅ File: .\src\components\dashboard\StatsCard.jsx
------------------------------

üìÑ N·ªòI DUNG FILE:
==============================

==============================

üìÅ File: .\src\components\employee\AddWorkHistoryModal.jsx
------------------------------
üîß FUNCTIONS:
   ‚Ä¢ AddWorkHistoryModal (d√≤ng 9) - arrow function
   ‚Ä¢ handleRecruitmentSelect (d√≤ng 15) - arrow function
üì§ EXPORTS:
   ‚Ä¢ AddWorkHistoryModal (d√≤ng 153)

üìÑ N·ªòI DUNG FILE:
==============================
// src/components/employee/AddWorkHistoryModal.jsx
import React, { useState } from 'react';
import { addWorkHistory } from '../../services/employee.js';
import { useNotification } from '../../hooks/useNotification';
import { ButtonLoading } from '../common/Loading';
import Modal from '../common/Modal';
import RecruitmentModal from './RecruitmentModal';

const AddWorkHistoryModal = ({ isOpen, onClose, employeeId, employeeName, onWorkHistoryAdded }) => {
  const [selectedRecruitment, setSelectedRecruitment] = useState(null);
  const [showRecruitmentModal, setShowRecruitmentModal] = useState(false);
  const [loading, setLoading] = useState(false);
  const { showNotification } = useNotification();

  const handleRecruitmentSelect = (recruitments) => {
    if (recruitments && recruitments.length > 0) {
      setSelectedRecruitment(recruitments[0]); // Ch·ªâ ch·ªçn 1
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    
    if (!selectedRecruitment) {
      showNotification('Vui l√≤ng ch·ªçn ƒë·ªÅ xu·∫•t tuy·ªÉn d·ª•ng', 'error');
      return;
    }

    setLoading(true);
    
    try {
      const workHistoryData = {
        employeeId: employeeId,
        requestNo: selectedRecruitment.requestNo
      };

      const response = await addWorkHistory(workHistoryData);
      
      if (response.success) {
        showNotification('Th√™m work history th√†nh c√¥ng!', 'success');
        onWorkHistoryAdded?.();
        onClose();
        setSelectedRecruitment(null);
      } else {
        showNotification(response.message || 'L·ªói khi th√™m work history', 'error');
      }
      
    } catch (error) {
      console.error('‚ùå Error adding work history:', error);
      showNotification(error.message || 'L·ªói k·∫øt n·ªëi ƒë·∫øn server. Vui l√≤ng th·ª≠ l·∫°i.', 'error');
    } finally {
      setLoading(false);
    }
  };

  if (!isOpen) return null;

  return (
    <>
      <Modal 
        isOpen={isOpen} 
        onClose={onClose}
        title={`Th√™m Work History - ${employeeName || employeeId}`}
        size="md"
      >
        <form onSubmit={handleSubmit}>
          <div className="mb-3">
            <label className="form-label">M√£ nh√¢n vi√™n</label>
            <input
              type="text"
              className="form-control"
              value={employeeId}
              disabled
            />
          </div>

          <div className="mb-3">
            <label className="form-label">ƒê·ªÅ xu·∫•t tuy·ªÉn d·ª•ng *</label>
            
            <div className="d-flex align-items-center gap-2 mb-2">
              <button
                type="button"
                className="btn btn-outline-primary"
                onClick={() => setShowRecruitmentModal(true)}
              >
                <i className="fas fa-plus me-2"></i>
                Ch·ªçn ƒë·ªÅ xu·∫•t
              </button>
              
              {selectedRecruitment && (
                <span className="badge bg-success">
                  <i className="fas fa-check me-1"></i>
                  ƒê√£ ch·ªçn
                </span>
              )}
            </div>

            {selectedRecruitment && (
              <div className="mt-2">
                <div className="card">
                  <div className="card-body py-2">
                    <div className="d-flex justify-content-between align-items-center">
                      <div>
                        <strong>{selectedRecruitment.requestNo}</strong> - {selectedRecruitment.department}
                        <br />
                        <small className="text-muted">
                          {selectedRecruitment.quantity} ng∆∞·ªùi ‚Ä¢ {selectedRecruitment.gender}
                        </small>
                      </div>
                      <button
                        type="button"
                        className="btn btn-outline-danger btn-sm"
                        onClick={() => setSelectedRecruitment(null)}
                      >
                        <i className="fas fa-times"></i>
                      </button>
                    </div>
                  </div>
                </div>
              </div>
            )}
          </div>

          <div className="d-flex gap-2 justify-content-end">
            <button type="button" className="btn btn-secondary" onClick={onClose}>
              H·ªßy
            </button>
            <ButtonLoading
              type="submit"
              className="btn btn-primary"
              loading={loading}
              disabled={loading || !selectedRecruitment}
            >
              {loading ? 'ƒêang th√™m...' : 'Th√™m Work History'}
            </ButtonLoading>
          </div>
        </form>
      </Modal>

      {showRecruitmentModal && (
        <RecruitmentModal
          isOpen={showRecruitmentModal}
          onClose={() => setShowRecruitmentModal(false)}
          onRecruitmentSelected={handleRecruitmentSelect}
          selectedRecruitment={selectedRecruitment}
          singleSelect={true}
        />
      )}
    </>
  );
};

export default AddWorkHistoryModal;

==============================

üìÅ File: .\src\components\employee\EmployeeEditModal.jsx
------------------------------
üîß FUNCTIONS:
   ‚Ä¢ EmployeeEditModal (d√≤ng 8) - arrow function
   ‚Ä¢ handleInputChange (d√≤ng 38) - arrow function
   ‚Ä¢ validateForm (d√≤ng 53) - arrow function
üì§ EXPORTS:
   ‚Ä¢ EmployeeEditModal (d√≤ng 256)

üìÑ N·ªòI DUNG FILE:
==============================
// src/components/employee/EmployeeEditModal.jsx
import React, { useState, useEffect } from 'react';
import { updateEmployee } from '../../services/employee.js';
import { useNotification } from '../../hooks/useNotification';
import { ButtonLoading } from '../common/Loading';
import Modal from '../common/Modal';

const EmployeeEditModal = ({ isOpen, onClose, employee, onEmployeeUpdated }) => {
  const [formData, setFormData] = useState({
    fullName: '',
    phoneNumber: '',
    gender: '',
    hourlyRate: '',
    bankAccount: '',
    bankName: '',
    status: 'active'
  });
  const [formErrors, setFormErrors] = useState({});
  const [loading, setLoading] = useState(false);
  const { showNotification } = useNotification();

  // Load employee data when modal opens
  useEffect(() => {
    if (employee && isOpen) {
      setFormData({
        fullName: employee.fullName || '',
        phoneNumber: employee.phoneNumber || '',
        gender: employee.gender || '',
        hourlyRate: employee.hourlyRate || '',
        bankAccount: employee.bankAccount || '',
        bankName: employee.bankName || '',
        status: employee.status || 'active'
      });
      setFormErrors({});
    }
  }, [employee, isOpen]);

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
    
    if (formErrors[name]) {
      setFormErrors(prev => ({
        ...prev,
        [name]: ''
      }));
    }
  };

  const validateForm = () => {
    const newErrors = {};
    
    if (!formData.fullName.trim()) {
      newErrors.fullName = 'H·ªç t√™n l√† b·∫Øt bu·ªôc';
    }
    
    if (!formData.phoneNumber.trim()) {
      newErrors.phoneNumber = 'S·ªë ƒëi·ªán tho·∫°i l√† b·∫Øt bu·ªôc';
    } else if (!/^\d{10,11}$/.test(formData.phoneNumber)) {
      newErrors.phoneNumber = 'S·ªë ƒëi·ªán tho·∫°i kh√¥ng h·ª£p l·ªá';
    }
    
    if (!formData.gender) {
      newErrors.gender = 'Gi·ªõi t√≠nh l√† b·∫Øt bu·ªôc';
    }
    
    if (!formData.hourlyRate || parseFloat(formData.hourlyRate) <= 0) {
      newErrors.hourlyRate = 'M·ª©c l∆∞∆°ng/gi·ªù ph·∫£i l·ªõn h∆°n 0';
    }
    
    if (!formData.bankAccount.trim()) {
      newErrors.bankAccount = 'S·ªë t√†i kho·∫£n l√† b·∫Øt bu·ªôc';
    }
    
    if (!formData.bankName.trim()) {
      newErrors.bankName = 'Ng√¢n h√†ng l√† b·∫Øt bu·ªôc';
    }

    setFormErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    
    if (!validateForm()) {
      showNotification('Vui l√≤ng ki·ªÉm tra l·∫°i th√¥ng tin!', 'error');
      return;
    }

    setLoading(true);
    
    try {
      const updateData = {
        ...formData,
        hourlyRate: parseFloat(formData.hourlyRate)
      };

      const response = await updateEmployee(employee.id, updateData);
      
      if (response.success) {
        showNotification('C·∫≠p nh·∫≠t nh√¢n vi√™n th√†nh c√¥ng!', 'success');
        onEmployeeUpdated?.();
        onClose();
      } else {
        showNotification(response.message || 'L·ªói khi c·∫≠p nh·∫≠t nh√¢n vi√™n', 'error');
      }
      
    } catch (error) {
      console.error('‚ùå Error updating employee:', error);
      showNotification(error.message || 'L·ªói k·∫øt n·ªëi ƒë·∫øn server. Vui l√≤ng th·ª≠ l·∫°i.', 'error');
    } finally {
      setLoading(false);
    }
  };

  if (!isOpen) return null;

  return (
    <Modal 
      isOpen={isOpen} 
      onClose={onClose}
      title={`Ch·ªânh s·ª≠a nh√¢n vi√™n: ${employee?.fullName || ''}`}
      size="lg"
    >
      <form onSubmit={handleSubmit}>
        <div className="row">
          <div className="col-md-6">
            <div className="mb-3">
              <label className="form-label">H·ªç t√™n *</label>
              <input
                type="text"
                className={`form-control ${formErrors.fullName ? 'is-invalid' : ''}`}
                name="fullName"
                value={formData.fullName}
                onChange={handleInputChange}
              />
              {formErrors.fullName && <div className="invalid-feedback">{formErrors.fullName}</div>}
            </div>
          </div>
          
          <div className="col-md-6">
            <div className="mb-3">
              <label className="form-label">S·ªë ƒëi·ªán tho·∫°i *</label>
              <input
                type="tel"
                className={`form-control ${formErrors.phoneNumber ? 'is-invalid' : ''}`}
                name="phoneNumber"
                value={formData.phoneNumber}
                onChange={handleInputChange}
              />
              {formErrors.phoneNumber && <div className="invalid-feedback">{formErrors.phoneNumber}</div>}
            </div>
          </div>
        </div>

        <div className="row">
          <div className="col-md-6">
            <div className="mb-3">
              <label className="form-label">Gi·ªõi t√≠nh *</label>
              <select
                className={`form-select ${formErrors.gender ? 'is-invalid' : ''}`}
                name="gender"
                value={formData.gender}
                onChange={handleInputChange}
              >
                <option value="">Ch·ªçn gi·ªõi t√≠nh</option>
                <option value="Nam">Nam</option>
                <option value="N·ªØ">N·ªØ</option>
              </select>
              {formErrors.gender && <div className="invalid-feedback">{formErrors.gender}</div>}
            </div>
          </div>
          
          <div className="col-md-6">
            <div className="mb-3">
              <label className="form-label">M·ª©c l∆∞∆°ng/gi·ªù (VNƒê) *</label>
              <input
                type="number"
                className={`form-control ${formErrors.hourlyRate ? 'is-invalid' : ''}`}
                name="hourlyRate"
                value={formData.hourlyRate}
                onChange={handleInputChange}
                min="0"
                step="1000"
              />
              {formErrors.hourlyRate && <div className="invalid-feedback">{formErrors.hourlyRate}</div>}
            </div>
          </div>
        </div>

        <div className="row">
          <div className="col-md-6">
            <div className="mb-3">
              <label className="form-label">S·ªë t√†i kho·∫£n *</label>
              <input
                type="text"
                className={`form-control ${formErrors.bankAccount ? 'is-invalid' : ''}`}
                name="bankAccount"
                value={formData.bankAccount}
                onChange={handleInputChange}
              />
              {formErrors.bankAccount && <div className="invalid-feedback">{formErrors.bankAccount}</div>}
            </div>
          </div>
          
          <div className="col-md-6">
            <div className="mb-3">
              <label className="form-label">Ng√¢n h√†ng *</label>
              <input
                type="text"
                className={`form-control ${formErrors.bankName ? 'is-invalid' : ''}`}
                name="bankName"
                value={formData.bankName}
                onChange={handleInputChange}
              />
              {formErrors.bankName && <div className="invalid-feedback">{formErrors.bankName}</div>}
            </div>
          </div>
        </div>

        <div className="mb-3">
          <label className="form-label">Tr·∫°ng th√°i</label>
          <select
            className="form-select"
            name="status"
            value={formData.status}
            onChange={handleInputChange}
          >
            <option value="active">Ho·∫°t ƒë·ªông</option>
            <option value="inactive">Ng∆∞ng ho·∫°t ƒë·ªông</option>
          </select>
        </div>

        <div className="d-flex gap-2 justify-content-end">
          <button type="button" className="btn btn-secondary" onClick={onClose}>
            H·ªßy
          </button>
          <ButtonLoading
            type="submit"
            className="btn btn-primary"
            loading={loading}
            disabled={loading}
          >
            {loading ? 'ƒêang c·∫≠p nh·∫≠t...' : 'C·∫≠p nh·∫≠t'}
          </ButtonLoading>
        </div>
      </form>
    </Modal>
  );
};

export default EmployeeEditModal;

==============================

üìÅ File: .\src\components\employee\EmployeeForm.jsx
------------------------------
üîß FUNCTIONS:
   ‚Ä¢ EmployeeForm (d√≤ng 8) - arrow function
   ‚Ä¢ handleInputChange (d√≤ng 23) - arrow function
   ‚Ä¢ handleRecruitmentSelect (d√≤ng 39) - arrow function
   ‚Ä¢ removeRecruitment (d√≤ng 50) - arrow function
   ‚Ä¢ validateForm (d√≤ng 55) - arrow function
   ‚Ä¢ handleFormError (d√≤ng 151) - arrow function
üì§ EXPORTS:
   ‚Ä¢ EmployeeForm (d√≤ng 375)

üìÑ N·ªòI DUNG FILE:
==============================
// src/components/employee/EmployeeForm.jsx
import React, { useState, useEffect } from 'react';
import { addEmployee } from '../../services/employee.js';
import { useNotification } from '../../hooks/useNotification';
import { ButtonLoading } from '../common/Loading';
import RecruitmentModal from './RecruitmentModal';

const EmployeeForm = ({ onEmployeeAdded }) => {
  const [formData, setFormData] = useState({
    fullName: '',
    phoneNumber: '',
    gender: '',
    hourlyRate: '',
    bankAccount: '',
    bankName: ''
  });
  const [selectedRecruitments, setSelectedRecruitments] = useState([]);
  const [showRecruitmentModal, setShowRecruitmentModal] = useState(false);
  const [formErrors, setFormErrors] = useState({});
  const [loading, setLoading] = useState(false);
  const { showNotification } = useNotification();

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
    
    // Clear error when user starts typing
    if (formErrors[name]) {
      setFormErrors(prev => ({
        ...prev,
        [name]: ''
      }));
    }
  };

  const handleRecruitmentSelect = (recruitments) => {
    setSelectedRecruitments(recruitments);
    // Clear work history error when recruitment is selected
    if (formErrors.workHistoryData) {
      setFormErrors(prev => ({
        ...prev,
        workHistoryData: ''
      }));
    }
  };

  const removeRecruitment = (requestNoToRemove) => {
    const updated = selectedRecruitments.filter(r => r.requestNo !== requestNoToRemove);
    setSelectedRecruitments(updated);
  };

  const validateForm = () => {
    const newErrors = {};
    
    if (!formData.fullName.trim()) {
      newErrors.fullName = 'H·ªç t√™n l√† b·∫Øt bu·ªôc';
    } else if (formData.fullName.trim().length < 2) {
      newErrors.fullName = 'H·ªç t√™n ph·∫£i c√≥ √≠t nh·∫•t 2 k√Ω t·ª±';
    }
    
    if (!formData.phoneNumber.trim()) {
      newErrors.phoneNumber = 'S·ªë ƒëi·ªán tho·∫°i l√† b·∫Øt bu·ªôc';
    } else if (!/^\d{10,11}$/.test(formData.phoneNumber)) {
      newErrors.phoneNumber = 'S·ªë ƒëi·ªán tho·∫°i kh√¥ng h·ª£p l·ªá';
    }
    
    if (!formData.gender) {
      newErrors.gender = 'Gi·ªõi t√≠nh l√† b·∫Øt bu·ªôc';
    }
    
    if (!formData.hourlyRate) {
      newErrors.hourlyRate = 'M·ª©c l∆∞∆°ng/gi·ªù l√† b·∫Øt bu·ªôc';
    } else if (isNaN(formData.hourlyRate) || parseFloat(formData.hourlyRate) <= 0) {
      newErrors.hourlyRate = 'M·ª©c l∆∞∆°ng/gi·ªù ph·∫£i l√† s·ªë d∆∞∆°ng';
    }
    
    if (!formData.bankAccount.trim()) {
      newErrors.bankAccount = 'S·ªë t√†i kho·∫£n l√† b·∫Øt bu·ªôc';
    }
    
    if (!formData.bankName.trim()) {
      newErrors.bankName = 'Ng√¢n h√†ng l√† b·∫Øt bu·ªôc';
    }

    // Validate recruitment selection
    if (selectedRecruitments.length === 0) {
      newErrors.workHistoryData = 'Vui l√≤ng ch·ªçn √≠t nh·∫•t m·ªôt ƒë·ªÅ xu·∫•t tuy·ªÉn d·ª•ng';
    }

    setFormErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    
    if (!validateForm()) {
      showNotification('Vui l√≤ng ki·ªÉm tra l·∫°i th√¥ng tin!', 'error');
      return;
    }

    setLoading(true);
    
    try {
      const employeeData = {
        ...formData,
        hourlyRate: parseFloat(formData.hourlyRate),
        workHistoryData: selectedRecruitments.map(r => ({ requestNo: r.requestNo }))
      };

      console.log('üì§ Sending employee data:', employeeData);

      // ‚úÖ S·ª¨A: G·ªçi qua service
      const response = await addEmployee(employeeData);
      
      if (response.success) {
        showNotification('Th√™m nh√¢n vi√™n th√†nh c√¥ng!', 'success');
        
        // Reset form
        setFormData({
          fullName: '',
          phoneNumber: '',
          gender: '',
          hourlyRate: '',
          bankAccount: '',
          bankName: ''
        });
        setSelectedRecruitments([]);
        setFormErrors({});
        
        // Callback to parent
        if (onEmployeeAdded) {
          onEmployeeAdded(response);
        }
      } else {
        handleFormError(response);
      }
      
    } catch (error) {
      console.error('‚ùå Error adding employee:', error);
      showNotification(error.message || 'L·ªói k·∫øt n·ªëi ƒë·∫øn server. Vui l√≤ng th·ª≠ l·∫°i.', 'error');
    } finally {
      setLoading(false);
    }
  };


  const handleFormError = (response) => {
    if (response.errorCode === 'DUPLICATE_EMPLOYEE_ID') {
      showNotification(
        '‚ö†Ô∏è M√£ nh√¢n vi√™n ƒë√£ t·ªìn t·∫°i!\n\n' +
        'Nh√¢n vi√™n v·ªõi t√™n v√† s·ªë ƒëi·ªán tho·∫°i n√†y ƒë√£ c√≥ trong h·ªá th·ªëng.\n' +
        'Vui l√≤ng ki·ªÉm tra l·∫°i ho·∫∑c s·ª≠ d·ª•ng th√¥ng tin kh√°c.', 
        'error'
      );
      
      setFormErrors({
        fullName: 'T√™n ƒë√£ t·ªìn t·∫°i',
        phoneNumber: 'S·ªë ƒëi·ªán tho·∫°i ƒë√£ t·ªìn t·∫°i'
      });
    } else if (response.errorCode === 'DUPLICATE_REQUEST_NO') {
      showNotification('Kh√¥ng ƒë∆∞·ª£c tr√πng l·∫∑p Request No. trong work history!', 'error');
      setFormErrors({ workHistoryData: 'Request No. b·ªã tr√πng l·∫∑p' });
    } else if (response.errorCode === 'WORK_HISTORY_REQUIRED') {
      showNotification('Vui l√≤ng ch·ªçn √≠t nh·∫•t m·ªôt ƒë·ªÅ xu·∫•t tuy·ªÉn d·ª•ng', 'error');
      setFormErrors({ workHistoryData: 'Vui l√≤ng ch·ªçn √≠t nh·∫•t m·ªôt ƒë·ªÅ xu·∫•t tuy·ªÉn d·ª•ng' });
    } else {
      showNotification(response.message || 'L·ªói khi th√™m nh√¢n vi√™n', 'error');
    }
  };

  return (
    <>
      <form onSubmit={handleSubmit} id="employeeForm">
        {/* Basic Information */}
        <div className="mb-3">
          <label htmlFor="fullName" className="form-label">
            H·ªç t√™n <span className="text-danger">*</span>
          </label>
          <input
            type="text"
            className={`form-control ${formErrors.fullName ? 'is-invalid' : ''}`}
            id="fullName"
            name="fullName"
            value={formData.fullName}
            onChange={handleInputChange}
            required
          />
          {formErrors.fullName && (
            <div className="invalid-feedback">{formErrors.fullName}</div>
          )}
        </div>

        <div className="mb-3">
          <label htmlFor="phoneNumber" className="form-label">
            S·ªë ƒëi·ªán tho·∫°i <span className="text-danger">*</span>
          </label>
          <input
            type="tel"
            className={`form-control ${formErrors.phoneNumber ? 'is-invalid' : ''}`}
            id="phoneNumber"
            name="phoneNumber"
            value={formData.phoneNumber}
            onChange={handleInputChange}
            required
          />
          {formErrors.phoneNumber && (
            <div className="invalid-feedback">{formErrors.phoneNumber}</div>
          )}
        </div>

        <div className="mb-3">
          <label htmlFor="gender" className="form-label">
            Gi·ªõi t√≠nh <span className="text-danger">*</span>
          </label>
          <select
            className={`form-select ${formErrors.gender ? 'is-invalid' : ''}`}
            id="gender"
            name="gender"
            value={formData.gender}
            onChange={handleInputChange}
            required
          >
            <option value="">Ch·ªçn gi·ªõi t√≠nh</option>
            <option value="Nam">Nam</option>
            <option value="N·ªØ">N·ªØ</option>
          </select>
          {formErrors.gender && (
            <div className="invalid-feedback">{formErrors.gender}</div>
          )}
        </div>

        <div className="mb-3">
          <label htmlFor="hourlyRate" className="form-label">
            M·ª©c l∆∞∆°ng/gi·ªù (VNƒê) <span className="text-danger">*</span>
          </label>
          <input
            type="number"
            className={`form-control ${formErrors.hourlyRate ? 'is-invalid' : ''}`}
            id="hourlyRate"
            name="hourlyRate"
            value={formData.hourlyRate}
            onChange={handleInputChange}
            min="0"
            step="1000"
            required
          />
          {formErrors.hourlyRate && (
            <div className="invalid-feedback">{formErrors.hourlyRate}</div>
          )}
        </div>

        <div className="mb-3">
          <label htmlFor="bankAccount" className="form-label">
            S·ªë t√†i kho·∫£n <span className="text-danger">*</span>
          </label>
          <input
            type="text"
            className={`form-control ${formErrors.bankAccount ? 'is-invalid' : ''}`}
            id="bankAccount"
            name="bankAccount"
            value={formData.bankAccount}
            onChange={handleInputChange}
            required
          />
          {formErrors.bankAccount && (
            <div className="invalid-feedback">{formErrors.bankAccount}</div>
          )}
        </div>

        <div className="mb-3">
          <label htmlFor="bankName" className="form-label">
            Ng√¢n h√†ng <span className="text-danger">*</span>
          </label>
          <input
            type="text"
            className={`form-control ${formErrors.bankName ? 'is-invalid' : ''}`}
            id="bankName"
            name="bankName"
            value={formData.bankName}
            onChange={handleInputChange}
            required
          />
          {formErrors.bankName && (
            <div className="invalid-feedback">{formErrors.bankName}</div>
          )}
        </div>

        {/* Recruitment Selection Section */}
        <div className="mb-3">
          <label className="form-label">
            ƒê·ªÅ xu·∫•t tuy·ªÉn d·ª•ng <span className="text-danger">*</span>
            <span className="text-muted ms-2">(Ch·ªçn t·ª´ danh s√°ch c√≥ s·∫µn)</span>
          </label>
          
          <div className="d-flex align-items-center gap-2 mb-2">
            <button
              type="button"
              className="btn btn-outline-primary"
              onClick={() => setShowRecruitmentModal(true)}
            >
              <i className="fas fa-plus me-2"></i>
              Ch·ªçn ƒë·ªÅ xu·∫•t tuy·ªÉn d·ª•ng
            </button>
            
            {selectedRecruitments.length > 0 && (
              <span className="badge bg-success">
                <i className="fas fa-check me-1"></i>
                ƒê√£ ch·ªçn {selectedRecruitments.length} ƒë·ªÅ xu·∫•t
              </span>
            )}
          </div>

          {/* Display Selected Recruitments */}
          {selectedRecruitments.length > 0 && (
            <div className="mt-2">
              <small className="text-muted">ƒê·ªÅ xu·∫•t ƒë√£ ch·ªçn:</small>
              <div className="mt-1">
                {selectedRecruitments.map((recruitment, index) => (
                  <div key={recruitment.requestNo} className="d-inline-block me-2 mb-1">
                    <span className="badge bg-info d-flex align-items-center">
                      <i className="fas fa-clipboard-list me-1"></i>
                      <span className="me-2">
                        <strong>{recruitment.requestNo}</strong> - {recruitment.department}
                        <br />
                        <small>
                          {recruitment.quantity} ng∆∞·ªùi ‚Ä¢ {recruitment.gender}
                        </small>
                      </span>
                      <button
                        type="button"
                        className="btn-close btn-close-white"
                        style={{ fontSize: '0.6rem' }}
                        onClick={() => removeRecruitment(recruitment.requestNo)}
                        title="X√≥a ƒë·ªÅ xu·∫•t n√†y"
                      ></button>
                    </span>
                  </div>
                ))}
              </div>
            </div>
          )}

          {formErrors.workHistoryData && (
            <div className="text-danger small mt-1">{formErrors.workHistoryData}</div>
          )}
        </div>

        <ButtonLoading
          type="submit"
          className="btn btn-primary w-100"
          loading={loading}
          disabled={loading}
        >
          {loading ? 'ƒêang th√™m nh√¢n vi√™n...' : 'Th√™m nh√¢n vi√™n'}
        </ButtonLoading>
      </form>

      {/* Recruitment Selection Modal */}
      {showRecruitmentModal && (
        <RecruitmentModal
          isOpen={showRecruitmentModal}
          onClose={() => setShowRecruitmentModal(false)}
          onRecruitmentSelected={handleRecruitmentSelect}
          selectedRecruitment={selectedRecruitments[0] || null}
        />
      )}
    </>
  );
};

export default EmployeeForm;

==============================

üìÅ File: .\src\components\employee\EmployeeList.jsx
------------------------------
üîß FUNCTIONS:
   ‚Ä¢ EmployeeList (d√≤ng 7) - arrow function
   ‚Ä¢ filterEmployees (d√≤ng 92) - arrow function
   ‚Ä¢ handleAddWorkHistory (d√≤ng 145) - arrow function
   ‚Ä¢ handleViewWorkHistory (d√≤ng 151) - arrow function
üì§ EXPORTS:
   ‚Ä¢ EmployeeList (d√≤ng 229)

üìÑ N·ªòI DUNG FILE:
==============================
import React, { useState, useEffect } from 'react';
import { ApiClient } from '../../services/api';
import { useNotification } from '../../hooks/useNotification';
import EmployeeTable from './EmployeeTable';
import Loading from '../common/Loading';

const EmployeeList = () => {
  const [employees, setEmployees] = useState([]);
  const [filteredEmployees, setFilteredEmployees] = useState([]);
  const [loading, setLoading] = useState(true);
  const [searchTerm, setSearchTerm] = useState('');
  const [statusFilter, setStatusFilter] = useState('');
  const { showNotification } = useNotification();

  useEffect(() => {
    loadEmployees();
  }, []);

  useEffect(() => {
    filterEmployees();
  }, [employees, searchTerm, statusFilter]);

  const loadEmployees = async () => {
    try {
      setLoading(true);
      console.log('üîç FRONTEND: Starting loadEmployees...');
      
      const response = await ApiClient.get('/api/employees');
      
      // üö® DEBUG: In ra to√†n b·ªô response ƒë·ªÉ xem c·∫•u tr√∫c
      console.log('üîç RAW RESPONSE FROM BACKEND:', response);
      console.log('üîç Response type:', typeof response);
      console.log('üîç Response keys:', Object.keys(response || {}));
      
      // Ki·ªÉm tra t·ª´ng thu·ªôc t√≠nh
      if (response?.data) {
        console.log('üîç response.data:', response.data);
        console.log('üîç response.data type:', typeof response.data);
        console.log('üîç response.data is Array:', Array.isArray(response.data));
        
        if (Array.isArray(response.data) && response.data.length > 0) {
          console.log('üîç First employee in response.data:', response.data[0]);
          console.log('üîç First employee keys:', Object.keys(response.data[0] || {}));
        }
      }
      
      if (response?.success) {
        console.log('üîç response.success:', response.success);
      }
      
      // X·ª≠ l√Ω d·ªØ li·ªáu d·ª±a tr√™n c·∫•u tr√∫c response
      let employeeData = [];
      
      if (response && response.success && Array.isArray(response.data)) {
        // Tr∆∞·ªùng h·ª£p API tr·∫£ v·ªÅ { success: true, data: [...] }
        employeeData = response.data;
        console.log('‚úÖ Using response.data (structured format)');
      } else if (Array.isArray(response)) {
        // Tr∆∞·ªùng h·ª£p API tr·∫£ v·ªÅ tr·ª±c ti·∫øp array
        employeeData = response;
        console.log('‚úÖ Using response directly (array format)');
      } else if (response && Array.isArray(response.employees)) {
        // Tr∆∞·ªùng h·ª£p API tr·∫£ v·ªÅ { employees: [...] }
        employeeData = response.employees;
        console.log('‚úÖ Using response.employees');
      } else {
        console.warn('‚ö†Ô∏è Unknown response format, using empty array');
        employeeData = [];
      }
      
      console.log('üîç Final employeeData to set:', employeeData);
      console.log('üîç Final employeeData length:', employeeData.length);
      
      setEmployees(employeeData);
      
    } catch (error) {
      console.error('‚ùå Error loading employees:', error);
      console.error('‚ùå Error details:', {
        message: error.message,
        response: error.response?.data,
        status: error.response?.status
      });
      
      // Set empty array on error
      setEmployees([]);
      showNotification('L·ªói khi t·∫£i danh s√°ch nh√¢n vi√™n', 'error');
    } finally {
      setLoading(false);
    }
  };

  const filterEmployees = () => {
    // ƒê·∫£m b·∫£o employees lu√¥n l√† array tr∆∞·ªõc khi filter
    const safeEmployees = Array.isArray(employees) ? employees : [];
    let filtered = safeEmployees;

    if (searchTerm) {
      filtered = filtered.filter(employee => {
        // Safe check cho t·ª´ng property
        const fullName = employee?.fullName || '';
        const employeeId = employee?.employeeId || '';
        const phoneNumber = employee?.phoneNumber || '';
        
        return (
          fullName.toLowerCase().includes(searchTerm.toLowerCase()) ||
          employeeId.toLowerCase().includes(searchTerm.toLowerCase()) ||
          phoneNumber.includes(searchTerm)
        );
      });
    }

    if (statusFilter) {
      filtered = filtered.filter(employee => employee?.status === statusFilter);
    }

    setFilteredEmployees(filtered);
  };

  const handleEdit = async (employeeId) => {
    // TODO: Implement edit functionality
    console.log('Edit employee:', employeeId);
    showNotification('Ch·ª©c nƒÉng ch·ªânh s·ª≠a ƒëang ƒë∆∞·ª£c ph√°t tri·ªÉn', 'info');
  };

  const handleDelete = async (employeeId) => {
    const employee = employees.find(emp => emp?.id === employeeId);
    if (!employee) return;

    const confirmed = window.confirm(`B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a nh√¢n vi√™n "${employee.fullName || 'N/A'}"?`);
    if (!confirmed) return;

    try {
      await ApiClient.delete(`/api/employees/${employeeId}`);
      
      // Remove from local state
      setEmployees(employees.filter(emp => emp?.id !== employeeId));
      showNotification('X√≥a nh√¢n vi√™n th√†nh c√¥ng', 'success');
      
    } catch (error) {
      console.error('Error deleting employee:', error);
      showNotification('L·ªói khi x√≥a nh√¢n vi√™n', 'error');
    }
  };

  const handleAddWorkHistory = (employeeId, employeeName) => {
    // TODO: Implement add work history functionality
    console.log('Add work history for:', employeeId, employeeName);
    showNotification('Ch·ª©c nƒÉng th√™m work history ƒëang ƒë∆∞·ª£c ph√°t tri·ªÉn', 'info');
  };

  const handleViewWorkHistory = (employeeId) => {
    // TODO: Implement view work history functionality
    console.log('View work history for:', employeeId);
    showNotification('Ch·ª©c nƒÉng xem work history ƒëang ƒë∆∞·ª£c ph√°t tri·ªÉn', 'info');
  };

  const handleRefresh = async () => {
    await loadEmployees();
    showNotification('ƒê√£ l√†m m·ªõi danh s√°ch nh√¢n vi√™n', 'success');
  };

  if (loading) {
    return <Loading text="ƒêang t·∫£i danh s√°ch nh√¢n vi√™n..." />;
  }

  return (
    <div className="employee-list">
      {/* Search and Filter Controls */}
      <div className="row mb-3">
        <div className="col-md-8">
          <input
            type="text"
            className="form-control"
            placeholder="T√¨m ki·∫øm nh√¢n vi√™n (t√™n, m√£ NV, s·ªë ƒêT)..."
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            id="employeeSearch"
          />
        </div>
        <div className="col-md-3">
          <select
            className="form-select"
            value={statusFilter}
            onChange={(e) => setStatusFilter(e.target.value)}
            id="employeeStatusFilter"
          >
            <option value="">T·∫•t c·∫£ tr·∫°ng th√°i</option>
            <option value="active">Ho·∫°t ƒë·ªông</option>
            <option value="inactive">Ng∆∞ng ho·∫°t ƒë·ªông</option>
          </select>
        </div>
        <div className="col-md-1">
          <button 
            className="btn btn-outline-secondary"
            onClick={handleRefresh}
            title="L√†m m·ªõi"
          >
            <i className="fas fa-sync-alt"></i>
          </button>
        </div>
      </div>

      {/* Employee Count */}
      <div className="mb-3">
        <small className="text-muted">
          Hi·ªÉn th·ªã {filteredEmployees.length} / {employees.length} nh√¢n vi√™n
        </small>
      </div>

      {/* Debug Info - Remove this in production */}
      <div className="mb-3 p-2 bg-light border rounded">
        <small className="text-muted">
          <strong>DEBUG:</strong> employees type: {typeof employees}, isArray: {Array.isArray(employees).toString()}, length: {Array.isArray(employees) ? employees.length : 'N/A'}
        </small>
      </div>

      {/* Employee Table */}
      <EmployeeTable
        employees={filteredEmployees}
        onEdit={handleEdit}
        onDelete={handleDelete}
        onAddWorkHistory={handleAddWorkHistory}
        onViewWorkHistory={handleViewWorkHistory}
      />
    </div>
  );
};

export default EmployeeList;

==============================

üìÅ File: .\src\components\employee\EmployeeTable.jsx
------------------------------
üîß FUNCTIONS:
   ‚Ä¢ EmployeeTable (d√≤ng 3) - arrow function
üì§ EXPORTS:
   ‚Ä¢ EmployeeTable (d√≤ng 153)

üìÑ N·ªòI DUNG FILE:
==============================
import React from 'react';

const EmployeeTable = ({ 
  employees, 
  onEdit, 
  onDelete, 
  onAddWorkHistory, 
  onViewWorkHistory 
}) => {
  // Ki·ªÉm tra v√† ƒë·∫£m b·∫£o employees lu√¥n l√† array
  const employeeList = React.useMemo(() => {
    if (!employees) {
      return [];
    }
    
    // N·∫øu employees l√† object c√≥ data property (t·ª´ API response)
    if (employees.data && Array.isArray(employees.data)) {
      return employees.data;
    }
    
    // N·∫øu employees ƒë√£ l√† array
    if (Array.isArray(employees)) {
      return employees;
    }
    
    // Fallback: tr·∫£ v·ªÅ empty array
    console.warn('EmployeeTable: employees prop is not an array:', typeof employees, employees);
    return [];
  }, [employees]);

  if (!employeeList || employeeList.length === 0) {
    return (
      <div className="text-center py-4">
        <i className="fas fa-users fa-3x text-muted mb-3"></i>
        <p className="text-muted">Kh√¥ng c√≥ nh√¢n vi√™n n√†o</p>
      </div>
    );
  }

  return (
    <div className="table-responsive">
      <table className="table table-striped table-hover">
        <thead className="table-dark">
          <tr>
            <th>M√£ NV</th>
            <th>H·ªç t√™n</th>
            <th>S·ªë ƒêT</th>
            <th>Gi·ªõi t√≠nh</th>
            <th>L∆∞∆°ng/gi·ªù</th>
            <th>T√†i kho·∫£n</th>
            <th>Ng√¢n h√†ng</th>
            <th>Tr·∫°ng th√°i</th>
            <th>Thao t√°c</th>
          </tr>
        </thead>
        <tbody id="employeeTableBody">
          {employeeList.map((employee, index) => {
            // ƒê·∫£m b·∫£o m·ªói employee c√≥ ƒë·ªß thu·ªôc t√≠nh
            const safeEmployee = {
              id: employee?.id || `emp_${index}`,
              employeeId: employee?.employeeId || 'N/A',
              fullName: employee?.fullName || 'N/A',
              phoneNumber: employee?.phoneNumber || 'N/A',
              gender: employee?.gender || 'N/A',
              hourlyRate: employee?.hourlyRate || 0,
              bankAccount: employee?.bankAccount || 'N/A',
              bankName: employee?.bankName || 'N/A',
              status: employee?.status || 'inactive'
            };

            return (
              <tr key={safeEmployee.id}>
                <td>{safeEmployee.employeeId}</td>
                <td>{safeEmployee.fullName}</td>
                <td>{safeEmployee.phoneNumber}</td>
                <td>{safeEmployee.gender}</td>
                <td>
                  {safeEmployee.hourlyRate && safeEmployee.hourlyRate > 0
                    ? safeEmployee.hourlyRate.toLocaleString('vi-VN') + ' VNƒê'
                    : 'N/A'
                  }
                </td>
                <td>{safeEmployee.bankAccount}</td>
                <td>{safeEmployee.bankName}</td>
                <td>
                  <span className={`badge ${
                    safeEmployee.status === 'active' 
                      ? 'bg-success' 
                      : 'bg-secondary'
                  }`}>
                    {safeEmployee.status === 'active' 
                      ? 'Ho·∫°t ƒë·ªông' 
                      : 'Ng∆∞ng ho·∫°t ƒë·ªông'
                    }
                  </span>
                </td>
                <td>
                  <div className="btn-group" role="group">
                    {onAddWorkHistory && (
                      <button
                        className="btn btn-sm btn-success"
                        onClick={() => onAddWorkHistory(safeEmployee.employeeId, safeEmployee.fullName)}
                        title="Th√™m work history"
                      >
                        <i className="fas fa-plus"></i>
                      </button>
                    )}
                    
                    {onViewWorkHistory && (
                      <button
                        className="btn btn-sm btn-info"
                        onClick={() => onViewWorkHistory(safeEmployee.employeeId)}
                        title="Xem l·ªãch s·ª≠"
                      >
                        <i className="fas fa-history"></i>
                      </button>
                    )}
                    
                    {onEdit && (
                      <button
                        className="btn btn-sm btn-primary"
                        onClick={() => onEdit(safeEmployee.id)}
                        title="Ch·ªânh s·ª≠a"
                      >
                        <i className="fas fa-edit"></i>
                      </button>
                    )}
                    
                    {onDelete && (
                      <button
                        className="btn btn-sm btn-danger"
                        onClick={() => {
                          if (window.confirm(`B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a nh√¢n vi√™n "${safeEmployee.fullName}"?`)) {
                            onDelete(safeEmployee.id);
                          }
                        }}
                        title="X√≥a"
                      >
                        <i className="fas fa-trash"></i>
                      </button>
                    )}
                  </div>
                </td>
              </tr>
            );
          })}
        </tbody>
      </table>
    </div>
  );
};

export default EmployeeTable;

==============================

üìÅ File: .\src\components\employee\RecruitmentModal.jsx
------------------------------
üîß FUNCTIONS:
   ‚Ä¢ RecruitmentModal (d√≤ng 7) - arrow function
   ‚Ä¢ getMockData (d√≤ng 42) - arrow function
   ‚Ä¢ handleItemSelect (d√≤ng 79) - arrow function
   ‚Ä¢ handleConfirm (d√≤ng 83) - arrow function
   ‚Ä¢ handleCancel (d√≤ng 94) - arrow function
üì§ EXPORTS:
   ‚Ä¢ RecruitmentModal (d√≤ng 257)

üìÑ N·ªòI DUNG FILE:
==============================
// src/components/employee/RecruitmentModal.jsx
import React, { useState, useEffect } from 'react';
import { ApiClient } from '../../services/api';
import { useNotification } from '../../hooks/useNotification';
import Loading from '../common/Loading';

const RecruitmentModal = ({ isOpen, onClose, onRecruitmentSelected, selectedRecruitment = null }) => {
  const [recruitmentData, setRecruitmentData] = useState([]);
  const [loading, setLoading] = useState(false);
  // ‚úÖ S·ª¨A: Ch·ªâ cho ph√©p ch·ªçn 1 ƒë·ªÅ xu·∫•t
  const [selectedItem, setSelectedItem] = useState(null);
  const [searchTerm, setSearchTerm] = useState('');
  const { showNotification } = useNotification();

  useEffect(() => {
    if (isOpen) {
      loadRecruitmentData();
      // ‚úÖ S·ª¨A: Set selected item t·ª´ props
      setSelectedItem(selectedRecruitment);
    }
  }, [isOpen, selectedRecruitment]);

  const loadRecruitmentData = async () => {
    try {
      setLoading(true);
      const response = await ApiClient.get('/api/recruitment');
      
      if (response.success) {
        setRecruitmentData(response.data || []);
      } else {
        throw new Error(response.message || 'L·ªói khi t·∫£i d·ªØ li·ªáu');
      }
    } catch (error) {
      console.error('Error loading recruitment data:', error);
      showNotification('L·ªói khi t·∫£i d·ªØ li·ªáu tuy·ªÉn d·ª•ng. S·ª≠ d·ª•ng d·ªØ li·ªáu m·∫´u.', 'warning');
      setRecruitmentData(getMockData());
    } finally {
      setLoading(false);
    }
  };

  const getMockData = () => {
    return [
      {
        id: '1',
        requestNo: '202507140017',
        requester: '236LH.Nguy·ªÖn Huy Th√†nh',
        status: 'ƒêang tuy·ªÉn d·ª•ng',
        department: '116 C·∫ßu Gi·∫•y',
        quantity: '2',
        gender: 'Nam/N·ªØ',
        fromDate: '2025-07-14',
        toDate: '2025-08-14',
        position: 'Nh√¢n vi√™n b√°n h√†ng'
      },
      {
        id: '2',
        requestNo: '202507140018',
        requester: '225VVN.Nguy·ªÖn Tr·ªçng Ho√†ng An',
        status: 'ƒêang tuy·ªÉn d·ª•ng', 
        department: 'Tr√¢m Tr·ªói',
        quantity: '1',
        gender: 'N·ªØ',
        fromDate: '2025-07-14',
        toDate: '2025-08-14',
        position: 'Thu ng√¢n'
      }
    ];
  };

  const filteredData = recruitmentData.filter(item =>
    item.requestNo?.toLowerCase().includes(searchTerm.toLowerCase()) ||
    item.department?.toLowerCase().includes(searchTerm.toLowerCase()) ||
    item.requester?.toLowerCase().includes(searchTerm.toLowerCase()) ||
    item.position?.toLowerCase().includes(searchTerm.toLowerCase())
  );

  // ‚úÖ S·ª¨A: Handle single selection
  const handleItemSelect = (item) => {
    setSelectedItem(selectedItem?.requestNo === item.requestNo ? null : item);
  };

  const handleConfirm = () => {
    if (!selectedItem) {
      showNotification('Vui l√≤ng ch·ªçn m·ªôt ƒë·ªÅ xu·∫•t tuy·ªÉn d·ª•ng', 'warning');
      return;
    }
    
    // ‚úÖ S·ª¨A: Ch·ªâ tr·∫£ v·ªÅ text c·ªßa Request No.
    onRecruitmentSelected([selectedItem]);
    onClose();
  };

  const handleCancel = () => {
    setSelectedItem(selectedRecruitment);
    onClose();
  };

  if (!isOpen) return null;

  return (
    <div className="modal fade show" style={{ display: 'block' }} tabIndex="-1">
      <div className="modal-dialog modal-xl">
        <div className="modal-content">
          <div className="modal-header">
            <h5 className="modal-title">
              <i className="fas fa-clipboard-list me-2"></i>
              Ch·ªçn ƒë·ªÅ xu·∫•t tuy·ªÉn d·ª•ng
            </h5>
            <button
              type="button"
              className="btn-close"
              onClick={handleCancel}
            ></button>
          </div>

          <div className="modal-body">
            {/* Search */}
            <div className="row mb-3">
              <div className="col-12">
                <div className="input-group">
                  <span className="input-group-text">
                    <i className="fas fa-search"></i>
                  </span>
                  <input
                    type="text"
                    className="form-control"
                    placeholder="T√¨m ki·∫øm theo Request No, Ph√≤ng ban, Ng∆∞·ªùi y√™u c·∫ßu, V·ªã tr√≠..."
                    value={searchTerm}
                    onChange={(e) => setSearchTerm(e.target.value)}
                  />
                </div>
              </div>
            </div>

            {/* Selected Info */}
            {selectedItem && (
              <div className="alert alert-info">
                <i className="fas fa-info-circle me-2"></i>
                ƒê√£ ch·ªçn: <strong>{selectedItem.requestNo}</strong> - {selectedItem.position} ({selectedItem.department})
              </div>
            )}

            {/* Content */}
            {loading ? (
              <Loading text="ƒêang t·∫£i danh s√°ch ƒë·ªÅ xu·∫•t..." />
            ) : (
              <div className="table-responsive" style={{ maxHeight: '400px', overflowY: 'auto' }}>
                <table className="table table-striped table-hover">
                  <thead className="table-dark sticky-top">
                    <tr>
                      <th width="50">
                        <i className="fas fa-check"></i>
                      </th>
                      <th>Request No.</th>
                      <th>V·ªã tr√≠ tuy·ªÉn d·ª•ng</th>
                      <th>Ng∆∞·ªùi y√™u c·∫ßu</th>
                      <th>Ph√≤ng ban</th>
                      <th>S·ªë l∆∞·ª£ng</th>
                      <th>Gi·ªõi t√≠nh</th>
                      <th>Th·ªùi gian</th>
                      <th>Tr·∫°ng th√°i</th>
                    </tr>
                  </thead>
                  <tbody>
                    {filteredData.map((item) => {
                      const isSelected = selectedItem?.requestNo === item.requestNo;
                      
                      return (
                        <tr 
                          key={item.id || item.requestNo}
                          className={isSelected ? 'table-primary' : ''}
                          style={{ cursor: 'pointer' }}
                          onClick={() => handleItemSelect(item)}
                        >
                          <td>
                            {/* ‚úÖ S·ª¨A: D√πng radio button thay v√¨ checkbox */}
                            <input
                              type="radio"
                              className="form-check-input"
                              checked={isSelected}
                              onChange={() => handleItemSelect(item)}
                            />
                          </td>
                          <td>
                            <strong className="text-primary">{item.requestNo}</strong>
                          </td>
                          <td>
                            <span className="badge bg-info">{item.position || 'N/A'}</span>
                          </td>
                          <td>{item.requester}</td>
                          <td>
                            <span className="badge bg-secondary">{item.department}</span>
                          </td>
                          <td className="text-center">
                            <span className="badge bg-warning text-dark">{item.quantity}</span>
                          </td>
                          <td>
                            <span className="badge bg-light text-dark">{item.gender}</span>
                          </td>
                          <td>
                            <small>
                              {item.fromDate}<br/>
                              ƒë·∫øn {item.toDate}
                            </small>
                          </td>
                          <td>
                            <span className={`badge ${
                              item.status === 'ƒêang tuy·ªÉn d·ª•ng' ? 'bg-success' : 'bg-warning'
                            }`}>
                              {item.status}
                            </span>
                          </td>
                        </tr>
                      );
                    })}
                  </tbody>
                </table>

                {filteredData.length === 0 && (
                  <div className="text-center py-4">
                    <i className="fas fa-search fa-3x text-muted mb-3"></i>
                    <p className="text-muted">
                      {searchTerm ? 'Kh√¥ng t√¨m th·∫•y ƒë·ªÅ xu·∫•t ph√π h·ª£p' : 'Ch∆∞a c√≥ ƒë·ªÅ xu·∫•t tuy·ªÉn d·ª•ng n√†o'}
                    </p>
                  </div>
                )}
              </div>
            )}
          </div>

          <div className="modal-footer">
            <button
              type="button"
              className="btn btn-secondary"
              onClick={handleCancel}
            >
              <i className="fas fa-times me-2"></i>
              H·ªßy
            </button>
            <button
              type="button"
              className="btn btn-primary"
              onClick={handleConfirm}
              disabled={!selectedItem}
            >
              <i className="fas fa-check me-2"></i>
              X√°c nh·∫≠n
            </button>
          </div>
        </div>
      </div>
    </div>
  );
};

export default RecruitmentModal;

==============================

üìÅ File: .\src\components\employee\WorkHistoryModal.jsx
------------------------------
üîß FUNCTIONS:
   ‚Ä¢ WorkHistoryModal (d√≤ng 8) - arrow function
üì§ EXPORTS:
   ‚Ä¢ WorkHistoryModal (d√≤ng 97)

üìÑ N·ªòI DUNG FILE:
==============================
// src/components/employee/WorkHistoryModal.jsx  
import React, { useState, useEffect } from 'react';
import { getEmployeeWorkHistory } from '../../services/employee.js';
import { useNotification } from '../../hooks/useNotification';
import Modal from '../common/Modal';
import Loading from '../common/Loading';

const WorkHistoryModal = ({ isOpen, onClose, employeeId, employeeName, workHistory }) => {
  const [workHistoryData, setWorkHistoryData] = useState([]);
  const [loading, setLoading] = useState(false);
  const { showNotification } = useNotification();

  useEffect(() => {
    if (isOpen && employeeId && !workHistory) {
      fetchWorkHistory();
    } else if (workHistory) {
      setWorkHistoryData(workHistory);
    }
  }, [isOpen, employeeId, workHistory]);

  const fetchWorkHistory = async () => {
    setLoading(true);
    try {
      const response = await getEmployeeWorkHistory(employeeId);
      
      if (response.success) {
        setWorkHistoryData(response.data || []);
      } else {
        showNotification(response.message || 'L·ªói khi t·∫£i work history', 'error');
      }
    } catch (error) {
      console.error('‚ùå Error fetching work history:', error);
      showNotification(error.message || 'L·ªói k·∫øt n·ªëi ƒë·∫øn server', 'error');
    } finally {
      setLoading(false);
    }
  };

  if (!isOpen) return null;

  return (
    <Modal 
      isOpen={isOpen} 
      onClose={onClose}
      title={`L·ªãch s·ª≠ l√†m vi·ªác - ${employeeName || employeeId}`}
      size="lg"
    >
      {loading ? (
        <Loading />
      ) : (
        <div>
          {workHistoryData.length === 0 ? (
            <div className="text-center py-4">
              <i className="fas fa-history fa-3x text-muted mb-3"></i>
              <p className="text-muted">Kh√¥ng c√≥ l·ªãch s·ª≠ l√†m vi·ªác</p>
            </div>
          ) : (
            <div className="table-responsive">
              <table className="table table-striped">
                <thead className="table-dark">
                  <tr>
                    <th>Request No.</th>
                    <th>M√£ nh√¢n vi√™n</th>
                    <th>Th·ªùi gian</th>
                  </tr>
                </thead>
                <tbody>
                  {workHistoryData.map((item, index) => (
                    <tr key={item.id || index}>
                      <td>
                        <span className="badge bg-primary">{item.requestNo}</span>
                      </td>
                      <td>{item.employeeId}</td>
                      <td>
                        <small className="text-muted">
                          {item.createdAt ? new Date(item.createdAt).toLocaleString('vi-VN') : 'N/A'}
                        </small>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          )}
          
          <div className="d-flex justify-content-end mt-3">
            <button type="button" className="btn btn-secondary" onClick={onClose}>
              ƒê√≥ng
            </button>
          </div>
        </div>
      )}
    </Modal>
  );
};

export default WorkHistoryModal;

==============================

üìÅ File: .\src\components\layout\Layout.jsx
------------------------------
üîß FUNCTIONS:
   ‚Ä¢ Layout (d√≤ng 6) - arrow function
üì§ EXPORTS:
   ‚Ä¢ Layout (d√≤ng 54)

üìÑ N·ªòI DUNG FILE:
==============================
import React, { useEffect } from 'react';
import { Outlet, useLocation } from 'react-router-dom';
import { useAuth } from '../../hooks/useAuth';
import ResponsiveNavigation from './ResponsiveNavigation';

const Layout = () => {
  const { user } = useAuth();
  const location = useLocation();

  useEffect(() => {
    // Initialize tooltips when location changes
    if (typeof window !== 'undefined' && window.bootstrap) {
      const tooltipTriggerList = [].slice.call(
        document.querySelectorAll('[data-bs-toggle="tooltip"]')
      );
      tooltipTriggerList.map(tooltipTriggerEl => {
        return new window.bootstrap.Tooltip(tooltipTriggerEl);
      });
    }
  }, [location]);

  if (!user) {
    return (
      <div className="d-flex justify-content-center align-items-center min-vh-100">
        <div className="spinner-border" role="status">
          <span className="visually-hidden">Loading...</span>
        </div>
      </div>
    );
  }

  return (
    <div className="d-flex">
      <ResponsiveNavigation />
      
      {/* Main content */}
      <div className="flex-grow-1">
        <main className="container-fluid py-4">
          <Outlet />
        </main>
      </div>

      {/* Alert container for notifications */}
      <div id="alert-container" className="position-fixed" style={{
        top: '20px',
        right: '20px',
        zIndex: 1055,
        minWidth: '300px'
      }}></div>
    </div>
  );
};

export default Layout;

==============================

üìÅ File: .\src\components\layout\ResponsiveNavigation.jsx
------------------------------
üîß FUNCTIONS:
   ‚Ä¢ ResponsiveNavigation (d√≤ng 6) - arrow function
   ‚Ä¢ checkScreenSize (d√≤ng 17) - arrow function
   ‚Ä¢ isActiveRoute (d√≤ng 58) - arrow function
   ‚Ä¢ DesktopNavigation (d√≤ng 73) - arrow function
   ‚Ä¢ MobileNavigation (d√≤ng 122) - arrow function
   ‚Ä¢ getRoleDisplayName (d√≤ng 210) - arrow function
üì§ EXPORTS:
   ‚Ä¢ ResponsiveNavigation (d√≤ng 231)

üìÑ N·ªòI DUNG FILE:
==============================
import React, { useState, useEffect } from 'react';
import { useLocation } from 'react-router-dom';
import { useAuth } from '../../hooks/useAuth';
import { useNotification } from '../../hooks/useNotification';

const ResponsiveNavigation = () => {
  const [isMobile, setIsMobile] = useState(false);
  const [sidebarOpen, setSidebarOpen] = useState(false);
  const [dropdownOpen, setDropdownOpen] = useState(false);
  
  const { user, logout } = useAuth();
  const { showNotification } = useNotification();
  const location = useLocation();

  // Detect mobile screen
  useEffect(() => {
    const checkScreenSize = () => {
      setIsMobile(window.innerWidth < 768);
    };
    
    checkScreenSize();
    window.addEventListener('resize', checkScreenSize);
    return () => window.removeEventListener('resize', checkScreenSize);
  }, []);

  // Menu items configuration
  const menuItems = [
    {
      path: '/dashboard',
      icon: 'fas fa-tachometer-alt',
      label: 'Dashboard',
      roles: ['admin', 'hr', 'sales_manager', 'finance_manager', 'director']
    },
    {
      path: '/employee-management',
      icon: 'fas fa-users-cog',
      label: 'Qu·∫£n l√Ω nh√¢n vi√™n',
      roles: ['admin', 'hr']
    },
    {
      path: '/hr-dashboard',
      icon: 'fas fa-chart-bar',
      label: 'HR Dashboard',
      roles: ['admin', 'hr']
    },
    {
      path: '/attendance-logs',
      icon: 'fas fa-clock',
      label: 'B·∫£n ghi ch·∫•m c√¥ng',
      roles: ['admin', 'hr', 'sales_manager', 'finance_manager', 'director']
    }
  ];

  const filteredMenuItems = menuItems.filter(item => 
    item.roles.includes(user?.role)
  );

  const isActiveRoute = (path) => {
    return location.pathname === path || location.pathname.startsWith(path + '/');
  };

  const handleLogout = async () => {
    try {
      await logout();
      showNotification('ƒêƒÉng xu·∫•t th√†nh c√¥ng!', 'success');
    } catch (error) {
      console.error('Logout error:', error);
      showNotification('L·ªói khi ƒëƒÉng xu·∫•t', 'error');
    }
  };

  // Desktop Navigation (Always visible sidebar)
  const DesktopNavigation = () => (
    <div className="d-none d-md-flex">
      {/* Desktop Sidebar */}
      <div className="bg-light border-end" style={{ width: '280px', minHeight: '100vh' }}>
        {/* Brand Header */}
        <div className="p-3 border-bottom">
          <div className="d-flex align-items-center">
            <div className="rounded-circle bg-primary d-flex align-items-center justify-content-center me-2" 
                 style={{ width: '40px', height: '40px' }}>
              <i className="fas fa-user text-white"></i>
            </div>
            <div>
              <div className="fw-semibold">{user?.fullName}</div>
              <small className="text-muted">{getRoleDisplayName(user?.role)}</small>
            </div>
          </div>
        </div>

        {/* Navigation Menu */}
        <nav className="flex-grow-1 p-2">
          {filteredMenuItems.map((item, index) => (
            <a
              key={index}
              href={item.path}
              className={`nav-link d-flex align-items-center rounded mb-1 p-3 ${
                isActiveRoute(item.path) ? 'active bg-primary text-white' : 'text-dark'
              }`}
            >
              <i className={`${item.icon} me-2`}></i>
              <span>{item.label}</span>
            </a>
          ))}
        </nav>

        {/* User Actions */}
        <div className="border-top p-3">
          <button 
            className="btn btn-outline-danger w-100"
            onClick={handleLogout}
          >
            <i className="fas fa-sign-out-alt me-2"></i>
            ƒêƒÉng xu·∫•t
          </button>
        </div>
      </div>
    </div>
  );

  // Mobile Navigation (Top navbar + collapsible menu)
  const MobileNavigation = () => (
    <div className="d-md-none">
      {/* Mobile Top Bar */}
      <nav className="navbar navbar-dark bg-dark">
        <div className="container-fluid">
          <a className="navbar-brand" href="/dashboard">
            <i className="fas fa-users me-2"></i>
            HR Management
          </a>
          
          <button
            className="navbar-toggler"
            type="button"
            onClick={() => setSidebarOpen(!sidebarOpen)}
          >
            <span className="navbar-toggler-icon"></span>
          </button>
        </div>
      </nav>

      {/* Mobile Sidebar Overlay */}
      {sidebarOpen && (
        <>
          {/* Backdrop */}
          <div 
            className="position-fixed top-0 start-0 w-100 h-100 bg-dark bg-opacity-50"
            style={{ zIndex: 1040 }}
            onClick={() => setSidebarOpen(false)}
          ></div>
          
          {/* Mobile Sidebar */}
          <div 
            className="position-fixed top-0 start-0 bg-light h-100"
            style={{ width: '280px', zIndex: 1050 }}
          >
            {/* Mobile Header */}
            <div className="p-3 border-bottom d-flex justify-content-between align-items-center">
              <div className="d-flex align-items-center">
                <div className="rounded-circle bg-primary d-flex align-items-center justify-content-center me-2" 
                     style={{ width: '32px', height: '32px' }}>
                  <i className="fas fa-user text-white"></i>
                </div>
                <div>
                  <div className="fw-semibold small">{user?.fullName}</div>
                  <small className="text-muted">{getRoleDisplayName(user?.role)}</small>
                </div>
              </div>
              <button 
                className="btn btn-sm btn-outline-secondary"
                onClick={() => setSidebarOpen(false)}
              >
                <i className="fas fa-times"></i>
              </button>
            </div>

            {/* Mobile Menu */}
            <nav className="p-2">
              {filteredMenuItems.map((item, index) => (
                <a
                  key={index}
                  href={item.path}
                  className={`nav-link d-flex align-items-center rounded mb-1 p-3 ${
                    isActiveRoute(item.path) ? 'active bg-primary text-white' : 'text-dark'
                  }`}
                  onClick={() => setSidebarOpen(false)}
                >
                  <i className={`${item.icon} me-2`}></i>
                  <span>{item.label}</span>
                </a>
              ))}
            </nav>

            {/* Mobile User Actions */}
            <div className="position-absolute bottom-0 w-100 border-top p-3">
              <button 
                className="btn btn-outline-danger w-100"
                onClick={handleLogout}
              >
                <i className="fas fa-sign-out-alt me-2"></i>
                ƒêƒÉng xu·∫•t
              </button>
            </div>
          </div>
        </>
      )}
    </div>
  );

  const getRoleDisplayName = (role) => {
    const roleMap = {
      'admin': 'Administrator',
      'hr': 'HR Manager',
      'sales_manager': 'Sales Manager',
      'finance_manager': 'Finance Manager',
      'director': 'Director'
    };
    return roleMap[role] || 'Nh√¢n vi√™n';
  };

  if (!user) return null;

  return (
    <>
      <DesktopNavigation />
      <MobileNavigation />
    </>
  );
};

export default ResponsiveNavigation;

==============================

üìÅ File: .\src\components\masterdata\PositionManager.jsx
------------------------------
üîß FUNCTIONS:
   ‚Ä¢ PositionManager (d√≤ng 6) - arrow function
   ‚Ä¢ handleInputChange (d√≤ng 33) - arrow function
   ‚Ä¢ handleEdit (d√≤ng 67) - arrow function
   ‚Ä¢ handleCancel (d√≤ng 89) - arrow function
üì§ EXPORTS:
   ‚Ä¢ PositionManager (d√≤ng 230)

üìÑ N·ªòI DUNG FILE:
==============================
import React, { useState, useEffect } from 'react';
import { ApiClient } from '../../services/api';
import { useNotification } from '../../hooks/useNotification';
import Loading from '../common/Loading';

const PositionManager = () => {
  const [positions, setPositions] = useState([]);
  const [loading, setLoading] = useState(true);
  const [formData, setFormData] = useState({
    positionName: '',
    description: ''
  });
  const [editingPosition, setEditingPosition] = useState(null);
  const { showNotification } = useNotification();

  useEffect(() => {
    loadPositions();
  }, []);

  const loadPositions = async () => {
    try {
      setLoading(true);
      const data = await ApiClient.get('/api/employees/positions');
      setPositions(data);
    } catch (error) {
      console.error('Error loading positions:', error);
      showNotification('L·ªói khi t·∫£i danh s√°ch v·ªã tr√≠', 'error');
    } finally {
      setLoading(false);
    }
  };

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    
    if (!formData.positionName.trim()) {
      showNotification('Vui l√≤ng nh·∫≠p t√™n v·ªã tr√≠!', 'error');
      return;
    }

    try {
      if (editingPosition) {
        await ApiClient.put(`/api/employees/positions/${editingPosition.id}`, formData);
        showNotification('C·∫≠p nh·∫≠t v·ªã tr√≠ th√†nh c√¥ng', 'success');
      } else {
        await ApiClient.post('/api/employees/positions', formData);
        showNotification('Th√™m v·ªã tr√≠ th√†nh c√¥ng', 'success');
      }
      
      setFormData({ positionName: '', description: '' });
      setEditingPosition(null);
      await loadPositions();
    } catch (error) {
      console.error('Error saving position:', error);
      showNotification('L·ªói khi l∆∞u v·ªã tr√≠', 'error');
    }
  };

  const handleEdit = (position) => {
    setEditingPosition(position);
    setFormData({
      positionName: position.positionName,
      description: position.description || ''
    });
  };

  const handleDelete = async (position) => {
    const confirmed = window.confirm(`B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a v·ªã tr√≠ "${position.positionName}"?`);
    if (!confirmed) return;

    try {
      await ApiClient.delete(`/api/employees/positions/${position.id}`);
      showNotification('X√≥a v·ªã tr√≠ th√†nh c√¥ng', 'success');
      await loadPositions();
    } catch (error) {
      console.error('Error deleting position:', error);
      showNotification('L·ªói khi x√≥a v·ªã tr√≠', 'error');
    }
  };

  const handleCancel = () => {
    setEditingPosition(null);
    setFormData({ positionName: '', description: '' });
  };

  if (loading) {
    return <Loading text="ƒêang t·∫£i danh s√°ch v·ªã tr√≠..." />;
  }

  return (
    <div className="position-manager">
      <div className="row">
        <div className="col-md-4">
          <div className="card">
            <div className="card-header">
              <h5>{editingPosition ? 'Ch·ªânh s·ª≠a' : 'Th√™m'} v·ªã tr√≠</h5>
            </div>
            <div className="card-body">
              <form onSubmit={handleSubmit}>
                <div className="mb-3">
                  <label className="form-label">
                    T√™n v·ªã tr√≠ <span className="text-danger">*</span>
                  </label>
                  <input
                    type="text"
                    className="form-control"
                    name="positionName"
                    value={formData.positionName}
                    onChange={handleInputChange}
                    required
                  />
                </div>
                
                <div className="mb-3">
                  <label className="form-label">M√¥ t·∫£</label>
                  <textarea
                    className="form-control"
                    name="description"
                    value={formData.description}
                    onChange={handleInputChange}
                    rows="3"
                    placeholder="M√¥ t·∫£ v·ªÅ v·ªã tr√≠ c√¥ng vi·ªác..."
                  />
                </div>
                
                <div className="d-grid gap-2">
                  <button type="submit" className="btn btn-primary">
                    {editingPosition ? 'C·∫≠p nh·∫≠t' : 'Th√™m'} v·ªã tr√≠
                  </button>
                  {editingPosition && (
                    <button 
                      type="button" 
                      className="btn btn-secondary"
                      onClick={handleCancel}
                    >
                      H·ªßy
                    </button>
                  )}
                </div>
              </form>
            </div>
          </div>
        </div>
        
        <div className="col-md-8">
          <div className="card">
            <div className="card-header">
              <h5>Danh s√°ch v·ªã tr√≠</h5>
            </div>
            <div className="card-body">
              {positions.length === 0 ? (
                <div className="text-center py-4">
                  <i className="fas fa-briefcase fa-3x text-muted mb-3"></i>
                  <p className="text-muted">Ch∆∞a c√≥ v·ªã tr√≠ n√†o</p>
                </div>
              ) : (
                <div className="table-responsive">
                  <table className="table table-striped table-hover">
                    <thead className="table-dark">
                      <tr>
                        <th>T√™n v·ªã tr√≠</th>
                        <th>M√¥ t·∫£</th>
                        <th>Tr·∫°ng th√°i</th>
                        <th>Thao t√°c</th>
                      </tr>
                    </thead>
                    <tbody>
                      {positions.map(position => (
                        <tr key={position.id}>
                          <td>
                            <strong>{position.positionName}</strong>
                          </td>
                          <td>
                            <span className="text-muted">
                              {position.description || 'Kh√¥ng c√≥ m√¥ t·∫£'}
                            </span>
                          </td>
                          <td>
                            <span className={`badge ${
                              position.status === 'active' 
                                ? 'bg-success' 
                                : 'bg-secondary'
                            }`}>
                              {position.status === 'active' 
                                ? 'Ho·∫°t ƒë·ªông' 
                                : 'Ng∆∞ng ho·∫°t ƒë·ªông'
                              }
                            </span>
                          </td>
                          <td>
                            <div className="btn-group" role="group">
                              <button
                                className="btn btn-sm btn-primary"
                                onClick={() => handleEdit(position)}
                                title="Ch·ªânh s·ª≠a"
                              >
                                <i className="fas fa-edit"></i>
                              </button>
                              <button
                                className="btn btn-sm btn-danger"
                                onClick={() => handleDelete(position)}
                                title="X√≥a"
                              >
                                <i className="fas fa-trash"></i>
                              </button>
                            </div>
                          </td>
                        </tr>
                      ))}
                    </tbody>
                  </table>
                </div>
              )}
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default PositionManager;

==============================

üìÅ File: .\src\components\masterdata\StoreManager.jsx
------------------------------
üîß FUNCTIONS:
   ‚Ä¢ StoreManager (d√≤ng 6) - arrow function
   ‚Ä¢ handleInputChange (d√≤ng 33) - arrow function
   ‚Ä¢ handleEdit (d√≤ng 67) - arrow function
   ‚Ä¢ handleCancel (d√≤ng 89) - arrow function
üì§ EXPORTS:
   ‚Ä¢ StoreManager (d√≤ng 226)

üìÑ N·ªòI DUNG FILE:
==============================
import React, { useState, useEffect } from 'react';
import { ApiClient } from '../../services/api';
import { useNotification } from '../../hooks/useNotification';
import Loading from '../common/Loading';

const StoreManager = () => {
  const [stores, setStores] = useState([]);
  const [loading, setLoading] = useState(true);
  const [formData, setFormData] = useState({
    storeName: '',
    address: ''
  });
  const [editingStore, setEditingStore] = useState(null);
  const { showNotification } = useNotification();

  useEffect(() => {
    loadStores();
  }, []);

  const loadStores = async () => {
    try {
      setLoading(true);
      const data = await ApiClient.get('/api/employees/stores');
      setStores(data);
    } catch (error) {
      console.error('Error loading stores:', error);
      showNotification('L·ªói khi t·∫£i danh s√°ch c·ª≠a h√†ng', 'error');
    } finally {
      setLoading(false);
    }
  };

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    
    if (!formData.storeName.trim() || !formData.address.trim()) {
      showNotification('Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin!', 'error');
      return;
    }

    try {
      if (editingStore) {
        await ApiClient.put(`/api/employees/stores/${editingStore.id}`, formData);
        showNotification('C·∫≠p nh·∫≠t c·ª≠a h√†ng th√†nh c√¥ng', 'success');
      } else {
        await ApiClient.post('/api/employees/stores', formData);
        showNotification('Th√™m c·ª≠a h√†ng th√†nh c√¥ng', 'success');
      }
      
      setFormData({ storeName: '', address: '' });
      setEditingStore(null);
      await loadStores();
    } catch (error) {
      console.error('Error saving store:', error);
      showNotification('L·ªói khi l∆∞u c·ª≠a h√†ng', 'error');
    }
  };

  const handleEdit = (store) => {
    setEditingStore(store);
    setFormData({
      storeName: store.storeName,
      address: store.address
    });
  };

  const handleDelete = async (store) => {
    const confirmed = window.confirm(`B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a c·ª≠a h√†ng "${store.storeName}"?`);
    if (!confirmed) return;

    try {
      await ApiClient.delete(`/api/employees/stores/${store.id}`);
      showNotification('X√≥a c·ª≠a h√†ng th√†nh c√¥ng', 'success');
      await loadStores();
    } catch (error) {
      console.error('Error deleting store:', error);
      showNotification('L·ªói khi x√≥a c·ª≠a h√†ng', 'error');
    }
  };

  const handleCancel = () => {
    setEditingStore(null);
    setFormData({ storeName: '', address: '' });
  };

  if (loading) {
    return <Loading text="ƒêang t·∫£i danh s√°ch c·ª≠a h√†ng..." />;
  }

  return (
    <div className="store-manager">
      <div className="row">
        <div className="col-md-4">
          <div className="card">
            <div className="card-header">
              <h5>{editingStore ? 'Ch·ªânh s·ª≠a' : 'Th√™m'} c·ª≠a h√†ng</h5>
            </div>
            <div className="card-body">
              <form onSubmit={handleSubmit}>
                <div className="mb-3">
                  <label className="form-label">
                    T√™n c·ª≠a h√†ng <span className="text-danger">*</span>
                  </label>
                  <input
                    type="text"
                    className="form-control"
                    name="storeName"
                    value={formData.storeName}
                    onChange={handleInputChange}
                    required
                  />
                </div>
                
                <div className="mb-3">
                  <label className="form-label">
                    ƒê·ªãa ch·ªâ <span className="text-danger">*</span>
                  </label>
                  <textarea
                    className="form-control"
                    name="address"
                    value={formData.address}
                    onChange={handleInputChange}
                    rows="3"
                    required
                  />
                </div>
                
                <div className="d-grid gap-2">
                  <button type="submit" className="btn btn-primary">
                    {editingStore ? 'C·∫≠p nh·∫≠t' : 'Th√™m'} c·ª≠a h√†ng
                  </button>
                  {editingStore && (
                    <button 
                      type="button" 
                      className="btn btn-secondary"
                      onClick={handleCancel}
                    >
                      H·ªßy
                    </button>
                  )}
                </div>
              </form>
            </div>
          </div>
        </div>
        
        <div className="col-md-8">
          <div className="card">
            <div className="card-header">
              <h5>Danh s√°ch c·ª≠a h√†ng</h5>
            </div>
            <div className="card-body">
              {stores.length === 0 ? (
                <div className="text-center py-4">
                  <i className="fas fa-store fa-3x text-muted mb-3"></i>
                  <p className="text-muted">Ch∆∞a c√≥ c·ª≠a h√†ng n√†o</p>
                </div>
              ) : (
                <div className="table-responsive">
                  <table className="table table-striped table-hover">
                    <thead className="table-dark">
                      <tr>
                        <th>T√™n c·ª≠a h√†ng</th>
                        <th>ƒê·ªãa ch·ªâ</th>
                        <th>Tr·∫°ng th√°i</th>
                        <th>Thao t√°c</th>
                      </tr>
                    </thead>
                    <tbody>
                      {stores.map(store => (
                        <tr key={store.id}>
                          <td>{store.storeName}</td>
                          <td>{store.address}</td>
                          <td>
                            <span className={`badge ${
                              store.status === 'active' 
                                ? 'bg-success' 
                                : 'bg-secondary'
                            }`}>
                              {store.status === 'active' 
                                ? 'Ho·∫°t ƒë·ªông' 
                                : 'Ng∆∞ng ho·∫°t ƒë·ªông'
                              }
                            </span>
                          </td>
                          <td>
                            <div className="btn-group" role="group">
                              <button
                                className="btn btn-sm btn-primary"
                                onClick={() => handleEdit(store)}
                                title="Ch·ªânh s·ª≠a"
                              >
                                <i className="fas fa-edit"></i>
                              </button>
                              <button
                                className="btn btn-sm btn-danger"
                                onClick={() => handleDelete(store)}
                                title="X√≥a"
                              >
                                <i className="fas fa-trash"></i>
                              </button>
                            </div>
                          </td>
                        </tr>
                      ))}
                    </tbody>
                  </table>
                </div>
              )}
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default StoreManager;

==============================

üìÅ File: .\src\contexts\AppContext.jsx
------------------------------

üìÑ N·ªòI DUNG FILE:
==============================

==============================

üìÅ File: .\src\contexts\AuthContext.jsx
------------------------------
üîß FUNCTIONS:
   ‚Ä¢ AuthProvider (d√≤ng 6) - arrow function
   ‚Ä¢ updateUserInfo (d√≤ng 87) - arrow function
   ‚Ä¢ hasRole (d√≤ng 94) - arrow function
   ‚Ä¢ isHR (d√≤ng 105) - arrow function
   ‚Ä¢ isAdmin (d√≤ng 109) - arrow function
   ‚Ä¢ useAuth (d√≤ng 133) - arrow function
üì§ EXPORTS:
   ‚Ä¢ const (d√≤ng 6)
   ‚Ä¢ const (d√≤ng 133)
   ‚Ä¢ AuthContext (d√≤ng 141)

üìÑ N·ªòI DUNG FILE:
==============================
import React, { createContext, useContext, useState, useEffect } from 'react';
import { ApiClient } from '../services/api.js';

const AuthContext = createContext();

export const AuthProvider = ({ children }) => {
  const [user, setUser] = useState(null);
  const [loading, setLoading] = useState(true);
  const [initialized, setInitialized] = useState(false);

  useEffect(() => {
    initializeAuth();
  }, []);

  const initializeAuth = async () => {
    try {
      setLoading(true);
      const user = await checkAuth();
      setUser(user);
      setInitialized(true);
    } catch (error) {
      console.error('Auth initialization error:', error);
      setUser(null);
    } finally {
      setLoading(false);
    }
  };

  const checkAuth = async () => {
    try {
      const response = await fetch('/api/auth/profile', {
        credentials: 'include'
      });
      
      if (response.ok) {
        const data = await response.json();
        return data.user;
      } else {
        return null;
      }
    } catch (error) {
      console.error('Auth check error:', error);
      return null;
    }
  };

  const login = async (credentials) => {
    try {
      setLoading(true);
      const response = await ApiClient.post('/api/auth/login', credentials);
      
      if (response.user) {
        setUser(response.user);
        return response;
      } else {
        throw new Error('Login failed');
      }
    } catch (error) {
      console.error('Login error:', error);
      throw error;
    } finally {
      setLoading(false);
    }
  };

  const logout = async () => {
    try {
      setLoading(true);
      await ApiClient.post('/api/auth/logout');
      setUser(null);
      
      // Redirect after logout
      setTimeout(() => {
        window.location.href = '/login';
      }, 1000);
      
    } catch (error) {
      console.error('Logout error:', error);
      // Force logout even if API fails
      setUser(null);
      window.location.href = '/login';
    } finally {
      setLoading(false);
    }
  };

  const updateUserInfo = (userData) => {
    setUser(prevUser => ({
      ...prevUser,
      ...userData
    }));
  };

  const hasRole = (requiredRoles) => {
    if (!user) return false;
    if (typeof requiredRoles === 'string') {
      return user.role === requiredRoles;
    }
    if (Array.isArray(requiredRoles)) {
      return requiredRoles.includes(user.role);
    }
    return false;
  };

  const isHR = () => {
    return user && (user.role === 'hr' || user.role === 'admin');
  };

  const isAdmin = () => {
    return user && user.role === 'admin';
  };

  const value = {
    user,
    loading,
    initialized,
    login,
    logout,
    checkAuth,
    updateUserInfo,
    hasRole,
    isHR,
    isAdmin
  };

  return (
    <AuthContext.Provider value={value}>
      {children}
    </AuthContext.Provider>
  );
};

export const useAuth = () => {
  const context = useContext(AuthContext);
  if (!context) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
};

export default AuthContext;

==============================

üìÅ File: .\src\contexts\NotificationContext.jsx
------------------------------
üîß FUNCTIONS:
   ‚Ä¢ NotificationProvider (d√≤ng 5) - arrow function
   ‚Ä¢ getIconByType (d√≤ng 38) - arrow function
   ‚Ä¢ useNotification (d√≤ng 68) - arrow function
üì§ EXPORTS:
   ‚Ä¢ const (d√≤ng 5)
   ‚Ä¢ const (d√≤ng 68)
   ‚Ä¢ NotificationContext (d√≤ng 77)
   ‚Ä¢  NotificationContext  (d√≤ng 76)

üìÑ N·ªòI DUNG FILE:
==============================
import React, { createContext, useContext, useCallback } from 'react';

const NotificationContext = createContext();

export const NotificationProvider = ({ children }) => {
  const showNotification = useCallback((message, type = 'info', duration = 5000) => {
    const alertContainer = document.getElementById('alert-container');
    if (!alertContainer) {
      console.warn('Alert container not found');
      return;
    }
    
    const alertId = `alert-${Date.now()}`;
    const alertDiv = document.createElement('div');
    alertDiv.id = alertId;
    alertDiv.className = `alert alert-${type === 'error' ? 'danger' : type} alert-dismissible fade show`;
    alertDiv.style.marginBottom = '10px';
    
    alertDiv.innerHTML = `
      <div class="d-flex align-items-center">
        <i class="fas fa-${getIconByType(type)} me-2"></i>
        <div class="flex-grow-1">${message}</div>
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
      </div>
    `;
    
    alertContainer.appendChild(alertDiv);
    
    // Auto remove after duration
    setTimeout(() => {
      const element = document.getElementById(alertId);
      if (element && element.parentNode) {
        element.parentNode.removeChild(element);
      }
    }, duration);
  }, []);

  const getIconByType = (type) => {
    switch (type) {
      case 'success': return 'check-circle';
      case 'error': 
      case 'danger': return 'exclamation-triangle';
      case 'warning': return 'exclamation-circle';
      case 'info': return 'info-circle';
      default: return 'info-circle';
    }
  };

  const clearNotifications = useCallback(() => {
    const alertContainer = document.getElementById('alert-container');
    if (alertContainer) {
      alertContainer.innerHTML = '';
    }
  }, []);

  const value = {
    showNotification,
    clearNotifications
  };

  return (
    <NotificationContext.Provider value={value}>
      {children}
    </NotificationContext.Provider>
  );
};

export const useNotification = () => {
  const context = useContext(NotificationContext);
  if (!context) {
    throw new Error('useNotification must be used within a NotificationProvider');
  }
  return context;
};

export { NotificationContext };
export default NotificationContext;


==============================

üìÅ File: .\src\hooks\useApi.js
------------------------------

üìÑ N·ªòI DUNG FILE:
==============================

==============================

üìÅ File: .\src\hooks\useAttendance.js
------------------------------
üîß FUNCTIONS:
   ‚Ä¢ useAttendanceStats (d√≤ng 1) - arrow function
üì§ EXPORTS:
   ‚Ä¢ const (d√≤ng 1)

üìÑ N·ªòI DUNG FILE:
==============================
export const useAttendanceStats = () => {
    const [stats, setStats] = useState({
        totalAttendanceLogs: 0,
        todayLogs: 0,
        thisWeekLogs: 0
    });
    const [loading, setLoading] = useState(false);
    
    const fetchStats = async () => {
        setLoading(true);
        try {
            const response = await api.get('/attendance/stats');
            if (response.data.success) {
                setStats(response.data.data);
            }
        } catch (error) {
            console.error('Error fetching attendance stats:', error);
        } finally {
            setLoading(false);
        }
    };
    
    return { stats, loading, fetchStats };
};

==============================

üìÅ File: .\src\hooks\useAuth.js
------------------------------
üîß FUNCTIONS:
   ‚Ä¢ useAuth (d√≤ng 4) - arrow function
üì§ EXPORTS:
   ‚Ä¢ const (d√≤ng 4)
   ‚Ä¢ useAuth (d√≤ng 14)

üìÑ N·ªòI DUNG FILE:
==============================
import { useContext } from 'react';
import AuthContext from '../contexts/AuthContext';

export const useAuth = () => {
  const context = useContext(AuthContext);
  
  if (!context) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  
  return context;
};

export default useAuth;

==============================

üìÅ File: .\src\hooks\useEmployees.js
------------------------------
üîß FUNCTIONS:
   ‚Ä¢ useEmployeeStats (d√≤ng 5) - arrow function
   ‚Ä¢ useEmployeeStats (d√≤ng 55) - arrow function
   ‚Ä¢ useEmployees (d√≤ng 95) - arrow function
üì§ EXPORTS:
   ‚Ä¢ const (d√≤ng 5)
   ‚Ä¢ const (d√≤ng 55)
   ‚Ä¢ const (d√≤ng 95)

üìÑ N·ªòI DUNG FILE:
==============================
// // src/hooks/useEmployees.js
// import { useState, useCallback } from 'react';
// import api from '../services/api.js';

// export const useEmployeeStats = () => {
//     const [stats, setStats] = useState({
//         totalEmployees: 0,
//         activeEmployees: 0,
//         inactiveEmployees: 0
//     });
//     const [loading, setLoading] = useState(false);
    
//     // ‚úÖ Wrap fetchStats v·ªõi useCallback ƒë·ªÉ tr√°nh re-creation
//     const fetchStats = useCallback(async () => {
//         console.log('\nüîç FRONTEND: useEmployeeStats.fetchStats() called');
//         setLoading(true);
        
//         try {
//             console.log('üì° Making API request to /employees/stats...');
//             const response = await api.get('/employees/stats');
            
//             console.log('üì® Full API Response:', response);
//             console.log('‚úÖ Success check:', response.data.success);
//             console.log('üìä Stats data:', response.data.data);
            
//             if (response.data.success) {
//                 console.log('‚úÖ Setting stats to:', response.data.data);
//                 setStats(response.data.data);
//             } else {
//                 console.warn('‚ö†Ô∏è API returned success: false');
//             }
            
//         } catch (error) {
//             console.error('‚ùå Error in fetchStats:', error);
//         } finally {
//             setLoading(false);
//             console.log('üèÅ fetchStats completed');
//         }
//     }, []); // ‚Üê ‚úÖ Empty deps ƒë·ªÉ tr√°nh re-creation
    
//     return { stats, loading, fetchStats };
// };

// src/hooks/useEmployees.js
// src/hooks/useEmployees.js
// src/hooks/useEmployees.js




// --------------------------------------- v2 ---------------------------------------
// import { useState, useCallback } from 'react';
// import api from '../services/api.js';

// export const useEmployeeStats = () => {
//     const [stats, setStats] = useState({
//         totalEmployees: 0,
//         activeEmployees: 0,
//         inactiveEmployees: 0
//     });
//     const [loading, setLoading] = useState(false);
    
//     const fetchStats = useCallback(async () => {
//         console.log('üîç FRONTEND: fetchStats called');
//         setLoading(true);
        
//         try {
//             // ‚úÖ TH√äM PREFIX /api v√†o ƒë√¢y
//             const response = await api.get('/api/employees/stats');
            
//             console.log('üì® API Response:', response);
            
//             if (response.success) {
//                 console.log('‚úÖ Setting stats:', response.data);
//                 setStats(response.data);
//             } else {
//                 console.warn('‚ö†Ô∏è API returned success: false');
//             }
            
//         } catch (error) {
//             console.error('‚ùå Error in fetchStats:', error);
//         } finally {
//             setLoading(false);
//         }
//     }, []);
    
//     return { stats, loading, fetchStats };
// };


import { useState, useEffect } from 'react';
import * as employeeService from '../services/employee.js';
import { useNotification } from './useNotification';

export const useEmployees = () => {
  const [employees, setEmployees] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const { showNotification } = useNotification();

  // Fetch all employees
  const fetchEmployees = async () => {
    setLoading(true);
    setError(null);
    
    try {
      const response = await employeeService.getAllEmployees();
      setEmployees(response.data || []);
    } catch (error) {
      console.error('Error fetching employees:', error);
      setError(error.message);
      showNotification(error.message, 'error');
      setEmployees([]);
    } finally {
      setLoading(false);
    }
  };

  // Add employee
  const addEmployeeHandler = async (employeeData) => {
    try {
      const response = await employeeService.addEmployee(employeeData);
      showNotification('Th√™m nh√¢n vi√™n th√†nh c√¥ng!', 'success');
      await fetchEmployees(); // Refresh list
      return response;
    } catch (error) {
      console.error('Error adding employee:', error);
      throw error; // Re-throw ƒë·ªÉ component handle
    }
  };

  // Update employee
  const updateEmployeeHandler = async (employeeId, employeeData) => {
    try {
      const response = await employeeService.updateEmployee(employeeId, employeeData);
      showNotification('C·∫≠p nh·∫≠t nh√¢n vi√™n th√†nh c√¥ng!', 'success');
      await fetchEmployees(); // Refresh list
      return response;
    } catch (error) {
      console.error('Error updating employee:', error);
      throw error;
    }
  };

  // Delete employee
  const deleteEmployeeHandler = async (employeeId) => {
    try {
      await employeeService.deleteEmployee(employeeId);
      showNotification('X√≥a nh√¢n vi√™n th√†nh c√¥ng!', 'success');
      await fetchEmployees(); // Refresh list
    } catch (error) {
      console.error('Error deleting employee:', error);
      showNotification(error.message, 'error');
      throw error;
    }
  };

  // Search employees
  const searchEmployees = async (query) => {
    setLoading(true);
    try {
      const response = await employeeService.searchEmployees(query);
      setEmployees(response.data || []);
    } catch (error) {
      console.error('Error searching employees:', error);
      showNotification(error.message, 'error');
    } finally {
      setLoading(false);
    }
  };

  // Get work history
  const getWorkHistory = async (employeeId) => {
    try {
      const response = await employeeService.getEmployeeWorkHistory(employeeId);
      return response.data || [];
    } catch (error) {
      console.error('Error fetching work history:', error);
      showNotification(error.message, 'error');
      return [];
    }
  };

  // Add work history
  const addWorkHistoryHandler = async (workHistoryData) => {
    try {
      const response = await employeeService.addWorkHistory(workHistoryData);
      showNotification('Th√™m work history th√†nh c√¥ng!', 'success');
      return response;
    } catch (error) {
      console.error('Error adding work history:', error);
      throw error;
    }
  };

  useEffect(() => {
    fetchEmployees();
  }, []);

  return {
    employees,
    loading,
    error,
    fetchEmployees,
    addEmployee: addEmployeeHandler,
    updateEmployee: updateEmployeeHandler,
    deleteEmployee: deleteEmployeeHandler,
    searchEmployees,
    getWorkHistory,
    addWorkHistory: addWorkHistoryHandler
  };
};

==============================

üìÅ File: .\src\hooks\useNotification.js
------------------------------
üîß FUNCTIONS:
   ‚Ä¢ useNotification (d√≤ng 4) - arrow function
üì§ EXPORTS:
   ‚Ä¢ const (d√≤ng 4)
   ‚Ä¢ useNotification (d√≤ng 12)

üìÑ N·ªòI DUNG FILE:
==============================
import { useContext } from 'react';
import { NotificationContext } from '../contexts/NotificationContext';

export const useNotification = () => {
  const context = useContext(NotificationContext);
  if (!context) {
    throw new Error('useNotification must be used within a NotificationProvider');
  }
  return context;
};

export default useNotification;

==============================

üìÅ File: .\src\pages\AttendanceLogsPage.jsx
------------------------------
üîß FUNCTIONS:
   ‚Ä¢ AttendanceLogsPage (d√≤ng 9) - arrow function
üì§ EXPORTS:
   ‚Ä¢ AttendanceLogsPage (d√≤ng 194)

üìÑ N·ªòI DUNG FILE:
==============================
import React, { useState, useEffect } from 'react';
import { ApiClient } from '../services/api';
import { useNotification } from '../hooks/useNotification';
import Loading from '../components/common/Loading';
import AttendanceFilters from '../components/attendance/AttendanceFilters';
import AttendanceLogs from '../components/attendance/AttendanceLogs';
import EmployeeHours from '../components/attendance/EmployeeHours';

const AttendanceLogsPage = () => {
  const [employees, setEmployees] = useState([]);
  const [logs, setLogs] = useState([]);
  const [employeeHours, setEmployeeHours] = useState({});
  const [loading, setLoading] = useState(true);
  const [filters, setFilters] = useState({});
  const { showNotification } = useNotification();

  useEffect(() => {
    loadInitialData();
  }, []);

  const loadInitialData = async () => {
    try {
      setLoading(true);
      await Promise.all([
        loadEmployees(),
        loadAttendanceLogs(),
        loadEmployeeHours()
      ]);
    } catch (error) {
      console.error('Error loading initial data:', error);
      showNotification('L·ªói khi t·∫£i d·ªØ li·ªáu ch·∫•m c√¥ng', 'error');
    } finally {
      setLoading(false);
    }
  };

  const loadEmployees = async () => {
    try {
      const data = await ApiClient.get('/api/employees');
      setEmployees(data);
    } catch (error) {
      console.error('Error loading employees:', error);
      showNotification('L·ªói khi t·∫£i danh s√°ch nh√¢n vi√™n', 'error');
    }
  };

  const loadAttendanceLogs = async (filterParams = {}) => {
    try {
      const data = await ApiClient.get('/api/attendance/logs', filterParams);
      setLogs(data);
    } catch (error) {
      console.error('Error loading attendance logs:', error);
      showNotification('L·ªói khi t·∫£i b·∫£n ghi ch·∫•m c√¥ng', 'error');
    }
  };

  const loadEmployeeHours = async () => {
    try {
      const data = await ApiClient.get('/api/attendance/employee-hours');
      setEmployeeHours(data);
    } catch (error) {
      console.error('Error loading employee hours:', error);
      showNotification('L·ªói khi t·∫£i t·ªïng gi·ªù c√¥ng', 'error');
    }
  };

  const handleFilterChange = async (newFilters) => {
    setFilters(newFilters);
    await loadAttendanceLogs(newFilters);
  };

  const handleClearFilters = async () => {
    setFilters({});
    await loadAttendanceLogs();
  };

  const handleRefresh = async () => {
    await loadInitialData();
    showNotification('ƒê√£ c·∫≠p nh·∫≠t d·ªØ li·ªáu ch·∫•m c√¥ng', 'success');
  };

  if (loading) {
    return <Loading fullScreen text="ƒêang t·∫£i d·ªØ li·ªáu ch·∫•m c√¥ng..." />;
  }

  return (
    <div className="attendance-logs-page">
      {/* Header */}
      <div className="d-flex justify-content-between align-items-center mb-4">
        <div>
          <h1>B·∫£n ghi ch·∫•m c√¥ng</h1>
          <p className="text-muted mb-0">Xem v√† qu·∫£n l√Ω b·∫£n ghi ch·∫•m c√¥ng c·ªßa nh√¢n vi√™n</p>
        </div>
        <button 
          className="btn btn-outline-primary"
          onClick={handleRefresh}
        >
          <i className="fas fa-sync-alt me-2"></i>
          L√†m m·ªõi
        </button>
      </div>

      {/* Filters */}
      <div className="card mb-4">
        <div className="card-header">
          <h5 className="mb-0">B·ªô l·ªçc</h5>
        </div>
        <div className="card-body">
          <AttendanceFilters
            employees={employees}
            filters={filters}
            onFilterChange={handleFilterChange}
            onClearFilters={handleClearFilters}
          />
        </div>
      </div>

      {/* Statistics */}
      <div className="row mb-4">
        <div className="col-md-4">
          <div className="card text-center bg-primary text-white">
            <div className="card-body">
              <h3 id="logCount">{logs.length}</h3>
              <p className="mb-0">T·ªïng b·∫£n ghi</p>
            </div>
          </div>
        </div>
        <div className="col-md-4">
          <div className="card text-center bg-success text-white">
            <div className="card-body">
              <h3>{employees.filter(emp => emp.status === 'active').length}</h3>
              <p className="mb-0">Nh√¢n vi√™n ho·∫°t ƒë·ªông</p>
            </div>
          </div>
        </div>
        <div className="col-md-4">
          <div className="card text-center bg-info text-white">
            <div className="card-body">
              <h3>{Object.keys(employeeHours).length}</h3>
              <p className="mb-0">Nh√¢n vi√™n c√≥ gi·ªù c√¥ng</p>
            </div>
          </div>
        </div>
      </div>

      {/* Content Tabs */}
      <ul className="nav nav-tabs mb-4">
        <li className="nav-item">
          <a className="nav-link active" data-bs-toggle="tab" href="#logs-tab">
            <i className="fas fa-list me-2"></i>
            B·∫£n ghi ch·∫•m c√¥ng
          </a>
        </li>
        <li className="nav-item">
          <a className="nav-link" data-bs-toggle="tab" href="#hours-tab">
            <i className="fas fa-clock me-2"></i>
            T·ªïng gi·ªù c√¥ng
          </a>
        </li>
      </ul>

      <div className="tab-content">
        {/* Attendance Logs Tab */}
        <div className="tab-pane fade show active" id="logs-tab">
          <div className="card">
            <div className="card-header">
              <h5 className="mb-0">Chi ti·∫øt b·∫£n ghi ch·∫•m c√¥ng</h5>
            </div>
            <div className="card-body">
              <AttendanceLogs logs={logs} />
            </div>
          </div>
        </div>

        {/* Employee Hours Tab */}
        <div className="tab-pane fade" id="hours-tab">
          <div className="card">
            <div className="card-header">
              <h5 className="mb-0">T·ªïng gi·ªù c√¥ng theo nh√¢n vi√™n</h5>
            </div>
            <div className="card-body">
              <EmployeeHours 
                employees={employees}
                employeeHours={employeeHours}
              />
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default AttendanceLogsPage;

==============================

üìÅ File: .\src\pages\DashboardPage.jsx
------------------------------
üîß FUNCTIONS:
   ‚Ä¢ DashboardPage (d√≤ng 6) - arrow function
   ‚Ä¢ DashboardPage (d√≤ng 24) - arrow function
üì§ EXPORTS:
   ‚Ä¢ DashboardPage (d√≤ng 16)
   ‚Ä¢ DashboardPage (d√≤ng 63)

üìÑ N·ªòI DUNG FILE:
==============================
// // src/pages/DashboardPage.jsx
// import React from 'react';
// import { useAuth } from '../hooks/useAuth.js';
// import Dashboard from '../components/dashboard/Dashboard.jsx';

// const DashboardPage = () => {
//   const { user } = useAuth();

//   return (
//     <div className="dashboard-page">
//       <Dashboard user={user} />
//     </div>
//   );
// };

// export default DashboardPage;

// src/pages/DashboardPage.jsx
import React, { useEffect } from 'react';
import { useAuth } from '../hooks/useAuth.js';
import { useEmployeeStats } from '../hooks/useEmployees.js';
import Dashboard from '../components/dashboard/Dashboard.jsx';

const DashboardPage = () => {
  const { user } = useAuth();
  
  // ‚úÖ G·ªçi hook useEmployeeStats
  const { stats, loading, fetchStats } = useEmployeeStats();
  
  // ‚úÖ FIX: B·ªè fetchStats kh·ªèi dependency array
  useEffect(() => {
    console.log('üìä DashboardPage: Fetching employee stats...');
    fetchStats();
  }, []); // ‚Üê ‚úÖ Ch·ªâ ch·∫°y 1 l·∫ßn khi mount
  
  // ‚úÖ Debug logs
  useEffect(() => {
    console.log('üìä DashboardPage: Stats updated:', {
      totalEmployees: stats.totalEmployees,
      activeEmployees: stats.activeEmployees,
      loading: loading
    });
  }, [stats, loading]);

  console.log('üéØ DashboardPage render:', { 
    totalEmployees: stats.totalEmployees,
    loading,
    hasUser: !!user
  });

  return (
    <div className="dashboard-page">
      {/* ‚úÖ Truy·ªÅn stats xu·ªëng Dashboard component */}
      <Dashboard 
        user={user} 
        employeeStats={stats}
        loading={loading}
      />
    </div>
  );
};

export default DashboardPage;

==============================

üìÅ File: .\src\pages\EmployeeManagementPage.jsx
------------------------------
üîß FUNCTIONS:
   ‚Ä¢ EmployeeManagementPage (d√≤ng 20) - arrow function
   ‚Ä¢ checkPermissions (d√≤ng 55) - arrow function
   ‚Ä¢ handleTabClick (d√≤ng 63) - arrow function
   ‚Ä¢ handleEditEmployee (d√≤ng 80) - arrow function
   ‚Ä¢ handleAddWorkHistory (d√≤ng 123) - arrow function
   ‚Ä¢ handleEmployeeAdded (d√≤ng 138) - arrow function
   ‚Ä¢ handleSearchInputChange (d√≤ng 153) - arrow function
   ‚Ä¢ handleRefresh (d√≤ng 160) - arrow function
üì§ EXPORTS:
   ‚Ä¢ EmployeeManagementPage (d√≤ng 383)

üìÑ N·ªòI DUNG FILE:
==============================
// src/pages/EmployeeManagementPage.jsx - REFACTORED VERSION
import React, { useState, useEffect } from 'react';
import { useAuth } from '../hooks/useAuth';
import { useNotification } from '../hooks/useNotification';
import { useEmployees } from '../hooks/useEmployees';

// ===== S·ª¨A: Import ƒë√∫ng components =====
import EmployeeTable from '../components/employee/EmployeeTable';  // ‚úÖ S·ª¨A: Table thay v√¨ List
import EmployeeForm from '../components/employee/EmployeeForm';
import StoreManager from '../components/masterdata/StoreManager';
import PositionManager from '../components/masterdata/PositionManager';
import Loading from '../components/common/Loading';

// ===== TH√äM: Import modal components =====
import EmployeeEditModal from '../components/employee/EmployeeEditModal';
import WorkHistoryModal from '../components/employee/WorkHistoryModal';
import AddWorkHistoryModal from '../components/employee/AddWorkHistoryModal';
import RecruitmentModal from '../components/employee/RecruitmentModal';

const EmployeeManagementPage = () => {
  const [activeTab, setActiveTab] = useState('employees');
  const [loading, setLoading] = useState(true);
  
  // ===== TH√äM: Modal states =====
  const [showEditModal, setShowEditModal] = useState(false);
  const [showWorkHistoryModal, setShowWorkHistoryModal] = useState(false);
  const [showAddWorkHistoryModal, setShowAddWorkHistoryModal] = useState(false);
  const [selectedEmployee, setSelectedEmployee] = useState(null);
  const [selectedEmployeeForHistory, setSelectedEmployeeForHistory] = useState(null);
  const [searchQuery, setSearchQuery] = useState('');

  // ===== S·ª¨A: S·ª≠ d·ª•ng hooks =====
  const { user } = useAuth();
  const { showNotification } = useNotification();
  
  // ‚úÖ S·ª¨A: S·ª≠ d·ª•ng useEmployees hook theo service layer pattern
  const {
    employees,
    loading: employeesLoading,
    error,
    fetchEmployees,
    addEmployee,
    updateEmployee,
    deleteEmployee,
    searchEmployees,
    getWorkHistory,
    addWorkHistory
  } = useEmployees();

  useEffect(() => {
    checkPermissions();
    setLoading(false);
  }, []);

  const checkPermissions = () => {
    if (!user || (user.role !== 'hr' && user.role !== 'admin')) {
      showNotification('B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p trang n√†y', 'error');
      window.location.href = '/dashboard';
      return;
    }
  };

  const handleTabClick = (tabId) => {
    setActiveTab(tabId);
  };

  // ===== TH√äM: Employee handlers theo service layer pattern =====
  const handleDeleteEmployee = async (employeeId) => {
    if (window.confirm('B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a nh√¢n vi√™n n√†y?')) {
      try {
        await deleteEmployee(employeeId);
        // Success notification ƒë√£ ƒë∆∞·ª£c handle trong hook
      } catch (error) {
        console.error('Delete employee error:', error);
        // Error notification ƒë√£ ƒë∆∞·ª£c handle trong hook
      }
    }
  };

  const handleEditEmployee = (employeeId) => {
    const employee = employees.find(emp => emp.id === employeeId);
    if (employee) {
      setSelectedEmployee(employee);
      setShowEditModal(true);
    } else {
      showNotification('Kh√¥ng t√¨m th·∫•y th√¥ng tin nh√¢n vi√™n', 'error');
    }
  };

  const handleEmployeeUpdated = async () => {
    setShowEditModal(false);
    setSelectedEmployee(null);
    // employees s·∫Ω ƒë∆∞·ª£c t·ª± ƒë·ªông refresh b·ªüi hook
  };

  const handleViewWorkHistory = async (employeeId) => {
    const employee = employees.find(emp => emp.employeeId === employeeId);
    if (!employee) {
      showNotification('Kh√¥ng t√¨m th·∫•y th√¥ng tin nh√¢n vi√™n', 'error');
      return;
    }

    setSelectedEmployeeForHistory({ 
      employeeId, 
      name: employee.fullName,
      workHistory: null 
    });
    
    try {
      const workHistory = await getWorkHistory(employeeId);
      setSelectedEmployeeForHistory(prev => ({ 
        ...prev, 
        workHistory 
      }));
    } catch (error) {
      console.error('Error loading work history:', error);
      // Error ƒë√£ ƒë∆∞·ª£c handle trong hook
    }
    
    setShowWorkHistoryModal(true);
  };

  const handleAddWorkHistory = (employeeId, employeeName) => {
    setSelectedEmployeeForHistory({ 
      employeeId, 
      name: employeeName 
    });
    setShowAddWorkHistoryModal(true);
  };

  const handleWorkHistoryAdded = async () => {
    setShowAddWorkHistoryModal(false);
    setSelectedEmployeeForHistory(null);
    // Refresh employees n·∫øu c·∫ßn
    await fetchEmployees();
  };

  const handleEmployeeAdded = (response) => {
    console.log('Employee added successfully:', response);
    // employees s·∫Ω ƒë∆∞·ª£c t·ª± ƒë·ªông refresh b·ªüi hook
  };

  // ===== TH√äM: Search handlers =====
  const handleSearch = async (e) => {
    e.preventDefault();
    if (searchQuery.trim()) {
      await searchEmployees(searchQuery);
    } else {
      await fetchEmployees();
    }
  };

  const handleSearchInputChange = (e) => {
    setSearchQuery(e.target.value);
    if (e.target.value === '') {
      fetchEmployees();
    }
  };

  const handleRefresh = () => {
    fetchEmployees();
    showNotification('ƒê√£ l√†m m·ªõi d·ªØ li·ªáu', 'success');
  };

  if (loading) {
    return <Loading fullScreen text="ƒêang t·∫£i trang qu·∫£n l√Ω nh√¢n vi√™n..." />;
  }

  return (
    <div className="employee-management-page">
      {/* Header */}
      <div className="d-flex justify-content-between align-items-center mb-4">
        <div>
          <h1>Qu·∫£n l√Ω nh√¢n vi√™n</h1>
          <p className="text-muted mb-0">Qu·∫£n l√Ω th√¥ng tin nh√¢n vi√™n, c·ª≠a h√†ng v√† v·ªã tr√≠</p>
        </div>
        <div>
          <button 
            className="btn btn-outline-primary me-2"
            onClick={handleRefresh}
            disabled={employeesLoading}
          >
            <i className={`fas fa-sync-alt me-2 ${employeesLoading ? 'fa-spin' : ''}`}></i>
            L√†m m·ªõi
          </button>
        </div>
      </div>

      {/* Navigation Tabs */}
      <ul className="nav nav-tabs mb-4">
        <li className="nav-item">
          <button
            className={`nav-link ${activeTab === 'employees' ? 'active' : ''}`}
            onClick={() => handleTabClick('employees')}
          >
            <i className="fas fa-users me-2"></i>
            Nh√¢n vi√™n
          </button>
        </li>
        <li className="nav-item">
          <button
            className={`nav-link ${activeTab === 'stores' ? 'active' : ''}`}
            onClick={() => handleTabClick('stores')}
          >
            <i className="fas fa-store me-2"></i>
            C·ª≠a h√†ng
          </button>
        </li>
        <li className="nav-item">
          <button
            className={`nav-link ${activeTab === 'positions' ? 'active' : ''}`}
            onClick={() => handleTabClick('positions')}
          >
            <i className="fas fa-briefcase me-2"></i>
            V·ªã tr√≠
          </button>
        </li>
      </ul>

      {/* Tab Content */}
      <div className="tab-content">
        {/* Employees Tab */}
        {activeTab === 'employees' && (
          <div className="tab-pane fade show active">
            {/* ===== TH√äM: Search Section ===== */}
            <div className="row mb-4">
              <div className="col-12">
                <div className="card">
                  <div className="card-body">
                    <form onSubmit={handleSearch} className="d-flex gap-2">
                      <div className="flex-grow-1">
                        <input
                          type="text"
                          className="form-control"
                          placeholder="T√¨m ki·∫øm nh√¢n vi√™n theo t√™n, m√£ nh√¢n vi√™n, s·ªë ƒëi·ªán tho·∫°i..."
                          value={searchQuery}
                          onChange={handleSearchInputChange}
                        />
                      </div>
                      <button 
                        type="submit" 
                        className="btn btn-outline-primary"
                        disabled={employeesLoading}
                      >
                        <i className="fas fa-search"></i>
                      </button>
                      <button 
                        type="button" 
                        className="btn btn-outline-secondary"
                        onClick={() => {
                          setSearchQuery('');
                          fetchEmployees();
                        }}
                        disabled={employeesLoading}
                      >
                        <i className="fas fa-times"></i>
                      </button>
                    </form>
                  </div>
                </div>
              </div>
            </div>

            <div className="row">
              <div className="col-md-4">
                <div className="card">
                  <div className="card-header">
                    <h5>Th√™m nh√¢n vi√™n m·ªõi</h5>
                  </div>
                  <div className="card-body">
                    <EmployeeForm onEmployeeAdded={handleEmployeeAdded} />
                  </div>
                </div>
              </div>
              <div className="col-md-8">
                <div className="card">
                  <div className="card-header d-flex justify-content-between align-items-center">
                    <h5>Danh s√°ch nh√¢n vi√™n</h5>
                    {employees.length > 0 && (
                      <span className="badge bg-primary">
                        {employees.length} nh√¢n vi√™n
                      </span>
                    )}
                  </div>
                  <div className="card-body">
                    {/* ===== S·ª¨A: Hi·ªÉn th·ªã loading v√† error states ===== */}
                    {employeesLoading ? (
                      <div className="text-center py-4">
                        <div className="spinner-border" role="status">
                          <span className="visually-hidden">Loading...</span>
                        </div>
                        <p className="mt-2 text-muted">ƒêang t·∫£i danh s√°ch nh√¢n vi√™n...</p>
                      </div>
                    ) : error ? (
                      <div className="alert alert-danger" role="alert">
                        <i className="fas fa-exclamation-triangle me-2"></i>
                        {error}
                        <button 
                          className="btn btn-sm btn-outline-danger ms-2"
                          onClick={fetchEmployees}
                        >
                          <i className="fas fa-redo me-1"></i>
                          Th·ª≠ l·∫°i
                        </button>
                      </div>
                    ) : (
                      /* ===== S·ª¨A: S·ª≠ d·ª•ng EmployeeTable v·ªõi handlers ===== */
                      <EmployeeTable
                        employees={employees}
                        onEdit={handleEditEmployee}
                        onDelete={handleDeleteEmployee}
                        onAddWorkHistory={handleAddWorkHistory}
                        onViewWorkHistory={handleViewWorkHistory}
                      />
                    )}
                  </div>
                </div>
              </div>
            </div>
          </div>
        )}

        {/* Stores Tab */}
        {activeTab === 'stores' && (
          <div className="tab-pane fade show active">
            <StoreManager />
          </div>
        )}

        {/* Positions Tab */}
        {activeTab === 'positions' && (
          <div className="tab-pane fade show active">
            <PositionManager />
          </div>
        )}
      </div>

      {/* ===== TH√äM: Modal Components ===== */}
      {/* Employee Edit Modal */}
      {showEditModal && selectedEmployee && (
        <EmployeeEditModal
          isOpen={showEditModal}
          onClose={() => {
            setShowEditModal(false);
            setSelectedEmployee(null);
          }}
          employee={selectedEmployee}
          onEmployeeUpdated={handleEmployeeUpdated}
        />
      )}

      {/* Work History View Modal */}
      {showWorkHistoryModal && selectedEmployeeForHistory && (
        <WorkHistoryModal
          isOpen={showWorkHistoryModal}
          onClose={() => {
            setShowWorkHistoryModal(false);
            setSelectedEmployeeForHistory(null);
          }}
          employeeId={selectedEmployeeForHistory.employeeId}
          employeeName={selectedEmployeeForHistory.name}
          workHistory={selectedEmployeeForHistory.workHistory}
        />
      )}

      {/* Add Work History Modal */}
      {showAddWorkHistoryModal && selectedEmployeeForHistory && (
        <AddWorkHistoryModal
          isOpen={showAddWorkHistoryModal}
          onClose={() => {
            setShowAddWorkHistoryModal(false);
            setSelectedEmployeeForHistory(null);
          }}
          employeeId={selectedEmployeeForHistory.employeeId}
          employeeName={selectedEmployeeForHistory.name}
          onWorkHistoryAdded={handleWorkHistoryAdded}
        />
      )}
    </div>
  );
};

export default EmployeeManagementPage;

==============================

üìÅ File: .\src\pages\HRDashboardPage.jsx
------------------------------
üîß FUNCTIONS:
   ‚Ä¢ HRDashboardPage (d√≤ng 7) - arrow function
   ‚Ä¢ checkPermissions (d√≤ng 18) - arrow function
üì§ EXPORTS:
   ‚Ä¢ me (d√≤ng 180)
   ‚Ä¢ HRDashboardPage (d√≤ng 238)

üìÑ N·ªòI DUNG FILE:
==============================
import React, { useState, useEffect } from 'react';
import { useAuth } from '../hooks/useAuth';
import { ApiClient } from '../services/api';
import { useNotification } from '../hooks/useNotification';
import Loading from '../components/common/Loading';

const HRDashboardPage = () => {
  const [stats, setStats] = useState({});
  const [loading, setLoading] = useState(true);
  const { user } = useAuth();
  const { showNotification } = useNotification();

  useEffect(() => {
    checkPermissions();
    loadStats();
  }, []);

  const checkPermissions = () => {
    if (!user || (user.role !== 'hr' && user.role !== 'admin')) {
      showNotification('B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p trang n√†y', 'error');
      window.location.href = '/dashboard';
      return;
    }
  };

  const loadStats = async () => {
    try {
      console.log('üîç HRDashboard: Loading stats...');
      const response = await ApiClient.get('/api/employees/stats');
      
      console.log('üì® HRDashboard: Raw response:', response);
      console.log('‚úÖ HRDashboard: Response success:', response.success);
      console.log('üìä HRDashboard: Response data:', response.data);
      
      // ‚úÖ FIX: S·ª≠ d·ª•ng response.data thay v√¨ response
      if (response.success && response.data) {
        console.log('‚úÖ HRDashboard: Setting stats to:', response.data);
        setStats(response.data);
      } else {
        console.warn('‚ö†Ô∏è HRDashboard: API returned success: false');
        showNotification('Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu th·ªëng k√™', 'warning');
      }
      
    } catch (error) {
      console.error('‚ùå HRDashboard: Error loading stats:', error);
      showNotification('L·ªói khi t·∫£i th·ªëng k√™ HR', 'error');
    } finally {
      setLoading(false);
    }
  };

  const handleRefresh = async () => {
    setLoading(true);
    await loadStats();
    showNotification('ƒê√£ c·∫≠p nh·∫≠t d·ªØ li·ªáu HR dashboard', 'success');
  };

  // ‚úÖ DEBUG: Log current stats state
  console.log('üéØ HRDashboard render - Current stats:', stats);
  console.log('üéØ HRDashboard render - Loading:', loading);

  if (loading) {
    return <Loading fullScreen text="ƒêang t·∫£i HR dashboard..." />;
  }

  return (
    <div className="hr-dashboard-page">
      {/* ‚úÖ DEBUG INFO - Remove this after fixing */}
      <div style={{ 
        background: '#f8f9fa', 
        border: '1px solid #dee2e6', 
        borderRadius: '0.25rem', 
        padding: '1rem', 
        marginBottom: '1rem' 
      }}>
        <h6 className="text-muted mb-2">üêõ DEBUG INFO (HR Dashboard):</h6>
        <small className="d-block">Raw stats: {JSON.stringify(stats)}</small>
        <small className="d-block">Total Employees: {stats.totalEmployees}</small>
        <small className="d-block">Active Employees: {stats.activeEmployees}</small>
        <small className="d-block">Inactive Employees: {stats.inactiveEmployees}</small>
      </div>

      {/* Header */}
      <div className="d-flex justify-content-between align-items-center mb-4">
        <div>
          <h1>HR Dashboard</h1>
          <p className="text-muted mb-0">Dashboard d√†nh cho b·ªô ph·∫≠n nh√¢n s·ª±</p>
        </div>
        <button 
          className="btn btn-outline-primary"
          onClick={handleRefresh}
          disabled={loading}
        >
          <i className={`fas fa-sync-alt me-2 ${loading ? 'fa-spin' : ''}`}></i>
          L√†m m·ªõi
        </button>
      </div>

      {/* Stats Cards */}
      <div className="row mb-4">
        <div className="col-md-3 mb-3">
          <div className="card text-center bg-primary text-white h-100">
            <div className="card-body">
              <i className="fas fa-users fa-3x mb-3"></i>
              <h2>{stats.totalEmployees || 0}</h2>
              <p className="mb-0">T·ªïng nh√¢n vi√™n</p>
            </div>
          </div>
        </div>

        <div className="col-md-3 mb-3">
          <div className="card text-center bg-success text-white h-100">
            <div className="card-body">
              <i className="fas fa-user-check fa-3x mb-3"></i>
              <h2>{stats.activeEmployees || 0}</h2>
              <p className="mb-0">Nh√¢n vi√™n ho·∫°t ƒë·ªông</p>
            </div>
          </div>
        </div>

        <div className="col-md-3 mb-3">
          <div className="card text-center bg-warning text-white h-100">
            <div className="card-body">
              <i className="fas fa-user-times fa-3x mb-3"></i>
              <h2>{stats.inactiveEmployees || 0}</h2>
              <p className="mb-0">Nh√¢n vi√™n kh√¥ng ho·∫°t ƒë·ªông</p>
            </div>
          </div>
        </div>

        <div className="col-md-3 mb-3">
          <div className="card text-center bg-info text-white h-100">
            <div className="card-body">
              <i className="fas fa-clock fa-3x mb-3"></i>
              <h2>0</h2>
              <p className="mb-0">T·ªïng ch·∫•m c√¥ng</p>
            </div>
          </div>
        </div>
      </div>

      {/* Management Actions */}
      <div className="row mb-4">
        <div className="col-md-6">
          <div className="card">
            <div className="card-header">
              <h5 className="mb-0">Qu·∫£n l√Ω nh√¢n s·ª±</h5>
            </div>
            <div className="card-body">
              <div className="d-grid gap-2">
                <a href="/employee-management" className="btn btn-primary">
                  <i className="fas fa-users-cog me-2"></i>
                  Qu·∫£n l√Ω nh√¢n vi√™n
                </a>
                <a href="/attendance-logs" className="btn btn-info">
                  <i className="fas fa-clock me-2"></i>
                  Xem ch·∫•m c√¥ng
                </a>
                <button className="btn btn-success" onClick={handleRefresh}>
                  <i className="fas fa-sync-alt me-2"></i>
                  C·∫≠p nh·∫≠t d·ªØ li·ªáu
                </button>
              </div>
            </div>
          </div>
        </div>

        <div className="col-md-6">
          <div className="card">
            <div className="card-header">
              <h5 className="mb-0">C√¥ng c·ª• HR</h5>
            </div>
            <div className="card-body">
              <div className="d-grid gap-2">
                <button className="btn btn-outline-primary" disabled>
                  <i className="fas fa-user-plus me-2"></i>
                  Tuy·ªÉn d·ª•ng (S·∫Øp c√≥)
                </button>
                <button className="btn btn-outline-secondary" disabled>
                  <i className="fas fa-file-export me-2"></i>
                  Xu·∫•t b√°o c√°o (S·∫Øp c√≥)
                </button>
                <a href="/dashboard" className="btn btn-outline-info">
                  <i className="fas fa-tachometer-alt me-2"></i>
                  Dashboard ch√≠nh
                </a>
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* HR Reports Section */}
      <div className="row">
        <div className="col-12">
          <div className="card">
            <div className="card-header">
              <h5 className="mb-0">B√°o c√°o HR</h5>
            </div>
            <div className="card-body">
              <div className="row">
                <div className="col-md-4 text-center">
                  <div className="p-3">
                    <i className="fas fa-chart-bar fa-2x text-primary mb-2"></i>
                    <h6>B√°o c√°o nh√¢n s·ª±</h6>
                    <button className="btn btn-sm btn-primary" disabled>
                      Xem b√°o c√°o (S·∫Øp c√≥)
                    </button>
                  </div>
                </div>
                <div className="col-md-4 text-center">
                  <div className="p-3">
                    <i className="fas fa-chart-line fa-2x text-success mb-2"></i>
                    <h6>B√°o c√°o ch·∫•m c√¥ng</h6>
                    <button className="btn btn-sm btn-success" disabled>
                      Xem b√°o c√°o (S·∫Øp c√≥)
                    </button>
                  </div>
                </div>
                <div className="col-md-4 text-center">
                  <div className="p-3">
                    <i className="fas fa-chart-pie fa-2x text-info mb-2"></i>
                    <h6>B√°o c√°o t·ªïng h·ª£p</h6>
                    <button className="btn btn-sm btn-info" disabled>
                      Xem b√°o c√°o (S·∫Øp c√≥)
                    </button>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default HRDashboardPage;

==============================

üìÅ File: .\src\pages\LoginPage.jsx
------------------------------
üîß FUNCTIONS:
   ‚Ä¢ LoginPage (d√≤ng 7) - arrow function
   ‚Ä¢ handleInputChange (d√≤ng 26) - arrow function
   ‚Ä¢ validateForm (d√≤ng 42) - arrow function
üì§ EXPORTS:
   ‚Ä¢ LoginPage (d√≤ng 195)

üìÑ N·ªòI DUNG FILE:
==============================
import React, { useState, useEffect } from 'react';
import { Navigate } from 'react-router-dom';
import { useAuth } from '../hooks/useAuth';
import { useNotification } from '../hooks/useNotification';
import Loading from '../components/common/Loading';

const LoginPage = () => {
  const [credentials, setCredentials] = useState({
    username: '',
    password: ''
  });
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [errors, setErrors] = useState({});
  
  const { user, login, loading } = useAuth();
  const { showNotification } = useNotification();

  useEffect(() => {
    // Clear any existing alerts
    const alertContainer = document.getElementById('alert-container');
    if (alertContainer) {
      alertContainer.innerHTML = '';
    }
  }, []);

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setCredentials(prev => ({
      ...prev,
      [name]: value
    }));
    
    // Clear error when user starts typing
    if (errors[name]) {
      setErrors(prev => ({
        ...prev,
        [name]: ''
      }));
    }
  };

  const validateForm = () => {
    const newErrors = {};
    
    if (!credentials.username.trim()) {
      newErrors.username = 'Vui l√≤ng nh·∫≠p t√™n ƒëƒÉng nh·∫≠p';
    }
    
    if (!credentials.password.trim()) {
      newErrors.password = 'Vui l√≤ng nh·∫≠p m·∫≠t kh·∫©u';
    }
    
    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    
    if (!validateForm()) {
      showNotification('Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin!', 'error');
      return;
    }

    setIsSubmitting(true);
    
    try {
      const response = await login(credentials);
      
      showNotification('ƒêƒÉng nh·∫≠p th√†nh c√¥ng!', 'success');
      
      // Redirect based on role after short delay
      setTimeout(() => {
        if (response.user.role === 'hr' || response.user.role === 'admin') {
          window.location.href = '/hr-dashboard';
        } else {
          window.location.href = '/dashboard';
        }
      }, 1000);
      
    } catch (error) {
      console.error('Login error:', error);
      showNotification('T√™n ƒëƒÉng nh·∫≠p ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng!', 'error');
    } finally {
      setIsSubmitting(false);
    }
  };

  // Redirect if already logged in
  if (user) {
    const redirectPath = user.role === 'hr' || user.role === 'admin' ? '/hr-dashboard' : '/dashboard';
    return <Navigate to={redirectPath} replace />;
  }

  // Show loading during auth check
  if (loading) {
    return (
      <div className="d-flex justify-content-center align-items-center min-vh-100">
        <Loading />
      </div>
    );
  }

  return (
    <div className="min-vh-100 d-flex align-items-center justify-content-center bg-light">
      <div className="container">
        <div className="row justify-content-center">
          <div className="col-md-6 col-lg-4">
            <div className="card shadow">
              <div className="card-body p-4">
                <div className="text-center mb-4">
                  <h2 className="card-title">ƒêƒÉng nh·∫≠p</h2>
                  <p className="text-muted">H·ªá th·ªëng qu·∫£n l√Ω nh√¢n s·ª±</p>
                </div>

                <form onSubmit={handleSubmit} noValidate>
                  <div className="mb-3">
                    <label htmlFor="username" className="form-label">
                      T√™n ƒëƒÉng nh·∫≠p <span className="text-danger">*</span>
                    </label>
                    <input
                      type="text"
                      className={`form-control ${errors.username ? 'is-invalid' : ''}`}
                      id="username"
                      name="username"
                      value={credentials.username}
                      onChange={handleInputChange}
                      placeholder="Nh·∫≠p t√™n ƒëƒÉng nh·∫≠p"
                      disabled={isSubmitting}
                      required
                    />
                    {errors.username && (
                      <div className="invalid-feedback">
                        {errors.username}
                      </div>
                    )}
                  </div>

                  <div className="mb-4">
                    <label htmlFor="password" className="form-label">
                      M·∫≠t kh·∫©u <span className="text-danger">*</span>
                    </label>
                    <input
                      type="password"
                      className={`form-control ${errors.password ? 'is-invalid' : ''}`}
                      id="password"
                      name="password"
                      value={credentials.password}
                      onChange={handleInputChange}
                      placeholder="Nh·∫≠p m·∫≠t kh·∫©u"
                      disabled={isSubmitting}
                      required
                    />
                    {errors.password && (
                      <div className="invalid-feedback">
                        {errors.password}
                      </div>
                    )}
                  </div>

                  <button
                    type="submit"
                    className="btn btn-primary w-100"
                    disabled={isSubmitting}
                  >
                    {isSubmitting ? (
                      <>
                        <span className="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                        ƒêang ƒëƒÉng nh·∫≠p...
                      </>
                    ) : (
                      'ƒêƒÉng nh·∫≠p'
                    )}
                  </button>
                </form>

                {/* Demo credentials info */}
                <div className="mt-4 p-3 bg-light rounded">
                  <small className="text-muted">
                    <strong>T√†i kho·∫£n demo:</strong><br />
                    Admin: admin / admin123<br />
                    HR: hr / hr123<br />
                    Sales: sales / sales123
                  </small>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default LoginPage;

==============================

üìÅ File: .\src\services\api.js
------------------------------
üèõÔ∏è  CLASSES:
   ‚Ä¢ ApiClient (d√≤ng 2)
üì§ EXPORTS:
   ‚Ä¢ class (d√≤ng 2)
   ‚Ä¢ ApiClient (d√≤ng 78)

üìÑ N·ªòI DUNG FILE:
==============================
// API helper functions - converted from vanilla JS
export class ApiClient {
  static async request(url, options = {}) {
    try {
      const response = await fetch(url, {
        headers: {
          'Content-Type': 'application/json',
          ...options.headers
        },
        credentials: 'include',
        ...options
      });

      // ‚úÖ TH√äM: Log request details ƒë·ªÉ debug
      console.log('API Request:', {
        url,
        method: options.method || 'GET',
        body: options.body,
        status: response.status,
        statusText: response.statusText
      });

      if (!response.ok) {
        let errorData;
        try {
          errorData = await response.json();
          // ‚úÖ TH√äM: Log full error response
          console.error('Server error response:', errorData);
        } catch (parseError) {
          console.error('Could not parse error response:', parseError);
          errorData = { error: `HTTP ${response.status}: ${response.statusText}` };
        }
        
        // ‚úÖ S·ª¨A: Tr·∫£ v·ªÅ object ch·ª©a ƒë·∫ßy ƒë·ªß th√¥ng tin l·ªói
        throw new Error(JSON.stringify({
          status: response.status,
          message: errorData.message || errorData.error || 'Request failed',
          details: errorData
        }));
      }

      const data = await response.json();
      console.log('API Response:', data);
      return data;
    } catch (error) {
      console.error('API request error:', error);
      throw error;
    }
  }

  static async get(url, params = {}) {
    const queryString = new URLSearchParams(params).toString();
    const fullUrl = queryString ? `${url}?${queryString}` : url;
    return this.request(fullUrl);
  }

  static async post(url, data) {
    return this.request(url, {
      method: 'POST',
      body: JSON.stringify(data)
    });
  }

  static async put(url, data) {
    return this.request(url, {
      method: 'PUT',
      body: JSON.stringify(data)
    });
  }

  static async delete(url) {
    return this.request(url, {
      method: 'DELETE'
    });
  }
}

export default ApiClient;

==============================

üìÅ File: .\src\services\auth.js
------------------------------

üìÑ N·ªòI DUNG FILE:
==============================

==============================

üìÅ File: .\src\services\employee.js
------------------------------
üì§ EXPORTS:
   ‚Ä¢ const (d√≤ng 5)
   ‚Ä¢ const (d√≤ng 14)
   ‚Ä¢ const (d√≤ng 23)
   ‚Ä¢ const (d√≤ng 32)
   ‚Ä¢ const (d√≤ng 41)
   ‚Ä¢ const (d√≤ng 51)
   ‚Ä¢ const (d√≤ng 60)
   ‚Ä¢ const (d√≤ng 70)
   ‚Ä¢ const (d√≤ng 81)
   ‚Ä¢ const (d√≤ng 91)
   ‚Ä¢ const (d√≤ng 100)

üìÑ N·ªòI DUNG FILE:
==============================
// src/services/employee.js - PHI√äN B·∫¢N HO√ÄN CH·ªàNH
import api from './api.js';

// ==================== EMPLOYEE CRUD ====================
export const getAllEmployees = async () => {
  try {
    const response = await api.get('/employees');
    return response.data;
  } catch (error) {
    throw new Error(error.response?.data?.message || 'L·∫•y danh s√°ch nh√¢n vi√™n th·∫•t b·∫°i');
  }
};

export const addEmployee = async (employeeData) => {
  try {
    const response = await api.post('/employees', employeeData);
    return response.data;
  } catch (error) {
    throw new Error(error.response?.data?.message || 'Th√™m nh√¢n vi√™n th·∫•t b·∫°i');
  }
};

export const updateEmployee = async (employeeId, employeeData) => {
  try {
    const response = await api.put(`/employees/${employeeId}`, employeeData);
    return response.data;
  } catch (error) {
    throw new Error(error.response?.data?.message || 'C·∫≠p nh·∫≠t nh√¢n vi√™n th·∫•t b·∫°i');
  }
};

export const deleteEmployee = async (employeeId) => {
  try {
    const response = await api.delete(`/employees/${employeeId}`);
    return response.data;
  } catch (error) {
    throw new Error(error.response?.data?.message || 'X√≥a nh√¢n vi√™n th·∫•t b·∫°i');
  }
};

export const searchEmployees = async (query) => {
  try {
    const response = await api.get(`/employees/search?q=${encodeURIComponent(query)}`);
    return response.data;
  } catch (error) {
    throw new Error(error.response?.data?.message || 'T√¨m ki·∫øm nh√¢n vi√™n th·∫•t b·∫°i');
  }
};

// ==================== WORK HISTORY ====================
export const getEmployeeWorkHistory = async (employeeId) => {
  try {
    const response = await api.get(`/employees/${encodeURIComponent(employeeId)}/work-history`);
    return response.data;
  } catch (error) {
    throw new Error(error.response?.data?.message || 'L·∫•y work history th·∫•t b·∫°i');
  }
};

export const addWorkHistory = async (workHistoryData) => {
  try {
    const response = await api.post('/employees/work-history', workHistoryData);
    return response.data;
  } catch (error) {
    throw new Error(error.response?.data?.message || 'Th√™m work history th·∫•t b·∫°i');
  }
};

// ==================== RECRUITMENT ====================
export const getRecruitmentRequests = async (filters = {}) => {
  try {
    const params = new URLSearchParams(filters).toString();
    const response = await api.get(`/employees/recruitment-requests?${params}`);
    return response.data;
  } catch (error) {
    throw new Error(error.response?.data?.message || 'L·∫•y danh s√°ch tuy·ªÉn d·ª•ng th·∫•t b·∫°i');
  }
};

// ==================== STATS ====================
export const getEmployeeStats = async () => {
  try {
    const response = await api.get('/employees/stats');
    return response.data;
  } catch (error) {
    throw new Error(error.response?.data?.message || 'L·∫•y th·ªëng k√™ nh√¢n vi√™n th·∫•t b·∫°i');
  }
};

// ==================== MASTER DATA ====================
export const getStores = async () => {
  try {
    const response = await api.get('/employees/stores');
    return response.data;
  } catch (error) {
    throw new Error(error.response?.data?.message || 'L·∫•y danh s√°ch c·ª≠a h√†ng th·∫•t b·∫°i');
  }
};

export const getPositions = async () => {
  try {
    const response = await api.get('/employees/positions');
    return response.data;
  } catch (error) {
    throw new Error(error.response?.data?.message || 'L·∫•y danh s√°ch v·ªã tr√≠ th·∫•t b·∫°i');
  }
};

==============================

üìÑ OTHER CODE FILES:
==================================================

üìÅ File: .\index.html
------------------------------
üìÑ N·ªòI DUNG FILE:
==============================
<!DOCTYPE html>
<html lang="vi">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>HR Management System - React</title>
</head>
<body>
  <div id="root"></div>
  <div id="alert-container"></div>
  <script type="module" src="/src/main.jsx"></script>
</body>
</html>

==============================

üìÅ File: .\package-lock.json
------------------------------
üìÑ N·ªòI DUNG FILE:
==============================
{
  "name": "hr-management-system-react",
  "version": "1.0.0",
  "lockfileVersion": 3,
  "requires": true,
  "packages": {
    "": {
      "name": "hr-management-system-react",
      "version": "1.0.0",
      "dependencies": {
        "@fortawesome/fontawesome-free": "^6.7.2",
        "axios": "^1.10.0",
        "bootstrap": "^5.3.7",
        "cors": "^2.8.5",
        "dotenv": "^16.6.1",
        "express": "^4.21.2",
        "express-session": "^1.18.2",
        "react": "^18.3.1",
        "react-dom": "^18.3.1",
        "react-router-dom": "^6.30.1"
      },
      "devDependencies": {
        "@types/react": "^18.0.28",
        "@types/react-dom": "^18.0.11",
        "@vitejs/plugin-react": "^3.1.0",
        "eslint": "^8.38.0",
        "eslint-plugin-react": "^7.32.2",
        "eslint-plugin-react-hooks": "^4.6.0",
        "eslint-plugin-react-refresh": "^0.3.4",
        "vite": "^4.5.14"
      }
    },
    "node_modules/@ampproject/remapping": {
      "version": "2.3.0",
      "resolved": "https://registry.npmjs.org/@ampproject/remapping/-/remapping-2.3.0.tgz",
      "integrity": "sha512-30iZtAPgz+LTIYoeivqYo853f02jBYSd5uGnGpkFV0M3xOt9aN73erkgYAmZU43x4VfqcnLxW9Kpg3R5LC4YYw==",
      "dev": true,
      "license": "Apache-2.0",
      "dependencies": {
        "@jridgewell/gen-mapping": "^0.3.5",
        "@jridgewell/trace-mapping": "^0.3.24"
      },
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/@babel/code-frame": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/code-frame/-/code-frame-7.27.1.tgz",
      "integrity": "sha512-cjQ7ZlQ0Mv3b47hABuTevyTuYN4i+loJKGeV9flcCgIK37cCXRh+L1bd3iBHlynerhQ7BhCkn2BPbQUL+rGqFg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-validator-identifier": "^7.27.1",
        "js-tokens": "^4.0.0",
        "picocolors": "^1.1.1"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/compat-data": {
      "version": "7.28.0",
      "resolved": "https://registry.npmjs.org/@babel/compat-data/-/compat-data-7.28.0.tgz",
      "integrity": "sha512-60X7qkglvrap8mn1lh2ebxXdZYtUcpd7gsmy9kLaBJ4i/WdY8PqTSdxyA8qraikqKQK5C1KRBKXqznrVapyNaw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/core": {
      "version": "7.28.0",
      "resolved": "https://registry.npmjs.org/@babel/core/-/core-7.28.0.tgz",
      "integrity": "sha512-UlLAnTPrFdNGoFtbSXwcGFQBtQZJCNjaN6hQNP3UPvuNXT1i82N26KL3dZeIpNalWywr9IuQuncaAfUaS1g6sQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@ampproject/remapping": "^2.2.0",
        "@babel/code-frame": "^7.27.1",
        "@babel/generator": "^7.28.0",
        "@babel/helper-compilation-targets": "^7.27.2",
        "@babel/helper-module-transforms": "^7.27.3",
        "@babel/helpers": "^7.27.6",
        "@babel/parser": "^7.28.0",
        "@babel/template": "^7.27.2",
        "@babel/traverse": "^7.28.0",
        "@babel/types": "^7.28.0",
        "convert-source-map": "^2.0.0",
        "debug": "^4.1.0",
        "gensync": "^1.0.0-beta.2",
        "json5": "^2.2.3",
        "semver": "^6.3.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/babel"
      }
    },
    "node_modules/@babel/generator": {
      "version": "7.28.0",
      "resolved": "https://registry.npmjs.org/@babel/generator/-/generator-7.28.0.tgz",
      "integrity": "sha512-lJjzvrbEeWrhB4P3QBsH7tey117PjLZnDbLiQEKjQ/fNJTjuq4HSqgFA+UNSwZT8D7dxxbnuSBMsa1lrWzKlQg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/parser": "^7.28.0",
        "@babel/types": "^7.28.0",
        "@jridgewell/gen-mapping": "^0.3.12",
        "@jridgewell/trace-mapping": "^0.3.28",
        "jsesc": "^3.0.2"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-compilation-targets": {
      "version": "7.27.2",
      "resolved": "https://registry.npmjs.org/@babel/helper-compilation-targets/-/helper-compilation-targets-7.27.2.tgz",
      "integrity": "sha512-2+1thGUUWWjLTYTHZWK1n8Yga0ijBz1XAhUXcKy81rd5g6yh7hGqMp45v7cadSbEHc9G3OTv45SyneRN3ps4DQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/compat-data": "^7.27.2",
        "@babel/helper-validator-option": "^7.27.1",
        "browserslist": "^4.24.0",
        "lru-cache": "^5.1.1",
        "semver": "^6.3.1"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-globals": {
      "version": "7.28.0",
      "resolved": "https://registry.npmjs.org/@babel/helper-globals/-/helper-globals-7.28.0.tgz",
      "integrity": "sha512-+W6cISkXFa1jXsDEdYA8HeevQT/FULhxzR99pxphltZcVaugps53THCeiWA8SguxxpSp3gKPiuYfSWopkLQ4hw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-module-imports": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/helper-module-imports/-/helper-module-imports-7.27.1.tgz",
      "integrity": "sha512-0gSFWUPNXNopqtIPQvlD5WgXYI5GY2kP2cCvoT8kczjbfcfuIljTbcWrulD1CIPIX2gt1wghbDy08yE1p+/r3w==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/traverse": "^7.27.1",
        "@babel/types": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-module-transforms": {
      "version": "7.27.3",
      "resolved": "https://registry.npmjs.org/@babel/helper-module-transforms/-/helper-module-transforms-7.27.3.tgz",
      "integrity": "sha512-dSOvYwvyLsWBeIRyOeHXp5vPj5l1I011r52FM1+r1jCERv+aFXYk4whgQccYEGYxK2H3ZAIA8nuPkQ0HaUo3qg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-module-imports": "^7.27.1",
        "@babel/helper-validator-identifier": "^7.27.1",
        "@babel/traverse": "^7.27.3"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0"
      }
    },
    "node_modules/@babel/helper-plugin-utils": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/helper-plugin-utils/-/helper-plugin-utils-7.27.1.tgz",
      "integrity": "sha512-1gn1Up5YXka3YYAHGKpbideQ5Yjf1tDa9qYcgysz+cNCXukyLl6DjPXhD3VRwSb8c0J9tA4b2+rHEZtc6R0tlw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-string-parser": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/helper-string-parser/-/helper-string-parser-7.27.1.tgz",
      "integrity": "sha512-qMlSxKbpRlAridDExk92nSobyDdpPijUq2DW6oDnUqd0iOGxmQjyqhMIihI9+zv4LPyZdRje2cavWPbCbWm3eA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-validator-identifier": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/helper-validator-identifier/-/helper-validator-identifier-7.27.1.tgz",
      "integrity": "sha512-D2hP9eA+Sqx1kBZgzxZh0y1trbuU+JoDkiEwqhQ36nodYqJwyEIhPSdMNd7lOm/4io72luTPWH20Yda0xOuUow==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-validator-option": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/helper-validator-option/-/helper-validator-option-7.27.1.tgz",
      "integrity": "sha512-YvjJow9FxbhFFKDSuFnVCe2WxXk1zWc22fFePVNEaWJEu8IrZVlda6N0uHwzZrUM1il7NC9Mlp4MaJYbYd9JSg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helpers": {
      "version": "7.27.6",
      "resolved": "https://registry.npmjs.org/@babel/helpers/-/helpers-7.27.6.tgz",
      "integrity": "sha512-muE8Tt8M22638HU31A3CgfSUciwz1fhATfoVai05aPXGor//CdWDCbnlY1yvBPo07njuVOCNGCSp/GTt12lIug==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/template": "^7.27.2",
        "@babel/types": "^7.27.6"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/parser": {
      "version": "7.28.0",
      "resolved": "https://registry.npmjs.org/@babel/parser/-/parser-7.28.0.tgz",
      "integrity": "sha512-jVZGvOxOuNSsuQuLRTh13nU0AogFlw32w/MT+LV6D3sP5WdbW61E77RnkbaO2dUvmPAYrBDJXGn5gGS6tH4j8g==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/types": "^7.28.0"
      },
      "bin": {
        "parser": "bin/babel-parser.js"
      },
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/@babel/plugin-transform-react-jsx-self": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-react-jsx-self/-/plugin-transform-react-jsx-self-7.27.1.tgz",
      "integrity": "sha512-6UzkCs+ejGdZ5mFFC/OCUrv028ab2fp1znZmCZjAOBKiBK2jXD1O+BPSfX8X2qjJ75fZBMSnQn3Rq2mrBJK2mw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-react-jsx-source": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-react-jsx-source/-/plugin-transform-react-jsx-source-7.27.1.tgz",
      "integrity": "sha512-zbwoTsBruTeKB9hSq73ha66iFeJHuaFkUbwvqElnygoNbj/jHRsSeokowZFN3CZ64IvEqcmmkVe89OPXc7ldAw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/template": {
      "version": "7.27.2",
      "resolved": "https://registry.npmjs.org/@babel/template/-/template-7.27.2.tgz",
      "integrity": "sha512-LPDZ85aEJyYSd18/DkjNh4/y1ntkE5KwUHWTiqgRxruuZL2F1yuHligVHLvcHY2vMHXttKFpJn6LwfI7cw7ODw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/code-frame": "^7.27.1",
        "@babel/parser": "^7.27.2",
        "@babel/types": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/traverse": {
      "version": "7.28.0",
      "resolved": "https://registry.npmjs.org/@babel/traverse/-/traverse-7.28.0.tgz",
      "integrity": "sha512-mGe7UK5wWyh0bKRfupsUchrQGqvDbZDbKJw+kcRGSmdHVYrv+ltd0pnpDTVpiTqnaBru9iEvA8pz8W46v0Amwg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/code-frame": "^7.27.1",
        "@babel/generator": "^7.28.0",
        "@babel/helper-globals": "^7.28.0",
        "@babel/parser": "^7.28.0",
        "@babel/template": "^7.27.2",
        "@babel/types": "^7.28.0",
        "debug": "^4.3.1"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/types": {
      "version": "7.28.1",
      "resolved": "https://registry.npmjs.org/@babel/types/-/types-7.28.1.tgz",
      "integrity": "sha512-x0LvFTekgSX+83TI28Y9wYPUfzrnl2aT5+5QLnO6v7mSJYtEEevuDRN0F0uSHRk1G1IWZC43o00Y0xDDrpBGPQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-string-parser": "^7.27.1",
        "@babel/helper-validator-identifier": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@esbuild/win32-x64": {
      "version": "0.18.20",
      "resolved": "https://registry.npmjs.org/@esbuild/win32-x64/-/win32-x64-0.18.20.tgz",
      "integrity": "sha512-kTdfRcSiDfQca/y9QIkng02avJ+NCaQvrMejlsB3RRv5sE9rRoeBPISaZpKxHELzRxZyLvNts1P27W3wV+8geQ==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "win32"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@eslint-community/eslint-utils": {
      "version": "4.7.0",
      "resolved": "https://registry.npmjs.org/@eslint-community/eslint-utils/-/eslint-utils-4.7.0.tgz",
      "integrity": "sha512-dyybb3AcajC7uha6CvhdVRJqaKyn7w2YKqKyAN37NKYgZT36w+iRb0Dymmc5qEJ549c/S31cMMSFd75bteCpCw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "eslint-visitor-keys": "^3.4.3"
      },
      "engines": {
        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
      },
      "funding": {
        "url": "https://opencollective.com/eslint"
      },
      "peerDependencies": {
        "eslint": "^6.0.0 || ^7.0.0 || >=8.0.0"
      }
    },
    "node_modules/@eslint-community/regexpp": {
      "version": "4.12.1",
      "resolved": "https://registry.npmjs.org/@eslint-community/regexpp/-/regexpp-4.12.1.tgz",
      "integrity": "sha512-CCZCDJuduB9OUkFkY2IgppNZMi2lBQgD2qzwXkEia16cge2pijY/aXi96CJMquDMn3nJdlPV1A5KrJEXwfLNzQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": "^12.0.0 || ^14.0.0 || >=16.0.0"
      }
    },
    "node_modules/@eslint/eslintrc": {
      "version": "2.1.4",
      "resolved": "https://registry.npmjs.org/@eslint/eslintrc/-/eslintrc-2.1.4.tgz",
      "integrity": "sha512-269Z39MS6wVJtsoUl10L60WdkhJVdPG24Q4eZTH3nnF6lpvSShEK3wQjDX9JRWAUPvPh7COouPpU9IrqaZFvtQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "ajv": "^6.12.4",
        "debug": "^4.3.2",
        "espree": "^9.6.0",
        "globals": "^13.19.0",
        "ignore": "^5.2.0",
        "import-fresh": "^3.2.1",
        "js-yaml": "^4.1.0",
        "minimatch": "^3.1.2",
        "strip-json-comments": "^3.1.1"
      },
      "engines": {
        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
      },
      "funding": {
        "url": "https://opencollective.com/eslint"
      }
    },
    "node_modules/@eslint/js": {
      "version": "8.57.1",
      "resolved": "https://registry.npmjs.org/@eslint/js/-/js-8.57.1.tgz",
      "integrity": "sha512-d9zaMRSTIKDLhctzH12MtXvJKSSUhaHcjV+2Z+GK+EEY7XKpP5yR4x+N3TAcHTcu963nIr+TMcCb4DBCYX1z6Q==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
      }
    },
    "node_modules/@fortawesome/fontawesome-free": {
      "version": "6.7.2",
      "resolved": "https://registry.npmjs.org/@fortawesome/fontawesome-free/-/fontawesome-free-6.7.2.tgz",
      "integrity": "sha512-JUOtgFW6k9u4Y+xeIaEiLr3+cjoUPiAuLXoyKOJSia6Duzb7pq+A76P9ZdPDoAoxHdHzq6gE9/jKBGXlZT8FbA==",
      "license": "(CC-BY-4.0 AND OFL-1.1 AND MIT)",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/@humanwhocodes/config-array": {
      "version": "0.13.0",
      "resolved": "https://registry.npmjs.org/@humanwhocodes/config-array/-/config-array-0.13.0.tgz",
      "integrity": "sha512-DZLEEqFWQFiyK6h5YIeynKx7JlvCYWL0cImfSRXZ9l4Sg2efkFGTuFf6vzXjK1cq6IYkU+Eg/JizXw+TD2vRNw==",
      "deprecated": "Use @eslint/config-array instead",
      "dev": true,
      "license": "Apache-2.0",
      "dependencies": {
        "@humanwhocodes/object-schema": "^2.0.3",
        "debug": "^4.3.1",
        "minimatch": "^3.0.5"
      },
      "engines": {
        "node": ">=10.10.0"
      }
    },
    "node_modules/@humanwhocodes/module-importer": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/@humanwhocodes/module-importer/-/module-importer-1.0.1.tgz",
      "integrity": "sha512-bxveV4V8v5Yb4ncFTT3rPSgZBOpCkjfK0y4oVVVJwIuDVBRMDXrPyXRL988i5ap9m9bnyEEjWfm5WkBmtffLfA==",
      "dev": true,
      "license": "Apache-2.0",
      "engines": {
        "node": ">=12.22"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/nzakas"
      }
    },
    "node_modules/@humanwhocodes/object-schema": {
      "version": "2.0.3",
      "resolved": "https://registry.npmjs.org/@humanwhocodes/object-schema/-/object-schema-2.0.3.tgz",
      "integrity": "sha512-93zYdMES/c1D69yZiKDBj0V24vqNzB/koF26KPaagAfd3P/4gUlh3Dys5ogAK+Exi9QyzlD8x/08Zt7wIKcDcA==",
      "deprecated": "Use @eslint/object-schema instead",
      "dev": true,
      "license": "BSD-3-Clause"
    },
    "node_modules/@jridgewell/gen-mapping": {
      "version": "0.3.12",
      "resolved": "https://registry.npmjs.org/@jridgewell/gen-mapping/-/gen-mapping-0.3.12.tgz",
      "integrity": "sha512-OuLGC46TjB5BbN1dH8JULVVZY4WTdkF7tV9Ys6wLL1rubZnCMstOhNHueU5bLCrnRuDhKPDM4g6sw4Bel5Gzqg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@jridgewell/sourcemap-codec": "^1.5.0",
        "@jridgewell/trace-mapping": "^0.3.24"
      }
    },
    "node_modules/@jridgewell/resolve-uri": {
      "version": "3.1.2",
      "resolved": "https://registry.npmjs.org/@jridgewell/resolve-uri/-/resolve-uri-3.1.2.tgz",
      "integrity": "sha512-bRISgCIjP20/tbWSPWMEi54QVPRZExkuD9lJL+UIxUKtwVJA8wW1Trb1jMs1RFXo1CBTNZ/5hpC9QvmKWdopKw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/@jridgewell/sourcemap-codec": {
      "version": "1.5.4",
      "resolved": "https://registry.npmjs.org/@jridgewell/sourcemap-codec/-/sourcemap-codec-1.5.4.tgz",
      "integrity": "sha512-VT2+G1VQs/9oz078bLrYbecdZKs912zQlkelYpuf+SXF+QvZDYJlbx/LSx+meSAwdDFnF8FVXW92AVjjkVmgFw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/@jridgewell/trace-mapping": {
      "version": "0.3.29",
      "resolved": "https://registry.npmjs.org/@jridgewell/trace-mapping/-/trace-mapping-0.3.29.tgz",
      "integrity": "sha512-uw6guiW/gcAGPDhLmd77/6lW8QLeiV5RUTsAX46Db6oLhGaVj4lhnPwb184s1bkc8kdVg/+h988dro8GRDpmYQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@jridgewell/resolve-uri": "^3.1.0",
        "@jridgewell/sourcemap-codec": "^1.4.14"
      }
    },
    "node_modules/@nodelib/fs.scandir": {
      "version": "2.1.5",
      "resolved": "https://registry.npmjs.org/@nodelib/fs.scandir/-/fs.scandir-2.1.5.tgz",
      "integrity": "sha512-vq24Bq3ym5HEQm2NKCr3yXDwjc7vTsEThRDnkp2DK9p1uqLR+DHurm/NOTo0KG7HYHU7eppKZj3MyqYuMBf62g==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@nodelib/fs.stat": "2.0.5",
        "run-parallel": "^1.1.9"
      },
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/@nodelib/fs.stat": {
      "version": "2.0.5",
      "resolved": "https://registry.npmjs.org/@nodelib/fs.stat/-/fs.stat-2.0.5.tgz",
      "integrity": "sha512-RkhPPp2zrqDAQA/2jNhnztcPAlv64XdhIp7a7454A5ovI7Bukxgt7MX7udwAu3zg1DcpPU0rz3VV1SeaqvY4+A==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/@nodelib/fs.walk": {
      "version": "1.2.8",
      "resolved": "https://registry.npmjs.org/@nodelib/fs.walk/-/fs.walk-1.2.8.tgz",
      "integrity": "sha512-oGB+UxlgWcgQkgwo8GcEGwemoTFt3FIO9ababBmaGwXIoBKZ+GTy0pP185beGg7Llih/NSHSV2XAs1lnznocSg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@nodelib/fs.scandir": "2.1.5",
        "fastq": "^1.6.0"
      },
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/@popperjs/core": {
      "version": "2.11.8",
      "resolved": "https://registry.npmjs.org/@popperjs/core/-/core-2.11.8.tgz",
      "integrity": "sha512-P1st0aksCrn9sGZhp8GMYwBnQsbvAWsZAX44oXNNvLHGqAOcoVxmjZiohstwQ7SqKnbR47akdNi+uleWD8+g6A==",
      "license": "MIT",
      "peer": true,
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/popperjs"
      }
    },
    "node_modules/@remix-run/router": {
      "version": "1.23.0",
      "resolved": "https://registry.npmjs.org/@remix-run/router/-/router-1.23.0.tgz",
      "integrity": "sha512-O3rHJzAQKamUz1fvE0Qaw0xSFqsA/yafi2iqeE0pvdFtCO1viYx8QL6f3Ln/aCCTLxs68SLf0KPM9eSeM8yBnA==",
      "license": "MIT",
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@types/prop-types": {
      "version": "15.7.15",
      "resolved": "https://registry.npmjs.org/@types/prop-types/-/prop-types-15.7.15.tgz",
      "integrity": "sha512-F6bEyamV9jKGAFBEmlQnesRPGOQqS2+Uwi0Em15xenOxHaf2hv6L8YCVn3rPdPJOiJfPiCnLIRyvwVaqMY3MIw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/@types/react": {
      "version": "18.3.23",
      "resolved": "https://registry.npmjs.org/@types/react/-/react-18.3.23.tgz",
      "integrity": "sha512-/LDXMQh55EzZQ0uVAZmKKhfENivEvWz6E+EYzh+/MCjMhNsotd+ZHhBGIjFDTi6+fz0OhQQQLbTgdQIxxCsC0w==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@types/prop-types": "*",
        "csstype": "^3.0.2"
      }
    },
    "node_modules/@types/react-dom": {
      "version": "18.3.7",
      "resolved": "https://registry.npmjs.org/@types/react-dom/-/react-dom-18.3.7.tgz",
      "integrity": "sha512-MEe3UeoENYVFXzoXEWsvcpg6ZvlrFNlOQ7EOsvhI3CfAXwzPfO8Qwuxd40nepsYKqyyVQnTdEfv68q91yLcKrQ==",
      "dev": true,
      "license": "MIT",
      "peerDependencies": {
        "@types/react": "^18.0.0"
      }
    },
    "node_modules/@ungap/structured-clone": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/@ungap/structured-clone/-/structured-clone-1.3.0.tgz",
      "integrity": "sha512-WmoN8qaIAo7WTYWbAZuG8PYEhn5fkz7dZrqTBZ7dtt//lL2Gwms1IcnQ5yHqjDfX8Ft5j4YzDM23f87zBfDe9g==",
      "dev": true,
      "license": "ISC"
    },
    "node_modules/@vitejs/plugin-react": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/@vitejs/plugin-react/-/plugin-react-3.1.0.tgz",
      "integrity": "sha512-AfgcRL8ZBhAlc3BFdigClmTUMISmmzHn7sB2h9U1odvc5U/MjWXsAaz18b/WoppUTDBzxOJwo2VdClfUcItu9g==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/core": "^7.20.12",
        "@babel/plugin-transform-react-jsx-self": "^7.18.6",
        "@babel/plugin-transform-react-jsx-source": "^7.19.6",
        "magic-string": "^0.27.0",
        "react-refresh": "^0.14.0"
      },
      "engines": {
        "node": "^14.18.0 || >=16.0.0"
      },
      "peerDependencies": {
        "vite": "^4.1.0-beta.0"
      }
    },
    "node_modules/accepts": {
      "version": "1.3.8",
      "resolved": "https://registry.npmjs.org/accepts/-/accepts-1.3.8.tgz",
      "integrity": "sha512-PYAthTa2m2VKxuvSD3DPC/Gy+U+sOA1LAuT8mkmRuvw+NACSaeXEQ+NHcVF7rONl6qcaxV3Uuemwawk+7+SJLw==",
      "license": "MIT",
      "dependencies": {
        "mime-types": "~2.1.34",
        "negotiator": "0.6.3"
      },
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/acorn": {
      "version": "8.15.0",
      "resolved": "https://registry.npmjs.org/acorn/-/acorn-8.15.0.tgz",
      "integrity": "sha512-NZyJarBfL7nWwIq+FDL6Zp/yHEhePMNnnJ0y3qfieCrmNvYct8uvtiV41UvlSe6apAfk0fY1FbWx+NwfmpvtTg==",
      "dev": true,
      "license": "MIT",
      "bin": {
        "acorn": "bin/acorn"
      },
      "engines": {
        "node": ">=0.4.0"
      }
    },
    "node_modules/acorn-jsx": {
      "version": "5.3.2",
      "resolved": "https://registry.npmjs.org/acorn-jsx/-/acorn-jsx-5.3.2.tgz",
      "integrity": "sha512-rq9s+JNhf0IChjtDXxllJ7g41oZk5SlXtp0LHwyA5cejwn7vKmKp4pPri6YEePv2PU65sAsegbXtIinmDFDXgQ==",
      "dev": true,
      "license": "MIT",
      "peerDependencies": {
        "acorn": "^6.0.0 || ^7.0.0 || ^8.0.0"
      }
    },
    "node_modules/ajv": {
      "version": "6.12.6",
      "resolved": "https://registry.npmjs.org/ajv/-/ajv-6.12.6.tgz",
      "integrity": "sha512-j3fVLgvTo527anyYyJOGTYJbG+vnnQYvE0m5mmkc1TK+nxAppkCLMIL0aZ4dblVCNoGShhm+kzE4ZUykBoMg4g==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "fast-deep-equal": "^3.1.1",
        "fast-json-stable-stringify": "^2.0.0",
        "json-schema-traverse": "^0.4.1",
        "uri-js": "^4.2.2"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/epoberezkin"
      }
    },
    "node_modules/ansi-regex": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-5.0.1.tgz",
      "integrity": "sha512-quJQXlTSUGL2LH9SUXo8VwsY4soanhgo6LNSm84E1LBcE8s3O0wpdiRzyR9z/ZZJMlMWv37qOOb9pdJlMUEKFQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/ansi-styles": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
      "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "color-convert": "^2.0.1"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
      }
    },
    "node_modules/argparse": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/argparse/-/argparse-2.0.1.tgz",
      "integrity": "sha512-8+9WqebbFzpX9OR+Wa6O29asIogeRMzcGtAINdpMHHyAg10f05aSFVBbcEqGf/PXw1EjAZ+q2/bEBg3DvurK3Q==",
      "dev": true,
      "license": "Python-2.0"
    },
    "node_modules/array-buffer-byte-length": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/array-buffer-byte-length/-/array-buffer-byte-length-1.0.2.tgz",
      "integrity": "sha512-LHE+8BuR7RYGDKvnrmcuSq3tDcKv9OFEXQt/HpbZhY7V6h0zlUXutnAD82GiFx9rdieCMjkvtcsPqBwgUl1Iiw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.3",
        "is-array-buffer": "^3.0.5"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/array-flatten": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/array-flatten/-/array-flatten-1.1.1.tgz",
      "integrity": "sha512-PCVAQswWemu6UdxsDFFX/+gVeYqKAod3D3UVm91jHwynguOwAvYPhx8nNlM++NqRcK6CxxpUafjmhIdKiHibqg==",
      "license": "MIT"
    },
    "node_modules/array-includes": {
      "version": "3.1.9",
      "resolved": "https://registry.npmjs.org/array-includes/-/array-includes-3.1.9.tgz",
      "integrity": "sha512-FmeCCAenzH0KH381SPT5FZmiA/TmpndpcaShhfgEN9eCVjnFBqq3l1xrI42y8+PPLI6hypzou4GXw00WHmPBLQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.8",
        "call-bound": "^1.0.4",
        "define-properties": "^1.2.1",
        "es-abstract": "^1.24.0",
        "es-object-atoms": "^1.1.1",
        "get-intrinsic": "^1.3.0",
        "is-string": "^1.1.1",
        "math-intrinsics": "^1.1.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/array.prototype.findlast": {
      "version": "1.2.5",
      "resolved": "https://registry.npmjs.org/array.prototype.findlast/-/array.prototype.findlast-1.2.5.tgz",
      "integrity": "sha512-CVvd6FHg1Z3POpBLxO6E6zr+rSKEQ9L6rZHAaY7lLfhKsWYUBBOuMs0e9o24oopj6H+geRCX0YJ+TJLBK2eHyQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.7",
        "define-properties": "^1.2.1",
        "es-abstract": "^1.23.2",
        "es-errors": "^1.3.0",
        "es-object-atoms": "^1.0.0",
        "es-shim-unscopables": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/array.prototype.flat": {
      "version": "1.3.3",
      "resolved": "https://registry.npmjs.org/array.prototype.flat/-/array.prototype.flat-1.3.3.tgz",
      "integrity": "sha512-rwG/ja1neyLqCuGZ5YYrznA62D4mZXg0i1cIskIUKSiqF3Cje9/wXAls9B9s1Wa2fomMsIv8czB8jZcPmxCXFg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.8",
        "define-properties": "^1.2.1",
        "es-abstract": "^1.23.5",
        "es-shim-unscopables": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/array.prototype.flatmap": {
      "version": "1.3.3",
      "resolved": "https://registry.npmjs.org/array.prototype.flatmap/-/array.prototype.flatmap-1.3.3.tgz",
      "integrity": "sha512-Y7Wt51eKJSyi80hFrJCePGGNo5ktJCslFuboqJsbf57CCPcm5zztluPlc4/aD8sWsKvlwatezpV4U1efk8kpjg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.8",
        "define-properties": "^1.2.1",
        "es-abstract": "^1.23.5",
        "es-shim-unscopables": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/array.prototype.tosorted": {
      "version": "1.1.4",
      "resolved": "https://registry.npmjs.org/array.prototype.tosorted/-/array.prototype.tosorted-1.1.4.tgz",
      "integrity": "sha512-p6Fx8B7b7ZhL/gmUsAy0D15WhvDccw3mnGNbZpi3pmeJdxtWsj2jEaI4Y6oo3XiHfzuSgPwKc04MYt6KgvC/wA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.7",
        "define-properties": "^1.2.1",
        "es-abstract": "^1.23.3",
        "es-errors": "^1.3.0",
        "es-shim-unscopables": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/arraybuffer.prototype.slice": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/arraybuffer.prototype.slice/-/arraybuffer.prototype.slice-1.0.4.tgz",
      "integrity": "sha512-BNoCY6SXXPQ7gF2opIP4GBE+Xw7U+pHMYKuzjgCN3GwiaIR09UUeKfheyIry77QtrCBlC0KK0q5/TER/tYh3PQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "array-buffer-byte-length": "^1.0.1",
        "call-bind": "^1.0.8",
        "define-properties": "^1.2.1",
        "es-abstract": "^1.23.5",
        "es-errors": "^1.3.0",
        "get-intrinsic": "^1.2.6",
        "is-array-buffer": "^3.0.4"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/async-function": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/async-function/-/async-function-1.0.0.tgz",
      "integrity": "sha512-hsU18Ae8CDTR6Kgu9DYf0EbCr/a5iGL0rytQDobUcdpYOKokk8LEjVphnXkDkgpi0wYVsqrXuP0bZxJaTqdgoA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/asynckit": {
      "version": "0.4.0",
      "resolved": "https://registry.npmjs.org/asynckit/-/asynckit-0.4.0.tgz",
      "integrity": "sha512-Oei9OH4tRh0YqU3GxhX79dM/mwVgvbZJaSNaRk+bshkj0S5cfHcgYakreBjrHwatXKbz+IoIdYLxrKim2MjW0Q==",
      "license": "MIT"
    },
    "node_modules/available-typed-arrays": {
      "version": "1.0.7",
      "resolved": "https://registry.npmjs.org/available-typed-arrays/-/available-typed-arrays-1.0.7.tgz",
      "integrity": "sha512-wvUjBtSGN7+7SjNpq/9M2Tg350UZD3q62IFZLbRAR1bSMlCo1ZaeW+BJ+D090e4hIIZLBcTDWe4Mh4jvUDajzQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "possible-typed-array-names": "^1.0.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/axios": {
      "version": "1.10.0",
      "resolved": "https://registry.npmjs.org/axios/-/axios-1.10.0.tgz",
      "integrity": "sha512-/1xYAC4MP/HEG+3duIhFr4ZQXR4sQXOIe+o6sdqzeykGLx6Upp/1p8MHqhINOvGeP7xyNHe7tsiJByc4SSVUxw==",
      "license": "MIT",
      "dependencies": {
        "follow-redirects": "^1.15.6",
        "form-data": "^4.0.0",
        "proxy-from-env": "^1.1.0"
      }
    },
    "node_modules/balanced-match": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/balanced-match/-/balanced-match-1.0.2.tgz",
      "integrity": "sha512-3oSeUO0TMV67hN1AmbXsK4yaqU7tjiHlbxRDZOpH0KW9+CeX4bRAaX0Anxt0tx2MrpRpWwQaPwIlISEJhYU5Pw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/body-parser": {
      "version": "1.20.3",
      "resolved": "https://registry.npmjs.org/body-parser/-/body-parser-1.20.3.tgz",
      "integrity": "sha512-7rAxByjUMqQ3/bHJy7D6OGXvx/MMc4IqBn/X0fcM1QUcAItpZrBEYhWGem+tzXH90c+G01ypMcYJBO9Y30203g==",
      "license": "MIT",
      "dependencies": {
        "bytes": "3.1.2",
        "content-type": "~1.0.5",
        "debug": "2.6.9",
        "depd": "2.0.0",
        "destroy": "1.2.0",
        "http-errors": "2.0.0",
        "iconv-lite": "0.4.24",
        "on-finished": "2.4.1",
        "qs": "6.13.0",
        "raw-body": "2.5.2",
        "type-is": "~1.6.18",
        "unpipe": "1.0.0"
      },
      "engines": {
        "node": ">= 0.8",
        "npm": "1.2.8000 || >= 1.4.16"
      }
    },
    "node_modules/body-parser/node_modules/debug": {
      "version": "2.6.9",
      "resolved": "https://registry.npmjs.org/debug/-/debug-2.6.9.tgz",
      "integrity": "sha512-bC7ElrdJaJnPbAP+1EotYvqZsb3ecl5wi6Bfi6BJTUcNowp6cvspg0jXznRTKDjm/E7AdgFBVeAPVMNcKGsHMA==",
      "license": "MIT",
      "dependencies": {
        "ms": "2.0.0"
      }
    },
    "node_modules/body-parser/node_modules/ms": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.0.0.tgz",
      "integrity": "sha512-Tpp60P6IUJDTuOq/5Z8cdskzJujfwqfOTkrwIwj7IRISpnkJnT6SyJ4PCPnGMoFjC9ddhal5KVIYtAt97ix05A==",
      "license": "MIT"
    },
    "node_modules/bootstrap": {
      "version": "5.3.7",
      "resolved": "https://registry.npmjs.org/bootstrap/-/bootstrap-5.3.7.tgz",
      "integrity": "sha512-7KgiD8UHjfcPBHEpDNg+zGz8L3LqR3GVwqZiBRFX04a1BCArZOz1r2kjly2HQ0WokqTO0v1nF+QAt8dsW4lKlw==",
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/twbs"
        },
        {
          "type": "opencollective",
          "url": "https://opencollective.com/bootstrap"
        }
      ],
      "license": "MIT",
      "peerDependencies": {
        "@popperjs/core": "^2.11.8"
      }
    },
    "node_modules/brace-expansion": {
      "version": "1.1.12",
      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-1.1.12.tgz",
      "integrity": "sha512-9T9UjW3r0UW5c1Q7GTwllptXwhvYmEzFhzMfZ9H7FQWt+uZePjZPjBP/W1ZEyZ1twGWom5/56TF4lPcqjnDHcg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "balanced-match": "^1.0.0",
        "concat-map": "0.0.1"
      }
    },
    "node_modules/browserslist": {
      "version": "4.25.1",
      "resolved": "https://registry.npmjs.org/browserslist/-/browserslist-4.25.1.tgz",
      "integrity": "sha512-KGj0KoOMXLpSNkkEI6Z6mShmQy0bc1I+T7K9N81k4WWMrfz+6fQ6es80B/YLAeRoKvjYE1YSHHOW1qe9xIVzHw==",
      "dev": true,
      "funding": [
        {
          "type": "opencollective",
          "url": "https://opencollective.com/browserslist"
        },
        {
          "type": "tidelift",
          "url": "https://tidelift.com/funding/github/npm/browserslist"
        },
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "license": "MIT",
      "dependencies": {
        "caniuse-lite": "^1.0.30001726",
        "electron-to-chromium": "^1.5.173",
        "node-releases": "^2.0.19",
        "update-browserslist-db": "^1.1.3"
      },
      "bin": {
        "browserslist": "cli.js"
      },
      "engines": {
        "node": "^6 || ^7 || ^8 || ^9 || ^10 || ^11 || ^12 || >=13.7"
      }
    },
    "node_modules/bytes": {
      "version": "3.1.2",
      "resolved": "https://registry.npmjs.org/bytes/-/bytes-3.1.2.tgz",
      "integrity": "sha512-/Nf7TyzTx6S3yRJObOAV7956r8cr2+Oj8AC5dt8wSP3BQAoeX58NoHyCU8P8zGkNXStjTSi6fzO6F0pBdcYbEg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/call-bind": {
      "version": "1.0.8",
      "resolved": "https://registry.npmjs.org/call-bind/-/call-bind-1.0.8.tgz",
      "integrity": "sha512-oKlSFMcMwpUg2ednkhQ454wfWiU/ul3CkJe/PEHcTKuiX6RpbehUiFMXu13HalGZxfUwCQzZG747YXBn1im9ww==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bind-apply-helpers": "^1.0.0",
        "es-define-property": "^1.0.0",
        "get-intrinsic": "^1.2.4",
        "set-function-length": "^1.2.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/call-bind-apply-helpers": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/call-bind-apply-helpers/-/call-bind-apply-helpers-1.0.2.tgz",
      "integrity": "sha512-Sp1ablJ0ivDkSzjcaJdxEunN5/XvksFJ2sMBFfq6x0ryhQV/2b/KwFe21cMpmHtPOSij8K99/wSfoEuTObmuMQ==",
      "license": "MIT",
      "dependencies": {
        "es-errors": "^1.3.0",
        "function-bind": "^1.1.2"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/call-bound": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/call-bound/-/call-bound-1.0.4.tgz",
      "integrity": "sha512-+ys997U96po4Kx/ABpBCqhA9EuxJaQWDQg7295H4hBphv3IZg0boBKuwYpt4YXp6MZ5AmZQnU/tyMTlRpaSejg==",
      "license": "MIT",
      "dependencies": {
        "call-bind-apply-helpers": "^1.0.2",
        "get-intrinsic": "^1.3.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/callsites": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/callsites/-/callsites-3.1.0.tgz",
      "integrity": "sha512-P8BjAsXvZS+VIDUI11hHCQEv74YT67YUi5JJFNWIqL235sBmjX4+qx9Muvls5ivyNENctx46xQLQ3aTuE7ssaQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/caniuse-lite": {
      "version": "1.0.30001727",
      "resolved": "https://registry.npmjs.org/caniuse-lite/-/caniuse-lite-1.0.30001727.tgz",
      "integrity": "sha512-pB68nIHmbN6L/4C6MH1DokyR3bYqFwjaSs/sWDHGj4CTcFtQUQMuJftVwWkXq7mNWOybD3KhUv3oWHoGxgP14Q==",
      "dev": true,
      "funding": [
        {
          "type": "opencollective",
          "url": "https://opencollective.com/browserslist"
        },
        {
          "type": "tidelift",
          "url": "https://tidelift.com/funding/github/npm/caniuse-lite"
        },
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "license": "CC-BY-4.0"
    },
    "node_modules/chalk": {
      "version": "4.1.2",
      "resolved": "https://registry.npmjs.org/chalk/-/chalk-4.1.2.tgz",
      "integrity": "sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "ansi-styles": "^4.1.0",
        "supports-color": "^7.1.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/chalk/chalk?sponsor=1"
      }
    },
    "node_modules/color-convert": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-2.0.1.tgz",
      "integrity": "sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "color-name": "~1.1.4"
      },
      "engines": {
        "node": ">=7.0.0"
      }
    },
    "node_modules/color-name": {
      "version": "1.1.4",
      "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.4.tgz",
      "integrity": "sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/combined-stream": {
      "version": "1.0.8",
      "resolved": "https://registry.npmjs.org/combined-stream/-/combined-stream-1.0.8.tgz",
      "integrity": "sha512-FQN4MRfuJeHf7cBbBMJFXhKSDq+2kAArBlmRBvcvFE5BB1HZKXtSFASDhdlz9zOYwxh8lDdnvmMOe/+5cdoEdg==",
      "license": "MIT",
      "dependencies": {
        "delayed-stream": "~1.0.0"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/concat-map": {
      "version": "0.0.1",
      "resolved": "https://registry.npmjs.org/concat-map/-/concat-map-0.0.1.tgz",
      "integrity": "sha512-/Srv4dswyQNBfohGpz9o6Yb3Gz3SrUDqBH5rTuhGR7ahtlbYKnVxw2bCFMRljaA7EXHaXZ8wsHdodFvbkhKmqg==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/content-disposition": {
      "version": "0.5.4",
      "resolved": "https://registry.npmjs.org/content-disposition/-/content-disposition-0.5.4.tgz",
      "integrity": "sha512-FveZTNuGw04cxlAiWbzi6zTAL/lhehaWbTtgluJh4/E95DqMwTmha3KZN1aAWA8cFIhHzMZUvLevkw5Rqk+tSQ==",
      "license": "MIT",
      "dependencies": {
        "safe-buffer": "5.2.1"
      },
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/content-type": {
      "version": "1.0.5",
      "resolved": "https://registry.npmjs.org/content-type/-/content-type-1.0.5.tgz",
      "integrity": "sha512-nTjqfcBFEipKdXCv4YDQWCfmcLZKm81ldF0pAopTvyrFGVbcR6P/VAAd5G7N+0tTr8QqiU0tFadD6FK4NtJwOA==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/convert-source-map": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/convert-source-map/-/convert-source-map-2.0.0.tgz",
      "integrity": "sha512-Kvp459HrV2FEJ1CAsi1Ku+MY3kasH19TFykTz2xWmMeq6bk2NU3XXvfJ+Q61m0xktWwt+1HSYf3JZsTms3aRJg==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/cookie": {
      "version": "0.7.1",
      "resolved": "https://registry.npmjs.org/cookie/-/cookie-0.7.1.tgz",
      "integrity": "sha512-6DnInpx7SJ2AK3+CTUE/ZM0vWTUboZCegxhC2xiIydHR9jNuTAASBrfEpHhiGOZw/nX51bHt6YQl8jsGo4y/0w==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/cookie-signature": {
      "version": "1.0.6",
      "resolved": "https://registry.npmjs.org/cookie-signature/-/cookie-signature-1.0.6.tgz",
      "integrity": "sha512-QADzlaHc8icV8I7vbaJXJwod9HWYp8uCqf1xa4OfNu1T7JVxQIrUgOWtHdNDtPiywmFbiS12VjotIXLrKM3orQ==",
      "license": "MIT"
    },
    "node_modules/cors": {
      "version": "2.8.5",
      "resolved": "https://registry.npmjs.org/cors/-/cors-2.8.5.tgz",
      "integrity": "sha512-KIHbLJqu73RGr/hnbrO9uBeixNGuvSQjul/jdFvS/KFSIH1hWVd1ng7zOHx+YrEfInLG7q4n6GHQ9cDtxv/P6g==",
      "license": "MIT",
      "dependencies": {
        "object-assign": "^4",
        "vary": "^1"
      },
      "engines": {
        "node": ">= 0.10"
      }
    },
    "node_modules/cross-spawn": {
      "version": "7.0.6",
      "resolved": "https://registry.npmjs.org/cross-spawn/-/cross-spawn-7.0.6.tgz",
      "integrity": "sha512-uV2QOWP2nWzsy2aMp8aRibhi9dlzF5Hgh5SHaB9OiTGEyDTiJJyx0uy51QXdyWbtAHNua4XJzUKca3OzKUd3vA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "path-key": "^3.1.0",
        "shebang-command": "^2.0.0",
        "which": "^2.0.1"
      },
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/csstype": {
      "version": "3.1.3",
      "resolved": "https://registry.npmjs.org/csstype/-/csstype-3.1.3.tgz",
      "integrity": "sha512-M1uQkMl8rQK/szD0LNhtqxIPLpimGm8sOBwU7lLnCpSbTyY3yeU1Vc7l4KT5zT4s/yOxHH5O7tIuuLOCnLADRw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/data-view-buffer": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/data-view-buffer/-/data-view-buffer-1.0.2.tgz",
      "integrity": "sha512-EmKO5V3OLXh1rtK2wgXRansaK1/mtVdTUEiEI0W8RkvgT05kfxaH29PliLnpLP73yYO6142Q72QNa8Wx/A5CqQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.3",
        "es-errors": "^1.3.0",
        "is-data-view": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/data-view-byte-length": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/data-view-byte-length/-/data-view-byte-length-1.0.2.tgz",
      "integrity": "sha512-tuhGbE6CfTM9+5ANGf+oQb72Ky/0+s3xKUpHvShfiz2RxMFgFPjsXuRLBVMtvMs15awe45SRb83D6wH4ew6wlQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.3",
        "es-errors": "^1.3.0",
        "is-data-view": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/inspect-js"
      }
    },
    "node_modules/data-view-byte-offset": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/data-view-byte-offset/-/data-view-byte-offset-1.0.1.tgz",
      "integrity": "sha512-BS8PfmtDGnrgYdOonGZQdLZslWIeCGFP9tpan0hi1Co2Zr2NKADsvGYA8XxuG/4UWgJ6Cjtv+YJnB6MM69QGlQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.2",
        "es-errors": "^1.3.0",
        "is-data-view": "^1.0.1"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/debug": {
      "version": "4.4.1",
      "resolved": "https://registry.npmjs.org/debug/-/debug-4.4.1.tgz",
      "integrity": "sha512-KcKCqiftBJcZr++7ykoDIEwSa3XWowTfNPo92BYxjXiyYEVrUQh2aLyhxBCwww+heortUFxEJYcRzosstTEBYQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "ms": "^2.1.3"
      },
      "engines": {
        "node": ">=6.0"
      },
      "peerDependenciesMeta": {
        "supports-color": {
          "optional": true
        }
      }
    },
    "node_modules/deep-is": {
      "version": "0.1.4",
      "resolved": "https://registry.npmjs.org/deep-is/-/deep-is-0.1.4.tgz",
      "integrity": "sha512-oIPzksmTg4/MriiaYGO+okXDT7ztn/w3Eptv/+gSIdMdKsJo0u4CfYNFJPy+4SKMuCqGw2wxnA+URMg3t8a/bQ==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/define-data-property": {
      "version": "1.1.4",
      "resolved": "https://registry.npmjs.org/define-data-property/-/define-data-property-1.1.4.tgz",
      "integrity": "sha512-rBMvIzlpA8v6E+SJZoo++HAYqsLrkg7MSfIinMPFhmkorw7X+dOXVJQs+QT69zGkzMyfDnIMN2Wid1+NbL3T+A==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "es-define-property": "^1.0.0",
        "es-errors": "^1.3.0",
        "gopd": "^1.0.1"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/define-properties": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/define-properties/-/define-properties-1.2.1.tgz",
      "integrity": "sha512-8QmQKqEASLd5nx0U1B1okLElbUuuttJ/AnYmRXbbbGDWh6uS208EjD4Xqq/I9wK7u0v6O08XhTWnt5XtEbR6Dg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "define-data-property": "^1.0.1",
        "has-property-descriptors": "^1.0.0",
        "object-keys": "^1.1.1"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/delayed-stream": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/delayed-stream/-/delayed-stream-1.0.0.tgz",
      "integrity": "sha512-ZySD7Nf91aLB0RxL4KGrKHBXl7Eds1DAmEdcoVawXnLD7SDhpNgtuII2aAkg7a7QS41jxPSZ17p4VdGnMHk3MQ==",
      "license": "MIT",
      "engines": {
        "node": ">=0.4.0"
      }
    },
    "node_modules/depd": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/depd/-/depd-2.0.0.tgz",
      "integrity": "sha512-g7nH6P6dyDioJogAAGprGpCtVImJhpPk/roCzdb3fIh61/s/nPsfR6onyMwkCAR/OlC3yBC0lESvUoQEAssIrw==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/destroy": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/destroy/-/destroy-1.2.0.tgz",
      "integrity": "sha512-2sJGJTaXIIaR1w4iJSNoN0hnMY7Gpc/n8D4qSCJw8QqFWXf7cuAgnEHxBpweaVcPevC2l3KpjYCx3NypQQgaJg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8",
        "npm": "1.2.8000 || >= 1.4.16"
      }
    },
    "node_modules/doctrine": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/doctrine/-/doctrine-3.0.0.tgz",
      "integrity": "sha512-yS+Q5i3hBf7GBkd4KG8a7eBNNWNGLTaEwwYWUijIYM7zrlYDM0BFXHjjPWlWZ1Rg7UaddZeIDmi9jF3HmqiQ2w==",
      "dev": true,
      "license": "Apache-2.0",
      "dependencies": {
        "esutils": "^2.0.2"
      },
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/dotenv": {
      "version": "16.6.1",
      "resolved": "https://registry.npmjs.org/dotenv/-/dotenv-16.6.1.tgz",
      "integrity": "sha512-uBq4egWHTcTt33a72vpSG0z3HnPuIl6NqYcTrKEg2azoEyl2hpW0zqlxysq2pK9HlDIHyHyakeYaYnSAwd8bow==",
      "license": "BSD-2-Clause",
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://dotenvx.com"
      }
    },
    "node_modules/dunder-proto": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/dunder-proto/-/dunder-proto-1.0.1.tgz",
      "integrity": "sha512-KIN/nDJBQRcXw0MLVhZE9iQHmG68qAVIBg9CqmUYjmQIhgij9U5MFvrqkUL5FbtyyzZuOeOt0zdeRe4UY7ct+A==",
      "license": "MIT",
      "dependencies": {
        "call-bind-apply-helpers": "^1.0.1",
        "es-errors": "^1.3.0",
        "gopd": "^1.2.0"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/ee-first": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/ee-first/-/ee-first-1.1.1.tgz",
      "integrity": "sha512-WMwm9LhRUo+WUaRN+vRuETqG89IgZphVSNkdFgeb6sS/E4OrDIN7t48CAewSHXc6C8lefD8KKfr5vY61brQlow==",
      "license": "MIT"
    },
    "node_modules/electron-to-chromium": {
      "version": "1.5.187",
      "resolved": "https://registry.npmjs.org/electron-to-chromium/-/electron-to-chromium-1.5.187.tgz",
      "integrity": "sha512-cl5Jc9I0KGUoOoSbxvTywTa40uspGJt/BDBoDLoxJRSBpWh4FFXBsjNRHfQrONsV/OoEjDfHUmZQa2d6Ze4YgA==",
      "dev": true,
      "license": "ISC"
    },
    "node_modules/encodeurl": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/encodeurl/-/encodeurl-2.0.0.tgz",
      "integrity": "sha512-Q0n9HRi4m6JuGIV1eFlmvJB7ZEVxu93IrMyiMsGC0lrMJMWzRgx6WGquyfQgZVb31vhGgXnfmPNNXmxnOkRBrg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/es-abstract": {
      "version": "1.24.0",
      "resolved": "https://registry.npmjs.org/es-abstract/-/es-abstract-1.24.0.tgz",
      "integrity": "sha512-WSzPgsdLtTcQwm4CROfS5ju2Wa1QQcVeT37jFjYzdFz1r9ahadC8B8/a4qxJxM+09F18iumCdRmlr96ZYkQvEg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "array-buffer-byte-length": "^1.0.2",
        "arraybuffer.prototype.slice": "^1.0.4",
        "available-typed-arrays": "^1.0.7",
        "call-bind": "^1.0.8",
        "call-bound": "^1.0.4",
        "data-view-buffer": "^1.0.2",
        "data-view-byte-length": "^1.0.2",
        "data-view-byte-offset": "^1.0.1",
        "es-define-property": "^1.0.1",
        "es-errors": "^1.3.0",
        "es-object-atoms": "^1.1.1",
        "es-set-tostringtag": "^2.1.0",
        "es-to-primitive": "^1.3.0",
        "function.prototype.name": "^1.1.8",
        "get-intrinsic": "^1.3.0",
        "get-proto": "^1.0.1",
        "get-symbol-description": "^1.1.0",
        "globalthis": "^1.0.4",
        "gopd": "^1.2.0",
        "has-property-descriptors": "^1.0.2",
        "has-proto": "^1.2.0",
        "has-symbols": "^1.1.0",
        "hasown": "^2.0.2",
        "internal-slot": "^1.1.0",
        "is-array-buffer": "^3.0.5",
        "is-callable": "^1.2.7",
        "is-data-view": "^1.0.2",
        "is-negative-zero": "^2.0.3",
        "is-regex": "^1.2.1",
        "is-set": "^2.0.3",
        "is-shared-array-buffer": "^1.0.4",
        "is-string": "^1.1.1",
        "is-typed-array": "^1.1.15",
        "is-weakref": "^1.1.1",
        "math-intrinsics": "^1.1.0",
        "object-inspect": "^1.13.4",
        "object-keys": "^1.1.1",
        "object.assign": "^4.1.7",
        "own-keys": "^1.0.1",
        "regexp.prototype.flags": "^1.5.4",
        "safe-array-concat": "^1.1.3",
        "safe-push-apply": "^1.0.0",
        "safe-regex-test": "^1.1.0",
        "set-proto": "^1.0.0",
        "stop-iteration-iterator": "^1.1.0",
        "string.prototype.trim": "^1.2.10",
        "string.prototype.trimend": "^1.0.9",
        "string.prototype.trimstart": "^1.0.8",
        "typed-array-buffer": "^1.0.3",
        "typed-array-byte-length": "^1.0.3",
        "typed-array-byte-offset": "^1.0.4",
        "typed-array-length": "^1.0.7",
        "unbox-primitive": "^1.1.0",
        "which-typed-array": "^1.1.19"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/es-define-property": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/es-define-property/-/es-define-property-1.0.1.tgz",
      "integrity": "sha512-e3nRfgfUZ4rNGL232gUgX06QNyyez04KdjFrF+LTRoOXmrOgFKDg4BCdsjW8EnT69eqdYGmRpJwiPVYNrCaW3g==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/es-errors": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/es-errors/-/es-errors-1.3.0.tgz",
      "integrity": "sha512-Zf5H2Kxt2xjTvbJvP2ZWLEICxA6j+hAmMzIlypy4xcBg1vKVnx89Wy0GbS+kf5cwCVFFzdCFh2XSCFNULS6csw==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/es-iterator-helpers": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/es-iterator-helpers/-/es-iterator-helpers-1.2.1.tgz",
      "integrity": "sha512-uDn+FE1yrDzyC0pCo961B2IHbdM8y/ACZsKD4dG6WqrjV53BADjwa7D+1aom2rsNVfLyDgU/eigvlJGJ08OQ4w==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.8",
        "call-bound": "^1.0.3",
        "define-properties": "^1.2.1",
        "es-abstract": "^1.23.6",
        "es-errors": "^1.3.0",
        "es-set-tostringtag": "^2.0.3",
        "function-bind": "^1.1.2",
        "get-intrinsic": "^1.2.6",
        "globalthis": "^1.0.4",
        "gopd": "^1.2.0",
        "has-property-descriptors": "^1.0.2",
        "has-proto": "^1.2.0",
        "has-symbols": "^1.1.0",
        "internal-slot": "^1.1.0",
        "iterator.prototype": "^1.1.4",
        "safe-array-concat": "^1.1.3"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/es-object-atoms": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/es-object-atoms/-/es-object-atoms-1.1.1.tgz",
      "integrity": "sha512-FGgH2h8zKNim9ljj7dankFPcICIK9Cp5bm+c2gQSYePhpaG5+esrLODihIorn+Pe6FGJzWhXQotPv73jTaldXA==",
      "license": "MIT",
      "dependencies": {
        "es-errors": "^1.3.0"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/es-set-tostringtag": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/es-set-tostringtag/-/es-set-tostringtag-2.1.0.tgz",
      "integrity": "sha512-j6vWzfrGVfyXxge+O0x5sh6cvxAog0a/4Rdd2K36zCMV5eJ+/+tOAngRO8cODMNWbVRdVlmGZQL2YS3yR8bIUA==",
      "license": "MIT",
      "dependencies": {
        "es-errors": "^1.3.0",
        "get-intrinsic": "^1.2.6",
        "has-tostringtag": "^1.0.2",
        "hasown": "^2.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/es-shim-unscopables": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/es-shim-unscopables/-/es-shim-unscopables-1.1.0.tgz",
      "integrity": "sha512-d9T8ucsEhh8Bi1woXCf+TIKDIROLG5WCkxg8geBCbvk22kzwC5G2OnXVMO6FUsvQlgUUXQ2itephWDLqDzbeCw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "hasown": "^2.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/es-to-primitive": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/es-to-primitive/-/es-to-primitive-1.3.0.tgz",
      "integrity": "sha512-w+5mJ3GuFL+NjVtJlvydShqE1eN3h3PbI7/5LAsYJP/2qtuMXjfL2LpHSRqo4b4eSF5K/DH1JXKUAHSB2UW50g==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "is-callable": "^1.2.7",
        "is-date-object": "^1.0.5",
        "is-symbol": "^1.0.4"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/esbuild": {
      "version": "0.18.20",
      "resolved": "https://registry.npmjs.org/esbuild/-/esbuild-0.18.20.tgz",
      "integrity": "sha512-ceqxoedUrcayh7Y7ZX6NdbbDzGROiyVBgC4PriJThBKSVPWnnFHZAkfI1lJT8QFkOwH4qOS2SJkS4wvpGl8BpA==",
      "dev": true,
      "hasInstallScript": true,
      "license": "MIT",
      "bin": {
        "esbuild": "bin/esbuild"
      },
      "engines": {
        "node": ">=12"
      },
      "optionalDependencies": {
        "@esbuild/android-arm": "0.18.20",
        "@esbuild/android-arm64": "0.18.20",
        "@esbuild/android-x64": "0.18.20",
        "@esbuild/darwin-arm64": "0.18.20",
        "@esbuild/darwin-x64": "0.18.20",
        "@esbuild/freebsd-arm64": "0.18.20",
        "@esbuild/freebsd-x64": "0.18.20",
        "@esbuild/linux-arm": "0.18.20",
        "@esbuild/linux-arm64": "0.18.20",
        "@esbuild/linux-ia32": "0.18.20",
        "@esbuild/linux-loong64": "0.18.20",
        "@esbuild/linux-mips64el": "0.18.20",
        "@esbuild/linux-ppc64": "0.18.20",
        "@esbuild/linux-riscv64": "0.18.20",
        "@esbuild/linux-s390x": "0.18.20",
        "@esbuild/linux-x64": "0.18.20",
        "@esbuild/netbsd-x64": "0.18.20",
        "@esbuild/openbsd-x64": "0.18.20",
        "@esbuild/sunos-x64": "0.18.20",
        "@esbuild/win32-arm64": "0.18.20",
        "@esbuild/win32-ia32": "0.18.20",
        "@esbuild/win32-x64": "0.18.20"
      }
    },
    "node_modules/escalade": {
      "version": "3.2.0",
      "resolved": "https://registry.npmjs.org/escalade/-/escalade-3.2.0.tgz",
      "integrity": "sha512-WUj2qlxaQtO4g6Pq5c29GTcWGDyd8itL8zTlipgECz3JesAiiOKotd8JU6otB3PACgG6xkJUyVhboMS+bje/jA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/escape-html": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/escape-html/-/escape-html-1.0.3.tgz",
      "integrity": "sha512-NiSupZ4OeuGwr68lGIeym/ksIZMJodUGOSCZ/FSnTxcrekbvqrgdUxlJOMpijaKZVjAJrWrGs/6Jy8OMuyj9ow==",
      "license": "MIT"
    },
    "node_modules/escape-string-regexp": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/escape-string-regexp/-/escape-string-regexp-4.0.0.tgz",
      "integrity": "sha512-TtpcNJ3XAzx3Gq8sWRzJaVajRs0uVxA2YAkdb1jm2YkPz4G6egUFAyA3n5vtEIZefPk5Wa4UXbKuS5fKkJWdgA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/eslint": {
      "version": "8.57.1",
      "resolved": "https://registry.npmjs.org/eslint/-/eslint-8.57.1.tgz",
      "integrity": "sha512-ypowyDxpVSYpkXr9WPv2PAZCtNip1Mv5KTW0SCurXv/9iOpcrH9PaqUElksqEB6pChqHGDRCFTyrZlGhnLNGiA==",
      "deprecated": "This version is no longer supported. Please see https://eslint.org/version-support for other options.",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@eslint-community/eslint-utils": "^4.2.0",
        "@eslint-community/regexpp": "^4.6.1",
        "@eslint/eslintrc": "^2.1.4",
        "@eslint/js": "8.57.1",
        "@humanwhocodes/config-array": "^0.13.0",
        "@humanwhocodes/module-importer": "^1.0.1",
        "@nodelib/fs.walk": "^1.2.8",
        "@ungap/structured-clone": "^1.2.0",
        "ajv": "^6.12.4",
        "chalk": "^4.0.0",
        "cross-spawn": "^7.0.2",
        "debug": "^4.3.2",
        "doctrine": "^3.0.0",
        "escape-string-regexp": "^4.0.0",
        "eslint-scope": "^7.2.2",
        "eslint-visitor-keys": "^3.4.3",
        "espree": "^9.6.1",
        "esquery": "^1.4.2",
        "esutils": "^2.0.2",
        "fast-deep-equal": "^3.1.3",
        "file-entry-cache": "^6.0.1",
        "find-up": "^5.0.0",
        "glob-parent": "^6.0.2",
        "globals": "^13.19.0",
        "graphemer": "^1.4.0",
        "ignore": "^5.2.0",
        "imurmurhash": "^0.1.4",
        "is-glob": "^4.0.0",
        "is-path-inside": "^3.0.3",
        "js-yaml": "^4.1.0",
        "json-stable-stringify-without-jsonify": "^1.0.1",
        "levn": "^0.4.1",
        "lodash.merge": "^4.6.2",
        "minimatch": "^3.1.2",
        "natural-compare": "^1.4.0",
        "optionator": "^0.9.3",
        "strip-ansi": "^6.0.1",
        "text-table": "^0.2.0"
      },
      "bin": {
        "eslint": "bin/eslint.js"
      },
      "engines": {
        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
      },
      "funding": {
        "url": "https://opencollective.com/eslint"
      }
    },
    "node_modules/eslint-plugin-react": {
      "version": "7.37.5",
      "resolved": "https://registry.npmjs.org/eslint-plugin-react/-/eslint-plugin-react-7.37.5.tgz",
      "integrity": "sha512-Qteup0SqU15kdocexFNAJMvCJEfa2xUKNV4CC1xsVMrIIqEy3SQ/rqyxCWNzfrd3/ldy6HMlD2e0JDVpDg2qIA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "array-includes": "^3.1.8",
        "array.prototype.findlast": "^1.2.5",
        "array.prototype.flatmap": "^1.3.3",
        "array.prototype.tosorted": "^1.1.4",
        "doctrine": "^2.1.0",
        "es-iterator-helpers": "^1.2.1",
        "estraverse": "^5.3.0",
        "hasown": "^2.0.2",
        "jsx-ast-utils": "^2.4.1 || ^3.0.0",
        "minimatch": "^3.1.2",
        "object.entries": "^1.1.9",
        "object.fromentries": "^2.0.8",
        "object.values": "^1.2.1",
        "prop-types": "^15.8.1",
        "resolve": "^2.0.0-next.5",
        "semver": "^6.3.1",
        "string.prototype.matchall": "^4.0.12",
        "string.prototype.repeat": "^1.0.0"
      },
      "engines": {
        "node": ">=4"
      },
      "peerDependencies": {
        "eslint": "^3 || ^4 || ^5 || ^6 || ^7 || ^8 || ^9.7"
      }
    },
    "node_modules/eslint-plugin-react-hooks": {
      "version": "4.6.2",
      "resolved": "https://registry.npmjs.org/eslint-plugin-react-hooks/-/eslint-plugin-react-hooks-4.6.2.tgz",
      "integrity": "sha512-QzliNJq4GinDBcD8gPB5v0wh6g8q3SUi6EFF0x8N/BL9PoVs0atuGc47ozMRyOWAKdwaZ5OnbOEa3WR+dSGKuQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=10"
      },
      "peerDependencies": {
        "eslint": "^3.0.0 || ^4.0.0 || ^5.0.0 || ^6.0.0 || ^7.0.0 || ^8.0.0-0"
      }
    },
    "node_modules/eslint-plugin-react-refresh": {
      "version": "0.3.5",
      "resolved": "https://registry.npmjs.org/eslint-plugin-react-refresh/-/eslint-plugin-react-refresh-0.3.5.tgz",
      "integrity": "sha512-61qNIsc7fo9Pp/mju0J83kzvLm0Bsayu7OQSLEoJxLDCBjIIyb87bkzufoOvdDxLkSlMfkF7UxomC4+eztUBSA==",
      "dev": true,
      "license": "MIT",
      "peerDependencies": {
        "eslint": ">=7"
      }
    },
    "node_modules/eslint-plugin-react/node_modules/doctrine": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/doctrine/-/doctrine-2.1.0.tgz",
      "integrity": "sha512-35mSku4ZXK0vfCuHEDAwt55dg2jNajHZ1odvF+8SSr82EsZY4QmXfuWso8oEd8zRhVObSN18aM0CjSdoBX7zIw==",
      "dev": true,
      "license": "Apache-2.0",
      "dependencies": {
        "esutils": "^2.0.2"
      },
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/eslint-scope": {
      "version": "7.2.2",
      "resolved": "https://registry.npmjs.org/eslint-scope/-/eslint-scope-7.2.2.tgz",
      "integrity": "sha512-dOt21O7lTMhDM+X9mB4GX+DZrZtCUJPL/wlcTqxyrx5IvO0IYtILdtrQGQp+8n5S0gwSVmOf9NQrjMOgfQZlIg==",
      "dev": true,
      "license": "BSD-2-Clause",
      "dependencies": {
        "esrecurse": "^4.3.0",
        "estraverse": "^5.2.0"
      },
      "engines": {
        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
      },
      "funding": {
        "url": "https://opencollective.com/eslint"
      }
    },
    "node_modules/eslint-visitor-keys": {
      "version": "3.4.3",
      "resolved": "https://registry.npmjs.org/eslint-visitor-keys/-/eslint-visitor-keys-3.4.3.tgz",
      "integrity": "sha512-wpc+LXeiyiisxPlEkUzU6svyS1frIO3Mgxj1fdy7Pm8Ygzguax2N3Fa/D/ag1WqbOprdI+uY6wMUl8/a2G+iag==",
      "dev": true,
      "license": "Apache-2.0",
      "engines": {
        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
      },
      "funding": {
        "url": "https://opencollective.com/eslint"
      }
    },
    "node_modules/espree": {
      "version": "9.6.1",
      "resolved": "https://registry.npmjs.org/espree/-/espree-9.6.1.tgz",
      "integrity": "sha512-oruZaFkjorTpF32kDSI5/75ViwGeZginGGy2NoOSg3Q9bnwlnmDm4HLnkl0RE3n+njDXR037aY1+x58Z/zFdwQ==",
      "dev": true,
      "license": "BSD-2-Clause",
      "dependencies": {
        "acorn": "^8.9.0",
        "acorn-jsx": "^5.3.2",
        "eslint-visitor-keys": "^3.4.1"
      },
      "engines": {
        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
      },
      "funding": {
        "url": "https://opencollective.com/eslint"
      }
    },
    "node_modules/esquery": {
      "version": "1.6.0",
      "resolved": "https://registry.npmjs.org/esquery/-/esquery-1.6.0.tgz",
      "integrity": "sha512-ca9pw9fomFcKPvFLXhBKUK90ZvGibiGOvRJNbjljY7s7uq/5YO4BOzcYtJqExdx99rF6aAcnRxHmcUHcz6sQsg==",
      "dev": true,
      "license": "BSD-3-Clause",
      "dependencies": {
        "estraverse": "^5.1.0"
      },
      "engines": {
        "node": ">=0.10"
      }
    },
    "node_modules/esrecurse": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/esrecurse/-/esrecurse-4.3.0.tgz",
      "integrity": "sha512-KmfKL3b6G+RXvP8N1vr3Tq1kL/oCFgn2NYXEtqP8/L3pKapUA4G8cFVaoF3SU323CD4XypR/ffioHmkti6/Tag==",
      "dev": true,
      "license": "BSD-2-Clause",
      "dependencies": {
        "estraverse": "^5.2.0"
      },
      "engines": {
        "node": ">=4.0"
      }
    },
    "node_modules/estraverse": {
      "version": "5.3.0",
      "resolved": "https://registry.npmjs.org/estraverse/-/estraverse-5.3.0.tgz",
      "integrity": "sha512-MMdARuVEQziNTeJD8DgMqmhwR11BRQ/cBP+pLtYdSTnf3MIO8fFeiINEbX36ZdNlfU/7A9f3gUw49B3oQsvwBA==",
      "dev": true,
      "license": "BSD-2-Clause",
      "engines": {
        "node": ">=4.0"
      }
    },
    "node_modules/esutils": {
      "version": "2.0.3",
      "resolved": "https://registry.npmjs.org/esutils/-/esutils-2.0.3.tgz",
      "integrity": "sha512-kVscqXk4OCp68SZ0dkgEKVi6/8ij300KBWTJq32P/dYeWTSwK41WyTxalN1eRmA5Z9UU/LX9D7FWSmV9SAYx6g==",
      "dev": true,
      "license": "BSD-2-Clause",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/etag": {
      "version": "1.8.1",
      "resolved": "https://registry.npmjs.org/etag/-/etag-1.8.1.tgz",
      "integrity": "sha512-aIL5Fx7mawVa300al2BnEE4iNvo1qETxLrPI/o05L7z6go7fCw1J6EQmbK4FmJ2AS7kgVF/KEZWufBfdClMcPg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/express": {
      "version": "4.21.2",
      "resolved": "https://registry.npmjs.org/express/-/express-4.21.2.tgz",
      "integrity": "sha512-28HqgMZAmih1Czt9ny7qr6ek2qddF4FclbMzwhCREB6OFfH+rXAnuNCwo1/wFvrtbgsQDb4kSbX9de9lFbrXnA==",
      "license": "MIT",
      "dependencies": {
        "accepts": "~1.3.8",
        "array-flatten": "1.1.1",
        "body-parser": "1.20.3",
        "content-disposition": "0.5.4",
        "content-type": "~1.0.4",
        "cookie": "0.7.1",
        "cookie-signature": "1.0.6",
        "debug": "2.6.9",
        "depd": "2.0.0",
        "encodeurl": "~2.0.0",
        "escape-html": "~1.0.3",
        "etag": "~1.8.1",
        "finalhandler": "1.3.1",
        "fresh": "0.5.2",
        "http-errors": "2.0.0",
        "merge-descriptors": "1.0.3",
        "methods": "~1.1.2",
        "on-finished": "2.4.1",
        "parseurl": "~1.3.3",
        "path-to-regexp": "0.1.12",
        "proxy-addr": "~2.0.7",
        "qs": "6.13.0",
        "range-parser": "~1.2.1",
        "safe-buffer": "5.2.1",
        "send": "0.19.0",
        "serve-static": "1.16.2",
        "setprototypeof": "1.2.0",
        "statuses": "2.0.1",
        "type-is": "~1.6.18",
        "utils-merge": "1.0.1",
        "vary": "~1.1.2"
      },
      "engines": {
        "node": ">= 0.10.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/express"
      }
    },
    "node_modules/express-session": {
      "version": "1.18.2",
      "resolved": "https://registry.npmjs.org/express-session/-/express-session-1.18.2.tgz",
      "integrity": "sha512-SZjssGQC7TzTs9rpPDuUrR23GNZ9+2+IkA/+IJWmvQilTr5OSliEHGF+D9scbIpdC6yGtTI0/VhaHoVes2AN/A==",
      "license": "MIT",
      "dependencies": {
        "cookie": "0.7.2",
        "cookie-signature": "1.0.7",
        "debug": "2.6.9",
        "depd": "~2.0.0",
        "on-headers": "~1.1.0",
        "parseurl": "~1.3.3",
        "safe-buffer": "5.2.1",
        "uid-safe": "~2.1.5"
      },
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/express-session/node_modules/cookie": {
      "version": "0.7.2",
      "resolved": "https://registry.npmjs.org/cookie/-/cookie-0.7.2.tgz",
      "integrity": "sha512-yki5XnKuf750l50uGTllt6kKILY4nQ1eNIQatoXEByZ5dWgnKqbnqmTrBE5B4N7lrMJKQ2ytWMiTO2o0v6Ew/w==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/express-session/node_modules/cookie-signature": {
      "version": "1.0.7",
      "resolved": "https://registry.npmjs.org/cookie-signature/-/cookie-signature-1.0.7.tgz",
      "integrity": "sha512-NXdYc3dLr47pBkpUCHtKSwIOQXLVn8dZEuywboCOJY/osA0wFSLlSawr3KN8qXJEyX66FcONTH8EIlVuK0yyFA==",
      "license": "MIT"
    },
    "node_modules/express-session/node_modules/debug": {
      "version": "2.6.9",
      "resolved": "https://registry.npmjs.org/debug/-/debug-2.6.9.tgz",
      "integrity": "sha512-bC7ElrdJaJnPbAP+1EotYvqZsb3ecl5wi6Bfi6BJTUcNowp6cvspg0jXznRTKDjm/E7AdgFBVeAPVMNcKGsHMA==",
      "license": "MIT",
      "dependencies": {
        "ms": "2.0.0"
      }
    },
    "node_modules/express-session/node_modules/ms": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.0.0.tgz",
      "integrity": "sha512-Tpp60P6IUJDTuOq/5Z8cdskzJujfwqfOTkrwIwj7IRISpnkJnT6SyJ4PCPnGMoFjC9ddhal5KVIYtAt97ix05A==",
      "license": "MIT"
    },
    "node_modules/express/node_modules/debug": {
      "version": "2.6.9",
      "resolved": "https://registry.npmjs.org/debug/-/debug-2.6.9.tgz",
      "integrity": "sha512-bC7ElrdJaJnPbAP+1EotYvqZsb3ecl5wi6Bfi6BJTUcNowp6cvspg0jXznRTKDjm/E7AdgFBVeAPVMNcKGsHMA==",
      "license": "MIT",
      "dependencies": {
        "ms": "2.0.0"
      }
    },
    "node_modules/express/node_modules/ms": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.0.0.tgz",
      "integrity": "sha512-Tpp60P6IUJDTuOq/5Z8cdskzJujfwqfOTkrwIwj7IRISpnkJnT6SyJ4PCPnGMoFjC9ddhal5KVIYtAt97ix05A==",
      "license": "MIT"
    },
    "node_modules/fast-deep-equal": {
      "version": "3.1.3",
      "resolved": "https://registry.npmjs.org/fast-deep-equal/-/fast-deep-equal-3.1.3.tgz",
      "integrity": "sha512-f3qQ9oQy9j2AhBe/H9VC91wLmKBCCU/gDOnKNAYG5hswO7BLKj09Hc5HYNz9cGI++xlpDCIgDaitVs03ATR84Q==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/fast-json-stable-stringify": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/fast-json-stable-stringify/-/fast-json-stable-stringify-2.1.0.tgz",
      "integrity": "sha512-lhd/wF+Lk98HZoTCtlVraHtfh5XYijIjalXck7saUtuanSDyLMxnHhSXEDJqHxD7msR8D0uCmqlkwjCV8xvwHw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/fast-levenshtein": {
      "version": "2.0.6",
      "resolved": "https://registry.npmjs.org/fast-levenshtein/-/fast-levenshtein-2.0.6.tgz",
      "integrity": "sha512-DCXu6Ifhqcks7TZKY3Hxp3y6qphY5SJZmrWMDrKcERSOXWQdMhU9Ig/PYrzyw/ul9jOIyh0N4M0tbC5hodg8dw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/fastq": {
      "version": "1.19.1",
      "resolved": "https://registry.npmjs.org/fastq/-/fastq-1.19.1.tgz",
      "integrity": "sha512-GwLTyxkCXjXbxqIhTsMI2Nui8huMPtnxg7krajPJAjnEG/iiOS7i+zCtWGZR9G0NBKbXKh6X9m9UIsYX/N6vvQ==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "reusify": "^1.0.4"
      }
    },
    "node_modules/file-entry-cache": {
      "version": "6.0.1",
      "resolved": "https://registry.npmjs.org/file-entry-cache/-/file-entry-cache-6.0.1.tgz",
      "integrity": "sha512-7Gps/XWymbLk2QLYK4NzpMOrYjMhdIxXuIvy2QBsLE6ljuodKvdkWs/cpyJJ3CVIVpH0Oi1Hvg1ovbMzLdFBBg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "flat-cache": "^3.0.4"
      },
      "engines": {
        "node": "^10.12.0 || >=12.0.0"
      }
    },
    "node_modules/finalhandler": {
      "version": "1.3.1",
      "resolved": "https://registry.npmjs.org/finalhandler/-/finalhandler-1.3.1.tgz",
      "integrity": "sha512-6BN9trH7bp3qvnrRyzsBz+g3lZxTNZTbVO2EV1CS0WIcDbawYVdYvGflME/9QP0h0pYlCDBCTjYa9nZzMDpyxQ==",
      "license": "MIT",
      "dependencies": {
        "debug": "2.6.9",
        "encodeurl": "~2.0.0",
        "escape-html": "~1.0.3",
        "on-finished": "2.4.1",
        "parseurl": "~1.3.3",
        "statuses": "2.0.1",
        "unpipe": "~1.0.0"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/finalhandler/node_modules/debug": {
      "version": "2.6.9",
      "resolved": "https://registry.npmjs.org/debug/-/debug-2.6.9.tgz",
      "integrity": "sha512-bC7ElrdJaJnPbAP+1EotYvqZsb3ecl5wi6Bfi6BJTUcNowp6cvspg0jXznRTKDjm/E7AdgFBVeAPVMNcKGsHMA==",
      "license": "MIT",
      "dependencies": {
        "ms": "2.0.0"
      }
    },
    "node_modules/finalhandler/node_modules/ms": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.0.0.tgz",
      "integrity": "sha512-Tpp60P6IUJDTuOq/5Z8cdskzJujfwqfOTkrwIwj7IRISpnkJnT6SyJ4PCPnGMoFjC9ddhal5KVIYtAt97ix05A==",
      "license": "MIT"
    },
    "node_modules/find-up": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/find-up/-/find-up-5.0.0.tgz",
      "integrity": "sha512-78/PXT1wlLLDgTzDs7sjq9hzz0vXD+zn+7wypEe4fXQxCmdmqfGsEPQxmiCSQI3ajFV91bVSsvNtrJRiW6nGng==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "locate-path": "^6.0.0",
        "path-exists": "^4.0.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/flat-cache": {
      "version": "3.2.0",
      "resolved": "https://registry.npmjs.org/flat-cache/-/flat-cache-3.2.0.tgz",
      "integrity": "sha512-CYcENa+FtcUKLmhhqyctpclsq7QF38pKjZHsGNiSQF5r4FtoKDWabFDl3hzaEQMvT1LHEysw5twgLvpYYb4vbw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "flatted": "^3.2.9",
        "keyv": "^4.5.3",
        "rimraf": "^3.0.2"
      },
      "engines": {
        "node": "^10.12.0 || >=12.0.0"
      }
    },
    "node_modules/flatted": {
      "version": "3.3.3",
      "resolved": "https://registry.npmjs.org/flatted/-/flatted-3.3.3.tgz",
      "integrity": "sha512-GX+ysw4PBCz0PzosHDepZGANEuFCMLrnRTiEy9McGjmkCQYwRq4A/X786G/fjM/+OjsWSU1ZrY5qyARZmO/uwg==",
      "dev": true,
      "license": "ISC"
    },
    "node_modules/follow-redirects": {
      "version": "1.15.9",
      "resolved": "https://registry.npmjs.org/follow-redirects/-/follow-redirects-1.15.9.tgz",
      "integrity": "sha512-gew4GsXizNgdoRyqmyfMHyAmXsZDk6mHkSxZFCzW9gwlbtOW44CDtYavM+y+72qD/Vq2l550kMF52DT8fOLJqQ==",
      "funding": [
        {
          "type": "individual",
          "url": "https://github.com/sponsors/RubenVerborgh"
        }
      ],
      "license": "MIT",
      "engines": {
        "node": ">=4.0"
      },
      "peerDependenciesMeta": {
        "debug": {
          "optional": true
        }
      }
    },
    "node_modules/for-each": {
      "version": "0.3.5",
      "resolved": "https://registry.npmjs.org/for-each/-/for-each-0.3.5.tgz",
      "integrity": "sha512-dKx12eRCVIzqCxFGplyFKJMPvLEWgmNtUrpTiJIR5u97zEhRG8ySrtboPHZXx7daLxQVrl643cTzbab2tkQjxg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "is-callable": "^1.2.7"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/form-data": {
      "version": "4.0.4",
      "resolved": "https://registry.npmjs.org/form-data/-/form-data-4.0.4.tgz",
      "integrity": "sha512-KrGhL9Q4zjj0kiUt5OO4Mr/A/jlI2jDYs5eHBpYHPcBEVSiipAvn2Ko2HnPe20rmcuuvMHNdZFp+4IlGTMF0Ow==",
      "license": "MIT",
      "dependencies": {
        "asynckit": "^0.4.0",
        "combined-stream": "^1.0.8",
        "es-set-tostringtag": "^2.1.0",
        "hasown": "^2.0.2",
        "mime-types": "^2.1.12"
      },
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/forwarded": {
      "version": "0.2.0",
      "resolved": "https://registry.npmjs.org/forwarded/-/forwarded-0.2.0.tgz",
      "integrity": "sha512-buRG0fpBtRHSTCOASe6hD258tEubFoRLb4ZNA6NxMVHNw2gOcwHo9wyablzMzOA5z9xA9L1KNjk/Nt6MT9aYow==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/fresh": {
      "version": "0.5.2",
      "resolved": "https://registry.npmjs.org/fresh/-/fresh-0.5.2.tgz",
      "integrity": "sha512-zJ2mQYM18rEFOudeV4GShTGIQ7RbzA7ozbU9I/XBpm7kqgMywgmylMwXHxZJmkVoYkna9d2pVXVXPdYTP9ej8Q==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/fs.realpath": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/fs.realpath/-/fs.realpath-1.0.0.tgz",
      "integrity": "sha512-OO0pH2lK6a0hZnAdau5ItzHPI6pUlvI7jMVnxUQRtw4owF2wk8lOSabtGDCTP4Ggrg2MbGnWO9X8K1t4+fGMDw==",
      "dev": true,
      "license": "ISC"
    },
    "node_modules/function-bind": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/function-bind/-/function-bind-1.1.2.tgz",
      "integrity": "sha512-7XHNxH7qX9xG5mIwxkhumTox/MIRNcOgDrxWsMt2pAr23WHp6MrRlN7FBSFpCpr+oVO0F744iUgR82nJMfG2SA==",
      "license": "MIT",
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/function.prototype.name": {
      "version": "1.1.8",
      "resolved": "https://registry.npmjs.org/function.prototype.name/-/function.prototype.name-1.1.8.tgz",
      "integrity": "sha512-e5iwyodOHhbMr/yNrc7fDYG4qlbIvI5gajyzPnb5TCwyhjApznQh1BMFou9b30SevY43gCJKXycoCBjMbsuW0Q==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.8",
        "call-bound": "^1.0.3",
        "define-properties": "^1.2.1",
        "functions-have-names": "^1.2.3",
        "hasown": "^2.0.2",
        "is-callable": "^1.2.7"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/functions-have-names": {
      "version": "1.2.3",
      "resolved": "https://registry.npmjs.org/functions-have-names/-/functions-have-names-1.2.3.tgz",
      "integrity": "sha512-xckBUXyTIqT97tq2x2AMb+g163b5JFysYk0x4qxNFwbfQkmNZoiRHb6sPzI9/QV33WeuvVYBUIiD4NzNIyqaRQ==",
      "dev": true,
      "license": "MIT",
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/gensync": {
      "version": "1.0.0-beta.2",
      "resolved": "https://registry.npmjs.org/gensync/-/gensync-1.0.0-beta.2.tgz",
      "integrity": "sha512-3hN7NaskYvMDLQY55gnW3NQ+mesEAepTqlg+VEbj7zzqEMBVNhzcGYYeqFo/TlYz6eQiFcp1HcsCZO+nGgS8zg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/get-intrinsic": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/get-intrinsic/-/get-intrinsic-1.3.0.tgz",
      "integrity": "sha512-9fSjSaos/fRIVIp+xSJlE6lfwhES7LNtKaCBIamHsjr2na1BiABJPo0mOjjz8GJDURarmCPGqaiVg5mfjb98CQ==",
      "license": "MIT",
      "dependencies": {
        "call-bind-apply-helpers": "^1.0.2",
        "es-define-property": "^1.0.1",
        "es-errors": "^1.3.0",
        "es-object-atoms": "^1.1.1",
        "function-bind": "^1.1.2",
        "get-proto": "^1.0.1",
        "gopd": "^1.2.0",
        "has-symbols": "^1.1.0",
        "hasown": "^2.0.2",
        "math-intrinsics": "^1.1.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/get-proto": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/get-proto/-/get-proto-1.0.1.tgz",
      "integrity": "sha512-sTSfBjoXBp89JvIKIefqw7U2CCebsc74kiY6awiGogKtoSGbgjYE/G/+l9sF3MWFPNc9IcoOC4ODfKHfxFmp0g==",
      "license": "MIT",
      "dependencies": {
        "dunder-proto": "^1.0.1",
        "es-object-atoms": "^1.0.0"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/get-symbol-description": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/get-symbol-description/-/get-symbol-description-1.1.0.tgz",
      "integrity": "sha512-w9UMqWwJxHNOvoNzSJ2oPF5wvYcvP7jUvYzhp67yEhTi17ZDBBC1z9pTdGuzjD+EFIqLSYRweZjqfiPzQ06Ebg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.3",
        "es-errors": "^1.3.0",
        "get-intrinsic": "^1.2.6"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/glob": {
      "version": "7.2.3",
      "resolved": "https://registry.npmjs.org/glob/-/glob-7.2.3.tgz",
      "integrity": "sha512-nFR0zLpU2YCaRxwoCJvL6UvCH2JFyFVIvwTLsIf21AuHlMskA1hhTdk+LlYJtOlYt9v6dvszD2BGRqBL+iQK9Q==",
      "deprecated": "Glob versions prior to v9 are no longer supported",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "fs.realpath": "^1.0.0",
        "inflight": "^1.0.4",
        "inherits": "2",
        "minimatch": "^3.1.1",
        "once": "^1.3.0",
        "path-is-absolute": "^1.0.0"
      },
      "engines": {
        "node": "*"
      },
      "funding": {
        "url": "https://github.com/sponsors/isaacs"
      }
    },
    "node_modules/glob-parent": {
      "version": "6.0.2",
      "resolved": "https://registry.npmjs.org/glob-parent/-/glob-parent-6.0.2.tgz",
      "integrity": "sha512-XxwI8EOhVQgWp6iDL+3b0r86f4d6AX6zSU55HfB4ydCEuXLXc5FcYeOu+nnGftS4TEju/11rt4KJPTMgbfmv4A==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "is-glob": "^4.0.3"
      },
      "engines": {
        "node": ">=10.13.0"
      }
    },
    "node_modules/globals": {
      "version": "13.24.0",
      "resolved": "https://registry.npmjs.org/globals/-/globals-13.24.0.tgz",
      "integrity": "sha512-AhO5QUcj8llrbG09iWhPU2B204J1xnPeL8kQmVorSsy+Sjj1sk8gIyh6cUocGmH4L0UuhAJy+hJMRA4mgA4mFQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "type-fest": "^0.20.2"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/globalthis": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/globalthis/-/globalthis-1.0.4.tgz",
      "integrity": "sha512-DpLKbNU4WylpxJykQujfCcwYWiV/Jhm50Goo0wrVILAv5jOr9d+H+UR3PhSCD2rCCEIg0uc+G+muBTwD54JhDQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "define-properties": "^1.2.1",
        "gopd": "^1.0.1"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/gopd": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/gopd/-/gopd-1.2.0.tgz",
      "integrity": "sha512-ZUKRh6/kUFoAiTAtTYPZJ3hw9wNxx+BIBOijnlG9PnrJsCcSjs1wyyD6vJpaYtgnzDrKYRSqf3OO6Rfa93xsRg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/graphemer": {
      "version": "1.4.0",
      "resolved": "https://registry.npmjs.org/graphemer/-/graphemer-1.4.0.tgz",
      "integrity": "sha512-EtKwoO6kxCL9WO5xipiHTZlSzBm7WLT627TqC/uVRd0HKmq8NXyebnNYxDoBi7wt8eTWrUrKXCOVaFq9x1kgag==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/has-bigints": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/has-bigints/-/has-bigints-1.1.0.tgz",
      "integrity": "sha512-R3pbpkcIqv2Pm3dUwgjclDRVmWpTJW2DcMzcIhEXEx1oh/CEMObMm3KLmRJOdvhM7o4uQBnwr8pzRK2sJWIqfg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/has-flag": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-4.0.0.tgz",
      "integrity": "sha512-EykJT/Q1KjTWctppgIAgfSO0tKVuZUjhgMr17kqTumMl6Afv3EISleU7qZUzoXDFTAHTDC4NOoG/ZxU3EvlMPQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/has-property-descriptors": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/has-property-descriptors/-/has-property-descriptors-1.0.2.tgz",
      "integrity": "sha512-55JNKuIW+vq4Ke1BjOTjM2YctQIvCT7GFzHwmfZPGo5wnrgkid0YQtnAleFSqumZm4az3n2BS+erby5ipJdgrg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "es-define-property": "^1.0.0"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/has-proto": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/has-proto/-/has-proto-1.2.0.tgz",
      "integrity": "sha512-KIL7eQPfHQRC8+XluaIw7BHUwwqL19bQn4hzNgdr+1wXoU0KKj6rufu47lhY7KbJR2C6T6+PfyN0Ea7wkSS+qQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "dunder-proto": "^1.0.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/has-symbols": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/has-symbols/-/has-symbols-1.1.0.tgz",
      "integrity": "sha512-1cDNdwJ2Jaohmb3sg4OmKaMBwuC48sYni5HUw2DvsC8LjGTLK9h+eb1X6RyuOHe4hT0ULCW68iomhjUoKUqlPQ==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/has-tostringtag": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/has-tostringtag/-/has-tostringtag-1.0.2.tgz",
      "integrity": "sha512-NqADB8VjPFLM2V0VvHUewwwsw0ZWBaIdgo+ieHtK3hasLz4qeCRjYcqfB6AQrBggRKppKF8L52/VqdVsO47Dlw==",
      "license": "MIT",
      "dependencies": {
        "has-symbols": "^1.0.3"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/hasown": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/hasown/-/hasown-2.0.2.tgz",
      "integrity": "sha512-0hJU9SCPvmMzIBdZFqNPXWa6dqh7WdH0cII9y+CyS8rG3nL48Bclra9HmKhVVUHyPWNH5Y7xDwAB7bfgSjkUMQ==",
      "license": "MIT",
      "dependencies": {
        "function-bind": "^1.1.2"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/http-errors": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/http-errors/-/http-errors-2.0.0.tgz",
      "integrity": "sha512-FtwrG/euBzaEjYeRqOgly7G0qviiXoJWnvEH2Z1plBdXgbyjv34pHTSb9zoeHMyDy33+DWy5Wt9Wo+TURtOYSQ==",
      "license": "MIT",
      "dependencies": {
        "depd": "2.0.0",
        "inherits": "2.0.4",
        "setprototypeof": "1.2.0",
        "statuses": "2.0.1",
        "toidentifier": "1.0.1"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/iconv-lite": {
      "version": "0.4.24",
      "resolved": "https://registry.npmjs.org/iconv-lite/-/iconv-lite-0.4.24.tgz",
      "integrity": "sha512-v3MXnZAcvnywkTUEZomIActle7RXXeedOR31wwl7VlyoXO4Qi9arvSenNQWne1TcRwhCL1HwLI21bEqdpj8/rA==",
      "license": "MIT",
      "dependencies": {
        "safer-buffer": ">= 2.1.2 < 3"
      },
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/ignore": {
      "version": "5.3.2",
      "resolved": "https://registry.npmjs.org/ignore/-/ignore-5.3.2.tgz",
      "integrity": "sha512-hsBTNUqQTDwkWtcdYI2i06Y/nUBEsNEDJKjWdigLvegy8kDuJAS8uRlpkkcQpyEXL0Z/pjDy5HBmMjRCJ2gq+g==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 4"
      }
    },
    "node_modules/import-fresh": {
      "version": "3.3.1",
      "resolved": "https://registry.npmjs.org/import-fresh/-/import-fresh-3.3.1.tgz",
      "integrity": "sha512-TR3KfrTZTYLPB6jUjfx6MF9WcWrHL9su5TObK4ZkYgBdWKPOFoSoQIdEuTuR82pmtxH2spWG9h6etwfr1pLBqQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "parent-module": "^1.0.0",
        "resolve-from": "^4.0.0"
      },
      "engines": {
        "node": ">=6"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/imurmurhash": {
      "version": "0.1.4",
      "resolved": "https://registry.npmjs.org/imurmurhash/-/imurmurhash-0.1.4.tgz",
      "integrity": "sha512-JmXMZ6wuvDmLiHEml9ykzqO6lwFbof0GG4IkcGaENdCRDDmMVnny7s5HsIgHCbaq0w2MyPhDqkhTUgS2LU2PHA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=0.8.19"
      }
    },
    "node_modules/inflight": {
      "version": "1.0.6",
      "resolved": "https://registry.npmjs.org/inflight/-/inflight-1.0.6.tgz",
      "integrity": "sha512-k92I/b08q4wvFscXCLvqfsHCrjrF7yiXsQuIVvVE7N82W3+aqpzuUdBbfhWcy/FZR3/4IgflMgKLOsvPDrGCJA==",
      "deprecated": "This module is not supported, and leaks memory. Do not use it. Check out lru-cache if you want a good and tested way to coalesce async requests by a key value, which is much more comprehensive and powerful.",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "once": "^1.3.0",
        "wrappy": "1"
      }
    },
    "node_modules/inherits": {
      "version": "2.0.4",
      "resolved": "https://registry.npmjs.org/inherits/-/inherits-2.0.4.tgz",
      "integrity": "sha512-k/vGaX4/Yla3WzyMCvTQOXYeIHvqOKtnqBduzTHpzpQZzAskKMhZ2K+EnBiSM9zGSoIFeMpXKxa4dYeZIQqewQ==",
      "license": "ISC"
    },
    "node_modules/internal-slot": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/internal-slot/-/internal-slot-1.1.0.tgz",
      "integrity": "sha512-4gd7VpWNQNB4UKKCFFVcp1AVv+FMOgs9NKzjHKusc8jTMhd5eL1NqQqOpE0KzMds804/yHlglp3uxgluOqAPLw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "es-errors": "^1.3.0",
        "hasown": "^2.0.2",
        "side-channel": "^1.1.0"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/ipaddr.js": {
      "version": "1.9.1",
      "resolved": "https://registry.npmjs.org/ipaddr.js/-/ipaddr.js-1.9.1.tgz",
      "integrity": "sha512-0KI/607xoxSToH7GjN1FfSbLoU0+btTicjsQSWQlh/hZykN8KpmMf7uYwPW3R+akZ6R/w18ZlXSHBYXiYUPO3g==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.10"
      }
    },
    "node_modules/is-array-buffer": {
      "version": "3.0.5",
      "resolved": "https://registry.npmjs.org/is-array-buffer/-/is-array-buffer-3.0.5.tgz",
      "integrity": "sha512-DDfANUiiG2wC1qawP66qlTugJeL5HyzMpfr8lLK+jMQirGzNod0B12cFB/9q838Ru27sBwfw78/rdoU7RERz6A==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.8",
        "call-bound": "^1.0.3",
        "get-intrinsic": "^1.2.6"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-async-function": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/is-async-function/-/is-async-function-2.1.1.tgz",
      "integrity": "sha512-9dgM/cZBnNvjzaMYHVoxxfPj2QXt22Ev7SuuPrs+xav0ukGB0S6d4ydZdEiM48kLx5kDV+QBPrpVnFyefL8kkQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "async-function": "^1.0.0",
        "call-bound": "^1.0.3",
        "get-proto": "^1.0.1",
        "has-tostringtag": "^1.0.2",
        "safe-regex-test": "^1.1.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-bigint": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/is-bigint/-/is-bigint-1.1.0.tgz",
      "integrity": "sha512-n4ZT37wG78iz03xPRKJrHTdZbe3IicyucEtdRsV5yglwc3GyUfbAfpSeD0FJ41NbUNSt5wbhqfp1fS+BgnvDFQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "has-bigints": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-boolean-object": {
      "version": "1.2.2",
      "resolved": "https://registry.npmjs.org/is-boolean-object/-/is-boolean-object-1.2.2.tgz",
      "integrity": "sha512-wa56o2/ElJMYqjCjGkXri7it5FbebW5usLw/nPmCMs5DeZ7eziSYZhSmPRn0txqeW4LnAmQQU7FgqLpsEFKM4A==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.3",
        "has-tostringtag": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-callable": {
      "version": "1.2.7",
      "resolved": "https://registry.npmjs.org/is-callable/-/is-callable-1.2.7.tgz",
      "integrity": "sha512-1BC0BVFhS/p0qtw6enp8e+8OD0UrK0oFLztSjNzhcKA3WDuJxxAPXzPuPtKkjEY9UUoEWlX/8fgKeu2S8i9JTA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-core-module": {
      "version": "2.16.1",
      "resolved": "https://registry.npmjs.org/is-core-module/-/is-core-module-2.16.1.tgz",
      "integrity": "sha512-UfoeMA6fIJ8wTYFEUjelnaGI67v6+N7qXJEvQuIGa99l4xsCruSYOVSQ0uPANn4dAzm8lkYPaKLrrijLq7x23w==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "hasown": "^2.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-data-view": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/is-data-view/-/is-data-view-1.0.2.tgz",
      "integrity": "sha512-RKtWF8pGmS87i2D6gqQu/l7EYRlVdfzemCJN/P3UOs//x1QE7mfhvzHIApBTRf7axvT6DMGwSwBXYCT0nfB9xw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.2",
        "get-intrinsic": "^1.2.6",
        "is-typed-array": "^1.1.13"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-date-object": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/is-date-object/-/is-date-object-1.1.0.tgz",
      "integrity": "sha512-PwwhEakHVKTdRNVOw+/Gyh0+MzlCl4R6qKvkhuvLtPMggI1WAHt9sOwZxQLSGpUaDnrdyDsomoRgNnCfKNSXXg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.2",
        "has-tostringtag": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-extglob": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/is-extglob/-/is-extglob-2.1.1.tgz",
      "integrity": "sha512-SbKbANkN603Vi4jEZv49LeVJMn4yGwsbzZworEoyEiutsN3nJYdbO36zfhGJ6QEDpOZIFkDtnq5JRxmvl3jsoQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/is-finalizationregistry": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/is-finalizationregistry/-/is-finalizationregistry-1.1.1.tgz",
      "integrity": "sha512-1pC6N8qWJbWoPtEjgcL2xyhQOP491EQjeUo3qTKcmV8YSDDJrOepfG8pcC7h/QgnQHYSv0mJ3Z/ZWxmatVrysg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.3"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-generator-function": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/is-generator-function/-/is-generator-function-1.1.0.tgz",
      "integrity": "sha512-nPUB5km40q9e8UfN/Zc24eLlzdSf9OfKByBw9CIdw4H1giPMeA0OIJvbchsCu4npfI2QcMVBsGEBHKZ7wLTWmQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.3",
        "get-proto": "^1.0.0",
        "has-tostringtag": "^1.0.2",
        "safe-regex-test": "^1.1.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-glob": {
      "version": "4.0.3",
      "resolved": "https://registry.npmjs.org/is-glob/-/is-glob-4.0.3.tgz",
      "integrity": "sha512-xelSayHH36ZgE7ZWhli7pW34hNbNl8Ojv5KVmkJD4hBdD3th8Tfk9vYasLM+mXWOZhFkgZfxhLSnrwRr4elSSg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "is-extglob": "^2.1.1"
      },
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/is-map": {
      "version": "2.0.3",
      "resolved": "https://registry.npmjs.org/is-map/-/is-map-2.0.3.tgz",
      "integrity": "sha512-1Qed0/Hr2m+YqxnM09CjA2d/i6YZNfF6R2oRAOj36eUdS6qIV/huPJNSEpKbupewFs+ZsJlxsjjPbc0/afW6Lw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-negative-zero": {
      "version": "2.0.3",
      "resolved": "https://registry.npmjs.org/is-negative-zero/-/is-negative-zero-2.0.3.tgz",
      "integrity": "sha512-5KoIu2Ngpyek75jXodFvnafB6DJgr3u8uuK0LEZJjrU19DrMD3EVERaR8sjz8CCGgpZvxPl9SuE1GMVPFHx1mw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-number-object": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/is-number-object/-/is-number-object-1.1.1.tgz",
      "integrity": "sha512-lZhclumE1G6VYD8VHe35wFaIif+CTy5SJIi5+3y4psDgWu4wPDoBhF8NxUOinEc7pHgiTsT6MaBb92rKhhD+Xw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.3",
        "has-tostringtag": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-path-inside": {
      "version": "3.0.3",
      "resolved": "https://registry.npmjs.org/is-path-inside/-/is-path-inside-3.0.3.tgz",
      "integrity": "sha512-Fd4gABb+ycGAmKou8eMftCupSir5lRxqf4aD/vd0cD2qc4HL07OjCeuHMr8Ro4CoMaeCKDB0/ECBOVWjTwUvPQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/is-regex": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/is-regex/-/is-regex-1.2.1.tgz",
      "integrity": "sha512-MjYsKHO5O7mCsmRGxWcLWheFqN9DJ/2TmngvjKXihe6efViPqc274+Fx/4fYj/r03+ESvBdTXK0V6tA3rgez1g==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.2",
        "gopd": "^1.2.0",
        "has-tostringtag": "^1.0.2",
        "hasown": "^2.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-set": {
      "version": "2.0.3",
      "resolved": "https://registry.npmjs.org/is-set/-/is-set-2.0.3.tgz",
      "integrity": "sha512-iPAjerrse27/ygGLxw+EBR9agv9Y6uLeYVJMu+QNCoouJ1/1ri0mGrcWpfCqFZuzzx3WjtwxG098X+n4OuRkPg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-shared-array-buffer": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/is-shared-array-buffer/-/is-shared-array-buffer-1.0.4.tgz",
      "integrity": "sha512-ISWac8drv4ZGfwKl5slpHG9OwPNty4jOWPRIhBpxOoD+hqITiwuipOQ2bNthAzwA3B4fIjO4Nln74N0S9byq8A==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.3"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-string": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/is-string/-/is-string-1.1.1.tgz",
      "integrity": "sha512-BtEeSsoaQjlSPBemMQIrY1MY0uM6vnS1g5fmufYOtnxLGUZM2178PKbhsk7Ffv58IX+ZtcvoGwccYsh0PglkAA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.3",
        "has-tostringtag": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-symbol": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/is-symbol/-/is-symbol-1.1.1.tgz",
      "integrity": "sha512-9gGx6GTtCQM73BgmHQXfDmLtfjjTUDSyoxTCbp5WtoixAhfgsDirWIcVQ/IHpvI5Vgd5i/J5F7B9cN/WlVbC/w==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.2",
        "has-symbols": "^1.1.0",
        "safe-regex-test": "^1.1.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-typed-array": {
      "version": "1.1.15",
      "resolved": "https://registry.npmjs.org/is-typed-array/-/is-typed-array-1.1.15.tgz",
      "integrity": "sha512-p3EcsicXjit7SaskXHs1hA91QxgTw46Fv6EFKKGS5DRFLD8yKnohjF3hxoju94b/OcMZoQukzpPpBE9uLVKzgQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "which-typed-array": "^1.1.16"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-weakmap": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/is-weakmap/-/is-weakmap-2.0.2.tgz",
      "integrity": "sha512-K5pXYOm9wqY1RgjpL3YTkF39tni1XajUIkawTLUo9EZEVUFga5gSQJF8nNS7ZwJQ02y+1YCNYcMh+HIf1ZqE+w==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-weakref": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/is-weakref/-/is-weakref-1.1.1.tgz",
      "integrity": "sha512-6i9mGWSlqzNMEqpCp93KwRS1uUOodk2OJ6b+sq7ZPDSy2WuI5NFIxp/254TytR8ftefexkWn5xNiHUNpPOfSew==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.3"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-weakset": {
      "version": "2.0.4",
      "resolved": "https://registry.npmjs.org/is-weakset/-/is-weakset-2.0.4.tgz",
      "integrity": "sha512-mfcwb6IzQyOKTs84CQMrOwW4gQcaTOAWJ0zzJCl2WSPDrWk/OzDaImWFH3djXhb24g4eudZfLRozAvPGw4d9hQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.3",
        "get-intrinsic": "^1.2.6"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/isarray": {
      "version": "2.0.5",
      "resolved": "https://registry.npmjs.org/isarray/-/isarray-2.0.5.tgz",
      "integrity": "sha512-xHjhDr3cNBK0BzdUJSPXZntQUx/mwMS5Rw4A7lPJ90XGAO6ISP/ePDNuo0vhqOZU+UD5JoodwCAAoZQd3FeAKw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/isexe": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/isexe/-/isexe-2.0.0.tgz",
      "integrity": "sha512-RHxMLp9lnKHGHRng9QFhRCMbYAcVpn69smSGcq3f36xjgVVWThj4qqLbTLlq7Ssj8B+fIQ1EuCEGI2lKsyQeIw==",
      "dev": true,
      "license": "ISC"
    },
    "node_modules/iterator.prototype": {
      "version": "1.1.5",
      "resolved": "https://registry.npmjs.org/iterator.prototype/-/iterator.prototype-1.1.5.tgz",
      "integrity": "sha512-H0dkQoCa3b2VEeKQBOxFph+JAbcrQdE7KC0UkqwpLmv2EC4P41QXP+rqo9wYodACiG5/WM5s9oDApTU8utwj9g==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "define-data-property": "^1.1.4",
        "es-object-atoms": "^1.0.0",
        "get-intrinsic": "^1.2.6",
        "get-proto": "^1.0.0",
        "has-symbols": "^1.1.0",
        "set-function-name": "^2.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/js-tokens": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/js-tokens/-/js-tokens-4.0.0.tgz",
      "integrity": "sha512-RdJUflcE3cUzKiMqQgsCu06FPu9UdIJO0beYbPhHN4k6apgJtifcoCtT9bcxOpYBtpD2kCM6Sbzg4CausW/PKQ==",
      "license": "MIT"
    },
    "node_modules/js-yaml": {
      "version": "4.1.0",
      "resolved": "https://registry.npmjs.org/js-yaml/-/js-yaml-4.1.0.tgz",
      "integrity": "sha512-wpxZs9NoxZaJESJGIZTyDEaYpl0FKSA+FB9aJiyemKhMwkxQg63h4T1KJgUGHpTqPDNRcmmYLugrRjJlBtWvRA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "argparse": "^2.0.1"
      },
      "bin": {
        "js-yaml": "bin/js-yaml.js"
      }
    },
    "node_modules/jsesc": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/jsesc/-/jsesc-3.1.0.tgz",
      "integrity": "sha512-/sM3dO2FOzXjKQhJuo0Q173wf2KOo8t4I8vHy6lF9poUp7bKT0/NHE8fPX23PwfhnykfqnC2xRxOnVw5XuGIaA==",
      "dev": true,
      "license": "MIT",
      "bin": {
        "jsesc": "bin/jsesc"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/json-buffer": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/json-buffer/-/json-buffer-3.0.1.tgz",
      "integrity": "sha512-4bV5BfR2mqfQTJm+V5tPPdf+ZpuhiIvTuAB5g8kcrXOZpTT/QwwVRWBywX1ozr6lEuPdbHxwaJlm9G6mI2sfSQ==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/json-schema-traverse": {
      "version": "0.4.1",
      "resolved": "https://registry.npmjs.org/json-schema-traverse/-/json-schema-traverse-0.4.1.tgz",
      "integrity": "sha512-xbbCH5dCYU5T8LcEhhuh7HJ88HXuW3qsI3Y0zOZFKfZEHcpWiHU/Jxzk629Brsab/mMiHQti9wMP+845RPe3Vg==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/json-stable-stringify-without-jsonify": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/json-stable-stringify-without-jsonify/-/json-stable-stringify-without-jsonify-1.0.1.tgz",
      "integrity": "sha512-Bdboy+l7tA3OGW6FjyFHWkP5LuByj1Tk33Ljyq0axyzdk9//JSi2u3fP1QSmd1KNwq6VOKYGlAu87CisVir6Pw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/json5": {
      "version": "2.2.3",
      "resolved": "https://registry.npmjs.org/json5/-/json5-2.2.3.tgz",
      "integrity": "sha512-XmOWe7eyHYH14cLdVPoyg+GOH3rYX++KpzrylJwSW98t3Nk+U8XOl8FWKOgwtzdb8lXGf6zYwDUzeHMWfxasyg==",
      "dev": true,
      "license": "MIT",
      "bin": {
        "json5": "lib/cli.js"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/jsx-ast-utils": {
      "version": "3.3.5",
      "resolved": "https://registry.npmjs.org/jsx-ast-utils/-/jsx-ast-utils-3.3.5.tgz",
      "integrity": "sha512-ZZow9HBI5O6EPgSJLUb8n2NKgmVWTwCvHGwFuJlMjvLFqlGG6pjirPhtdsseaLZjSibD8eegzmYpUZwoIlj2cQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "array-includes": "^3.1.6",
        "array.prototype.flat": "^1.3.1",
        "object.assign": "^4.1.4",
        "object.values": "^1.1.6"
      },
      "engines": {
        "node": ">=4.0"
      }
    },
    "node_modules/keyv": {
      "version": "4.5.4",
      "resolved": "https://registry.npmjs.org/keyv/-/keyv-4.5.4.tgz",
      "integrity": "sha512-oxVHkHR/EJf2CNXnWxRLW6mg7JyCCUcG0DtEGmL2ctUo1PNTin1PUil+r/+4r5MpVgC/fn1kjsx7mjSujKqIpw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "json-buffer": "3.0.1"
      }
    },
    "node_modules/levn": {
      "version": "0.4.1",
      "resolved": "https://registry.npmjs.org/levn/-/levn-0.4.1.tgz",
      "integrity": "sha512-+bT2uH4E5LGE7h/n3evcS/sQlJXCpIp6ym8OWJ5eV6+67Dsql/LaaT7qJBAt2rzfoa/5QBGBhxDix1dMt2kQKQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "prelude-ls": "^1.2.1",
        "type-check": "~0.4.0"
      },
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/locate-path": {
      "version": "6.0.0",
      "resolved": "https://registry.npmjs.org/locate-path/-/locate-path-6.0.0.tgz",
      "integrity": "sha512-iPZK6eYjbxRu3uB4/WZ3EsEIMJFMqAoopl3R+zuq0UjcAm/MO6KCweDgPfP3elTztoKP3KtnVHxTn2NHBSDVUw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "p-locate": "^5.0.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/lodash.merge": {
      "version": "4.6.2",
      "resolved": "https://registry.npmjs.org/lodash.merge/-/lodash.merge-4.6.2.tgz",
      "integrity": "sha512-0KpjqXRVvrYyCsX1swR/XTK0va6VQkQM6MNo7PqW77ByjAhoARA8EfrP1N4+KlKj8YS0ZUCtRT/YUuhyYDujIQ==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/loose-envify": {
      "version": "1.4.0",
      "resolved": "https://registry.npmjs.org/loose-envify/-/loose-envify-1.4.0.tgz",
      "integrity": "sha512-lyuxPGr/Wfhrlem2CL/UcnUc1zcqKAImBDzukY7Y5F/yQiNdko6+fRLevlw1HgMySw7f611UIY408EtxRSoK3Q==",
      "license": "MIT",
      "dependencies": {
        "js-tokens": "^3.0.0 || ^4.0.0"
      },
      "bin": {
        "loose-envify": "cli.js"
      }
    },
    "node_modules/lru-cache": {
      "version": "5.1.1",
      "resolved": "https://registry.npmjs.org/lru-cache/-/lru-cache-5.1.1.tgz",
      "integrity": "sha512-KpNARQA3Iwv+jTA0utUVVbrh+Jlrr1Fv0e56GGzAFOXN7dk/FviaDW8LHmK52DlcH4WP2n6gI8vN1aesBFgo9w==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "yallist": "^3.0.2"
      }
    },
    "node_modules/magic-string": {
      "version": "0.27.0",
      "resolved": "https://registry.npmjs.org/magic-string/-/magic-string-0.27.0.tgz",
      "integrity": "sha512-8UnnX2PeRAPZuN12svgR9j7M1uWMovg/CEnIwIG0LFkXSJJe4PdfUGiTGl8V9bsBHFUtfVINcSyYxd7q+kx9fA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@jridgewell/sourcemap-codec": "^1.4.13"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/math-intrinsics": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/math-intrinsics/-/math-intrinsics-1.1.0.tgz",
      "integrity": "sha512-/IXtbwEk5HTPyEwyKX6hGkYXxM9nbj64B+ilVJnC/R6B0pH5G4V3b0pVbL7DBj4tkhBAppbQUlf6F6Xl9LHu1g==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/media-typer": {
      "version": "0.3.0",
      "resolved": "https://registry.npmjs.org/media-typer/-/media-typer-0.3.0.tgz",
      "integrity": "sha512-dq+qelQ9akHpcOl/gUVRTxVIOkAJ1wR3QAvb4RsVjS8oVoFjDGTc679wJYmUmknUF5HwMLOgb5O+a3KxfWapPQ==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/merge-descriptors": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/merge-descriptors/-/merge-descriptors-1.0.3.tgz",
      "integrity": "sha512-gaNvAS7TZ897/rVaZ0nMtAyxNyi/pdbjbAwUpFQpN70GqnVfOiXpeUUMKRBmzXaSQ8DdTX4/0ms62r2K+hE6mQ==",
      "license": "MIT",
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/methods": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/methods/-/methods-1.1.2.tgz",
      "integrity": "sha512-iclAHeNqNm68zFtnZ0e+1L2yUIdvzNoauKU4WBA3VvH/vPFieF7qfRlwUZU+DA9P9bPXIS90ulxoUoCH23sV2w==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/mime": {
      "version": "1.6.0",
      "resolved": "https://registry.npmjs.org/mime/-/mime-1.6.0.tgz",
      "integrity": "sha512-x0Vn8spI+wuJ1O6S7gnbaQg8Pxh4NNHb7KSINmEWKiPE4RKOplvijn+NkmYmmRgP68mc70j2EbeTFRsrswaQeg==",
      "license": "MIT",
      "bin": {
        "mime": "cli.js"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/mime-db": {
      "version": "1.52.0",
      "resolved": "https://registry.npmjs.org/mime-db/-/mime-db-1.52.0.tgz",
      "integrity": "sha512-sPU4uV7dYlvtWJxwwxHD0PuihVNiE7TyAbQ5SWxDCB9mUYvOgroQOwYQQOKPJ8CIbE+1ETVlOoK1UC2nU3gYvg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/mime-types": {
      "version": "2.1.35",
      "resolved": "https://registry.npmjs.org/mime-types/-/mime-types-2.1.35.tgz",
      "integrity": "sha512-ZDY+bPm5zTTF+YpCrAU9nK0UgICYPT0QtT1NZWFv4s++TNkcgVaT0g6+4R2uI4MjQjzysHB1zxuWL50hzaeXiw==",
      "license": "MIT",
      "dependencies": {
        "mime-db": "1.52.0"
      },
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/minimatch": {
      "version": "3.1.2",
      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-3.1.2.tgz",
      "integrity": "sha512-J7p63hRiAjw1NDEww1W7i37+ByIrOWO5XQQAzZ3VOcL0PNybwpfmV/N05zFAzwQ9USyEcX6t3UO+K5aqBQOIHw==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "brace-expansion": "^1.1.7"
      },
      "engines": {
        "node": "*"
      }
    },
    "node_modules/ms": {
      "version": "2.1.3",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
      "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==",
      "license": "MIT"
    },
    "node_modules/nanoid": {
      "version": "3.3.11",
      "resolved": "https://registry.npmjs.org/nanoid/-/nanoid-3.3.11.tgz",
      "integrity": "sha512-N8SpfPUnUp1bK+PMYW8qSWdl9U+wwNWI4QKxOYDy9JAro3WMX7p2OeVRF9v+347pnakNevPmiHhNmZ2HbFA76w==",
      "dev": true,
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "license": "MIT",
      "bin": {
        "nanoid": "bin/nanoid.cjs"
      },
      "engines": {
        "node": "^10 || ^12 || ^13.7 || ^14 || >=15.0.1"
      }
    },
    "node_modules/natural-compare": {
      "version": "1.4.0",
      "resolved": "https://registry.npmjs.org/natural-compare/-/natural-compare-1.4.0.tgz",
      "integrity": "sha512-OWND8ei3VtNC9h7V60qff3SVobHr996CTwgxubgyQYEpg290h9J0buyECNNJexkFm5sOajh5G116RYA1c8ZMSw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/negotiator": {
      "version": "0.6.3",
      "resolved": "https://registry.npmjs.org/negotiator/-/negotiator-0.6.3.tgz",
      "integrity": "sha512-+EUsqGPLsM+j/zdChZjsnX51g4XrHFOIXwfnCVPGlQk/k5giakcKsuxCObBRu6DSm9opw/O6slWbJdghQM4bBg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/node-releases": {
      "version": "2.0.19",
      "resolved": "https://registry.npmjs.org/node-releases/-/node-releases-2.0.19.tgz",
      "integrity": "sha512-xxOWJsBKtzAq7DY0J+DTzuz58K8e7sJbdgwkbMWQe8UYB6ekmsQ45q0M/tJDsGaZmbC+l7n57UV8Hl5tHxO9uw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/object-assign": {
      "version": "4.1.1",
      "resolved": "https://registry.npmjs.org/object-assign/-/object-assign-4.1.1.tgz",
      "integrity": "sha512-rJgTQnkUnH1sFw8yT6VSU3zD3sWmu6sZhIseY8VX+GRu3P6F7Fu+JNDoXfklElbLJSnc3FUQHVe4cU5hj+BcUg==",
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/object-inspect": {
      "version": "1.13.4",
      "resolved": "https://registry.npmjs.org/object-inspect/-/object-inspect-1.13.4.tgz",
      "integrity": "sha512-W67iLl4J2EXEGTbfeHCffrjDfitvLANg0UlX3wFUUSTx92KXRFegMHUVgSqE+wvhAbi4WqjGg9czysTV2Epbew==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/object-keys": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/object-keys/-/object-keys-1.1.1.tgz",
      "integrity": "sha512-NuAESUOUMrlIXOfHKzD6bpPu3tYt3xvjNdRIQ+FeT0lNb4K8WR70CaDxhuNguS2XG+GjkyMwOzsN5ZktImfhLA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/object.assign": {
      "version": "4.1.7",
      "resolved": "https://registry.npmjs.org/object.assign/-/object.assign-4.1.7.tgz",
      "integrity": "sha512-nK28WOo+QIjBkDduTINE4JkF/UJJKyf2EJxvJKfblDpyg0Q+pkOHNTL0Qwy6NP6FhE/EnzV73BxxqcJaXY9anw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.8",
        "call-bound": "^1.0.3",
        "define-properties": "^1.2.1",
        "es-object-atoms": "^1.0.0",
        "has-symbols": "^1.1.0",
        "object-keys": "^1.1.1"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/object.entries": {
      "version": "1.1.9",
      "resolved": "https://registry.npmjs.org/object.entries/-/object.entries-1.1.9.tgz",
      "integrity": "sha512-8u/hfXFRBD1O0hPUjioLhoWFHRmt6tKA4/vZPyckBr18l1KE9uHrFaFaUi8MDRTpi4uak2goyPTSNJLXX2k2Hw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.8",
        "call-bound": "^1.0.4",
        "define-properties": "^1.2.1",
        "es-object-atoms": "^1.1.1"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/object.fromentries": {
      "version": "2.0.8",
      "resolved": "https://registry.npmjs.org/object.fromentries/-/object.fromentries-2.0.8.tgz",
      "integrity": "sha512-k6E21FzySsSK5a21KRADBd/NGneRegFO5pLHfdQLpRDETUNJueLXs3WCzyQ3tFRDYgbq3KHGXfTbi2bs8WQ6rQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.7",
        "define-properties": "^1.2.1",
        "es-abstract": "^1.23.2",
        "es-object-atoms": "^1.0.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/object.values": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/object.values/-/object.values-1.2.1.tgz",
      "integrity": "sha512-gXah6aZrcUxjWg2zR2MwouP2eHlCBzdV4pygudehaKXSGW4v2AsRQUK+lwwXhii6KFZcunEnmSUoYp5CXibxtA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.8",
        "call-bound": "^1.0.3",
        "define-properties": "^1.2.1",
        "es-object-atoms": "^1.0.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/on-finished": {
      "version": "2.4.1",
      "resolved": "https://registry.npmjs.org/on-finished/-/on-finished-2.4.1.tgz",
      "integrity": "sha512-oVlzkg3ENAhCk2zdv7IJwd/QUD4z2RxRwpkcGY8psCVcCYZNq4wYnVWALHM+brtuJjePWiYF/ClmuDr8Ch5+kg==",
      "license": "MIT",
      "dependencies": {
        "ee-first": "1.1.1"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/on-headers": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/on-headers/-/on-headers-1.1.0.tgz",
      "integrity": "sha512-737ZY3yNnXy37FHkQxPzt4UZ2UWPWiCZWLvFZ4fu5cueciegX0zGPnrlY6bwRg4FdQOe9YU8MkmJwGhoMybl8A==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/once": {
      "version": "1.4.0",
      "resolved": "https://registry.npmjs.org/once/-/once-1.4.0.tgz",
      "integrity": "sha512-lNaJgI+2Q5URQBkccEKHTQOPaXdUxnZZElQTZY0MFUAuaEqe1E+Nyvgdz/aIyNi6Z9MzO5dv1H8n58/GELp3+w==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "wrappy": "1"
      }
    },
    "node_modules/optionator": {
      "version": "0.9.4",
      "resolved": "https://registry.npmjs.org/optionator/-/optionator-0.9.4.tgz",
      "integrity": "sha512-6IpQ7mKUxRcZNLIObR0hz7lxsapSSIYNZJwXPGeF0mTVqGKFIXj1DQcMoT22S3ROcLyY/rz0PWaWZ9ayWmad9g==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "deep-is": "^0.1.3",
        "fast-levenshtein": "^2.0.6",
        "levn": "^0.4.1",
        "prelude-ls": "^1.2.1",
        "type-check": "^0.4.0",
        "word-wrap": "^1.2.5"
      },
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/own-keys": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/own-keys/-/own-keys-1.0.1.tgz",
      "integrity": "sha512-qFOyK5PjiWZd+QQIh+1jhdb9LpxTF0qs7Pm8o5QHYZ0M3vKqSqzsZaEB6oWlxZ+q2sJBMI/Ktgd2N5ZwQoRHfg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "get-intrinsic": "^1.2.6",
        "object-keys": "^1.1.1",
        "safe-push-apply": "^1.0.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/p-limit": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/p-limit/-/p-limit-3.1.0.tgz",
      "integrity": "sha512-TYOanM3wGwNGsZN2cVTYPArw454xnXj5qmWF1bEoAc4+cU/ol7GVh7odevjp1FNHduHc3KZMcFduxU5Xc6uJRQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "yocto-queue": "^0.1.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/p-locate": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/p-locate/-/p-locate-5.0.0.tgz",
      "integrity": "sha512-LaNjtRWUBY++zB5nE/NwcaoMylSPk+S+ZHNB1TzdbMJMny6dynpAGt7X/tl/QYq3TIeE6nxHppbo2LGymrG5Pw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "p-limit": "^3.0.2"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/parent-module": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/parent-module/-/parent-module-1.0.1.tgz",
      "integrity": "sha512-GQ2EWRpQV8/o+Aw8YqtfZZPfNRWZYkbidE9k5rpl/hC3vtHHBfGm2Ifi6qWV+coDGkrUKZAxE3Lot5kcsRlh+g==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "callsites": "^3.0.0"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/parseurl": {
      "version": "1.3.3",
      "resolved": "https://registry.npmjs.org/parseurl/-/parseurl-1.3.3.tgz",
      "integrity": "sha512-CiyeOxFT/JZyN5m0z9PfXw4SCBJ6Sygz1Dpl0wqjlhDEGGBP1GnsUVEL0p63hoG1fcj3fHynXi9NYO4nWOL+qQ==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/path-exists": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/path-exists/-/path-exists-4.0.0.tgz",
      "integrity": "sha512-ak9Qy5Q7jYb2Wwcey5Fpvg2KoAc/ZIhLSLOSBmRmygPsGwkVVt0fZa0qrtMz+m6tJTAHfZQ8FnmB4MG4LWy7/w==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/path-is-absolute": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/path-is-absolute/-/path-is-absolute-1.0.1.tgz",
      "integrity": "sha512-AVbw3UJ2e9bq64vSaS9Am0fje1Pa8pbGqTTsmXfaIiMpnr5DlDhfJOuLj9Sf95ZPVDAUerDfEk88MPmPe7UCQg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/path-key": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/path-key/-/path-key-3.1.1.tgz",
      "integrity": "sha512-ojmeN0qd+y0jszEtoY48r0Peq5dwMEkIlCOu6Q5f41lfkswXuKtYrhgoTpLnyIcHm24Uhqx+5Tqm2InSwLhE6Q==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/path-parse": {
      "version": "1.0.7",
      "resolved": "https://registry.npmjs.org/path-parse/-/path-parse-1.0.7.tgz",
      "integrity": "sha512-LDJzPVEEEPR+y48z93A0Ed0yXb8pAByGWo/k5YYdYgpY2/2EsOsksJrq7lOHxryrVOn1ejG6oAp8ahvOIQD8sw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/path-to-regexp": {
      "version": "0.1.12",
      "resolved": "https://registry.npmjs.org/path-to-regexp/-/path-to-regexp-0.1.12.tgz",
      "integrity": "sha512-RA1GjUVMnvYFxuqovrEqZoxxW5NUZqbwKtYz/Tt7nXerk0LbLblQmrsgdeOxV5SFHf0UDggjS/bSeOZwt1pmEQ==",
      "license": "MIT"
    },
    "node_modules/picocolors": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/picocolors/-/picocolors-1.1.1.tgz",
      "integrity": "sha512-xceH2snhtb5M9liqDsmEw56le376mTZkEX/jEb/RxNFyegNul7eNslCXP9FDj/Lcu0X8KEyMceP2ntpaHrDEVA==",
      "dev": true,
      "license": "ISC"
    },
    "node_modules/possible-typed-array-names": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/possible-typed-array-names/-/possible-typed-array-names-1.1.0.tgz",
      "integrity": "sha512-/+5VFTchJDoVj3bhoqi6UeymcD00DAwb1nJwamzPvHEszJ4FpF6SNNbUbOS8yI56qHzdV8eK0qEfOSiodkTdxg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/postcss": {
      "version": "8.5.6",
      "resolved": "https://registry.npmjs.org/postcss/-/postcss-8.5.6.tgz",
      "integrity": "sha512-3Ybi1tAuwAP9s0r1UQ2J4n5Y0G05bJkpUIO0/bI9MhwmD70S5aTWbXGBwxHrelT+XM1k6dM0pk+SwNkpTRN7Pg==",
      "dev": true,
      "funding": [
        {
          "type": "opencollective",
          "url": "https://opencollective.com/postcss/"
        },
        {
          "type": "tidelift",
          "url": "https://tidelift.com/funding/github/npm/postcss"
        },
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "license": "MIT",
      "dependencies": {
        "nanoid": "^3.3.11",
        "picocolors": "^1.1.1",
        "source-map-js": "^1.2.1"
      },
      "engines": {
        "node": "^10 || ^12 || >=14"
      }
    },
    "node_modules/prelude-ls": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/prelude-ls/-/prelude-ls-1.2.1.tgz",
      "integrity": "sha512-vkcDPrRZo1QZLbn5RLGPpg/WmIQ65qoWWhcGKf/b5eplkkarX0m9z8ppCat4mlOqUsWpyNuYgO3VRyrYHSzX5g==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/prop-types": {
      "version": "15.8.1",
      "resolved": "https://registry.npmjs.org/prop-types/-/prop-types-15.8.1.tgz",
      "integrity": "sha512-oj87CgZICdulUohogVAR7AjlC0327U4el4L6eAvOqCeudMDVU0NThNaV+b9Df4dXgSP1gXMTnPdhfe/2qDH5cg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "loose-envify": "^1.4.0",
        "object-assign": "^4.1.1",
        "react-is": "^16.13.1"
      }
    },
    "node_modules/proxy-addr": {
      "version": "2.0.7",
      "resolved": "https://registry.npmjs.org/proxy-addr/-/proxy-addr-2.0.7.tgz",
      "integrity": "sha512-llQsMLSUDUPT44jdrU/O37qlnifitDP+ZwrmmZcoSKyLKvtZxpyV0n2/bD/N4tBAAZ/gJEdZU7KMraoK1+XYAg==",
      "license": "MIT",
      "dependencies": {
        "forwarded": "0.2.0",
        "ipaddr.js": "1.9.1"
      },
      "engines": {
        "node": ">= 0.10"
      }
    },
    "node_modules/proxy-from-env": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/proxy-from-env/-/proxy-from-env-1.1.0.tgz",
      "integrity": "sha512-D+zkORCbA9f1tdWRK0RaCR3GPv50cMxcrz4X8k5LTSUD1Dkw47mKJEZQNunItRTkWwgtaUSo1RVFRIG9ZXiFYg==",
      "license": "MIT"
    },
    "node_modules/punycode": {
      "version": "2.3.1",
      "resolved": "https://registry.npmjs.org/punycode/-/punycode-2.3.1.tgz",
      "integrity": "sha512-vYt7UD1U9Wg6138shLtLOvdAu+8DsC/ilFtEVHcH+wydcSpNE20AfSOduf6MkRFahL5FY7X1oU7nKVZFtfq8Fg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/qs": {
      "version": "6.13.0",
      "resolved": "https://registry.npmjs.org/qs/-/qs-6.13.0.tgz",
      "integrity": "sha512-+38qI9SOr8tfZ4QmJNplMUxqjbe7LKvvZgWdExBOmd+egZTtjLB67Gu0HRX3u/XOq7UU2Nx6nsjvS16Z9uwfpg==",
      "license": "BSD-3-Clause",
      "dependencies": {
        "side-channel": "^1.0.6"
      },
      "engines": {
        "node": ">=0.6"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/queue-microtask": {
      "version": "1.2.3",
      "resolved": "https://registry.npmjs.org/queue-microtask/-/queue-microtask-1.2.3.tgz",
      "integrity": "sha512-NuaNSa6flKT5JaSYQzJok04JzTL1CA6aGhv5rfLW3PgqA+M2ChpZQnAC8h8i4ZFkBS8X5RqkDBHA7r4hej3K9A==",
      "dev": true,
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/feross"
        },
        {
          "type": "patreon",
          "url": "https://www.patreon.com/feross"
        },
        {
          "type": "consulting",
          "url": "https://feross.org/support"
        }
      ],
      "license": "MIT"
    },
    "node_modules/random-bytes": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/random-bytes/-/random-bytes-1.0.0.tgz",
      "integrity": "sha512-iv7LhNVO047HzYR3InF6pUcUsPQiHTM1Qal51DcGSuZFBil1aBBWG5eHPNek7bvILMaYJ/8RU1e8w1AMdHmLQQ==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/range-parser": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/range-parser/-/range-parser-1.2.1.tgz",
      "integrity": "sha512-Hrgsx+orqoygnmhFbKaHE6c296J+HTAQXoxEF6gNupROmmGJRoyzfG3ccAveqCBrwr/2yxQ5BVd/GTl5agOwSg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/raw-body": {
      "version": "2.5.2",
      "resolved": "https://registry.npmjs.org/raw-body/-/raw-body-2.5.2.tgz",
      "integrity": "sha512-8zGqypfENjCIqGhgXToC8aB2r7YrBX+AQAfIPs/Mlk+BtPTztOvTS01NRW/3Eh60J+a48lt8qsCzirQ6loCVfA==",
      "license": "MIT",
      "dependencies": {
        "bytes": "3.1.2",
        "http-errors": "2.0.0",
        "iconv-lite": "0.4.24",
        "unpipe": "1.0.0"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/react": {
      "version": "18.3.1",
      "resolved": "https://registry.npmjs.org/react/-/react-18.3.1.tgz",
      "integrity": "sha512-wS+hAgJShR0KhEvPJArfuPVN1+Hz1t0Y6n5jLrGQbkb4urgPE/0Rve+1kMB1v/oWgHgm4WIcV+i7F2pTVj+2iQ==",
      "license": "MIT",
      "dependencies": {
        "loose-envify": "^1.1.0"
      },
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/react-dom": {
      "version": "18.3.1",
      "resolved": "https://registry.npmjs.org/react-dom/-/react-dom-18.3.1.tgz",
      "integrity": "sha512-5m4nQKp+rZRb09LNH59GM4BxTh9251/ylbKIbpe7TpGxfJ+9kv6BLkLBXIjjspbgbnIBNqlI23tRnTWT0snUIw==",
      "license": "MIT",
      "dependencies": {
        "loose-envify": "^1.1.0",
        "scheduler": "^0.23.2"
      },
      "peerDependencies": {
        "react": "^18.3.1"
      }
    },
    "node_modules/react-is": {
      "version": "16.13.1",
      "resolved": "https://registry.npmjs.org/react-is/-/react-is-16.13.1.tgz",
      "integrity": "sha512-24e6ynE2H+OKt4kqsOvNd8kBpV65zoxbA4BVsEOB3ARVWQki/DHzaUoC5KuON/BiccDaCCTZBuOcfZs70kR8bQ==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/react-refresh": {
      "version": "0.14.2",
      "resolved": "https://registry.npmjs.org/react-refresh/-/react-refresh-0.14.2.tgz",
      "integrity": "sha512-jCvmsr+1IUSMUyzOkRcvnVbX3ZYC6g9TDrDbFuFmRDq7PD4yaGbLKNQL6k2jnArV8hjYxh7hVhAZB6s9HDGpZA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/react-router": {
      "version": "6.30.1",
      "resolved": "https://registry.npmjs.org/react-router/-/react-router-6.30.1.tgz",
      "integrity": "sha512-X1m21aEmxGXqENEPG3T6u0Th7g0aS4ZmoNynhbs+Cn+q+QGTLt+d5IQ2bHAXKzKcxGJjxACpVbnYQSCRcfxHlQ==",
      "license": "MIT",
      "dependencies": {
        "@remix-run/router": "1.23.0"
      },
      "engines": {
        "node": ">=14.0.0"
      },
      "peerDependencies": {
        "react": ">=16.8"
      }
    },
    "node_modules/react-router-dom": {
      "version": "6.30.1",
      "resolved": "https://registry.npmjs.org/react-router-dom/-/react-router-dom-6.30.1.tgz",
      "integrity": "sha512-llKsgOkZdbPU1Eg3zK8lCn+sjD9wMRZZPuzmdWWX5SUs8OFkN5HnFVC0u5KMeMaC9aoancFI/KoLuKPqN+hxHw==",
      "license": "MIT",
      "dependencies": {
        "@remix-run/router": "1.23.0",
        "react-router": "6.30.1"
      },
      "engines": {
        "node": ">=14.0.0"
      },
      "peerDependencies": {
        "react": ">=16.8",
        "react-dom": ">=16.8"
      }
    },
    "node_modules/reflect.getprototypeof": {
      "version": "1.0.10",
      "resolved": "https://registry.npmjs.org/reflect.getprototypeof/-/reflect.getprototypeof-1.0.10.tgz",
      "integrity": "sha512-00o4I+DVrefhv+nX0ulyi3biSHCPDe+yLv5o/p6d/UVlirijB8E16FtfwSAi4g3tcqrQ4lRAqQSoFEZJehYEcw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.8",
        "define-properties": "^1.2.1",
        "es-abstract": "^1.23.9",
        "es-errors": "^1.3.0",
        "es-object-atoms": "^1.0.0",
        "get-intrinsic": "^1.2.7",
        "get-proto": "^1.0.1",
        "which-builtin-type": "^1.2.1"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/regexp.prototype.flags": {
      "version": "1.5.4",
      "resolved": "https://registry.npmjs.org/regexp.prototype.flags/-/regexp.prototype.flags-1.5.4.tgz",
      "integrity": "sha512-dYqgNSZbDwkaJ2ceRd9ojCGjBq+mOm9LmtXnAnEGyHhN/5R7iDW2TRw3h+o/jCFxus3P2LfWIIiwowAjANm7IA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.8",
        "define-properties": "^1.2.1",
        "es-errors": "^1.3.0",
        "get-proto": "^1.0.1",
        "gopd": "^1.2.0",
        "set-function-name": "^2.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/resolve": {
      "version": "2.0.0-next.5",
      "resolved": "https://registry.npmjs.org/resolve/-/resolve-2.0.0-next.5.tgz",
      "integrity": "sha512-U7WjGVG9sH8tvjW5SmGbQuui75FiyjAX72HX15DwBBwF9dNiQZRQAg9nnPhYy+TUnE0+VcrttuvNI8oSxZcocA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "is-core-module": "^2.13.0",
        "path-parse": "^1.0.7",
        "supports-preserve-symlinks-flag": "^1.0.0"
      },
      "bin": {
        "resolve": "bin/resolve"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/resolve-from": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/resolve-from/-/resolve-from-4.0.0.tgz",
      "integrity": "sha512-pb/MYmXstAkysRFx8piNI1tGFNQIFA3vkE3Gq4EuA1dF6gHp/+vgZqsCGJapvy8N3Q+4o7FwvquPJcnZ7RYy4g==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/reusify": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/reusify/-/reusify-1.1.0.tgz",
      "integrity": "sha512-g6QUff04oZpHs0eG5p83rFLhHeV00ug/Yf9nZM6fLeUrPguBTkTQOdpAWWspMh55TZfVQDPaN3NQJfbVRAxdIw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "iojs": ">=1.0.0",
        "node": ">=0.10.0"
      }
    },
    "node_modules/rimraf": {
      "version": "3.0.2",
      "resolved": "https://registry.npmjs.org/rimraf/-/rimraf-3.0.2.tgz",
      "integrity": "sha512-JZkJMZkAGFFPP2YqXZXPbMlMBgsxzE8ILs4lMIX/2o0L9UBw9O/Y3o6wFw/i9YLapcUJWwqbi3kdxIPdC62TIA==",
      "deprecated": "Rimraf versions prior to v4 are no longer supported",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "glob": "^7.1.3"
      },
      "bin": {
        "rimraf": "bin.js"
      },
      "funding": {
        "url": "https://github.com/sponsors/isaacs"
      }
    },
    "node_modules/rollup": {
      "version": "3.29.5",
      "resolved": "https://registry.npmjs.org/rollup/-/rollup-3.29.5.tgz",
      "integrity": "sha512-GVsDdsbJzzy4S/v3dqWPJ7EfvZJfCHiDqe80IyrF59LYuP+e6U1LJoUqeuqRbwAWoMNoXivMNeNAOf5E22VA1w==",
      "dev": true,
      "license": "MIT",
      "bin": {
        "rollup": "dist/bin/rollup"
      },
      "engines": {
        "node": ">=14.18.0",
        "npm": ">=8.0.0"
      },
      "optionalDependencies": {
        "fsevents": "~2.3.2"
      }
    },
    "node_modules/run-parallel": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/run-parallel/-/run-parallel-1.2.0.tgz",
      "integrity": "sha512-5l4VyZR86LZ/lDxZTR6jqL8AFE2S0IFLMP26AbjsLVADxHdhB/c0GUsH+y39UfCi3dzz8OlQuPmnaJOMoDHQBA==",
      "dev": true,
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/feross"
        },
        {
          "type": "patreon",
          "url": "https://www.patreon.com/feross"
        },
        {
          "type": "consulting",
          "url": "https://feross.org/support"
        }
      ],
      "license": "MIT",
      "dependencies": {
        "queue-microtask": "^1.2.2"
      }
    },
    "node_modules/safe-array-concat": {
      "version": "1.1.3",
      "resolved": "https://registry.npmjs.org/safe-array-concat/-/safe-array-concat-1.1.3.tgz",
      "integrity": "sha512-AURm5f0jYEOydBj7VQlVvDrjeFgthDdEF5H1dP+6mNpoXOMo1quQqJ4wvJDyRZ9+pO3kGWoOdmV08cSv2aJV6Q==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.8",
        "call-bound": "^1.0.2",
        "get-intrinsic": "^1.2.6",
        "has-symbols": "^1.1.0",
        "isarray": "^2.0.5"
      },
      "engines": {
        "node": ">=0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/safe-buffer": {
      "version": "5.2.1",
      "resolved": "https://registry.npmjs.org/safe-buffer/-/safe-buffer-5.2.1.tgz",
      "integrity": "sha512-rp3So07KcdmmKbGvgaNxQSJr7bGVSVk5S9Eq1F+ppbRo70+YeaDxkw5Dd8NPN+GD6bjnYm2VuPuCXmpuYvmCXQ==",
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/feross"
        },
        {
          "type": "patreon",
          "url": "https://www.patreon.com/feross"
        },
        {
          "type": "consulting",
          "url": "https://feross.org/support"
        }
      ],
      "license": "MIT"
    },
    "node_modules/safe-push-apply": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/safe-push-apply/-/safe-push-apply-1.0.0.tgz",
      "integrity": "sha512-iKE9w/Z7xCzUMIZqdBsp6pEQvwuEebH4vdpjcDWnyzaI6yl6O9FHvVpmGelvEHNsoY6wGblkxR6Zty/h00WiSA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "es-errors": "^1.3.0",
        "isarray": "^2.0.5"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/safe-regex-test": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/safe-regex-test/-/safe-regex-test-1.1.0.tgz",
      "integrity": "sha512-x/+Cz4YrimQxQccJf5mKEbIa1NzeCRNI5Ecl/ekmlYaampdNLPalVyIcCZNNH3MvmqBugV5TMYZXv0ljslUlaw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.2",
        "es-errors": "^1.3.0",
        "is-regex": "^1.2.1"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/safer-buffer": {
      "version": "2.1.2",
      "resolved": "https://registry.npmjs.org/safer-buffer/-/safer-buffer-2.1.2.tgz",
      "integrity": "sha512-YZo3K82SD7Riyi0E1EQPojLz7kpepnSQI9IyPbHHg1XXXevb5dJI7tpyN2ADxGcQbHG7vcyRHk0cbwqcQriUtg==",
      "license": "MIT"
    },
    "node_modules/scheduler": {
      "version": "0.23.2",
      "resolved": "https://registry.npmjs.org/scheduler/-/scheduler-0.23.2.tgz",
      "integrity": "sha512-UOShsPwz7NrMUqhR6t0hWjFduvOzbtv7toDH1/hIrfRNIDBnnBWd0CwJTGvTpngVlmwGCdP9/Zl/tVrDqcuYzQ==",
      "license": "MIT",
      "dependencies": {
        "loose-envify": "^1.1.0"
      }
    },
    "node_modules/semver": {
      "version": "6.3.1",
      "resolved": "https://registry.npmjs.org/semver/-/semver-6.3.1.tgz",
      "integrity": "sha512-BR7VvDCVHO+q2xBEWskxS6DJE1qRnb7DxzUrogb71CWoSficBxYsiAGd+Kl0mmq/MprG9yArRkyrQxTO6XjMzA==",
      "dev": true,
      "license": "ISC",
      "bin": {
        "semver": "bin/semver.js"
      }
    },
    "node_modules/send": {
      "version": "0.19.0",
      "resolved": "https://registry.npmjs.org/send/-/send-0.19.0.tgz",
      "integrity": "sha512-dW41u5VfLXu8SJh5bwRmyYUbAoSB3c9uQh6L8h/KtsFREPWpbX1lrljJo186Jc4nmci/sGUZ9a0a0J2zgfq2hw==",
      "license": "MIT",
      "dependencies": {
        "debug": "2.6.9",
        "depd": "2.0.0",
        "destroy": "1.2.0",
        "encodeurl": "~1.0.2",
        "escape-html": "~1.0.3",
        "etag": "~1.8.1",
        "fresh": "0.5.2",
        "http-errors": "2.0.0",
        "mime": "1.6.0",
        "ms": "2.1.3",
        "on-finished": "2.4.1",
        "range-parser": "~1.2.1",
        "statuses": "2.0.1"
      },
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/send/node_modules/debug": {
      "version": "2.6.9",
      "resolved": "https://registry.npmjs.org/debug/-/debug-2.6.9.tgz",
      "integrity": "sha512-bC7ElrdJaJnPbAP+1EotYvqZsb3ecl5wi6Bfi6BJTUcNowp6cvspg0jXznRTKDjm/E7AdgFBVeAPVMNcKGsHMA==",
      "license": "MIT",
      "dependencies": {
        "ms": "2.0.0"
      }
    },
    "node_modules/send/node_modules/debug/node_modules/ms": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.0.0.tgz",
      "integrity": "sha512-Tpp60P6IUJDTuOq/5Z8cdskzJujfwqfOTkrwIwj7IRISpnkJnT6SyJ4PCPnGMoFjC9ddhal5KVIYtAt97ix05A==",
      "license": "MIT"
    },
    "node_modules/send/node_modules/encodeurl": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/encodeurl/-/encodeurl-1.0.2.tgz",
      "integrity": "sha512-TPJXq8JqFaVYm2CWmPvnP2Iyo4ZSM7/QKcSmuMLDObfpH5fi7RUGmd/rTDf+rut/saiDiQEeVTNgAmJEdAOx0w==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/serve-static": {
      "version": "1.16.2",
      "resolved": "https://registry.npmjs.org/serve-static/-/serve-static-1.16.2.tgz",
      "integrity": "sha512-VqpjJZKadQB/PEbEwvFdO43Ax5dFBZ2UECszz8bQ7pi7wt//PWe1P6MN7eCnjsatYtBT6EuiClbjSWP2WrIoTw==",
      "license": "MIT",
      "dependencies": {
        "encodeurl": "~2.0.0",
        "escape-html": "~1.0.3",
        "parseurl": "~1.3.3",
        "send": "0.19.0"
      },
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/set-function-length": {
      "version": "1.2.2",
      "resolved": "https://registry.npmjs.org/set-function-length/-/set-function-length-1.2.2.tgz",
      "integrity": "sha512-pgRc4hJ4/sNjWCSS9AmnS40x3bNMDTknHgL5UaMBTMyJnU90EgWh1Rz+MC9eFu4BuN/UwZjKQuY/1v3rM7HMfg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "define-data-property": "^1.1.4",
        "es-errors": "^1.3.0",
        "function-bind": "^1.1.2",
        "get-intrinsic": "^1.2.4",
        "gopd": "^1.0.1",
        "has-property-descriptors": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/set-function-name": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/set-function-name/-/set-function-name-2.0.2.tgz",
      "integrity": "sha512-7PGFlmtwsEADb0WYyvCMa1t+yke6daIG4Wirafur5kcf+MhUnPms1UeR0CKQdTZD81yESwMHbtn+TR+dMviakQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "define-data-property": "^1.1.4",
        "es-errors": "^1.3.0",
        "functions-have-names": "^1.2.3",
        "has-property-descriptors": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/set-proto": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/set-proto/-/set-proto-1.0.0.tgz",
      "integrity": "sha512-RJRdvCo6IAnPdsvP/7m6bsQqNnn1FCBX5ZNtFL98MmFF/4xAIJTIg1YbHW5DC2W5SKZanrC6i4HsJqlajw/dZw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "dunder-proto": "^1.0.1",
        "es-errors": "^1.3.0",
        "es-object-atoms": "^1.0.0"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/setprototypeof": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/setprototypeof/-/setprototypeof-1.2.0.tgz",
      "integrity": "sha512-E5LDX7Wrp85Kil5bhZv46j8jOeboKq5JMmYM3gVGdGH8xFpPWXUMsNrlODCrkoxMEeNi/XZIwuRvY4XNwYMJpw==",
      "license": "ISC"
    },
    "node_modules/shebang-command": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/shebang-command/-/shebang-command-2.0.0.tgz",
      "integrity": "sha512-kHxr2zZpYtdmrN1qDjrrX/Z1rR1kG8Dx+gkpK1G4eXmvXswmcE1hTWBWYUzlraYw1/yZp6YuDY77YtvbN0dmDA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "shebang-regex": "^3.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/shebang-regex": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/shebang-regex/-/shebang-regex-3.0.0.tgz",
      "integrity": "sha512-7++dFhtcx3353uBaq8DDR4NuxBetBzC7ZQOhmTQInHEd6bSrXdiEyzCvG07Z44UYdLShWUyXt5M/yhz8ekcb1A==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/side-channel": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/side-channel/-/side-channel-1.1.0.tgz",
      "integrity": "sha512-ZX99e6tRweoUXqR+VBrslhda51Nh5MTQwou5tnUDgbtyM0dBgmhEDtWGP/xbKn6hqfPRHujUNwz5fy/wbbhnpw==",
      "license": "MIT",
      "dependencies": {
        "es-errors": "^1.3.0",
        "object-inspect": "^1.13.3",
        "side-channel-list": "^1.0.0",
        "side-channel-map": "^1.0.1",
        "side-channel-weakmap": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/side-channel-list": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/side-channel-list/-/side-channel-list-1.0.0.tgz",
      "integrity": "sha512-FCLHtRD/gnpCiCHEiJLOwdmFP+wzCmDEkc9y7NsYxeF4u7Btsn1ZuwgwJGxImImHicJArLP4R0yX4c2KCrMrTA==",
      "license": "MIT",
      "dependencies": {
        "es-errors": "^1.3.0",
        "object-inspect": "^1.13.3"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/side-channel-map": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/side-channel-map/-/side-channel-map-1.0.1.tgz",
      "integrity": "sha512-VCjCNfgMsby3tTdo02nbjtM/ewra6jPHmpThenkTYh8pG9ucZ/1P8So4u4FGBek/BjpOVsDCMoLA/iuBKIFXRA==",
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.2",
        "es-errors": "^1.3.0",
        "get-intrinsic": "^1.2.5",
        "object-inspect": "^1.13.3"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/side-channel-weakmap": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/side-channel-weakmap/-/side-channel-weakmap-1.0.2.tgz",
      "integrity": "sha512-WPS/HvHQTYnHisLo9McqBHOJk2FkHO/tlpvldyrnem4aeQp4hai3gythswg6p01oSoTl58rcpiFAjF2br2Ak2A==",
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.2",
        "es-errors": "^1.3.0",
        "get-intrinsic": "^1.2.5",
        "object-inspect": "^1.13.3",
        "side-channel-map": "^1.0.1"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/source-map-js": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/source-map-js/-/source-map-js-1.2.1.tgz",
      "integrity": "sha512-UXWMKhLOwVKb728IUtQPXxfYU+usdybtUrK/8uGE8CQMvrhOpwvzDBwj0QhSL7MQc7vIsISBG8VQ8+IDQxpfQA==",
      "dev": true,
      "license": "BSD-3-Clause",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/statuses": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/statuses/-/statuses-2.0.1.tgz",
      "integrity": "sha512-RwNA9Z/7PrK06rYLIzFMlaF+l73iwpzsqRIFgbMLbTcLD6cOao82TaWefPXQvB2fOC4AjuYSEndS7N/mTCbkdQ==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/stop-iteration-iterator": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/stop-iteration-iterator/-/stop-iteration-iterator-1.1.0.tgz",
      "integrity": "sha512-eLoXW/DHyl62zxY4SCaIgnRhuMr6ri4juEYARS8E6sCEqzKpOiE521Ucofdx+KnDZl5xmvGYaaKCk5FEOxJCoQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "es-errors": "^1.3.0",
        "internal-slot": "^1.1.0"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/string.prototype.matchall": {
      "version": "4.0.12",
      "resolved": "https://registry.npmjs.org/string.prototype.matchall/-/string.prototype.matchall-4.0.12.tgz",
      "integrity": "sha512-6CC9uyBL+/48dYizRf7H7VAYCMCNTBeM78x/VTUe9bFEaxBepPJDa1Ow99LqI/1yF7kuy7Q3cQsYMrcjGUcskA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.8",
        "call-bound": "^1.0.3",
        "define-properties": "^1.2.1",
        "es-abstract": "^1.23.6",
        "es-errors": "^1.3.0",
        "es-object-atoms": "^1.0.0",
        "get-intrinsic": "^1.2.6",
        "gopd": "^1.2.0",
        "has-symbols": "^1.1.0",
        "internal-slot": "^1.1.0",
        "regexp.prototype.flags": "^1.5.3",
        "set-function-name": "^2.0.2",
        "side-channel": "^1.1.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/string.prototype.repeat": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/string.prototype.repeat/-/string.prototype.repeat-1.0.0.tgz",
      "integrity": "sha512-0u/TldDbKD8bFCQ/4f5+mNRrXwZ8hg2w7ZR8wa16e8z9XpePWl3eGEcUD0OXpEH/VJH/2G3gjUtR3ZOiBe2S/w==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "define-properties": "^1.1.3",
        "es-abstract": "^1.17.5"
      }
    },
    "node_modules/string.prototype.trim": {
      "version": "1.2.10",
      "resolved": "https://registry.npmjs.org/string.prototype.trim/-/string.prototype.trim-1.2.10.tgz",
      "integrity": "sha512-Rs66F0P/1kedk5lyYyH9uBzuiI/kNRmwJAR9quK6VOtIpZ2G+hMZd+HQbbv25MgCA6gEffoMZYxlTod4WcdrKA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.8",
        "call-bound": "^1.0.2",
        "define-data-property": "^1.1.4",
        "define-properties": "^1.2.1",
        "es-abstract": "^1.23.5",
        "es-object-atoms": "^1.0.0",
        "has-property-descriptors": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/string.prototype.trimend": {
      "version": "1.0.9",
      "resolved": "https://registry.npmjs.org/string.prototype.trimend/-/string.prototype.trimend-1.0.9.tgz",
      "integrity": "sha512-G7Ok5C6E/j4SGfyLCloXTrngQIQU3PWtXGst3yM7Bea9FRURf1S42ZHlZZtsNque2FN2PoUhfZXYLNWwEr4dLQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.8",
        "call-bound": "^1.0.2",
        "define-properties": "^1.2.1",
        "es-object-atoms": "^1.0.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/string.prototype.trimstart": {
      "version": "1.0.8",
      "resolved": "https://registry.npmjs.org/string.prototype.trimstart/-/string.prototype.trimstart-1.0.8.tgz",
      "integrity": "sha512-UXSH262CSZY1tfu3G3Secr6uGLCFVPMhIqHjlgCUtCCcgihYc/xKs9djMTMUOb2j1mVSeU8EU6NWc/iQKU6Gfg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.7",
        "define-properties": "^1.2.1",
        "es-object-atoms": "^1.0.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/strip-ansi": {
      "version": "6.0.1",
      "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-6.0.1.tgz",
      "integrity": "sha512-Y38VPSHcqkFrCpFnQ9vuSXmquuv5oXOKpGeT6aGrr3o3Gc9AlVa6JBfUSOCnbxGGZF+/0ooI7KrPuUSztUdU5A==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "ansi-regex": "^5.0.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/strip-json-comments": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/strip-json-comments/-/strip-json-comments-3.1.1.tgz",
      "integrity": "sha512-6fPc+R4ihwqP6N/aIv2f1gMH8lOVtWQHoqC4yK6oSDVVocumAsfCqjkXnqiYMhmMwS/mEHLp7Vehlt3ql6lEig==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/supports-color": {
      "version": "7.2.0",
      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-7.2.0.tgz",
      "integrity": "sha512-qpCAvRl9stuOHveKsn7HncJRvv501qIacKzQlO/+Lwxc9+0q2wLyv4Dfvt80/DPn2pqOBsJdDiogXGR9+OvwRw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "has-flag": "^4.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/supports-preserve-symlinks-flag": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/supports-preserve-symlinks-flag/-/supports-preserve-symlinks-flag-1.0.0.tgz",
      "integrity": "sha512-ot0WnXS9fgdkgIcePe6RHNk1WA8+muPa6cSjeR3V8K27q9BB1rTE3R1p7Hv0z1ZyAc8s6Vvv8DIyWf681MAt0w==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/text-table": {
      "version": "0.2.0",
      "resolved": "https://registry.npmjs.org/text-table/-/text-table-0.2.0.tgz",
      "integrity": "sha512-N+8UisAXDGk8PFXP4HAzVR9nbfmVJ3zYLAWiTIoqC5v5isinhr+r5uaO8+7r3BMfuNIufIsA7RdpVgacC2cSpw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/toidentifier": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/toidentifier/-/toidentifier-1.0.1.tgz",
      "integrity": "sha512-o5sSPKEkg/DIQNmH43V0/uerLrpzVedkUh8tGNvaeXpfpuwjKenlSox/2O/BTlZUtEe+JG7s5YhEz608PlAHRA==",
      "license": "MIT",
      "engines": {
        "node": ">=0.6"
      }
    },
    "node_modules/type-check": {
      "version": "0.4.0",
      "resolved": "https://registry.npmjs.org/type-check/-/type-check-0.4.0.tgz",
      "integrity": "sha512-XleUoc9uwGXqjWwXaUTZAmzMcFZ5858QA2vvx1Ur5xIcixXIP+8LnFDgRplU30us6teqdlskFfu+ae4K79Ooew==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "prelude-ls": "^1.2.1"
      },
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/type-fest": {
      "version": "0.20.2",
      "resolved": "https://registry.npmjs.org/type-fest/-/type-fest-0.20.2.tgz",
      "integrity": "sha512-Ne+eE4r0/iWnpAxD852z3A+N0Bt5RN//NjJwRd2VFHEmrywxf5vsZlh4R6lixl6B+wz/8d+maTSAkN1FIkI3LQ==",
      "dev": true,
      "license": "(MIT OR CC0-1.0)",
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/type-is": {
      "version": "1.6.18",
      "resolved": "https://registry.npmjs.org/type-is/-/type-is-1.6.18.tgz",
      "integrity": "sha512-TkRKr9sUTxEH8MdfuCSP7VizJyzRNMjj2J2do2Jr3Kym598JVdEksuzPQCnlFPW4ky9Q+iA+ma9BGm06XQBy8g==",
      "license": "MIT",
      "dependencies": {
        "media-typer": "0.3.0",
        "mime-types": "~2.1.24"
      },
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/typed-array-buffer": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/typed-array-buffer/-/typed-array-buffer-1.0.3.tgz",
      "integrity": "sha512-nAYYwfY3qnzX30IkA6AQZjVbtK6duGontcQm1WSG1MD94YLqK0515GNApXkoxKOWMusVssAHWLh9SeaoefYFGw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.3",
        "es-errors": "^1.3.0",
        "is-typed-array": "^1.1.14"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/typed-array-byte-length": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/typed-array-byte-length/-/typed-array-byte-length-1.0.3.tgz",
      "integrity": "sha512-BaXgOuIxz8n8pIq3e7Atg/7s+DpiYrxn4vdot3w9KbnBhcRQq6o3xemQdIfynqSeXeDrF32x+WvfzmOjPiY9lg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.8",
        "for-each": "^0.3.3",
        "gopd": "^1.2.0",
        "has-proto": "^1.2.0",
        "is-typed-array": "^1.1.14"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/typed-array-byte-offset": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/typed-array-byte-offset/-/typed-array-byte-offset-1.0.4.tgz",
      "integrity": "sha512-bTlAFB/FBYMcuX81gbL4OcpH5PmlFHqlCCpAl8AlEzMz5k53oNDvN8p1PNOWLEmI2x4orp3raOFB51tv9X+MFQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "available-typed-arrays": "^1.0.7",
        "call-bind": "^1.0.8",
        "for-each": "^0.3.3",
        "gopd": "^1.2.0",
        "has-proto": "^1.2.0",
        "is-typed-array": "^1.1.15",
        "reflect.getprototypeof": "^1.0.9"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/typed-array-length": {
      "version": "1.0.7",
      "resolved": "https://registry.npmjs.org/typed-array-length/-/typed-array-length-1.0.7.tgz",
      "integrity": "sha512-3KS2b+kL7fsuk/eJZ7EQdnEmQoaho/r6KUef7hxvltNA5DR8NAUM+8wJMbJyZ4G9/7i3v5zPBIMN5aybAh2/Jg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.7",
        "for-each": "^0.3.3",
        "gopd": "^1.0.1",
        "is-typed-array": "^1.1.13",
        "possible-typed-array-names": "^1.0.0",
        "reflect.getprototypeof": "^1.0.6"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/uid-safe": {
      "version": "2.1.5",
      "resolved": "https://registry.npmjs.org/uid-safe/-/uid-safe-2.1.5.tgz",
      "integrity": "sha512-KPHm4VL5dDXKz01UuEd88Df+KzynaohSL9fBh096KWAxSKZQDI2uBrVqtvRM4rwrIrRRKsdLNML/lnaaVSRioA==",
      "license": "MIT",
      "dependencies": {
        "random-bytes": "~1.0.0"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/unbox-primitive": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/unbox-primitive/-/unbox-primitive-1.1.0.tgz",
      "integrity": "sha512-nWJ91DjeOkej/TA8pXQ3myruKpKEYgqvpw9lz4OPHj/NWFNluYrjbz9j01CJ8yKQd2g4jFoOkINCTW2I5LEEyw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.3",
        "has-bigints": "^1.0.2",
        "has-symbols": "^1.1.0",
        "which-boxed-primitive": "^1.1.1"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/unpipe": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/unpipe/-/unpipe-1.0.0.tgz",
      "integrity": "sha512-pjy2bYhSsufwWlKwPc+l3cN7+wuJlK6uz0YdJEOlQDbl6jo/YlPi4mb8agUkVC8BF7V8NuzeyPNqRksA3hztKQ==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/update-browserslist-db": {
      "version": "1.1.3",
      "resolved": "https://registry.npmjs.org/update-browserslist-db/-/update-browserslist-db-1.1.3.tgz",
      "integrity": "sha512-UxhIZQ+QInVdunkDAaiazvvT/+fXL5Osr0JZlJulepYu6Jd7qJtDZjlur0emRlT71EN3ScPoE7gvsuIKKNavKw==",
      "dev": true,
      "funding": [
        {
          "type": "opencollective",
          "url": "https://opencollective.com/browserslist"
        },
        {
          "type": "tidelift",
          "url": "https://tidelift.com/funding/github/npm/browserslist"
        },
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "license": "MIT",
      "dependencies": {
        "escalade": "^3.2.0",
        "picocolors": "^1.1.1"
      },
      "bin": {
        "update-browserslist-db": "cli.js"
      },
      "peerDependencies": {
        "browserslist": ">= 4.21.0"
      }
    },
    "node_modules/uri-js": {
      "version": "4.4.1",
      "resolved": "https://registry.npmjs.org/uri-js/-/uri-js-4.4.1.tgz",
      "integrity": "sha512-7rKUyy33Q1yc98pQ1DAmLtwX109F7TIfWlW1Ydo8Wl1ii1SeHieeh0HHfPeL2fMXK6z0s8ecKs9frCuLJvndBg==",
      "dev": true,
      "license": "BSD-2-Clause",
      "dependencies": {
        "punycode": "^2.1.0"
      }
    },
    "node_modules/utils-merge": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/utils-merge/-/utils-merge-1.0.1.tgz",
      "integrity": "sha512-pMZTvIkT1d+TFGvDOqodOclx0QWkkgi6Tdoa8gC8ffGAAqz9pzPTZWAybbsHHoED/ztMtkv/VoYTYyShUn81hA==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4.0"
      }
    },
    "node_modules/vary": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/vary/-/vary-1.1.2.tgz",
      "integrity": "sha512-BNGbWLfd0eUPabhkXUVm0j8uuvREyTh5ovRa/dyow/BqAbZJyC+5fU+IzQOzmAKzYqYRAISoRhdQr3eIZ/PXqg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/vite": {
      "version": "4.5.14",
      "resolved": "https://registry.npmjs.org/vite/-/vite-4.5.14.tgz",
      "integrity": "sha512-+v57oAaoYNnO3hIu5Z/tJRZjq5aHM2zDve9YZ8HngVHbhk66RStobhb1sqPMIPEleV6cNKYK4eGrAbE9Ulbl2g==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "esbuild": "^0.18.10",
        "postcss": "^8.4.27",
        "rollup": "^3.27.1"
      },
      "bin": {
        "vite": "bin/vite.js"
      },
      "engines": {
        "node": "^14.18.0 || >=16.0.0"
      },
      "funding": {
        "url": "https://github.com/vitejs/vite?sponsor=1"
      },
      "optionalDependencies": {
        "fsevents": "~2.3.2"
      },
      "peerDependencies": {
        "@types/node": ">= 14",
        "less": "*",
        "lightningcss": "^1.21.0",
        "sass": "*",
        "stylus": "*",
        "sugarss": "*",
        "terser": "^5.4.0"
      },
      "peerDependenciesMeta": {
        "@types/node": {
          "optional": true
        },
        "less": {
          "optional": true
        },
        "lightningcss": {
          "optional": true
        },
        "sass": {
          "optional": true
        },
        "stylus": {
          "optional": true
        },
        "sugarss": {
          "optional": true
        },
        "terser": {
          "optional": true
        }
      }
    },
    "node_modules/which": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/which/-/which-2.0.2.tgz",
      "integrity": "sha512-BLI3Tl1TW3Pvl70l3yq3Y64i+awpwXqsGBYWkkqMtnbXgrMD+yj7rhW0kuEDxzJaYXGjEW5ogapKNMEKNMjibA==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "isexe": "^2.0.0"
      },
      "bin": {
        "node-which": "bin/node-which"
      },
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/which-boxed-primitive": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/which-boxed-primitive/-/which-boxed-primitive-1.1.1.tgz",
      "integrity": "sha512-TbX3mj8n0odCBFVlY8AxkqcHASw3L60jIuF8jFP78az3C2YhmGvqbHBpAjTRH2/xqYunrJ9g1jSyjCjpoWzIAA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "is-bigint": "^1.1.0",
        "is-boolean-object": "^1.2.1",
        "is-number-object": "^1.1.1",
        "is-string": "^1.1.1",
        "is-symbol": "^1.1.1"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/which-builtin-type": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/which-builtin-type/-/which-builtin-type-1.2.1.tgz",
      "integrity": "sha512-6iBczoX+kDQ7a3+YJBnh3T+KZRxM/iYNPXicqk66/Qfm1b93iu+yOImkg0zHbj5LNOcNv1TEADiZ0xa34B4q6Q==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.2",
        "function.prototype.name": "^1.1.6",
        "has-tostringtag": "^1.0.2",
        "is-async-function": "^2.0.0",
        "is-date-object": "^1.1.0",
        "is-finalizationregistry": "^1.1.0",
        "is-generator-function": "^1.0.10",
        "is-regex": "^1.2.1",
        "is-weakref": "^1.0.2",
        "isarray": "^2.0.5",
        "which-boxed-primitive": "^1.1.0",
        "which-collection": "^1.0.2",
        "which-typed-array": "^1.1.16"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/which-collection": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/which-collection/-/which-collection-1.0.2.tgz",
      "integrity": "sha512-K4jVyjnBdgvc86Y6BkaLZEN933SwYOuBFkdmBu9ZfkcAbdVbpITnDmjvZ/aQjRXQrv5EPkTnD1s39GiiqbngCw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "is-map": "^2.0.3",
        "is-set": "^2.0.3",
        "is-weakmap": "^2.0.2",
        "is-weakset": "^2.0.3"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/which-typed-array": {
      "version": "1.1.19",
      "resolved": "https://registry.npmjs.org/which-typed-array/-/which-typed-array-1.1.19.tgz",
      "integrity": "sha512-rEvr90Bck4WZt9HHFC4DJMsjvu7x+r6bImz0/BrbWb7A2djJ8hnZMrWnHo9F8ssv0OMErasDhftrfROTyqSDrw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "available-typed-arrays": "^1.0.7",
        "call-bind": "^1.0.8",
        "call-bound": "^1.0.4",
        "for-each": "^0.3.5",
        "get-proto": "^1.0.1",
        "gopd": "^1.2.0",
        "has-tostringtag": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/word-wrap": {
      "version": "1.2.5",
      "resolved": "https://registry.npmjs.org/word-wrap/-/word-wrap-1.2.5.tgz",
      "integrity": "sha512-BN22B5eaMMI9UMtjrGd5g5eCYPpCPDUy0FJXbYsaT5zYxjFOckS53SQDE3pWkVoWpHXVb3BrYcEN4Twa55B5cA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/wrappy": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/wrappy/-/wrappy-1.0.2.tgz",
      "integrity": "sha512-l4Sp/DRseor9wL6EvV2+TuQn63dMkPjZ/sp9XkghTEbV9KlPS1xUsZ3u7/IQO4wxtcFB4bgpQPRcR3QCvezPcQ==",
      "dev": true,
      "license": "ISC"
    },
    "node_modules/yallist": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/yallist/-/yallist-3.1.1.tgz",
      "integrity": "sha512-a4UGQaWPH59mOXUYnAG2ewncQS4i4F43Tv3JoAM+s2VDAmS9NsK8GpDMLrCHPksFT7h3K6TOoUNn2pb7RoXx4g==",
      "dev": true,
      "license": "ISC"
    },
    "node_modules/yocto-queue": {
      "version": "0.1.0",
      "resolved": "https://registry.npmjs.org/yocto-queue/-/yocto-queue-0.1.0.tgz",
      "integrity": "sha512-rVksvsnNCdJ/ohGc6xgPwyN8eheCxsiLM8mxuE/t/mOVqJewPuO1miLpTHQiRgTKCLexL4MeAFVagts7HmNZ2Q==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    }
  }
}

==============================

üìÅ File: .\package.json
------------------------------
üìÑ N·ªòI DUNG FILE:
==============================
{
  "name": "hr-management-system-react",
  "version": "1.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "preview": "vite preview",
    "server": "node server/server.js"
  },
  "dependencies": {
    "@fortawesome/fontawesome-free": "^6.7.2",
    "axios": "^1.10.0",
    "bootstrap": "^5.3.7",
    "cors": "^2.8.5",
    "dotenv": "^16.6.1",
    "express": "^4.21.2",
    "express-session": "^1.18.2",
    "react": "^18.3.1",
    "react-dom": "^18.3.1",
    "react-router-dom": "^6.30.1"
  },
  "devDependencies": {
    "@types/react": "^18.0.28",
    "@types/react-dom": "^18.0.11",
    "@vitejs/plugin-react": "^3.1.0",
    "eslint": "^8.38.0",
    "eslint-plugin-react": "^7.32.2",
    "eslint-plugin-react-hooks": "^4.6.0",
    "eslint-plugin-react-refresh": "^0.3.4",
    "vite": "^4.5.14"
  }
}

==============================

üìÅ File: .\project_analysis.txt
------------------------------
üìÑ N·ªòI DUNG FILE:
==============================
================================================================================
              PH√ÇN T√çCH C·∫§U TR√öC D·ª∞ √ÅN V√Ä N·ªòI DUNG CODE
================================================================================

1. C·∫§U TR√öC TH∆Ø M·ª§C:
----------------------------------------
hr-management-system/
‚îú‚îÄ‚îÄ Getcode.ipynb
‚îú‚îÄ‚îÄ index.html
‚îú‚îÄ‚îÄ node_modules/
‚îú‚îÄ‚îÄ package-lock.json
‚îú‚îÄ‚îÄ package.json
‚îú‚îÄ‚îÄ project_analysis.txt
‚îú‚îÄ‚îÄ server/
‚îÇ   ‚îú‚îÄ‚îÄ config/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ database.js
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ lark-config.js
‚îÇ   ‚îú‚îÄ‚îÄ controllers/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ attendanceController.js
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ authController.js
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ dashboardController.js
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ employeeController.js
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ recruitmentController.js
‚îÇ   ‚îú‚îÄ‚îÄ middleware/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ auth.js
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ validation.js
‚îÇ   ‚îú‚îÄ‚îÄ routes/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ attendance.js
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ auth.js
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ employees.js
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ recruitment.js
‚îÇ   ‚îú‚îÄ‚îÄ server.js
‚îÇ   ‚îî‚îÄ‚îÄ services/
‚îÇ       ‚îú‚îÄ‚îÄ attendance/
‚îÇ       ‚îÇ   ‚îú‚îÄ‚îÄ attendance-service.js
‚îÇ       ‚îÇ   ‚îú‚îÄ‚îÄ attendance-validator.js
‚îÇ       ‚îÇ   ‚îî‚îÄ‚îÄ index.js
‚îÇ       ‚îú‚îÄ‚îÄ auth/
‚îÇ       ‚îÇ   ‚îú‚îÄ‚îÄ auth-service.js
‚îÇ       ‚îÇ   ‚îú‚îÄ‚îÄ index.js
‚îÇ       ‚îÇ   ‚îî‚îÄ‚îÄ session-service.js
‚îÇ       ‚îú‚îÄ‚îÄ core/
‚îÇ       ‚îÇ   ‚îú‚îÄ‚îÄ base-service.js
‚îÇ       ‚îÇ   ‚îú‚îÄ‚îÄ cache-service.js
‚îÇ       ‚îÇ   ‚îú‚îÄ‚îÄ index.js
‚îÇ       ‚îÇ   ‚îî‚îÄ‚îÄ lark-client.js
‚îÇ       ‚îú‚îÄ‚îÄ employees/
‚îÇ       ‚îÇ   ‚îú‚îÄ‚îÄ employee-service.js
‚îÇ       ‚îÇ   ‚îú‚îÄ‚îÄ employee-validator.js
‚îÇ       ‚îÇ   ‚îú‚îÄ‚îÄ index.js
‚îÇ       ‚îÇ   ‚îî‚îÄ‚îÄ work-history-service.js
‚îÇ       ‚îú‚îÄ‚îÄ index.js
‚îÇ       ‚îú‚îÄ‚îÄ lark-service-manager.js
‚îÇ       ‚îú‚îÄ‚îÄ master-data/
‚îÇ       ‚îÇ   ‚îú‚îÄ‚îÄ index.js
‚îÇ       ‚îÇ   ‚îú‚îÄ‚îÄ master-data-validator.js
‚îÇ       ‚îÇ   ‚îú‚îÄ‚îÄ position-service.js
‚îÇ       ‚îÇ   ‚îî‚îÄ‚îÄ store-service.js
‚îÇ       ‚îú‚îÄ‚îÄ recruitment/
‚îÇ       ‚îÇ   ‚îú‚îÄ‚îÄ index.js
‚îÇ       ‚îÇ   ‚îú‚îÄ‚îÄ recruitment-service.js
‚îÇ       ‚îÇ   ‚îî‚îÄ‚îÄ recruitment-validator.js
‚îÇ       ‚îî‚îÄ‚îÄ utils/
‚îÇ           ‚îú‚îÄ‚îÄ error-handler.js
‚îÇ           ‚îú‚îÄ‚îÄ index.js
‚îÇ           ‚îú‚îÄ‚îÄ response-formatter.js
‚îÇ           ‚îî‚îÄ‚îÄ service-factory.js
‚îú‚îÄ‚îÄ src/
‚îÇ   ‚îú‚îÄ‚îÄ App.jsx
‚îÇ   ‚îú‚îÄ‚îÄ components/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ attendance/
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ AttendanceFilters.jsx
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ AttendanceLogs.jsx
‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ EmployeeHours.jsx
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ auth/
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ LoginForm.jsx
‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ ProtectedRoute.jsx
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ common/
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ Alert.jsx
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ Loading.jsx
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ Modal.jsx
‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ Table.jsx
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ dashboard/
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ Dashboard.jsx
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ HRDashboard.jsx
‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ StatsCard.jsx
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ employee/
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ AddWorkHistoryModal.jsx
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ EmployeeEditModal.jsx
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ EmployeeForm.jsx
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ EmployeeList.jsx
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ EmployeeTable.jsx
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ RecruitmentModal.jsx
‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ WorkHistoryModal.jsx
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ layout/
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ Layout.jsx
‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ ResponsiveNavigation.jsx
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ masterdata/
‚îÇ   ‚îÇ       ‚îú‚îÄ‚îÄ PositionManager.jsx
‚îÇ   ‚îÇ       ‚îî‚îÄ‚îÄ StoreManager.jsx
‚îÇ   ‚îú‚îÄ‚îÄ contexts/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ AppContext.jsx
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ AuthContext.jsx
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ NotificationContext.jsx
‚îÇ   ‚îú‚îÄ‚îÄ hooks/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ useApi.js
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ useAttendance.js
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ useAuth.js
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ useEmployees.js
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ useNotification.js
‚îÇ   ‚îú‚îÄ‚îÄ main.jsx
‚îÇ   ‚îú‚îÄ‚îÄ pages/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ AttendanceLogsPage.jsx
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ DashboardPage.jsx
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ EmployeeManagementPage.jsx
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ HRDashboardPage.jsx
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ LoginPage.jsx
‚îÇ   ‚îú‚îÄ‚îÄ services/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ api.js
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ auth.js
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ employee.js
‚îÇ   ‚îî‚îÄ‚îÄ styles/
‚îÇ       ‚îú‚îÄ‚îÄ components.css
‚îÇ       ‚îî‚îÄ‚îÄ globals.css
‚îî‚îÄ‚îÄ vite.config.js

2. PH√ÇN T√çCH C√ÅC FILE CODE V√Ä N·ªòI DUNG:
----------------------------------------

üü® JAVASCRIPT/TYPESCRIPT FILES:
==================================================

üìÅ File: .\vite.config.js
------------------------------
üì§ EXPORTS:
   ‚Ä¢ defineConfig (d√≤ng 5)

üìÑ N·ªòI DUNG FILE:
==============================
// vite.config.js
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'

export default defineConfig({
  plugins: [react()],
  server: {
    port: 3000,
    proxy: {
      '/api': {
        target: 'http://localhost:8080',
        changeOrigin: true,
      }
    }
  }
})

==============================

üìÅ File: .\server\server.js
------------------------------

üìÑ N·ªòI DUNG FILE:
==============================
// server/server.js
import dotenv from 'dotenv';

// Configure dotenv FIRST
dotenv.config();

// Import c√°c modules AFTER ƒë√£ config dotenv
import express from 'express';
import cors from 'cors';
import session from 'express-session';
import path from 'path';
import { fileURLToPath } from 'url';

// ES6 module equivalent of __dirname
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Import service manager AFTER dotenv config
import larkServiceManager from './services/lark-service-manager.js';

// Import routes
import authRoutes from './routes/auth.js';
import employeeRoutes from './routes/employees.js';
import attendanceRoutes from './routes/attendance.js';
import recruitmentRoutes from './routes/recruitment.js';

const app = express();
const PORT = process.env.PORT || 8080;

// Middleware
app.use(cors({
    origin: 'http://localhost:3000',
    credentials: true
}));

app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// Session configuration
app.use(session({
    secret: process.env.SESSION_SECRET || 'your-secret-key',
    resave: false,
    saveUninitialized: false,
    cookie: { secure: false, maxAge: 24 * 60 * 60 * 1000 }
}));

// API Routes
app.use('/api/auth', authRoutes);
app.use('/api/employees', employeeRoutes);
app.use('/api/attendance', attendanceRoutes);
app.use('/api/recruitment', recruitmentRoutes);

// Health check endpoint
app.get('/api/health', (req, res) => {
    res.json({
        status: 'OK',
        timestamp: new Date().toISOString(),
        services: {
            larkServiceManager: larkServiceManager.initialized
        }
    });
});

// Root endpoint
app.get('/', (req, res) => {
    res.json({
        message: 'HR Management System API',
        version: '1.0.0',
        timestamp: new Date().toISOString()
    });
});

// Start server with proper initialization
app.listen(PORT, async () => {
    console.log(`Server running on http://localhost:${PORT}`);
    
    try {
        await larkServiceManager.init();
        console.log('Server fully initialized and ready');
    } catch (error) {
        console.error('Service initialization failed:', error.message);
        console.log('Server running but services unavailable');
    }
});

==============================

üìÅ File: .\server\config\database.js
------------------------------
üì§ EXPORTS:
   ‚Ä¢ 
    users,
    roles
 (d√≤ng 48)

üìÑ N·ªòI DUNG FILE:
==============================
// Demo users data (in production, use real database)
const users = {
    admin: {
        id: 'admin',
        username: 'admin',
        password: 'admin123',
        role: 'admin',
        fullName: 'System Admin'
    },
    hr: {
        id: 'hr',
        username: 'hr',
        password: 'hr123',
        role: 'hr',
        fullName: 'HR Manager'
    },
    sales: {
        id: 'sales',
        username: 'sales',
        password: 'sales123',
        role: 'sales_manager',
        fullName: 'Sales Manager'
    },
    finance: {
        id: 'finance',
        username: 'finance',
        password: 'finance123',
        role: 'finance_manager',
        fullName: 'Finance Manager'
    },
    director: {
        id: 'director',
        username: 'director',
        password: 'director123',
        role: 'director',
        fullName: 'Director'
    }
};

const roles = {
    admin: 'Admin',
    hr: 'HR',
    sales_manager: 'Tr∆∞·ªüng ph√≤ng kinh doanh',
    finance_manager: 'Tr∆∞·ªüng ph√≤ng t√†i ch√≠nh k·∫ø to√°n',
    director: 'T·ªïng gi√°m ƒë·ªëc'
};

export {
    users,
    roles
};

==============================

üìÅ File: .\server\config\lark-config.js
------------------------------
üîß FUNCTIONS:
   ‚Ä¢ validateLarkConfig (d√≤ng 2) - arrow function
üì§ EXPORTS:
   ‚Ä¢ const (d√≤ng 2)
   ‚Ä¢ const (d√≤ng 24)

üìÑ N·ªòI DUNG FILE:
==============================
// server/config/lark-config.js
export const validateLarkConfig = () => {
    const requiredVars = [
        'LARK_APP_ID',
        'LARK_APP_SECRET', 
        'LARK_BASE_ID',
        'LARK_EMPLOYEE_TABLE_ID',
        'LARK_ATTENDANCE_TABLE_ID',
        'LARK_RECRUITMENT_TABLE_ID',
        'LARK_STORE_TABLE_ID',
        'LARK_POSITION_TABLE_ID',
        'LARK_WORK_HISTORY_TABLE_ID'
    ];

    const missing = requiredVars.filter(key => !process.env[key]);
    
    if (missing.length > 0) {
        throw new Error(`‚ùå Missing Lark configuration: ${missing.join(', ')}`);
    }
    
    console.log('‚úÖ Lark configuration validated');
};

export const larkConfig = {
    appId: process.env.LARK_APP_ID,
    appSecret: process.env.LARK_APP_SECRET,
    baseId: process.env.LARK_BASE_ID,
    tables: {
        employee: process.env.LARK_EMPLOYEE_TABLE_ID,
        attendance: process.env.LARK_ATTENDANCE_TABLE_ID,
        recruitment: process.env.LARK_RECRUITMENT_TABLE_ID,
        store: process.env.LARK_STORE_TABLE_ID,
        position: process.env.LARK_POSITION_TABLE_ID,
        workHistory: process.env.LARK_WORK_HISTORY_TABLE_ID
    }
};

==============================

üìÅ File: .\server\controllers\attendanceController.js
------------------------------
üì§ EXPORTS:
   ‚Ä¢ const (d√≤ng 5)
   ‚Ä¢ const (d√≤ng 21)
   ‚Ä¢ const (d√≤ng 37)
   ‚Ä¢ const (d√≤ng 53)

üìÑ N·ªòI DUNG FILE:
==============================
// server/controllers/attendanceController.js
import larkServiceManager from '../services/lark-service-manager.js';
import { formatResponse } from '../services/utils/response-formatter.js';

export const getAttendanceLogs = async (req, res) => {
    try {
        const filters = req.query;
        const logs = await larkServiceManager.getAttendanceLogs(filters);
        res.json(formatResponse(true, 'L·∫•y b·∫£n ghi ch·∫•m c√¥ng th√†nh c√¥ng', logs));
    } catch (error) {
        console.error('‚ùå Controller: getAttendanceLogs failed:', error);
        res.status(500).json(formatResponse(
            false, 
            `L·ªói khi l·∫•y b·∫£n ghi ch·∫•m c√¥ng: ${error.message}`, 
            null, 
            'ATTENDANCE_LOAD_FAILED'
        ));
    }
};

export const addAttendanceLog = async (req, res) => {
    try {
        const attendanceData = req.body;
        const result = await larkServiceManager.addAttendanceLog(attendanceData);
        res.json(formatResponse(true, 'Th√™m b·∫£n ghi ch·∫•m c√¥ng th√†nh c√¥ng', result));
    } catch (error) {
        console.error('‚ùå Controller: addAttendanceLog failed:', error);
        res.status(500).json(formatResponse(
            false, 
            `L·ªói khi th√™m b·∫£n ghi ch·∫•m c√¥ng: ${error.message}`, 
            null, 
            'ATTENDANCE_ADD_FAILED'
        ));
    }
};

export const getEmployeeHours = async (req, res) => {
    try {
        const employeeHours = await larkServiceManager.getEmployeeHours();
        res.json(formatResponse(true, 'L·∫•y t·ªïng gi·ªù c√¥ng th√†nh c√¥ng', employeeHours));
    } catch (error) {
        console.error('‚ùå Controller: getEmployeeHours failed:', error);
        res.status(500).json(formatResponse(
            false, 
            `L·ªói khi l·∫•y t·ªïng gi·ªù c√¥ng: ${error.message}`, 
            null, 
            'EMPLOYEE_HOURS_LOAD_FAILED'
        ));
    }
};

// server/controllers/attendanceController.js
export const getAttendanceStats = async (req, res) => {
    try {
        console.log('üìä GETTING ATTENDANCE STATS...');
        
        const attendanceService = larkServiceManager.getService('attendance');
        
        console.log('‚è∞ Getting attendance logs...');
        const attendanceLogs = await attendanceService.getAttendanceLogs();
        console.log('‚úÖ Attendance logs fetched:', attendanceLogs.length);
        
        const stats = {
            totalAttendanceLogs: attendanceLogs.length,
            todayLogs: attendanceLogs.filter(log => {
                const today = new Date().toISOString().split('T')[0];
                return log.date === today;
            }).length,
            thisWeekLogs: attendanceLogs.filter(log => {
                const logDate = new Date(log.date);
                const today = new Date();
                const weekAgo = new Date(today.getTime() - 7 * 24 * 60 * 60 * 1000);
                return logDate >= weekAgo && logDate <= today;
            }).length
        };
        
        console.log('üìä Attendance stats calculated:', stats);
        
        res.json(formatResponse(true, 'L·∫•y th·ªëng k√™ ch·∫•m c√¥ng th√†nh c√¥ng', stats));
        
    } catch (error) {
        console.error('‚ùå Controller: getAttendanceStats failed:', error);
        res.status(500).json(formatResponse(
            false, 
            `Kh√¥ng th·ªÉ l·∫•y th·ªëng k√™ ch·∫•m c√¥ng: ${error.message}`, 
            null, 
            'ATTENDANCE_STATS_LOAD_FAILED'
        ));
    }
};

==============================

üìÅ File: .\server\controllers\authController.js
------------------------------
üîß FUNCTIONS:
   ‚Ä¢ login (d√≤ng 3) - arrow function
   ‚Ä¢ logout (d√≤ng 30) - arrow function
   ‚Ä¢ getProfile (d√≤ng 39) - arrow function
üì§ EXPORTS:
   ‚Ä¢ 
    login,
    logout,
    getProfile
 (d√≤ng 43)

üìÑ N·ªòI DUNG FILE:
==============================
import { users } from '../config/database.js';

const login = (req, res) => {
    const { username, password } = req.body;
    
    const user = users[username];
    if (!user) {
        return res.status(401).json({ error: 'Invalid credentials' });
    }
    
    if (user.password !== password) {
        return res.status(401).json({ error: 'Invalid credentials' });
    }
    
    req.session.user = {
        id: user.id,
        username: user.username,
        role: user.role,
        fullName: user.fullName
    };
    
    const response = { 
        message: 'Login successful',
        user: req.session.user
    };
    
    res.json(response);
};

const logout = (req, res) => {
    req.session.destroy((err) => {
        if (err) {
            return res.status(500).json({ error: 'Could not log out' });
        }
        res.json({ message: 'Logout successful' });
    });
};

const getProfile = (req, res) => {
    res.json({ user: req.user });
};

export {
    login,
    logout,
    getProfile
};

==============================

üìÅ File: .\server\controllers\dashboardController.js
------------------------------
üì§ EXPORTS:
   ‚Ä¢ const (d√≤ng 5)

üìÑ N·ªòI DUNG FILE:
==============================
// server/controllers/dashboardController.js (M·ªöI)
import larkServiceManager from '../services/lark-service-manager.js';
import { formatResponse } from '../services/utils/response-formatter.js';

export const getDashboardStats = async (req, res) => {
    try {
        console.log('üìä GETTING DASHBOARD STATS...');
        
        const employeeService = larkServiceManager.getService('employee');
        const attendanceService = larkServiceManager.getService('attendance');
        
        // ‚úÖ T√°ch ri√™ng, handle error ƒë·ªôc l·∫≠p
        let employeeStats = {
            totalEmployees: 0,
            activeEmployees: 0,
            error: null
        };
        
        let attendanceStats = {
            totalAttendanceLogs: 0,
            todayLogs: 0,
            error: null
        };
        
        // Get employee stats
        try {
            const employees = await employeeService.getAllEmployees();
            employeeStats = {
                totalEmployees: employees.length,
                activeEmployees: employees.filter(emp => emp.status === 'active').length,
                error: null
            };
        } catch (error) {
            console.error('‚ùå Employee stats error:', error);
            employeeStats.error = 'Kh√¥ng th·ªÉ t·∫£i th·ªëng k√™ nh√¢n vi√™n';
        }
        
        // Get attendance stats
        try {
            const logs = await attendanceService.getAttendanceLogs();
            const today = new Date().toISOString().split('T')[0];
            attendanceStats = {
                totalAttendanceLogs: logs.length,
                todayLogs: logs.filter(log => log.date === today).length,
                error: null
            };
        } catch (error) {
            console.error('‚ùå Attendance stats error:', error);
            attendanceStats.error = 'Kh√¥ng th·ªÉ t·∫£i th·ªëng k√™ ch·∫•m c√¥ng';
        }
        
        const dashboardData = {
            employee: employeeStats,
            attendance: attendanceStats,
            timestamp: new Date().toISOString()
        };
        
        res.json(formatResponse(true, 'L·∫•y th·ªëng k√™ dashboard th√†nh c√¥ng', dashboardData));
        
    } catch (error) {
        console.error('‚ùå Dashboard stats error:', error);
        res.status(500).json(formatResponse(
            false, 
            `L·ªói h·ªá th·ªëng: ${error.message}`, 
            null, 
            'DASHBOARD_STATS_ERROR'
        ));
    }
};

==============================

üìÅ File: .\server\controllers\employeeController.js
------------------------------
üèõÔ∏è  CLASSES:
   ‚Ä¢ EmployeeController (d√≤ng 7)
üì§ EXPORTS:
   ‚Ä¢ const (d√≤ng 553)
   ‚Ä¢ const (d√≤ng 554)
   ‚Ä¢ const (d√≤ng 555)
   ‚Ä¢ const (d√≤ng 556)
   ‚Ä¢ const (d√≤ng 557)
   ‚Ä¢ const (d√≤ng 558)
   ‚Ä¢ const (d√≤ng 559)
   ‚Ä¢ const (d√≤ng 560)
   ‚Ä¢ const (d√≤ng 561)
   ‚Ä¢ const (d√≤ng 564)
   ‚Ä¢ const (d√≤ng 565)
   ‚Ä¢ const (d√≤ng 566)
   ‚Ä¢ const (d√≤ng 567)
   ‚Ä¢ const (d√≤ng 570)
   ‚Ä¢ const (d√≤ng 571)
   ‚Ä¢ const (d√≤ng 572)
   ‚Ä¢ const (d√≤ng 573)
   ‚Ä¢  EmployeeController  (d√≤ng 576)

üìÑ N·ªòI DUNG FILE:
==============================
// server/controllers/employeeController.js
import larkServiceManager from '../services/lark-service-manager.js';
import { formatResponse } from '../services/utils/response-formatter.js';
import { EmployeeValidator } from '../services/employees/index.js';


class EmployeeController {
    /**
     * Get all employees
     * @route GET /api/employees
     */
    async getAllEmployees(req, res) {
        try {
            const employees = await larkServiceManager.getAllEmployees();
            res.json(formatResponse(true, 'L·∫•y danh s√°ch nh√¢n vi√™n th√†nh c√¥ng', employees));
        } catch (error) {
            console.error('‚ùå Controller: getAllEmployees failed:', error);
            res.status(500).json(formatResponse(
                false, 
                `Kh√¥ng th·ªÉ t·∫£i danh s√°ch nh√¢n vi√™n: ${error.message}`, 
                null, 
                'EMPLOYEE_LOAD_FAILED'
            ));
        }
    }


    /**
     * Add new employee with work history support
     * @route POST /api/employees
     */
    async addEmployee(req, res) {
        try {
            const { fullName, phoneNumber, gender, hourlyRate, bankAccount, bankName, workHistoryData } = req.body;
            
            // Validate employee data
            const employeeErrors = EmployeeValidator.validateEmployeeData({
                fullName, phoneNumber, gender, hourlyRate, bankAccount, bankName
            });
            
            if (employeeErrors.length > 0) {
                return res.status(400).json(formatResponse(
                    false, 
                    employeeErrors.join(', '), 
                    null, 
                    'VALIDATION_ERROR'
                ));
            }


            // Validate work history
            if (!workHistoryData || workHistoryData.length === 0) {
                return res.status(400).json(formatResponse(
                    false, 
                    'Vui l√≤ng ch·ªçn √≠t nh·∫•t m·ªôt ƒë·ªÅ xu·∫•t tuy·ªÉn d·ª•ng', 
                    null, 
                    'WORK_HISTORY_REQUIRED'
                ));
            }


            // Check for duplicate request numbers
            const requestNos = workHistoryData.map(item => item.requestNo);
            const uniqueRequestNos = [...new Set(requestNos)];
            if (requestNos.length !== uniqueRequestNos.length) {
                return res.status(400).json(formatResponse(
                    false, 
                    'Kh√¥ng ƒë∆∞·ª£c tr√πng l·∫∑p Request No.', 
                    null, 
                    'DUPLICATE_REQUEST_NO'
                ));
            }


            // Generate employee ID
            const employeeId = this.generateEmployeeId(fullName, phoneNumber);
            
            // Check for duplicate employee ID
            const isDuplicate = await larkServiceManager.checkEmployeeIdExists(employeeId);
            if (isDuplicate) {
                return res.status(409).json(formatResponse(
                    false, 
                    'M√£ nh√¢n vi√™n ƒë√£ t·ªìn t·∫°i trong h·ªá th·ªëng', 
                    null, 
                    'DUPLICATE_EMPLOYEE_ID'
                ));
            }
            
            // Prepare employee data
            const employeeData = {
                employeeId,
                fullName,
                phoneNumber,
                gender,
                hourlyRate: parseFloat(hourlyRate),
                bankAccount,
                bankName,
                recruitmentLink: workHistoryData.map(item => item.requestNo).join(', '),
                status: 'active',
                createdAt: new Date().toISOString()
            };


            // Create employee
            const employee = await larkServiceManager.addEmployee(employeeData);
            
            // Add work history entries with duplicate check
            const workHistoryResults = [];
            for (const historyEntry of workHistoryData) {
                // ‚úÖ CHECK DUPLICATE cho t·ª´ng item
                const workHistoryExists = await larkServiceManager.checkWorkHistoryExists(employeeId, historyEntry.requestNo);
                
                if (workHistoryExists) {
                    return res.status(409).json(formatResponse(
                        false, 
                        `Work History ƒë√£ t·ªìn t·∫°i: ${employeeId} - ${historyEntry.requestNo}`, 
                        null, 
                        'DUPLICATE_WORK_HISTORY'
                    ));
                }
                
                // N·∫øu kh√¥ng tr√πng, th√™m work history
                const workHistory = await larkServiceManager.addWorkHistory({
                    employeeId: employeeId,
                    requestNo: historyEntry.requestNo
                });
                workHistoryResults.push(workHistory);
            }

            res.json(formatResponse(true, 'Th√™m nh√¢n vi√™n th√†nh c√¥ng', {
                employee,
                workHistory: workHistoryResults
            }));

            
        } catch (error) {
            console.error('‚ùå Controller: addEmployee failed:', error);
            
            if (error.message.includes('DUPLICATE_EMPLOYEE_ID')) {
                return res.status(409).json(formatResponse(
                    false, 
                    'M√£ nh√¢n vi√™n ƒë√£ t·ªìn t·∫°i trong h·ªá th·ªëng', 
                    null, 
                    'DUPLICATE_EMPLOYEE_ID'
                ));
            }
            
            res.status(500).json(formatResponse(
                false, 
                `L·ªói h·ªá th·ªëng khi th√™m nh√¢n vi√™n: ${error.message}`, 
                null, 
                'EMPLOYEE_ADD_FAILED'
            ));
        }
    }


    /**
     * Update employee
     * @route PUT /api/employees/:id
     */
    async updateEmployee(req, res) {
        try {
            const { id } = req.params;
            const { fullName, phoneNumber, gender, hourlyRate, bankAccount, bankName, recruitmentLink, status } = req.body;
            
            // Generate new employee ID with updated info
            const employeeId = this.generateEmployeeId(fullName, phoneNumber);
            
            const updatedData = {
                employeeId,
                fullName,
                phoneNumber,
                gender,
                hourlyRate: parseFloat(hourlyRate),
                bankAccount,
                bankName,
                recruitmentLink: recruitmentLink || '',
                status,
                updatedAt: new Date().toISOString()
            };
            
            const employee = await larkServiceManager.updateEmployee(id, updatedData);
            
            res.json(formatResponse(true, 'C·∫≠p nh·∫≠t nh√¢n vi√™n th√†nh c√¥ng', { employee }));
            
        } catch (error) {
            console.error('‚ùå Controller: updateEmployee failed:', error);
            res.status(500).json(formatResponse(
                false, 
                `L·ªói khi c·∫≠p nh·∫≠t nh√¢n vi√™n: ${error.message}`, 
                null, 
                'EMPLOYEE_UPDATE_FAILED'
            ));
        }
    }


    /**
     * Delete employee
     * @route DELETE /api/employees/:id
     */
    async deleteEmployee(req, res) {
        try {
            const { id } = req.params;
            await larkServiceManager.deleteEmployee(id);
            res.json(formatResponse(true, 'X√≥a nh√¢n vi√™n th√†nh c√¥ng'));
        } catch (error) {
            console.error('‚ùå Controller: deleteEmployee failed:', error);
            res.status(500).json(formatResponse(
                false, 
                `L·ªói khi x√≥a nh√¢n vi√™n: ${error.message}`, 
                null, 
                'EMPLOYEE_DELETE_FAILED'
            ));
        }
    }


    /**
     * Get employee statistics for dashboard
     * @route GET /api/employees/stats
     */
    async getEmployeeStats(req, res) {
        try {
            const employeeService = larkServiceManager.getService('employee');
            const employees = await employeeService.getAllEmployees();
            
            const stats = {
                totalEmployees: employees.length,
                activeEmployees: employees.filter(emp => emp.status === 'active').length,
                inactiveEmployees: employees.filter(emp => emp.status === 'inactive').length
            };
            
            res.json(formatResponse(true, 'L·∫•y th·ªëng k√™ nh√¢n vi√™n th√†nh c√¥ng', stats));
            
        } catch (error) {
            console.error('‚ùå Controller: getEmployeeStats failed:', error);
            res.status(500).json(formatResponse(
                false, 
                `Kh√¥ng th·ªÉ l·∫•y th·ªëng k√™ nh√¢n vi√™n: ${error.message}`, 
                null, 
                'EMPLOYEE_STATS_LOAD_FAILED'
            ));
        }
    }


    /**
     * Search employees
     * @route GET /api/employees/search
     */
    async searchEmployees(req, res) {
        try {
            const { q } = req.query;
            const employees = await larkServiceManager.searchEmployees(q);
            res.json(formatResponse(true, 'T√¨m ki·∫øm th√†nh c√¥ng', employees));
        } catch (error) {
            console.error('‚ùå Controller: searchEmployees failed:', error);
            res.status(500).json(formatResponse(
                false, 
                `L·ªói khi t√¨m ki·∫øm nh√¢n vi√™n: ${error.message}`, 
                null, 
                'EMPLOYEE_SEARCH_FAILED'
            ));
        }
    }


    /**
     * Get recruitment requests
     * @route GET /api/employees/recruitment-requests
     */
    async getRecruitmentRequests(req, res) {
        try {
            const { status, approvalStatus, requester, department } = req.query;
            
            const filters = {};
            if (status) filters.status = status;
            if (approvalStatus) filters.approvalStatus = approvalStatus;
            if (requester) filters.requester = requester;
            if (department) filters.department = department;
            
            const requests = await larkServiceManager.getRecruitmentRequests(filters);
            res.json(formatResponse(true, 'L·∫•y danh s√°ch y√™u c·∫ßu tuy·ªÉn d·ª•ng th√†nh c√¥ng', requests));
            
        } catch (error) {
            console.error('‚ùå Controller: getRecruitmentRequests failed:', error);
            res.status(500).json(formatResponse(
                false, 
                `Kh√¥ng th·ªÉ t·∫£i y√™u c·∫ßu tuy·ªÉn d·ª•ng: ${error.message}`, 
                null, 
                'RECRUITMENT_LOAD_FAILED'
            ));
        }
    }


    /**
     * Get employee work history
     * @route GET /api/employees/:employeeId/work-history
     */
    async getEmployeeWorkHistory(req, res) {
        try {
            const { employeeId } = req.params;
            const workHistory = await larkServiceManager.getWorkHistoryByEmployee(employeeId);
            res.json(formatResponse(true, 'L·∫•y l·ªãch s·ª≠ l√†m vi·ªác th√†nh c√¥ng', workHistory));
        } catch (error) {
            console.error('‚ùå Controller: getEmployeeWorkHistory failed:', error);
            res.status(500).json(formatResponse(
                false, 
                `L·ªói khi l·∫•y l·ªãch s·ª≠ l√†m vi·ªác: ${error.message}`, 
                null, 
                'WORK_HISTORY_LOAD_FAILED'
            ));
        }
    }


    /**
     * Add work history for employee
     * @route POST /api/employees/work-history
     */
    async addWorkHistory(req, res) {
        try {
            const { employeeId, requestNo } = req.body;
            
            if (!employeeId || !requestNo) {
                return res.status(400).json(formatResponse(
                    false, 
                    'Thi·∫øu th√¥ng tin b·∫Øt bu·ªôc', 
                    null, 
                    'VALIDATION_ERROR'
                ));
            }
            
            const workHistory = await larkServiceManager.addWorkHistory({
                employeeId,
                requestNo
            });
            
            res.json(formatResponse(true, 'Th√™m work history th√†nh c√¥ng', { workHistory }));
            
        } catch (error) {
            console.error('‚ùå Controller: addWorkHistory failed:', error);
            res.status(500).json(formatResponse(
                false, 
                `L·ªói khi th√™m work history: ${error.message}`, 
                null, 
                'WORK_HISTORY_ADD_FAILED'
            ));
        }
    }


    // ==================== STORE MANAGEMENT ====================
    async getStores(req, res) {
        try {
            const stores = await larkServiceManager.getAllStores();
            res.json(formatResponse(true, 'L·∫•y danh s√°ch c·ª≠a h√†ng th√†nh c√¥ng', stores));
        } catch (error) {
            console.error('‚ùå Controller: getStores failed:', error);
            res.status(500).json(formatResponse(
                false, 
                `L·ªói khi t·∫£i danh s√°ch c·ª≠a h√†ng: ${error.message}`, 
                null, 
                'STORE_LOAD_FAILED'
            ));
        }
    }


    async addStore(req, res) {
        try {
            const { storeName, address } = req.body;
            
            if (!storeName || !address) {
                return res.status(400).json(formatResponse(
                    false, 
                    'Thi·∫øu th√¥ng tin b·∫Øt bu·ªôc', 
                    null, 
                    'VALIDATION_ERROR'
                ));
            }


            const store = {
                storeName,
                address,
                status: 'active',
                createdAt: new Date().toISOString()
            };
            
            const result = await larkServiceManager.addStore(store);
            res.json(formatResponse(true, 'Th√™m c·ª≠a h√†ng th√†nh c√¥ng', { store: result }));
            
        } catch (error) {
            console.error('‚ùå Controller: addStore failed:', error);
            res.status(500).json(formatResponse(
                false, 
                `L·ªói khi th√™m c·ª≠a h√†ng: ${error.message}`, 
                null, 
                'STORE_ADD_FAILED'
            ));
        }
    }


    async updateStore(req, res) {
        try {
            const { id } = req.params;
            const updatedData = {
                ...req.body,
                updatedAt: new Date().toISOString()
            };
            
            const result = await larkServiceManager.updateStore(id, updatedData);
            res.json(formatResponse(true, 'C·∫≠p nh·∫≠t c·ª≠a h√†ng th√†nh c√¥ng', { store: result }));
            
        } catch (error) {
            console.error('‚ùå Controller: updateStore failed:', error);
            res.status(500).json(formatResponse(
                false, 
                `L·ªói khi c·∫≠p nh·∫≠t c·ª≠a h√†ng: ${error.message}`, 
                null, 
                'STORE_UPDATE_FAILED'
            ));
        }
    }


    async deleteStore(req, res) {
        try {
            const { id } = req.params;
            await larkServiceManager.deleteStore(id);
            res.json(formatResponse(true, 'X√≥a c·ª≠a h√†ng th√†nh c√¥ng'));
        } catch (error) {
            console.error('‚ùå Controller: deleteStore failed:', error);
            res.status(500).json(formatResponse(
                false, 
                `L·ªói khi x√≥a c·ª≠a h√†ng: ${error.message}`, 
                null, 
                'STORE_DELETE_FAILED'
            ));
        }
    }


    // ==================== POSITION MANAGEMENT ====================
    async getPositions(req, res) {
        try {
            const positions = await larkServiceManager.getAllPositions();
            res.json(formatResponse(true, 'L·∫•y danh s√°ch v·ªã tr√≠ th√†nh c√¥ng', positions));
        } catch (error) {
            console.error('‚ùå Controller: getPositions failed:', error);
            res.status(500).json(formatResponse(
                false, 
                `L·ªói khi t·∫£i danh s√°ch v·ªã tr√≠: ${error.message}`, 
                null, 
                'POSITION_LOAD_FAILED'
            ));
        }
    }


    async addPosition(req, res) {
        try {
            const { positionName, description } = req.body;
            
            if (!positionName) {
                return res.status(400).json(formatResponse(
                    false, 
                    'Thi·∫øu th√¥ng tin b·∫Øt bu·ªôc', 
                    null, 
                    'VALIDATION_ERROR'
                ));
            }


            const position = {
                positionName,
                description: description || '',
                status: 'active',
                createdAt: new Date().toISOString()
            };
            
            const result = await larkServiceManager.addPosition(position);
            res.json(formatResponse(true, 'Th√™m v·ªã tr√≠ th√†nh c√¥ng', { position: result }));
            
        } catch (error) {
            console.error('‚ùå Controller: addPosition failed:', error);
            res.status(500).json(formatResponse(
                false, 
                `L·ªói khi th√™m v·ªã tr√≠: ${error.message}`, 
                null, 
                'POSITION_ADD_FAILED'
            ));
        }
    }


    async updatePosition(req, res) {
        try {
            const { id } = req.params;
            const updatedData = {
                ...req.body,
                updatedAt: new Date().toISOString()
            };
            
            const result = await larkServiceManager.updatePosition(id, updatedData);
            res.json(formatResponse(true, 'C·∫≠p nh·∫≠t v·ªã tr√≠ th√†nh c√¥ng', { position: result }));
            
        } catch (error) {
            console.error('‚ùå Controller: updatePosition failed:', error);
            res.status(500).json(formatResponse(
                false, 
                `L·ªói khi c·∫≠p nh·∫≠t v·ªã tr√≠: ${error.message}`, 
                null, 
                'POSITION_UPDATE_FAILED'
            ));
        }
    }


    async deletePosition(req, res) {
        try {
            const { id } = req.params;
            await larkServiceManager.deletePosition(id);
            res.json(formatResponse(true, 'X√≥a v·ªã tr√≠ th√†nh c√¥ng'));
        } catch (error) {
            console.error('‚ùå Controller: deletePosition failed:', error);
            res.status(500).json(formatResponse(
                false, 
                `L·ªói khi x√≥a v·ªã tr√≠: ${error.message}`, 
                null, 
                'POSITION_DELETE_FAILED'
            ));
        }
    }


    // ==================== HELPER METHODS ====================
    generateEmployeeId(fullName, phoneNumber) {
        return `${fullName} - ${phoneNumber}`;
    }
}


// Export instance methods
const employeeController = new EmployeeController();


export const getAllEmployees = employeeController.getAllEmployees.bind(employeeController);
export const addEmployee = employeeController.addEmployee.bind(employeeController);
export const updateEmployee = employeeController.updateEmployee.bind(employeeController);
export const deleteEmployee = employeeController.deleteEmployee.bind(employeeController);
export const getEmployeeStats = employeeController.getEmployeeStats.bind(employeeController);
export const searchEmployees = employeeController.searchEmployees.bind(employeeController);
export const getRecruitmentRequests = employeeController.getRecruitmentRequests.bind(employeeController);
export const getEmployeeWorkHistory = employeeController.getEmployeeWorkHistory.bind(employeeController);
export const addWorkHistory = employeeController.addWorkHistory.bind(employeeController);


export const getStores = employeeController.getStores.bind(employeeController);
export const addStore = employeeController.addStore.bind(employeeController);
export const updateStore = employeeController.updateStore.bind(employeeController);
export const deleteStore = employeeController.deleteStore.bind(employeeController);


export const getPositions = employeeController.getPositions.bind(employeeController);
export const addPosition = employeeController.addPosition.bind(employeeController);
export const updatePosition = employeeController.updatePosition.bind(employeeController);
export const deletePosition = employeeController.deletePosition.bind(employeeController);


export { EmployeeController };

==============================

üìÅ File: .\server\controllers\recruitmentController.js
------------------------------
üì§ EXPORTS:
   ‚Ä¢ const (d√≤ng 5)

üìÑ N·ªòI DUNG FILE:
==============================
// server/controllers/recruitmentController.js
import larkServiceManager from '../services/lark-service-manager.js';
import { formatResponse } from '../services/utils/response-formatter.js';

export const getRecruitmentRequests = async (req, res) => {
    try {
        const filters = req.query;
        const requests = await larkServiceManager.getRecruitmentRequests(filters);
        res.json(formatResponse(true, 'L·∫•y danh s√°ch ƒë·ªÅ xu·∫•t th√†nh c√¥ng', requests));
    } catch (error) {
        console.error('‚ùå Controller: getRecruitmentRequests failed:', error);
        res.status(500).json(formatResponse(
            false, 
            `L·ªói khi l·∫•y danh s√°ch ƒë·ªÅ xu·∫•t: ${error.message}`, 
            null, 
            'RECRUITMENT_LOAD_FAILED'
        ));
    }
};

==============================

üìÅ File: .\server\middleware\auth.js
------------------------------
üîß FUNCTIONS:
   ‚Ä¢ authenticateUser (d√≤ng 1) - arrow function
   ‚Ä¢ authorizeRoles (d√≤ng 9) - arrow function
üì§ EXPORTS:
   ‚Ä¢ 
    authenticateUser,
    authorizeRoles
 (d√≤ng 18)

üìÑ N·ªòI DUNG FILE:
==============================
const authenticateUser = (req, res, next) => {
    if (!req.session || !req.session.user) {
        return res.status(401).json({ error: 'Unauthorized' });
    }
    req.user = req.session.user;
    next();
};

const authorizeRoles = (...roles) => {
    return (req, res, next) => {
        if (!req.user || !roles.includes(req.user.role)) {
            return res.status(403).json({ error: 'Forbidden' });
        }
        next();
    };
};

export {
    authenticateUser,
    authorizeRoles
};

==============================

üìÅ File: .\server\middleware\validation.js
------------------------------
üèõÔ∏è  CLASSES:
   ‚Ä¢ ValidationMiddleware (d√≤ng 5)
üì§ EXPORTS:
   ‚Ä¢ ValidationMiddleware (d√≤ng 29)

üìÑ N·ªòI DUNG FILE:
==============================
// server/middleware/validation.js (M·ªöI)
//import ResponseFormatter from '../utils/response-formatter.js';
import { formatResponse } from '../services/utils/response-formatter.js';

class ValidationMiddleware {
    static validateEmployee(req, res, next) {
        const { fullName, phoneNumber, gender, hourlyRate, bankAccount, bankName } = req.body;
        
        const errors = [];
        
        if (!fullName || fullName.trim().length < 2) {
            errors.push('H·ªç t√™n ph·∫£i c√≥ √≠t nh·∫•t 2 k√Ω t·ª±');
        }
        
        if (!phoneNumber || !/^\d{10,11}$/.test(phoneNumber)) {
            errors.push('S·ªë ƒëi·ªán tho·∫°i kh√¥ng h·ª£p l·ªá');
        }
        
        if (errors.length > 0) {
            return res.status(400).json(
                formatResponse(false, errors.join(', '), null, 'VALIDATION_ERROR')
            );
        }
        
        next();
    }
}

export default ValidationMiddleware;

==============================

üìÅ File: .\server\routes\attendance.js
------------------------------
üì§ EXPORTS:
   ‚Ä¢ router (d√≤ng 18)

üìÑ N·ªòI DUNG FILE:
==============================
// server/routes/attendance.js
import express from 'express';
import { 
    getAttendanceLogs, 
    addAttendanceLog, 
    getEmployeeHours,
    getAttendanceStats
} from '../controllers/attendanceController.js';
import { authenticateUser } from '../middleware/auth.js';

const router = express.Router();

router.get('/logs', authenticateUser, getAttendanceLogs);
router.post('/logs', authenticateUser, addAttendanceLog);
router.get('/employee-hours', authenticateUser, getEmployeeHours);
router.get('/stats', authenticateUser, getAttendanceStats);  // ‚úÖ Route m·ªõi

export default router;

==============================

üìÅ File: .\server\routes\auth.js
------------------------------
üì§ EXPORTS:
   ‚Ä¢ router (d√≤ng 11)

üìÑ N·ªòI DUNG FILE:
==============================
import express from 'express';
import { login, logout, getProfile } from '../controllers/authController.js';
import { authenticateUser } from '../middleware/auth.js';

const router = express.Router();

router.post('/login', login);
router.post('/logout', logout);
router.get('/profile', authenticateUser, getProfile);

export default router;

==============================

üìÅ File: .\server\routes\employees.js
------------------------------
üì§ EXPORTS:
   ‚Ä¢ router (d√≤ng 70)

üìÑ N·ªòI DUNG FILE:
==============================
// server/routes/employees.js
import express from 'express';
import { 
    getAllEmployees, 
    addEmployee, 
    updateEmployee, 
    deleteEmployee, 
    getEmployeeStats, 
    searchEmployees, 
    getRecruitmentRequests, 
    getEmployeeWorkHistory, 
    addWorkHistory, 
    getStores, 
    addStore, 
    updateStore, 
    deleteStore, 
    getPositions, 
    addPosition, 
    updatePosition, 
    deletePosition 
} from '../controllers/employeeController.js';
import { authenticateUser, authorizeRoles } from '../middleware/auth.js';

const router = express.Router();

// ==================== EMPLOYEE ROUTES ====================
// GET routes should come before parameterized routes
router.get('/stats', authenticateUser, getEmployeeStats);
router.get('/search', authenticateUser, searchEmployees);
router.get('/', authenticateUser, getAllEmployees);

// Employee CRUD operations
router.post('/', authenticateUser, authorizeRoles('hr', 'admin'), addEmployee);
router.put('/:id', authenticateUser, authorizeRoles('hr', 'admin'), updateEmployee);
router.delete('/:id', authenticateUser, authorizeRoles('hr', 'admin'), deleteEmployee);

// ==================== WORK HISTORY ROUTES ====================
// Work history routes - S·ª¨A ƒê·ªÇ T∆Ø∆†NG TH√çCH V·ªöI CLIENT
router.get('/:employeeId/work-history', authenticateUser, getEmployeeWorkHistory);
router.post('/work-history', authenticateUser, authorizeRoles('hr', 'admin'), addWorkHistory);

// ==================== RECRUITMENT ROUTES ====================
// Recruitment requests route - moved up to avoid conflicts
router.get('/recruitment-requests', authenticateUser, getRecruitmentRequests);

// ==================== STORE ROUTES ====================
// Store management routes
router.get('/stores', authenticateUser, getStores);
router.post('/stores', authenticateUser, authorizeRoles('hr', 'admin'), addStore);
router.put('/stores/:id', authenticateUser, authorizeRoles('hr', 'admin'), updateStore);
router.delete('/stores/:id', authenticateUser, authorizeRoles('hr', 'admin'), deleteStore);

// ==================== POSITION ROUTES ====================
// Position management routes
router.get('/positions', authenticateUser, getPositions);
router.post('/positions', authenticateUser, authorizeRoles('hr', 'admin'), addPosition);
router.put('/positions/:id', authenticateUser, authorizeRoles('hr', 'admin'), updatePosition);
router.delete('/positions/:id', authenticateUser, authorizeRoles('hr', 'admin'), deletePosition);

// ==================== ERROR HANDLING ====================
// Handle 404 for unmatched routes
router.use('*', (req, res) => {
    res.status(404).json({
        success: false,
        error: 'Route not found',
        path: req.originalUrl
    });
});

export default router;

==============================

üìÅ File: .\server\routes\recruitment.js
------------------------------
üì§ EXPORTS:
   ‚Ä¢ router (d√≤ng 10)

üìÑ N·ªòI DUNG FILE:
==============================
// server/routes/recruitment.js
import express from 'express';
import { getRecruitmentRequests } from '../controllers/recruitmentController.js';
import { authenticateUser } from '../middleware/auth.js';

const router = express.Router();

router.get('/', authenticateUser, getRecruitmentRequests);

export default router;

==============================

üìÅ File: .\server\services\index.js
------------------------------
üì§ EXPORTS:
   ‚Ä¢ file (d√≤ng 1)
   ‚Ä¢  default as ServiceFactory  (d√≤ng 11)

üìÑ N·ªòI DUNG FILE:
==============================
// Main services export file
export * from './core/index.js';
export * from './auth/index.js';
export * from './employee/index.js';
export * from './attendance/index.js';
export * from './recruitment/index.js';
export * from './master-data/index.js';
export * from './utils/index.js';

// Export service factory for easy access
export { default as ServiceFactory } from './utils/service-factory.js';

==============================

üìÅ File: .\server\services\lark-service-manager.js
------------------------------
üèõÔ∏è  CLASSES:
   ‚Ä¢ LarkServiceManager (d√≤ng 9)
üì§ EXPORTS:
   ‚Ä¢ new (d√≤ng 202)

üìÑ N·ªòI DUNG FILE:
==============================
// server/services/lark-service-manager.js
import { EmployeeService, WorkHistoryService } from './employees/index.js';
import { AttendanceService } from './attendance/index.js';
import { RecruitmentService } from './recruitment/index.js';
import { StoreService, PositionService } from './master-data/index.js';
import { AuthService, SessionService } from './auth/index.js';
import { validateLarkConfig } from '../config/lark-config.js';

class LarkServiceManager {
    constructor() {
        this.services = {};
        this.initialized = false;
    }

    async init() {
        if (this.initialized) return;

        try {
            console.log('üöÄ Initializing Lark Service Manager...');
            
            // Validate configuration first
            validateLarkConfig();
            
            // Initialize all services
            this.services.employee = new EmployeeService();
            this.services.workHistory = new WorkHistoryService();
            this.services.attendance = new AttendanceService();
            this.services.recruitment = new RecruitmentService();
            this.services.store = new StoreService();
            this.services.position = new PositionService();
            this.services.auth = new AuthService();
            this.services.session = new SessionService();

            // Initialize each service
            await Promise.all([
                this.services.employee.init(),
                this.services.workHistory.init(),
                this.services.attendance.init(),
                this.services.recruitment.init(),
                this.services.store.init(),
                this.services.position.init(),
                this.services.auth.init(),
                this.services.session.init()
            ]);

            this.initialized = true;
            console.log('‚úÖ All Lark services initialized successfully');
            
        } catch (error) {
            console.error('‚ùå Lark Service Manager initialization failed:', error);
            throw new Error(`Service Manager initialization failed: ${error.message}`);
        }
    }

    async ensureInitialized() {
        if (!this.initialized) {
            await this.init();
        }
    }

    // Get specific service for advanced operations
    getService(serviceName) {
        if (!this.services[serviceName]) {
            throw new Error(`Service '${serviceName}' not found. Available services: ${Object.keys(this.services).join(', ')}`);
        }
        return this.services[serviceName];
    }

    // ==================== EMPLOYEE METHODS ====================
    async getAllEmployees() {
        await this.ensureInitialized();
        return await this.services.employee.getAllEmployees();
    }

    async addEmployee(employeeData) {
        await this.ensureInitialized();
        return await this.services.employee.addEmployee(employeeData);
    }

    async updateEmployee(id, employeeData) {
        await this.ensureInitialized();
        return await this.services.employee.updateEmployee(id, employeeData);
    }

    async deleteEmployee(id) {
        await this.ensureInitialized();
        return await this.services.employee.deleteEmployee(id);
    }

    async checkEmployeeIdExists(employeeId) {
        await this.ensureInitialized();
        return await this.services.employee.checkEmployeeIdExists(employeeId);
    }

    async searchEmployees(query) {
        await this.ensureInitialized();
        return await this.services.employee.searchEmployees(query);
    }

    // ==================== WORK HISTORY METHODS ====================
    async getWorkHistoryByEmployee(employeeId) {
        await this.ensureInitialized();
        return await this.services.workHistory.getWorkHistoryByEmployee(employeeId);
    }

    async addWorkHistory(workHistoryData) {
        await this.ensureInitialized();
        return await this.services.workHistory.addWorkHistory(workHistoryData);
    }

    async checkWorkHistoryExists(employeeId, requestNo) {
        await this.ensureInitialized();
        return await this.services.workHistory.checkWorkHistoryExists(employeeId, requestNo);
    }
    
    // ==================== ATTENDANCE METHODS ====================
    async getAttendanceLogs(filters = {}) {
        await this.ensureInitialized();
        return await this.services.attendance.getAttendanceLogs(filters);
    }

    async addAttendanceLog(attendanceData) {
        await this.ensureInitialized();
        return await this.services.attendance.addAttendanceLog(attendanceData);
    }

    async getEmployeeHours() {
        await this.ensureInitialized();
        return await this.services.attendance.getEmployeeHours();
    }

    // ==================== RECRUITMENT METHODS ====================
    async getRecruitmentRequests(filters = {}) {
        await this.ensureInitialized();
        return await this.services.recruitment.getRecruitmentRequests(filters);
    }

    async addRecruitmentRequest(requestData) {
        await this.ensureInitialized();
        return await this.services.recruitment.addRecruitmentRequest(requestData);
    }

    // ==================== STORE METHODS ====================
    async getAllStores() {
        await this.ensureInitialized();
        return await this.services.store.getAllStores();
    }

    async addStore(storeData) {
        await this.ensureInitialized();
        return await this.services.store.addStore(storeData);
    }

    async updateStore(id, storeData) {
        await this.ensureInitialized();
        return await this.services.store.updateStore(id, storeData);
    }

    async deleteStore(id) {
        await this.ensureInitialized();
        return await this.services.store.deleteStore(id);
    }

    // ==================== POSITION METHODS ====================
    async getAllPositions() {
        await this.ensureInitialized();
        return await this.services.position.getAllPositions();
    }

    async addPosition(positionData) {
        await this.ensureInitialized();
        return await this.services.position.addPosition(positionData);
    }

    async updatePosition(id, positionData) {
        await this.ensureInitialized();
        return await this.services.position.updatePosition(id, positionData);
    }

    async deletePosition(id) {
        await this.ensureInitialized();
        return await this.services.position.deletePosition(id);
    }

    // ==================== RECRUITMENT METHODS ====================
    async getRecruitmentRequests(filters = {}) {
        await this.ensureInitialized();
        return await this.services.recruitment.getRecruitmentRequests(filters);
    }

    async addRecruitmentRequest(requestData) {
        await this.ensureInitialized();
        return await this.services.recruitment.addRecruitmentRequest(requestData);
    }

    async updateRecruitmentRequest(id, requestData) {
        await this.ensureInitialized();
        return await this.services.recruitment.updateRecruitmentRequest(id, requestData);
    }
}

export default new LarkServiceManager();

==============================

üìÅ File: .\server\services\attendance\attendance-service.js
------------------------------
üèõÔ∏è  CLASSES:
   ‚Ä¢ AttendanceService (d√≤ng 6)
üì§ EXPORTS:
   ‚Ä¢ AttendanceService (d√≤ng 155)

üìÑ N·ªòI DUNG FILE:
==============================
// Attendance service
import BaseService from '../core/base-service.js';
import LarkClient from '../core/lark-client.js';
import CacheService from '../core/cache-service.js';

class AttendanceService extends BaseService {
    constructor() {
        super();
        this.baseId = process.env.LARK_BASE_ID;
        this.tableId = process.env.LARK_ATTENDANCE_TABLE_ID;
    }

    async initializeService() {
        console.log('Initializing Attendance Service...');
    }

    async getAttendanceLogs(filters = {}) {
        const cacheKey = `attendance_logs_${JSON.stringify(filters)}`;
        let logs = CacheService.get(cacheKey);
        
        if (!logs) {
            try {
                let filterString = '';
                if (filters.employeeId) {
                    filterString = `AND(CurrentValue.[Employee ID] = "${filters.employeeId}")`;
                }
                
                const response = await LarkClient.get(`/bitable/v1/apps/${this.baseId}/tables/${this.tableId}/records`, {
                    filter: filterString
                });

                logs = this.transformAttendanceData(response.data?.items || []);
                
                // Apply date filters if provided
                if (filters.dateFrom || filters.dateTo) {
                    logs = this.filterByDateRange(logs, filters.dateFrom, filters.dateTo);
                }
                
                CacheService.set(cacheKey, logs, 300000); // 5 minutes
            } catch (error) {
                console.error('Error fetching attendance logs:', error);
                logs = this.getMockAttendanceLogs();
            }
        }
        
        return logs;
    }

    async addAttendanceLog(attendanceData) {
        try {
            const transformedData = this.transformAttendanceForLark(attendanceData);
            
            const response = await LarkClient.post(`/bitable/v1/apps/${this.baseId}/tables/${this.tableId}/records`, {
                fields: transformedData
            });

            // Clear cache
            CacheService.clear();
            
            return this.transformAttendanceData([response.data])[0];
        } catch (error) {
            await this.handleError(error, 'addAttendanceLog');
            throw error;
        }
    }

    async getEmployeeHours() {
        const logs = await this.getAttendanceLogs();
        const employeeHours = {};
        
        logs.forEach(log => {
            if (!employeeHours[log.employeeId]) {
                employeeHours[log.employeeId] = {
                    totalHours: 0,
                    totalDays: 0
                };
            }
            
            employeeHours[log.employeeId].totalHours += log.totalHours || 0;
            employeeHours[log.employeeId].totalDays += 1;
        });
        
        return employeeHours;
    }

    filterByDateRange(logs, dateFrom, dateTo) {
        return logs.filter(log => {
            const logDate = new Date(log.date);
            const fromDate = dateFrom ? new Date(dateFrom) : null;
            const toDate = dateTo ? new Date(dateTo) : null;
            
            if (fromDate && logDate < fromDate) return false;
            if (toDate && logDate > toDate) return false;
            
            return true;
        });
    }

    calculateTotalHours(timeIn, timeOut) {
        if (!timeIn || !timeOut) return 0;
        
        const inTime = new Date(`1970-01-01T${timeIn}`);
        const outTime = new Date(`1970-01-01T${timeOut}`);
        
        const diffMs = outTime - inTime;
        return Math.max(0, diffMs / (1000 * 60 * 60)); // Convert to hours
    }

    transformAttendanceData(larkData) {
        return larkData.map(record => {
            const timeIn = record.fields['Time In'] || '';
            const timeOut = record.fields['Time Out'] || '';
            const totalHours = this.calculateTotalHours(timeIn, timeOut);
            
            return {
                id: record.record_id,
                employeeId: record.fields['Employee ID'] || '',
                date: record.fields['Date'] || '',
                timeIn: timeIn,
                timeOut: timeOut,
                totalHours: totalHours,
                notes: record.fields['Notes'] || '',
                createdAt: record.fields['Created At'] || new Date().toISOString()
            };
        });
    }

    transformAttendanceForLark(attendanceData) {
        return {
            'Employee ID': attendanceData.employeeId,
            'Date': attendanceData.date,
            'Time In': attendanceData.timeIn,
            'Time Out': attendanceData.timeOut,
            'Notes': attendanceData.notes || '',
            'Created At': new Date().toISOString()
        };
    }

    getMockAttendanceLogs() {
        return [
            {
                id: 'att_001',
                employeeId: 'Nguy·ªÖn VƒÉn A - 0123456789',
                date: '2025-01-15',
                timeIn: '08:00',
                timeOut: '17:00',
                totalHours: 8,
                notes: 'L√†m vi·ªác b√¨nh th∆∞·ªùng',
                createdAt: new Date().toISOString()
            }
        ];
    }
}

export default AttendanceService;

==============================

üìÅ File: .\server\services\attendance\attendance-validator.js
------------------------------
üèõÔ∏è  CLASSES:
   ‚Ä¢ AttendanceValidator (d√≤ng 2)
üì§ EXPORTS:
   ‚Ä¢ AttendanceValidator (d√≤ng 56)

üìÑ N·ªòI DUNG FILE:
==============================
// Attendance validation service
class AttendanceValidator {
    static validateAttendanceData(attendanceData) {
        const errors = [];

        // Required fields validation
        if (!attendanceData.employeeId) {
            errors.push('Employee ID l√† b·∫Øt bu·ªôc');
        }

        if (!attendanceData.date) {
            errors.push('Ng√†y l√† b·∫Øt bu·ªôc');
        } else if (!this.isValidDate(attendanceData.date)) {
            errors.push('Ng√†y kh√¥ng h·ª£p l·ªá');
        }

        if (!attendanceData.timeIn) {
            errors.push('Th·ªùi gian v√†o l√† b·∫Øt bu·ªôc');
        } else if (!this.isValidTime(attendanceData.timeIn)) {
            errors.push('Th·ªùi gian v√†o kh√¥ng h·ª£p l·ªá');
        }

        if (!attendanceData.timeOut) {
            errors.push('Th·ªùi gian ra l√† b·∫Øt bu·ªôc');
        } else if (!this.isValidTime(attendanceData.timeOut)) {
            errors.push('Th·ªùi gian ra kh√¥ng h·ª£p l·ªá');
        }

        // Check if time out is after time in
        if (attendanceData.timeIn && attendanceData.timeOut) {
            if (!this.isTimeOutAfterTimeIn(attendanceData.timeIn, attendanceData.timeOut)) {
                errors.push('Th·ªùi gian ra ph·∫£i sau th·ªùi gian v√†o');
            }
        }

        return errors;
    }

    static isValidDate(dateString) {
        const date = new Date(dateString);
        return date instanceof Date && !isNaN(date);
    }

    static isValidTime(timeString) {
        const timeRegex = /^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$/;
        return timeRegex.test(timeString);
    }

    static isTimeOutAfterTimeIn(timeIn, timeOut) {
        const inTime = new Date(`1970-01-01T${timeIn}`);
        const outTime = new Date(`1970-01-01T${timeOut}`);
        return outTime > inTime;
    }
}

export default AttendanceValidator;

==============================

üìÅ File: .\server\services\attendance\index.js
------------------------------
üì§ EXPORTS:
   ‚Ä¢  default as AttendanceService  (d√≤ng 2)
   ‚Ä¢  default as AttendanceValidator  (d√≤ng 3)

üìÑ N·ªòI DUNG FILE:
==============================
// Attendance services exports
export { default as AttendanceService } from './attendance-service.js';
export { default as AttendanceValidator } from './attendance-validator.js';

==============================

üìÅ File: .\server\services\auth\auth-service.js
------------------------------
üèõÔ∏è  CLASSES:
   ‚Ä¢ AuthService (d√≤ng 5)
üì§ EXPORTS:
   ‚Ä¢ AuthService (d√≤ng 66)

üìÑ N·ªòI DUNG FILE:
==============================
// Authentication service
import BaseService from '../core/base-service.js';
import { users } from '../../config/database.js';

class AuthService extends BaseService {
    constructor() {
        super();
        this.activeSessions = new Map();
    }

    async validateCredentials(username, password) {
        const user = users[username];
        if (!user || user.password !== password) {
            throw new Error('Invalid credentials');
        }
        return user;
    }

    createSession(user) {
        const sessionData = {
            id: user.id,
            username: user.username,
            role: user.role,
            fullName: user.fullName,
            loginTime: new Date().toISOString()
        };
        
        this.activeSessions.set(user.id, sessionData);
        return sessionData;
    }

    validateSession(sessionId) {
        return this.activeSessions.get(sessionId);
    }

    destroySession(sessionId) {
        return this.activeSessions.delete(sessionId);
    }

    async login(credentials) {
        const { username, password } = credentials;
        
        const user = await this.validateCredentials(username, password);
        const sessionData = this.createSession(user);
        
        return {
            success: true,
            user: sessionData,
            message: 'Login successful'
        };
    }

    async logout(sessionId) {
        const destroyed = this.destroySession(sessionId);
        return {
            success: destroyed,
            message: destroyed ? 'Logout successful' : 'Session not found'
        };
    }

    getActiveUsers() {
        return Array.from(this.activeSessions.values());
    }
}

export default AuthService;

==============================

üìÅ File: .\server\services\auth\index.js
------------------------------
üì§ EXPORTS:
   ‚Ä¢  default as AuthService  (d√≤ng 2)
   ‚Ä¢  default as SessionService  (d√≤ng 3)

üìÑ N·ªòI DUNG FILE:
==============================
// Auth services exports
export { default as AuthService } from './auth-service.js';
export { default as SessionService } from './session-service.js';

==============================

üìÅ File: .\server\services\auth\session-service.js
------------------------------
üèõÔ∏è  CLASSES:
   ‚Ä¢ SessionService (d√≤ng 4)
üì§ EXPORTS:
   ‚Ä¢ SessionService (d√≤ng 69)

üìÑ N·ªòI DUNG FILE:
==============================
// Session management service
import BaseService from '../core/base-service.js';

class SessionService extends BaseService {
    constructor() {
        super();
        this.sessions = new Map();
        this.sessionTimeout = 24 * 60 * 60 * 1000; // 24 hours
    }

    createSession(user, req) {
        const sessionId = this.generateId('sess_');
        const sessionData = {
            id: sessionId,
            userId: user.id,
            user: user,
            createdAt: new Date().toISOString(),
            lastAccessed: new Date().toISOString(),
            ipAddress: req.ip || req.connection.remoteAddress,
            userAgent: req.get('User-Agent')
        };

        this.sessions.set(sessionId, sessionData);
        return sessionData;
    }

    getSession(sessionId) {
        const session = this.sessions.get(sessionId);
        if (!session) return null;

        // Check if session is expired
        const now = Date.now();
        const lastAccessed = new Date(session.lastAccessed).getTime();
        if (now - lastAccessed > this.sessionTimeout) {
            this.destroySession(sessionId);
            return null;
        }

        // Update last accessed
        session.lastAccessed = new Date().toISOString();
        this.sessions.set(sessionId, session);
        
        return session;
    }

    destroySession(sessionId) {
        return this.sessions.delete(sessionId);
    }

    cleanupExpiredSessions() {
        const now = Date.now();
        for (const [sessionId, session] of this.sessions.entries()) {
            const lastAccessed = new Date(session.lastAccessed).getTime();
            if (now - lastAccessed > this.sessionTimeout) {
                this.destroySession(sessionId);
            }
        }
    }

    getActiveSessions() {
        return Array.from(this.sessions.values());
    }

    getUserSessions(userId) {
        return Array.from(this.sessions.values()).filter(session => session.userId === userId);
    }
}

export default SessionService;

==============================

üìÅ File: .\server\services\core\base-service.js
------------------------------
üèõÔ∏è  CLASSES:
   ‚Ä¢ for (d√≤ng 1)
   ‚Ä¢ BaseService (d√≤ng 4)
üì§ EXPORTS:
   ‚Ä¢ class (d√≤ng 4)

üìÑ N·ªòI DUNG FILE:
==============================
// Abstract base class for all services
import { formatResponse } from '../utils/response-formatter.js';

export default class BaseService {
    constructor() {
        this.initialized = false;
        this.cache = new Map();
    }

    async init() {
        if (!this.initialized) {
            await this.initializeService();
            this.initialized = true;
        }
    }

    async initializeService() {
        // Override in subclasses
    }

    formatResponse(success, message, data = null, errorCode = null) {
        return formatResponse(success, message, data, errorCode);
    }

    validateRequired(data, fields) {
        const errors = [];
        fields.forEach(field => {
            if (!data[field]) {
                errors.push(`${field} l√† b·∫Øt bu·ªôc`);
            }
        });
        return errors;
    }

    generateId(prefix = '') {
        return `${prefix}${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
    }

    async handleError(error, operation) {
        console.error(`Error in ${operation}:`, error);
        throw error;
    }
}

==============================

üìÅ File: .\server\services\core\cache-service.js
------------------------------
üèõÔ∏è  CLASSES:
   ‚Ä¢ CacheService (d√≤ng 2)
üì§ EXPORTS:
   ‚Ä¢ new (d√≤ng 55)

üìÑ N·ªòI DUNG FILE:
==============================
// server/services/core/cache-service.js
class CacheService {
    constructor() {
        this.cache = new Map();
        this.ttl = new Map();
    }

    set(key, value, ttlMs = 300000) { // 5 minutes default
        this.cache.set(key, value);
        this.ttl.set(key, Date.now() + ttlMs);
    }

    get(key) {
        const expiry = this.ttl.get(key);
        if (expiry && Date.now() > expiry) {
            this.delete(key);
            return null;
        }
        return this.cache.get(key);
    }

    delete(key) {
        this.cache.delete(key);
        this.ttl.delete(key);
    }

    clear() {
        this.cache.clear();
        this.ttl.clear();
    }

    has(key) {
        const expiry = this.ttl.get(key);
        if (expiry && Date.now() > expiry) {
            this.delete(key);
            return false;
        }
        return this.cache.has(key);
    }

    size() {
        return this.cache.size;
    }

    cleanup() {
        const now = Date.now();
        for (const [key, expiry] of this.ttl.entries()) {
            if (now > expiry) {
                this.delete(key);
            }
        }
    }
}

export default new CacheService();

==============================

üìÅ File: .\server\services\core\index.js
------------------------------
üì§ EXPORTS:
   ‚Ä¢  default as BaseService  (d√≤ng 2)
   ‚Ä¢  default as LarkClient  (d√≤ng 3)
   ‚Ä¢  default as CacheService  (d√≤ng 4)

üìÑ N·ªòI DUNG FILE:
==============================
// Core services exports
export { default as BaseService } from './base-service.js';
export { default as LarkClient } from './lark-client.js';
export { default as CacheService } from './cache-service.js';

==============================

üìÅ File: .\server\services\core\lark-client.js
------------------------------
üèõÔ∏è  CLASSES:
   ‚Ä¢ LarkClient (d√≤ng 4)
üì§ EXPORTS:
   ‚Ä¢ new (d√≤ng 132)

üìÑ N·ªòI DUNG FILE:
==============================
// server/services/core/lark-client.js
import axios from 'axios';

class LarkClient {
    constructor() {
        // Kh√¥ng load env vars t·∫°i constructor
        this.baseURL = 'https://open.larksuite.com/open-apis';
        this.tenantAccessToken = null;
        this.tokenExpiry = null;
    }

    // Getter methods ƒë·ªÉ load env vars khi c·∫ßn
    get appId() {
        return process.env.LARK_APP_ID;
    }

    get appSecret() {
        return process.env.LARK_APP_SECRET;
    }

    async getTenantAccessToken() {
        console.log('üîë Getting tenant access token...');
        
        // Debug environment variables khi th·ª±c s·ª± s·ª≠ d·ª•ng
        console.log('üîç DEBUG Lark Credentials:');
        console.log('App ID:', this.appId ? `${this.appId.substring(0, 8)}...` : 'Missing');
        console.log('App Secret:', this.appSecret ? `${this.appSecret.substring(0, 8)}...` : 'Missing');
        
        if (!this.appId || !this.appSecret) {
            throw new Error('Lark credentials not configured properly');
        }
        
        if (this.tenantAccessToken && this.tokenExpiry > Date.now()) {
            console.log('‚úÖ Using cached access token');
            return this.tenantAccessToken;
        }

        try {
            console.log('üì° Requesting new access token from Lark...');
            const payload = {
                app_id: this.appId,
                app_secret: this.appSecret
            };
            
            console.log('üöÄ Sending request to:', `${this.baseURL}/auth/v3/tenant_access_token/internal`);
            console.log('üì¶ Payload keys:', Object.keys(payload));
            
            const response = await axios.post(`${this.baseURL}/auth/v3/tenant_access_token/internal`, payload);
            
            console.log('üì® Lark auth response:', {
                status: response.status,
                code: response.data.code,
                msg: response.data.msg
            });

            if (response.data.code === 0) {
                this.tenantAccessToken = response.data.tenant_access_token;
                this.tokenExpiry = Date.now() + (response.data.expire - 300) * 1000;
                console.log('‚úÖ Access token obtained successfully');
                console.log('Token expires in:', Math.floor((this.tokenExpiry - Date.now()) / 1000), 'seconds');
                return this.tenantAccessToken;
            } else {
                console.error('‚ùå Lark auth error:', response.data);
                throw new Error(`Lark Auth Error: ${response.data.msg}`);
            }
        } catch (error) {
            console.error('‚ùå Error getting tenant access token:', {
                message: error.message,
                response: error.response?.data,
                status: error.response?.status
            });
            throw error;
        }
    }

    async request(endpoint, options = {}) {
        console.log(`üìû Making Lark API request: ${options.method || 'GET'} ${endpoint}`);
        
        const token = await this.getTenantAccessToken();
        
        const config = {
            ...options,
            headers: {
                'Authorization': `Bearer ${token}`,
                'Content-Type': 'application/json',
                ...options.headers
            }
        };

        try {
            console.log('üîÑ Sending request to:', `${this.baseURL}${endpoint}`);
            const response = await axios(`${this.baseURL}${endpoint}`, config);
            
            console.log('‚úÖ Lark API response:', {
                status: response.status,
                dataLength: response.data ? JSON.stringify(response.data).length : 0
            });
            
            return response.data;
        } catch (error) {
            console.error('‚ùå Lark API Error:', {
                endpoint,
                status: error.response?.status,
                data: error.response?.data,
                message: error.message
            });
            throw error;
        }
    }

    async get(endpoint, params = {}) {
        console.log('üì• GET request:', endpoint, params);
        return this.request(endpoint, { method: 'GET', params });
    }

    async post(endpoint, data = {}) {
        console.log('üì§ POST request:', endpoint, { dataKeys: Object.keys(data) });
        return this.request(endpoint, { method: 'POST', data });
    }

    async put(endpoint, data = {}) {
        console.log('üìù PUT request:', endpoint, { dataKeys: Object.keys(data) });
        return this.request(endpoint, { method: 'PUT', data });
    }

    async delete(endpoint) {
        console.log('üóëÔ∏è DELETE request:', endpoint);
        return this.request(endpoint, { method: 'DELETE' });
    }
}

export default new LarkClient();

==============================

üìÅ File: .\server\services\employees\employee-service.js
------------------------------
üèõÔ∏è  CLASSES:
   ‚Ä¢ EmployeeService (d√≤ng 6)
üì§ EXPORTS:
   ‚Ä¢ EmployeeService (d√≤ng 259)

üìÑ N·ªòI DUNG FILE:
==============================
// Employee management service
import BaseService from '../core/base-service.js';
import LarkClient from '../core/lark-client.js';
import CacheService from '../core/cache-service.js';

class EmployeeService extends BaseService {
    constructor() {
        super();
        this.tableName = 'employees';
        this.baseId = process.env.LARK_BASE_ID;
        this.tableId = process.env.LARK_EMPLOYEE_TABLE_ID;
    }

    async initializeService() {
        // Initialize Lark Base connection
        console.log('Initializing Employee Service...');
    }

    // Th√™m v√†o ƒë·∫ßu method getAllEmployees
    async getAllEmployees() {
        console.log('\nüë• EMPLOYEE SERVICE: getAllEmployees called');
        
        const cacheKey = 'employees_all';
        let employees = CacheService.get(cacheKey);
        
        if (employees) {
            console.log('‚úÖ Using cached employees data:', employees.length, 'records');
            console.log('üîç SERVICE: Cached data sample:', employees[0]);
            return employees;
        }
        
        console.log('üì° SERVICE: Fetching employees from Lark API...');
        console.log('üîç SERVICE: Base ID:', this.baseId);
        console.log('üîç SERVICE: Table ID:', this.tableId);
        
        try {
            const response = await LarkClient.get(`/bitable/v1/apps/${this.baseId}/tables/${this.tableId}/records`);
            
            // üö® DEBUG: In ra response t·ª´ Lark API
            console.log('üîç SERVICE: Raw Lark response:', response);
            console.log('üîç SERVICE: Response.data:', response.data);
            console.log('üîç SERVICE: Response.data.items:', response.data?.items);
            
            if (response.data?.items && Array.isArray(response.data.items)) {
                console.log('üîç SERVICE: Items count:', response.data.items.length);
                if (response.data.items.length > 0) {
                    console.log('üîç SERVICE: First raw item:', response.data.items[0]);
                    console.log('üîç SERVICE: First item fields:', response.data.items[0].fields);
                }
            }
            
            employees = this.transformEmployeeData(response.data?.items || []);
            
            // üö® DEBUG: In ra d·ªØ li·ªáu sau khi transform
            console.log('üîç SERVICE: Transformed employees:', employees);
            console.log('‚úÖ SERVICE: Employees transformed:', employees.length, 'records');
            
            if (employees.length > 0) {
                console.log('üîç SERVICE: First transformed employee:', employees[0]);
            }
            
            CacheService.set(cacheKey, employees, 300000);
            console.log('üíæ SERVICE: Employees cached successfully');
            
        } catch (error) {
            console.error('‚ùå SERVICE: Error fetching employees from Lark:', error);
            console.log('üîÑ SERVICE: Using mock data fallback...');
            employees = this.getMockEmployees();
        }
        
        return employees;
    }

    async addEmployee(employeeData) {
        try {
            const transformedData = this.transformEmployeeForLark(employeeData);
            
            console.log('üì§ EMPLOYEE SERVICE: Sending data to Lark:', transformedData);
            console.log('üîç EMPLOYEE SERVICE: Base ID:', this.baseId);
            console.log('üîç EMPLOYEE SERVICE: Table ID:', this.tableId);
            console.log('üîç EMPLOYEE SERVICE: URL will be:', `/bitable/v1/apps/${this.baseId}/tables/${this.tableId}/records`);
            
            const response = await LarkClient.post(`/bitable/v1/apps/${this.baseId}/tables/${this.tableId}/records`, {
                fields: transformedData
            });

            console.log('üì• EMPLOYEE SERVICE: Raw Lark response:', response);
            console.log('üì• EMPLOYEE SERVICE: Response status:', response?.status);
            console.log('üì• EMPLOYEE SERVICE: Response data:', response?.data);

            // Clear cache
            CacheService.delete('employees_all');
            
            return {
                success: true,
                employeeId: employeeData.employeeId,
                larkResponse: response  // ‚úÖ TH√äM: Debug response
            };
            
        } catch (error) {
            console.error('‚ùå EMPLOYEE SERVICE: Full error:', error);
            console.error('‚ùå EMPLOYEE SERVICE: Error message:', error.message);
            console.error('‚ùå EMPLOYEE SERVICE: Error stack:', error.stack);
            await this.handleError(error, 'addEmployee');
            throw error;
        }
    }



    async updateEmployee(id, employeeData) {
        try {
            const transformedData = this.transformEmployeeForLark(employeeData);
            
            const response = await LarkClient.put(`/bitable/v1/apps/${this.baseId}/tables/${this.tableId}/records/${id}`, {
                fields: transformedData
            });

            // Clear cache
            CacheService.delete('employees_all');
            
            return this.transformEmployeeData([response.data])[0];
        } catch (error) {
            await this.handleError(error, 'updateEmployee');
            throw error;
        }
    }

    async deleteEmployee(id) {
        try {
            await LarkClient.delete(`/bitable/v1/apps/${this.baseId}/tables/${this.tableId}/records/${id}`);
            
            // Clear cache
            CacheService.delete('employees_all');
            
            return true;
        } catch (error) {
            await this.handleError(error, 'deleteEmployee');
            throw error;
        }
    }

    async checkEmployeeIdExists(employeeId) {
        const employees = await this.getAllEmployees();
        return employees.some(emp => emp.employeeId === employeeId);
    }

    async searchEmployees(query) {
        const employees = await this.getAllEmployees();
        
        if (!query) return employees;
        
        const searchTerm = query.toLowerCase();
        return employees.filter(emp => 
            emp.fullName.toLowerCase().includes(searchTerm) ||
            emp.employeeId.toLowerCase().includes(searchTerm) ||
            emp.phoneNumber.includes(searchTerm)
        );
    }

    //generateEmployeeId(fullName, phoneNumber) {
    //    return `${fullName} - ${phoneNumber}`;
    //}

    transformEmployeeData(larkData) {
        console.log('üîÑ SERVICE: Starting transform with data:', larkData);
        console.log('üîç SERVICE: LarkData length:', larkData?.length || 0);
        
        if (!Array.isArray(larkData)) {
            console.warn('‚ö†Ô∏è SERVICE: larkData is not an array:', typeof larkData);
            return [];
        }
        
        const transformed = larkData.map((record, index) => {
            console.log(`\nüîç SERVICE: Transforming record ${index}:`);
            console.log('üîç SERVICE: Record structure:', {
                record_id: record.record_id,
                fields: record.fields ? 'EXISTS' : 'MISSING',
                fieldsKeys: record.fields ? Object.keys(record.fields) : 'NO_FIELDS'
            });
            console.log('üîç SERVICE: Record fields content:', record.fields);
            
            const result = {
                id: record.record_id,
                // ‚úÖ S·ª¨A: S·ª≠ d·ª•ng t√™n c·ªôt ti·∫øng Vi·ªát t·ª´ Larkbase
                employeeId: record.fields['M√£ nh√¢n vi√™n'] || '',
                fullName: record.fields['H·ªç t√™n'] || '',
                phoneNumber: record.fields['S·ªë ƒëi·ªán tho·∫°i'] || '',
                gender: record.fields['Gi·ªõi t√≠nh'] || '',
                position: record.fields['V·ªã tr√≠'] || '',
                hourlyRate: record.fields['M·ª©c l∆∞∆°ng/gi·ªù'] || 0,
                bankAccount: record.fields['S·ªë t√†i kho·∫£n'] || '',
                bankName: record.fields['Ng√¢n h√†ng'] || '',
                recruitmentLink: record.fields['Link ƒë·ªÅ xu·∫•t tuy·ªÉn d·ª•ng'] || '',
                status: record.fields['Tr·∫°ng th√°i'] || 'active',
                createdAt: record.fields['Created At'] || new Date().toISOString(),
                updatedAt: record.fields['Updated At'] || new Date().toISOString()
            };
            
            console.log(`üîç SERVICE: Transformed record ${index}:`, result);
            return result;
        });
        
        console.log('‚úÖ SERVICE: Transform completed:', transformed);
        return transformed;
    }

    transformEmployeeForLark(employeeData) {
        return {
            'M√£ nh√¢n vi√™n': employeeData.employeeId,
            'H·ªç t√™n': employeeData.fullName,
            'S·ªë ƒëi·ªán tho·∫°i': employeeData.phoneNumber,
            'Gi·ªõi t√≠nh': employeeData.gender,
            'V·ªã tr√≠': employeeData.position || '',
            'M·ª©c l∆∞∆°ng/gi·ªù': employeeData.hourlyRate,
            'S·ªë t√†i kho·∫£n': employeeData.bankAccount,
            'Ng√¢n h√†ng': employeeData.bankName,
            'Link ƒë·ªÅ xu·∫•t tuy·ªÉn d·ª•ng': employeeData.recruitmentLink || '',
            'Tr·∫°ng th√°i': employeeData.status || 'active'
        };
    }

    getMockEmployees() {
        return [
            {
                id: 'emp_001',
                employeeId: 'Nguy·ªÖn VƒÉn A - 0123456789',
                fullName: 'Nguy·ªÖn VƒÉn A',
                phoneNumber: '0123456789',
                gender: 'Nam',
                position: 'Nh√¢n vi√™n b√°n h√†ng',
                hourlyRate: 50000,
                bankAccount: '123456789',
                bankName: 'Vietcombank',
                recruitmentLink: '20250620014',
                status: 'active',
                createdAt: new Date().toISOString(),
                updatedAt: new Date().toISOString()
            },
            {
                id: 'emp_002',
                employeeId: 'Tr·∫ßn Th·ªã B - 0987654321',
                fullName: 'Tr·∫ßn Th·ªã B',
                phoneNumber: '0987654321',
                gender: 'N·ªØ',
                position: 'Thu ng√¢n',
                hourlyRate: 45000,
                bankAccount: '987654321',
                bankName: 'Techcombank',
                recruitmentLink: '20250620017',
                status: 'active',
                createdAt: new Date().toISOString(),
                updatedAt: new Date().toISOString()
            }
        ];
    }
}

export default EmployeeService;

==============================

üìÅ File: .\server\services\employees\employee-validator.js
------------------------------
üèõÔ∏è  CLASSES:
   ‚Ä¢ EmployeeValidator (d√≤ng 2)
üì§ EXPORTS:
   ‚Ä¢ EmployeeValidator (d√≤ng 63)

üìÑ N·ªòI DUNG FILE:
==============================
// Employee validation service
class EmployeeValidator {
    static validateEmployeeData(employeeData) {
        const errors = [];

        // Required fields validation
        if (!employeeData.fullName || employeeData.fullName.trim().length < 2) {
            errors.push('H·ªç t√™n ph·∫£i c√≥ √≠t nh·∫•t 2 k√Ω t·ª±');
        }

        if (!employeeData.phoneNumber || !this.isValidPhoneNumber(employeeData.phoneNumber)) {
            errors.push('S·ªë ƒëi·ªán tho·∫°i kh√¥ng h·ª£p l·ªá');
        }

        if (!employeeData.gender || !['Nam', 'N·ªØ'].includes(employeeData.gender)) {
            errors.push('Gi·ªõi t√≠nh ph·∫£i l√† Nam ho·∫∑c N·ªØ');
        }

        if (!employeeData.hourlyRate || employeeData.hourlyRate <= 0) {
            errors.push('L∆∞∆°ng theo gi·ªù ph·∫£i l·ªõn h∆°n 0');
        }

        if (!employeeData.bankAccount || employeeData.bankAccount.trim().length < 6) {
            errors.push('S·ªë t√†i kho·∫£n ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±');
        }

        if (!employeeData.bankName || employeeData.bankName.trim().length < 2) {
            errors.push('T√™n ng√¢n h√†ng l√† b·∫Øt bu·ªôc');
        }

        return errors;
    }

    static isValidPhoneNumber(phoneNumber) {
        const phoneRegex = /^[0-9]{10,11}$/;
        return phoneRegex.test(phoneNumber);
    }

    static validateWorkHistoryData(workHistoryData) {
        const errors = [];

        if (!Array.isArray(workHistoryData) || workHistoryData.length === 0) {
            errors.push('Ph·∫£i c√≥ √≠t nh·∫•t m·ªôt work history entry');
        }

        const requestNos = workHistoryData.map(item => item.requestNo);
        const uniqueRequestNos = [...new Set(requestNos)];
        
        if (requestNos.length !== uniqueRequestNos.length) {
            errors.push('Kh√¥ng ƒë∆∞·ª£c tr√πng l·∫∑p Request No');
        }

        workHistoryData.forEach((item, index) => {
            if (!item.requestNo || item.requestNo.trim().length === 0) {
                errors.push(`Work history entry ${index + 1}: Request No l√† b·∫Øt bu·ªôc`);
            }
        });

        return errors;
    }
}

export default EmployeeValidator;

==============================

üìÅ File: .\server\services\employees\index.js
------------------------------
üì§ EXPORTS:
   ‚Ä¢  default as EmployeeService  (d√≤ng 2)
   ‚Ä¢  default as WorkHistoryService  (d√≤ng 3)
   ‚Ä¢  default as EmployeeValidator  (d√≤ng 4)

üìÑ N·ªòI DUNG FILE:
==============================
// Employee services exports
export { default as EmployeeService } from './employee-service.js';
export { default as WorkHistoryService } from './work-history-service.js';
export { default as EmployeeValidator } from './employee-validator.js';

==============================

üìÅ File: .\server\services\employees\work-history-service.js
------------------------------
üèõÔ∏è  CLASSES:
   ‚Ä¢ WorkHistoryService (d√≤ng 6)
üì§ EXPORTS:
   ‚Ä¢ WorkHistoryService (d√≤ng 132)

üìÑ N·ªòI DUNG FILE:
==============================
// Work history service
import BaseService from '../core/base-service.js';
import LarkClient from '../core/lark-client.js';


class WorkHistoryService extends BaseService {
    constructor() {
        super();
        this.baseId = process.env.LARK_BASE_ID;
        this.tableId = process.env.LARK_WORK_HISTORY_TABLE_ID;
    }


    async initializeService() {
        console.log('Initializing Work History Service...');
    }


    async getWorkHistoryByEmployee(employeeId) {
        try {
            const response = await LarkClient.get(`/bitable/v1/apps/${this.baseId}/tables/${this.tableId}/records`, {
                filter: `AND(CurrentValue.[Employee ID] = "${employeeId}")`
            });


            return this.transformWorkHistoryData(response.data?.items || []);
        } catch (error) {
            console.error('Error fetching work history:', error);
            return [];
        }
    }


    // ‚úÖ TH√äM METHOD M·ªöI
    async checkWorkHistoryExists(employeeId, requestNo) {
        try {
            console.log(`üîç WORK HISTORY: Checking duplicate (${employeeId}, ${requestNo})`);
            
            const response = await LarkClient.get(`/bitable/v1/apps/${this.baseId}/tables/${this.tableId}/records`);
            
            const records = response.data?.items || [];
            console.log(`üìã WORK HISTORY: Found ${records.length} total records`);
            
            // Check xem c√≥ record n√†o match (employeeId, requestNo) kh√¥ng
            const exists = records.some(record => {
                const fields = record.fields || {};
                const recordEmployeeId = fields['Employee ID'];
                const recordRequestNo = fields['Request No'];
                
                const isMatch = recordEmployeeId === employeeId && recordRequestNo === requestNo;
                
                if (isMatch) {
                    console.log(`‚ùå WORK HISTORY: Found duplicate - ${recordEmployeeId} / ${recordRequestNo}`);
                }
                
                return isMatch;
            });
            
            console.log(`‚úÖ WORK HISTORY: Duplicate check result: ${exists ? 'EXISTS' : 'NOT_EXISTS'}`);
            return exists;
            
        } catch (error) {
            console.error('‚ùå Error checking work history exists:', error);
            return false; // Safe fallback - cho ph√©p th√™m n·∫øu kh√¥ng check ƒë∆∞·ª£c
        }
    }

    async addWorkHistory(workHistoryData) {
        try {
            const transformedData = this.transformWorkHistoryForLark(workHistoryData);
            
            console.log('üì§ WORK HISTORY SERVICE: Sending data to Lark:', transformedData);
            console.log('üîç WORK HISTORY SERVICE: Base ID:', this.baseId);
            console.log('üîç WORK HISTORY SERVICE: Table ID:', this.tableId);
            console.log('üîç WORK HISTORY SERVICE: URL will be:', `/bitable/v1/apps/${this.baseId}/tables/${this.tableId}/records`);
            
            const response = await LarkClient.post(`/bitable/v1/apps/${this.baseId}/tables/${this.tableId}/records`, {
                fields: transformedData
            });

            console.log('üì• WORK HISTORY SERVICE: Raw Lark response:', response);
            console.log('üì• WORK HISTORY SERVICE: Response status:', response?.status);
            console.log('üì• WORK HISTORY SERVICE: Response data:', response?.data);

            return {
                success: true,
                employeeId: workHistoryData.employeeId,
                requestNo: workHistoryData.requestNo,
                larkResponse: response  // ‚úÖ TH√äM: Debug response
            };
            
        } catch (error) {
            console.error('‚ùå WORK HISTORY SERVICE: Full error:', error);
            console.error('‚ùå WORK HISTORY SERVICE: Error message:', error.message);
            console.error('‚ùå WORK HISTORY SERVICE: Error stack:', error.stack);
            await this.handleError(error, 'addWorkHistory');
            throw error;
        }
    }



    async deleteWorkHistory(id) {
        try {
            await LarkClient.delete(`/bitable/v1/apps/${this.baseId}/tables/${this.tableId}/records/${id}`);
            return true;
        } catch (error) {
            await this.handleError(error, 'deleteWorkHistory');
            throw error;
        }
    }


    transformWorkHistoryData(larkData) {
        return larkData.map(record => ({
            id: record.record_id,
            employeeId: record.fields['M√£ nh√¢n vi√™n'] || '',
            requestNo: record.fields['Request No.'] || ''
        }));
    }


    transformWorkHistoryForLark(workHistoryData) {
        return {
            'M√£ nh√¢n vi√™n': workHistoryData.employeeId,
            'Request No.': workHistoryData.requestNo
        };
    }
}


export default WorkHistoryService;

==============================

üìÅ File: .\server\services\master-data\index.js
------------------------------
üì§ EXPORTS:
   ‚Ä¢  default as StoreService  (d√≤ng 2)
   ‚Ä¢  default as PositionService  (d√≤ng 3)
   ‚Ä¢  default as MasterDataValidator  (d√≤ng 4)

üìÑ N·ªòI DUNG FILE:
==============================
// Master data services exports
export { default as StoreService } from './store-service.js';
export { default as PositionService } from './position-service.js';
export { default as MasterDataValidator } from './master-data-validator.js';

==============================

üìÅ File: .\server\services\master-data\master-data-validator.js
------------------------------
üèõÔ∏è  CLASSES:
   ‚Ä¢ MasterDataValidator (d√≤ng 2)
üì§ EXPORTS:
   ‚Ä¢ MasterDataValidator (d√≤ng 94)

üìÑ N·ªòI DUNG FILE:
==============================
// Master data validation service
class MasterDataValidator {
    static validateStoreData(storeData) {
        const errors = [];

        // Required fields validation
        if (!storeData.storeName || storeData.storeName.trim().length < 2) {
            errors.push('T√™n c·ª≠a h√†ng ph·∫£i c√≥ √≠t nh·∫•t 2 k√Ω t·ª±');
        }

        if (!storeData.address || storeData.address.trim().length < 5) {
            errors.push('ƒê·ªãa ch·ªâ ph·∫£i c√≥ √≠t nh·∫•t 5 k√Ω t·ª±');
        }

        // Status validation
        if (storeData.status && !['active', 'inactive'].includes(storeData.status)) {
            errors.push('Tr·∫°ng th√°i ph·∫£i l√† active ho·∫∑c inactive');
        }

        return errors;
    }

    static validatePositionData(positionData) {
        const errors = [];

        // Required fields validation
        if (!positionData.positionName || positionData.positionName.trim().length < 2) {
            errors.push('T√™n v·ªã tr√≠ ph·∫£i c√≥ √≠t nh·∫•t 2 k√Ω t·ª±');
        }

        // Description validation (optional but if provided must be reasonable)
        if (positionData.description && positionData.description.trim().length < 3) {
            errors.push('M√¥ t·∫£ ph·∫£i c√≥ √≠t nh·∫•t 3 k√Ω t·ª± n·∫øu ƒë∆∞·ª£c cung c·∫•p');
        }

        // Status validation
        if (positionData.status && !['active', 'inactive'].includes(positionData.status)) {
            errors.push('Tr·∫°ng th√°i ph·∫£i l√† active ho·∫∑c inactive');
        }

        return errors;
    }

    static validateMasterDataBatch(dataArray, type) {
        const errors = [];
        const names = [];

        dataArray.forEach((item, index) => {
            // Validate individual item
            let itemErrors = [];
            if (type === 'store') {
                itemErrors = this.validateStoreData(item);
            } else if (type === 'position') {
                itemErrors = this.validatePositionData(item);
            }

            if (itemErrors.length > 0) {
                errors.push(`Item ${index + 1}: ${itemErrors.join(', ')}`);
            }

            // Check for duplicate names
            const nameField = type === 'store' ? 'storeName' : 'positionName';
            if (item[nameField] && names.includes(item[nameField])) {
                errors.push(`Item ${index + 1}: T√™n ƒë√£ b·ªã tr√πng l·∫∑p trong batch`);
            } else if (item[nameField]) {
                names.push(item[nameField]);
            }
        });

        return errors;
    }

    static sanitizeStoreData(storeData) {
        return {
            storeName: storeData.storeName?.trim() || '',
            address: storeData.address?.trim() || '',
            status: storeData.status || 'active',
            createdAt: storeData.createdAt || new Date().toISOString(),
            updatedAt: new Date().toISOString()
        };
    }

    static sanitizePositionData(positionData) {
        return {
            positionName: positionData.positionName?.trim() || '',
            description: positionData.description?.trim() || '',
            status: positionData.status || 'active',
            createdAt: positionData.createdAt || new Date().toISOString(),
            updatedAt: new Date().toISOString()
        };
    }
}

export default MasterDataValidator;

==============================

üìÅ File: .\server\services\master-data\position-service.js
------------------------------
üèõÔ∏è  CLASSES:
   ‚Ä¢ PositionService (d√≤ng 6)
üì§ EXPORTS:
   ‚Ä¢ PositionService (d√≤ng 153)

üìÑ N·ªòI DUNG FILE:
==============================
// Position management service
import BaseService from '../core/base-service.js';
import LarkClient from '../core/lark-client.js';
import CacheService from '../core/cache-service.js';

class PositionService extends BaseService {
    constructor() {
        super();
        this.baseId = process.env.LARK_BASE_ID;
        this.tableId = process.env.LARK_POSITION_TABLE_ID;
    }

    async initializeService() {
        console.log('Initializing Position Service...');
    }

    async getAllPositions() {
        const cacheKey = 'positions_all';
        let positions = CacheService.get(cacheKey);
        
        if (!positions) {
            try {
                const response = await LarkClient.get(`/bitable/v1/apps/${this.baseId}/tables/${this.tableId}/records`);
                positions = this.transformPositionData(response.data?.items || []);
                CacheService.set(cacheKey, positions, 300000); // 5 minutes
            } catch (error) {
                console.error('Error fetching positions from Lark:', error);
                positions = this.getMockPositions();
            }
        }
        
        return positions;
    }

    async addPosition(positionData) {
        try {
            const transformedData = this.transformPositionForLark(positionData);
            
            const response = await LarkClient.post(`/bitable/v1/apps/${this.baseId}/tables/${this.tableId}/records`, {
                fields: transformedData
            });

            // Clear cache
            CacheService.delete('positions_all');
            
            return this.transformPositionData([response.data])[0];
        } catch (error) {
            await this.handleError(error, 'addPosition');
            throw error;
        }
    }

    async updatePosition(id, positionData) {
        try {
            const transformedData = this.transformPositionForLark(positionData);
            
            const response = await LarkClient.put(`/bitable/v1/apps/${this.baseId}/tables/${this.tableId}/records/${id}`, {
                fields: transformedData
            });

            // Clear cache
            CacheService.delete('positions_all');
            
            return this.transformPositionData([response.data])[0];
        } catch (error) {
            await this.handleError(error, 'updatePosition');
            throw error;
        }
    }

    async deletePosition(id) {
        try {
            await LarkClient.delete(`/bitable/v1/apps/${this.baseId}/tables/${this.tableId}/records/${id}`);
            
            // Clear cache
            CacheService.delete('positions_all');
            
            return true;
        } catch (error) {
            await this.handleError(error, 'deletePosition');
            throw error;
        }
    }

    async getActivePositions() {
        const positions = await this.getAllPositions();
        return positions.filter(position => position.status === 'active');
    }

    async searchPositions(query) {
        const positions = await this.getAllPositions();
        
        if (!query) return positions;
        
        const searchTerm = query.toLowerCase();
        return positions.filter(position => 
            position.positionName.toLowerCase().includes(searchTerm) ||
            (position.description && position.description.toLowerCase().includes(searchTerm))
        );
    }

    transformPositionData(larkData) {
        return larkData.map(record => ({
            id: record.record_id,
            positionName: record.fields['Position Name'] || '',
            description: record.fields['Description'] || '',
            status: record.fields['Status'] || 'active',
            createdAt: record.fields['Created At'] || new Date().toISOString(),
            updatedAt: record.fields['Updated At'] || new Date().toISOString()
        }));
    }

    transformPositionForLark(positionData) {
        return {
            'Position Name': positionData.positionName,
            'Description': positionData.description || '',
            'Status': positionData.status || 'active',
            'Created At': positionData.createdAt || new Date().toISOString(),
            'Updated At': positionData.updatedAt || new Date().toISOString()
        };
    }

    getMockPositions() {
        return [
            {
                id: 'pos_001',
                positionName: 'Nh√¢n vi√™n b√°n h√†ng',
                description: 'Nh√¢n vi√™n b√°n h√†ng t·∫°i c·ª≠a h√†ng',
                status: 'active',
                createdAt: new Date().toISOString(),
                updatedAt: new Date().toISOString()
            },
            {
                id: 'pos_002',
                positionName: 'Nh√¢n vi√™n kho',
                description: 'Nh√¢n vi√™n qu·∫£n l√Ω kho h√†ng',
                status: 'active',
                createdAt: new Date().toISOString(),
                updatedAt: new Date().toISOString()
            },
            {
                id: 'pos_003',
                positionName: 'Tr∆∞·ªüng ca',
                description: 'Tr∆∞·ªüng ca qu·∫£n l√Ω nh√¢n vi√™n',
                status: 'active',
                createdAt: new Date().toISOString(),
                updatedAt: new Date().toISOString()
            }
        ];
    }
}

export default PositionService;

==============================

üìÅ File: .\server\services\master-data\store-service.js
------------------------------
üèõÔ∏è  CLASSES:
   ‚Ä¢ StoreService (d√≤ng 6)
üì§ EXPORTS:
   ‚Ä¢ StoreService (d√≤ng 145)

üìÑ N·ªòI DUNG FILE:
==============================
// Store management service
import BaseService from '../core/base-service.js';
import LarkClient from '../core/lark-client.js';
import CacheService from '../core/cache-service.js';

class StoreService extends BaseService {
    constructor() {
        super();
        this.baseId = process.env.LARK_BASE_ID;
        this.tableId = process.env.LARK_STORE_TABLE_ID;
    }

    async initializeService() {
        console.log('Initializing Store Service...');
    }

    async getAllStores() {
        const cacheKey = 'stores_all';
        let stores = CacheService.get(cacheKey);
        
        if (!stores) {
            try {
                const response = await LarkClient.get(`/bitable/v1/apps/${this.baseId}/tables/${this.tableId}/records`);
                stores = this.transformStoreData(response.data?.items || []);
                CacheService.set(cacheKey, stores, 300000); // 5 minutes
            } catch (error) {
                console.error('Error fetching stores from Lark:', error);
                stores = this.getMockStores();
            }
        }
        
        return stores;
    }

    async addStore(storeData) {
        try {
            const transformedData = this.transformStoreForLark(storeData);
            
            const response = await LarkClient.post(`/bitable/v1/apps/${this.baseId}/tables/${this.tableId}/records`, {
                fields: transformedData
            });

            // Clear cache
            CacheService.delete('stores_all');
            
            return this.transformStoreData([response.data])[0];
        } catch (error) {
            await this.handleError(error, 'addStore');
            throw error;
        }
    }

    async updateStore(id, storeData) {
        try {
            const transformedData = this.transformStoreForLark(storeData);
            
            const response = await LarkClient.put(`/bitable/v1/apps/${this.baseId}/tables/${this.tableId}/records/${id}`, {
                fields: transformedData
            });

            // Clear cache
            CacheService.delete('stores_all');
            
            return this.transformStoreData([response.data])[0];
        } catch (error) {
            await this.handleError(error, 'updateStore');
            throw error;
        }
    }

    async deleteStore(id) {
        try {
            await LarkClient.delete(`/bitable/v1/apps/${this.baseId}/tables/${this.tableId}/records/${id}`);
            
            // Clear cache
            CacheService.delete('stores_all');
            
            return true;
        } catch (error) {
            await this.handleError(error, 'deleteStore');
            throw error;
        }
    }

    async getActiveStores() {
        const stores = await this.getAllStores();
        return stores.filter(store => store.status === 'active');
    }

    async searchStores(query) {
        const stores = await this.getAllStores();
        
        if (!query) return stores;
        
        const searchTerm = query.toLowerCase();
        return stores.filter(store => 
            store.storeName.toLowerCase().includes(searchTerm) ||
            store.address.toLowerCase().includes(searchTerm)
        );
    }

    transformStoreData(larkData) {
        return larkData.map(record => ({
            id: record.record_id,
            storeName: record.fields['Store Name'] || '',
            address: record.fields['Address'] || '',
            status: record.fields['Status'] || 'active',
            createdAt: record.fields['Created At'] || new Date().toISOString(),
            updatedAt: record.fields['Updated At'] || new Date().toISOString()
        }));
    }

    transformStoreForLark(storeData) {
        return {
            'Store Name': storeData.storeName,
            'Address': storeData.address,
            'Status': storeData.status || 'active',
            'Created At': storeData.createdAt || new Date().toISOString(),
            'Updated At': storeData.updatedAt || new Date().toISOString()
        };
    }

    getMockStores() {
        return [
            {
                id: 'store_001',
                storeName: '116 C·∫ßu Gi·∫•y',
                address: '116 C·∫ßu Gi·∫•y, H√† N·ªôi',
                status: 'active',
                createdAt: new Date().toISOString(),
                updatedAt: new Date().toISOString()
            },
            {
                id: 'store_002',
                storeName: 'Tr√¢m Tr·ªói',
                address: 'Tr√¢m Tr·ªói, H√† N·ªôi',
                status: 'active',
                createdAt: new Date().toISOString(),
                updatedAt: new Date().toISOString()
            }
        ];
    }
}

export default StoreService;

==============================

üìÅ File: .\server\services\recruitment\index.js
------------------------------
üì§ EXPORTS:
   ‚Ä¢  default as RecruitmentService  (d√≤ng 2)
   ‚Ä¢  default as RecruitmentValidator  (d√≤ng 3)

üìÑ N·ªòI DUNG FILE:
==============================
// Recruitment services exports
export { default as RecruitmentService } from './recruitment-service.js';
export { default as RecruitmentValidator } from './recruitment-validator.js';

==============================

üìÅ File: .\server\services\recruitment\recruitment-service.js
------------------------------
üèõÔ∏è  CLASSES:
   ‚Ä¢ RecruitmentService (d√≤ng 6)
üì§ EXPORTS:
   ‚Ä¢ RecruitmentService (d√≤ng 196)

üìÑ N·ªòI DUNG FILE:
==============================
// Recruitment service
import BaseService from '../core/base-service.js';
import LarkClient from '../core/lark-client.js';
import CacheService from '../core/cache-service.js';

class RecruitmentService extends BaseService {
    constructor() {
        super();
        this.baseId = process.env.LARK_BASE_ID;
        this.tableId = process.env.LARK_RECRUITMENT_TABLE_ID;
    }

    async initializeService() {
        console.log('Initializing Recruitment Service...');
    }

    async getRecruitmentRequests(filters = {}) {
        const cacheKey = `recruitment_requests_${JSON.stringify(filters)}`;
        let requests = CacheService.get(cacheKey);
        
        if (!requests) {
            try {
                let filterString = '';
                if (filters.status) {
                    filterString += `AND(CurrentValue.[Status] = "${filters.status}")`;
                }
                if (filters.department) {
                    filterString += `AND(CurrentValue.[Department] = "${filters.department}")`;
                }
                
                const response = await LarkClient.get(`/bitable/v1/apps/${this.baseId}/tables/${this.tableId}/records`, {
                    filter: filterString
                });

                requests = this.transformRecruitmentData(response.data?.items || []);
                CacheService.set(cacheKey, requests, 300000); // 5 minutes
            } catch (error) {
                console.error('Error fetching recruitment requests:', error);
                requests = this.getMockRecruitmentRequests();
            }
        }
        
        return requests;
    }

    async addRecruitmentRequest(requestData) {
        try {
            const transformedData = this.transformRecruitmentForLark(requestData);
            
            const response = await LarkClient.post(`/bitable/v1/apps/${this.baseId}/tables/${this.tableId}/records`, {
                fields: transformedData
            });

            // Clear cache
            CacheService.delete(`recruitment_requests_${JSON.stringify({})}`);
            
            return this.transformRecruitmentData([response.data])[0];
        } catch (error) {
            await this.handleError(error, 'addRecruitmentRequest');
            throw error;
        }
    }

    async updateRecruitmentRequest(id, requestData) {
        try {
            const transformedData = this.transformRecruitmentForLark(requestData);
            
            const response = await LarkClient.put(`/bitable/v1/apps/${this.baseId}/tables/${this.tableId}/records/${id}`, {
                fields: transformedData
            });

            // Clear cache
            CacheService.clear();
            
            return this.transformRecruitmentData([response.data])[0];
        } catch (error) {
            await this.handleError(error, 'updateRecruitmentRequest');
            throw error;
        }
    }


    transformRecruitmentData(larkData) {
        console.log('üîÑ RECRUITMENT: Starting transform with data:', larkData);
        
        return larkData.map(record => {
            console.log('üîç RECRUITMENT: Processing record:', record.fields);
            
            const result = {
                id: record.record_id,
                // ‚úÖ S·ª¨A: Extract Request No t·ª´ object structure
                requestNo: this.extractRequestNo(record.fields['Request No.']),
                // ‚úÖ S·ª¨A: Extract Requester t·ª´ array structure  
                requester: this.extractRequesterName(record.fields['Requester']),
                status: record.fields['Status'] || '',
                department: record.fields['Details_Ph√≤ng ban'] || record.fields['Department'] || '',
                quantity: record.fields['Details_S·ªë l∆∞·ª£ng c·∫ßn tuy·ªÉn'] || record.fields['Quantity'] || '',
                gender: record.fields['Details_Gi·ªõi t√≠nh'] || record.fields['Gender'] || '',
                fromDate: record.fields['Details_T·ª´ ng√†y'] || record.fields['From Date'] || '',
                toDate: record.fields['Details_ƒê·∫øn ng√†y'] || record.fields['To Date'] || '',
                position: record.fields['Details_V·ªã tr√≠'] || record.fields['Position'] || '',
                approvalStatus: record.fields['Status'] || 'pending'
            };
            
            console.log('üîç RECRUITMENT: Transformed result:', result);
            return result;
        });
    }

    // ‚úÖ TH√äM: Method ƒë·ªÉ extract Request No t·ª´ object
    extractRequestNo(requestNoData) {
        if (!requestNoData) return '';
        
        // N·∫øu l√† object v·ªõi structure { "link": "...", "text": "202507140017" }
        if (typeof requestNoData === 'object' && requestNoData.text) {
            return requestNoData.text;
        }
        
        // N·∫øu l√† string tr·ª±c ti·∫øp
        if (typeof requestNoData === 'string') {
            return requestNoData;
        }
        
        // Fallback
        return requestNoData.toString();
    }

    // ‚úÖ TH√äM: Method ƒë·ªÉ extract Requester t·ª´ array
    extractRequesterName(requesterData) {
        if (!requesterData) return '';
        
        // N·∫øu l√† array [{ "name": "236LH.Nguy·ªÖn Huy Th√†nh", ... }]
        if (Array.isArray(requesterData)) {
            return requesterData.map(user => 
                user.name || user.en_name || user.id || 'Unknown'
            ).join(', ');
        }
        
        // N·∫øu l√† object { "name": "236LH.Nguy·ªÖn Huy Th√†nh", ... }
        if (typeof requesterData === 'object') {
            return requesterData.name || requesterData.en_name || requesterData.id || 'Unknown';
        }
        
        // N·∫øu l√† string tr·ª±c ti·∫øp
        return requesterData.toString();
    }


    transformRecruitmentForLark(requestData) {
        return {
            'Request No': requestData.requestNo,
            'Requester': requestData.requester,
            'Status': requestData.status,
            'Department': requestData.department,
            'Quantity': requestData.quantity,
            'Gender': requestData.gender,
            'From Date': requestData.fromDate,
            'To Date': requestData.toDate,
            'Approval Status': requestData.approvalStatus || 'pending',
            'Created At': requestData.createdAt || new Date().toISOString()
        };
    }

    getMockRecruitmentRequests() {
        return [
            {
                id: '20250620014',
                requestNo: '20250620014',
                requester: 'Rikkei Test',
                status: 'ƒêang tuy·ªÉn d·ª•ng',
                department: '116 C·∫ßu Gi·∫•y',
                quantity: '2',
                gender: 'Nam/N·ªØ',
                fromDate: '2025-06-20',
                toDate: '2025-07-20',
                approvalStatus: 'approved',
                createdAt: '2025-06-20T00:00:00.000Z'
            },
            {
                id: '20250620017',
                requestNo: '20250620017',
                requester: 'Rikkei Test',
                status: 'ƒêang tuy·ªÉn d·ª•ng',
                department: 'Tr√¢m Tr·ªói',
                quantity: '1',
                gender: 'N·ªØ',
                fromDate: '2025-06-20',
                toDate: '2025-07-20',
                approvalStatus: 'approved',
                createdAt: '2025-06-20T00:00:00.000Z'
            }
        ];
    }
}

export default RecruitmentService;

==============================

üìÅ File: .\server\services\recruitment\recruitment-validator.js
------------------------------
üèõÔ∏è  CLASSES:
   ‚Ä¢ RecruitmentValidator (d√≤ng 2)
üì§ EXPORTS:
   ‚Ä¢ RecruitmentValidator (d√≤ng 61)

üìÑ N·ªòI DUNG FILE:
==============================
// Recruitment validation service
class RecruitmentValidator {
    static validateRecruitmentData(requestData) {
        const errors = [];

        // Required fields validation
        if (!requestData.requestNo) {
            errors.push('Request No l√† b·∫Øt bu·ªôc');
        }

        if (!requestData.requester) {
            errors.push('Requester l√† b·∫Øt bu·ªôc');
        }

        if (!requestData.department) {
            errors.push('Department l√† b·∫Øt bu·ªôc');
        }

        if (!requestData.quantity || requestData.quantity <= 0) {
            errors.push('Quantity ph·∫£i l·ªõn h∆°n 0');
        }

        if (!requestData.gender) {
            errors.push('Gender l√† b·∫Øt bu·ªôc');
        }

        if (!requestData.fromDate) {
            errors.push('From Date l√† b·∫Øt bu·ªôc');
        } else if (!this.isValidDate(requestData.fromDate)) {
            errors.push('From Date kh√¥ng h·ª£p l·ªá');
        }

        if (!requestData.toDate) {
            errors.push('To Date l√† b·∫Øt bu·ªôc');
        } else if (!this.isValidDate(requestData.toDate)) {
            errors.push('To Date kh√¥ng h·ª£p l·ªá');
        }

        // Check if toDate is after fromDate
        if (requestData.fromDate && requestData.toDate) {
            if (!this.isToDateAfterFromDate(requestData.fromDate, requestData.toDate)) {
                errors.push('To Date ph·∫£i sau From Date');
            }
        }

        return errors;
    }

    static isValidDate(dateString) {
        const date = new Date(dateString);
        return date instanceof Date && !isNaN(date);
    }

    static isToDateAfterFromDate(fromDate, toDate) {
        const from = new Date(fromDate);
        const to = new Date(toDate);
        return to >= from;
    }
}

export default RecruitmentValidator;

==============================

üìÅ File: .\server\services\utils\error-handler.js
------------------------------
üèõÔ∏è  CLASSES:
   ‚Ä¢ ErrorHandler (d√≤ng 4)
üì§ EXPORTS:
   ‚Ä¢ ErrorHandler (d√≤ng 136)

üìÑ N·ªòI DUNG FILE:
==============================
// Centralized error handling utilities
import ResponseFormatter from './response-formatter.js';

class ErrorHandler {
    static handleLarkError(error) {
        if (error.response?.data?.code) {
            const larkCode = error.response.data.code;
            const larkMessage = error.response.data.msg || 'Lark API Error';
            
            switch (larkCode) {
                case 99991663:
                    return ResponseFormatter.formatError('App access token invalid', 'LARK_AUTH_ERROR');
                case 99991664:
                    return ResponseFormatter.formatError('Tenant access token invalid', 'LARK_AUTH_ERROR');
                case 99991665:
                    return ResponseFormatter.formatError('User access token invalid', 'LARK_AUTH_ERROR');
                case 230002:
                    return ResponseFormatter.formatError('Base not found', 'LARK_BASE_NOT_FOUND');
                case 230003:
                    return ResponseFormatter.formatError('Table not found', 'LARK_TABLE_NOT_FOUND');
                case 230004:
                    return ResponseFormatter.formatError('Record not found', 'LARK_RECORD_NOT_FOUND');
                case 1254006:
                    return ResponseFormatter.formatError('Rate limit exceeded', 'LARK_RATE_LIMIT');
                default:
                    return ResponseFormatter.formatError(`Lark API Error: ${larkMessage}`, 'LARK_API_ERROR');
            }
        }
        
        return ResponseFormatter.formatError('Unknown Lark API error', 'LARK_UNKNOWN_ERROR');
    }

    static handleValidationError(errors) {
        const message = Array.isArray(errors) ? errors.join(', ') : errors;
        return ResponseFormatter.formatError(message, 'VALIDATION_ERROR');
    }

    static handleDatabaseError(error) {
        console.error('Database error:', error);
        
        if (error.code === 'ECONNREFUSED') {
            return ResponseFormatter.formatError('Database connection failed', 'DATABASE_CONNECTION_ERROR');
        }
        
        if (error.code === 'ER_DUP_ENTRY') {
            return ResponseFormatter.formatError('Duplicate entry', 'DUPLICATE_ENTRY');
        }
        
        return ResponseFormatter.formatError('Database operation failed', 'DATABASE_ERROR');
    }

    static handleNetworkError(error) {
        console.error('Network error:', error);
        
        if (error.code === 'ENOTFOUND') {
            return ResponseFormatter.formatError('Service not found', 'SERVICE_NOT_FOUND');
        }
        
        if (error.code === 'ECONNRESET') {
            return ResponseFormatter.formatError('Connection reset', 'CONNECTION_RESET');
        }
        
        if (error.code === 'ETIMEDOUT') {
            return ResponseFormatter.formatError('Request timeout', 'REQUEST_TIMEOUT');
        }
        
        return ResponseFormatter.formatError('Network error', 'NETWORK_ERROR');
    }

    static handleGenericError(error, operation = 'operation') {
        console.error(`Error in ${operation}:`, error);
        
        // Check for specific error types
        if (error.isAxiosError) {
            if (error.response?.status === 401) {
                return ResponseFormatter.formatUnauthorized('Authentication required');
            }
            
            if (error.response?.status === 403) {
                return ResponseFormatter.formatForbidden('Access forbidden');
            }
            
            if (error.response?.status === 404) {
                return ResponseFormatter.formatNotFound('Resource');
            }
            
            if (error.response?.status >= 500) {
                return ResponseFormatter.formatServerError('External service error');
            }
            
            return this.handleLarkError(error);
        }
        
        // Check for validation errors
        if (error.name === 'ValidationError') {
            return this.handleValidationError(error.message);
        }
        
        // Check for database errors
        if (error.code && error.code.startsWith('ER_')) {
            return this.handleDatabaseError(error);
        }
        
        // Check for network errors
        if (error.code && ['ENOTFOUND', 'ECONNRESET', 'ETIMEDOUT'].includes(error.code)) {
            return this.handleNetworkError(error);
        }
        
        // Default generic error
        return ResponseFormatter.formatServerError(`Error in ${operation}: ${error.message}`);
    }

    static async wrapAsync(fn, operation = 'operation') {
        try {
            return await fn();
        } catch (error) {
            throw this.handleGenericError(error, operation);
        }
    }

    static logError(error, context = {}) {
        const errorInfo = {
            message: error.message,
            stack: error.stack,
            context,
            timestamp: new Date().toISOString()
        };
        
        console.error('Error logged:', JSON.stringify(errorInfo, null, 2));
        
        // In production, you might want to send this to a logging service
        // like Winston, Sentry, or CloudWatch
    }
}

export default ErrorHandler;

==============================

üìÅ File: .\server\services\utils\index.js
------------------------------
üì§ EXPORTS:
   ‚Ä¢ commonly (d√≤ng 6)
   ‚Ä¢  default as ResponseFormatter, formatResponse  (d√≤ng 2)
   ‚Ä¢  default as ServiceFactory  (d√≤ng 3)
   ‚Ä¢  default as ErrorHandler  (d√≤ng 4)
   ‚Ä¢ 
    getEmployeeService,
    getWorkHistoryService,
    getAttendanceService,
    getRecruitmentService,
    getStoreService,
    getPositionService,
    getAuthService,
    getSessionService
 (d√≤ng 7)

üìÑ N·ªòI DUNG FILE:
==============================
// Utilities services exports
export { default as ResponseFormatter, formatResponse } from './response-formatter.js';
export { default as ServiceFactory } from './service-factory.js';
export { default as ErrorHandler } from './error-handler.js';

// Re-export commonly used functions
export {
    getEmployeeService,
    getWorkHistoryService,
    getAttendanceService,
    getRecruitmentService,
    getStoreService,
    getPositionService,
    getAuthService,
    getSessionService
} from './service-factory.js';

==============================

üìÅ File: .\server\services\utils\response-formatter.js
------------------------------
üèõÔ∏è  CLASSES:
   ‚Ä¢ ResponseFormatter (d√≤ng 2)
üîß FUNCTIONS:
   ‚Ä¢ formatResponse (d√≤ng 81) - function declaration
üì§ EXPORTS:
   ‚Ä¢ function (d√≤ng 81)
   ‚Ä¢ ResponseFormatter (d√≤ng 85)

üìÑ N·ªòI DUNG FILE:
==============================
// Response formatting utilities
class ResponseFormatter {
    static formatResponse(success, message, data = null, errorCode = null) {
        const response = {
            success,
            message,
            timestamp: new Date().toISOString()
        };

        if (success && data) {
            response.data = data;
        }

        if (!success && errorCode) {
            response.errorCode = errorCode;
        }

        return response;
    }

    static formatSuccess(message, data = null) {
        return this.formatResponse(true, message, data);
    }

    static formatError(message, errorCode = null) {
        return this.formatResponse(false, message, null, errorCode);
    }

    static formatValidationError(errors) {
        return this.formatResponse(false, 'Validation failed', null, 'VALIDATION_ERROR');
    }

    static formatNotFound(resource) {
        return this.formatResponse(false, `${resource} not found`, null, 'NOT_FOUND');
    }

    static formatUnauthorized(message = 'Unauthorized access') {
        return this.formatResponse(false, message, null, 'UNAUTHORIZED');
    }

    static formatForbidden(message = 'Forbidden access') {
        return this.formatResponse(false, message, null, 'FORBIDDEN');
    }

    static formatServerError(message = 'Internal server error') {
        return this.formatResponse(false, message, null, 'SERVER_ERROR');
    }

    static formatPaginatedResponse(data, pagination) {
        return this.formatResponse(true, 'Success', {
            items: data,
            pagination: {
                page: pagination.page || 1,
                limit: pagination.limit || 10,
                total: pagination.total || 0,
                pages: Math.ceil((pagination.total || 0) / (pagination.limit || 10))
            }
        });
    }

    static formatBatchResponse(results) {
        const successCount = results.filter(r => r.success).length;
        const failureCount = results.length - successCount;

        return this.formatResponse(
            failureCount === 0,
            `Batch operation completed: ${successCount} successful, ${failureCount} failed`,
            {
                results,
                summary: {
                    total: results.length,
                    successful: successCount,
                    failed: failureCount
                }
            }
        );
    }
}

// Legacy function for backward compatibility
export function formatResponse(success, message, data = null, errorCode = null) {
    return ResponseFormatter.formatResponse(success, message, data, errorCode);
}

export default ResponseFormatter;

==============================

üìÅ File: .\server\services\utils\service-factory.js
------------------------------
üèõÔ∏è  CLASSES:
   ‚Ä¢ ServiceFactory (d√≤ng 9)
   ‚Ä¢ register (d√≤ng 15)
üîß FUNCTIONS:
   ‚Ä¢ getEmployeeService (d√≤ng 79) - arrow function
   ‚Ä¢ getWorkHistoryService (d√≤ng 80) - arrow function
   ‚Ä¢ getAttendanceService (d√≤ng 81) - arrow function
   ‚Ä¢ getRecruitmentService (d√≤ng 82) - arrow function
   ‚Ä¢ getStoreService (d√≤ng 83) - arrow function
   ‚Ä¢ getPositionService (d√≤ng 84) - arrow function
   ‚Ä¢ getAuthService (d√≤ng 85) - arrow function
   ‚Ä¢ getSessionService (d√≤ng 86) - arrow function
üì§ EXPORTS:
   ‚Ä¢ const (d√≤ng 79)
   ‚Ä¢ const (d√≤ng 80)
   ‚Ä¢ const (d√≤ng 81)
   ‚Ä¢ const (d√≤ng 82)
   ‚Ä¢ const (d√≤ng 83)
   ‚Ä¢ const (d√≤ng 84)
   ‚Ä¢ const (d√≤ng 85)
   ‚Ä¢ const (d√≤ng 86)
   ‚Ä¢ serviceFactory (d√≤ng 88)

üìÑ N·ªòI DUNG FILE:
==============================
// Service factory for dependency injection
import { EmployeeService } from '../employee/index.js';
import { WorkHistoryService } from '../employee/index.js';
import { AttendanceService } from '../attendance/index.js';
import { RecruitmentService } from '../recruitment/index.js';
import { StoreService, PositionService } from '../master-data/index.js';
import { AuthService, SessionService } from '../auth/index.js';

class ServiceFactory {
    constructor() {
        this.services = new Map();
        this.singletons = new Map();
    }

    // Register a service class
    register(name, ServiceClass, singleton = true) {
        this.services.set(name, { ServiceClass, singleton });
    }

    // Get service instance
    get(name) {
        const serviceConfig = this.services.get(name);
        if (!serviceConfig) {
            throw new Error(`Service '${name}' not found`);
        }

        const { ServiceClass, singleton } = serviceConfig;

        if (singleton) {
            if (!this.singletons.has(name)) {
                this.singletons.set(name, new ServiceClass());
            }
            return this.singletons.get(name);
        }

        return new ServiceClass();
    }

    // Initialize all services
    async initialize() {
        for (const [name, config] of this.services.entries()) {
            const service = this.get(name);
            if (service.init && typeof service.init === 'function') {
                await service.init();
            }
        }
    }

    // Clear all singleton instances
    clear() {
        this.singletons.clear();
    }

    // Get all service names
    getServiceNames() {
        return Array.from(this.services.keys());
    }

    // Check if service exists
    has(name) {
        return this.services.has(name);
    }
}

// Create and configure the global service factory
const serviceFactory = new ServiceFactory();

// Register core services
serviceFactory.register('employee', EmployeeService, true);
serviceFactory.register('workHistory', WorkHistoryService, true);
serviceFactory.register('attendance', AttendanceService, true);
serviceFactory.register('recruitment', RecruitmentService, true);
serviceFactory.register('store', StoreService, true);
serviceFactory.register('position', PositionService, true);
serviceFactory.register('auth', AuthService, true);
serviceFactory.register('session', SessionService, true);

// Helper functions for common service access
export const getEmployeeService = () => serviceFactory.get('employee');
export const getWorkHistoryService = () => serviceFactory.get('workHistory');
export const getAttendanceService = () => serviceFactory.get('attendance');
export const getRecruitmentService = () => serviceFactory.get('recruitment');
export const getStoreService = () => serviceFactory.get('store');
export const getPositionService = () => serviceFactory.get('position');
export const getAuthService = () => serviceFactory.get('auth');
export const getSessionService = () => serviceFactory.get('session');

export default serviceFactory;

==============================

üìÅ File: .\src\App.jsx
------------------------------
üîß FUNCTIONS:
   ‚Ä¢ App (d√≤ng 22) - arrow function
   ‚Ä¢ initializeGlobalUtilities (d√≤ng 70) - arrow function
   ‚Ä¢ isProtectedPage (d√≤ng 86) - arrow function
   ‚Ä¢ isPublicPage (d√≤ng 91) - arrow function
üì§ EXPORTS:
   ‚Ä¢ App (d√≤ng 192)

üìÑ N·ªòI DUNG FILE:
==============================
import React, { useEffect, useState } from 'react';
import { Routes, Route, Navigate, useLocation } from 'react-router-dom';
import { useAuth } from './hooks/useAuth';
import { useNotification } from './hooks/useNotification';

// Components
import Layout from './components/layout/Layout';
import Loading from './components/common/Loading';
import ProtectedRoute from './components/auth/ProtectedRoute';

// Pages
import LoginPage from './pages/LoginPage';
import DashboardPage from './pages/DashboardPage';
import EmployeeManagementPage from './pages/EmployeeManagementPage';
import AttendanceLogsPage from './pages/AttendanceLogsPage';
import HRDashboardPage from './pages/HRDashboardPage';


// Global styles
import './styles/globals.css';

const App = () => {
  const [loading, setLoading] = useState(true);
  const [initialized, setInitialized] = useState(false);
  const { user, checkAuth, loading: authLoading } = useAuth();
  const { showNotification } = useNotification();
  const location = useLocation();

  useEffect(() => {
    const initializeApp = async () => {
      try {
        console.log('üöÄ Starting React app initialization...');
        
        // Initialize global utilities
        initializeGlobalUtilities();
        
        // Check authentication for protected pages
        if (isProtectedPage()) {
          console.log('üîê Checking authentication...');
          const authUser = await checkAuth();
          if (!authUser && !isPublicPage()) {
            console.log('‚ùå Authentication failed for protected page');
            return;
          }
          console.log('‚úÖ Authentication check completed');
        }
        
        setInitialized(true);
        console.log('‚úÖ React app initialization completed successfully');
        
      } catch (error) {
        console.error('‚ùå App initialization error:', error);
        
        // More specific error handling
        if (error.name === 'TypeError') {
          showNotification('L·ªói t·∫£i module. Vui l√≤ng refresh trang.', 'error');
        } else if (error.message.includes('fetch')) {
          showNotification('L·ªói k·∫øt n·ªëi server. Vui l√≤ng ki·ªÉm tra m·∫°ng.', 'error');
        } else {
          showNotification('L·ªói kh·ªüi t·∫°o ·ª©ng d·ª•ng. Vui l√≤ng refresh trang.', 'error');
        }
      } finally {
        setLoading(false);
      }
    };

    initializeApp();
  }, []);

  const initializeGlobalUtilities = () => {
    try {
      // Initialize tooltips safely
      if (typeof window.bootstrap !== 'undefined') {
        const tooltipTriggerList = [].slice.call(
          document.querySelectorAll('[data-bs-toggle="tooltip"]')
        );
        tooltipTriggerList.map(tooltipTriggerEl => {
          return new window.bootstrap.Tooltip(tooltipTriggerEl);
        });
      }
    } catch (error) {
      console.warn('Error initializing tooltips:', error);
    }
  };

  const isProtectedPage = () => {
    const publicPaths = ['/', '/login'];
    return !publicPaths.includes(location.pathname);
  };

  const isPublicPage = () => {
    const publicPaths = ['/', '/login'];
    return publicPaths.includes(location.pathname);
  };

  // Show loading spinner during initialization
  if (loading || authLoading) {
    return (
      <div className="d-flex justify-content-center align-items-center min-vh-100">
        <Loading />
      </div>
    );
  }

  // Show error message if initialization failed
  if (!initialized) {
    return (
      <div className="container mt-5">
        <div className="alert alert-danger">
          <h4>L·ªói kh·ªüi t·∫°o ·ª©ng d·ª•ng</h4>
          <p>Kh√¥ng th·ªÉ kh·ªüi t·∫°o ·ª©ng d·ª•ng. Vui l√≤ng:</p>
          <ul>
            <li>Refresh l·∫°i trang (F5)</li>
            <li>Ki·ªÉm tra k·∫øt n·ªëi m·∫°ng</li>
            <li>Li√™n h·ªá IT support n·∫øu v·∫•n ƒë·ªÅ v·∫´n ti·∫øp t·ª•c</li>
          </ul>
          <button 
            className="btn btn-primary" 
            onClick={() => window.location.reload()}
          >
            Refresh Trang
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className="App">
      <Routes>
        {/* Public routes */}
        <Route 
          path="/login" 
          element={
            user ? <Navigate to="/dashboard" replace /> : <LoginPage />
          } 
        />
        
        {/* Protected routes with Layout */}
        <Route 
          path="/" 
          element={
            <ProtectedRoute>
              <Layout />
            </ProtectedRoute>
          }
        >
          {/* Default redirect */}
          <Route index element={<Navigate to="/dashboard" replace />} />
          
          {/* Dashboard routes */}
          <Route path="dashboard" element={<DashboardPage />} />
          <Route 
            path="hr-dashboard" 
            element={
              <ProtectedRoute requiredRoles={['hr', 'admin']}>
                <HRDashboardPage />
              </ProtectedRoute>
            } 
          />
          
          {/* Employee management routes */}
          <Route 
            path="employee-management" 
            element={
              <ProtectedRoute requiredRoles={['hr', 'admin']}>
                <EmployeeManagementPage />
              </ProtectedRoute>
            } 
          />
          
          {/* Attendance routes */}
          <Route path="attendance-logs" element={<AttendanceLogsPage />} />
        </Route>

        {/* Catch all route */}
        <Route 
          path="*" 
          element={
            user ? (
              <Navigate to="/dashboard" replace />
            ) : (
              <Navigate to="/login" replace />
            )
          } 
        />
      </Routes>
    </div>
  );
};

export default App;

==============================

üìÅ File: .\src\main.jsx
------------------------------

üìÑ N·ªòI DUNG FILE:
==============================
import React from 'react';
import ReactDOM from 'react-dom/client';
import { BrowserRouter } from 'react-router-dom';
import App from './App.jsx';
import { AuthProvider } from './contexts/AuthContext.jsx';
import { NotificationProvider } from './contexts/NotificationContext.jsx';

// Import Bootstrap CSS v√† FontAwesome
import 'bootstrap/dist/css/bootstrap.min.css';
import 'bootstrap/dist/js/bootstrap.bundle.min.js';
import '@fortawesome/fontawesome-free/css/all.min.css';
import './styles/globals.css';

// Global error handler
window.addEventListener('error', (e) => {
  console.error('Global error:', e.error);
  console.error('Error details:', {
    message: e.message,
    filename: e.filename,
    lineno: e.lineno,
    colno: e.colno
  });
});

// Global unhandled promise rejection handler
window.addEventListener('unhandledrejection', (e) => {
  console.error('Unhandled promise rejection:', e.reason);
  console.error('Promise:', e.promise);
});

// Initialize tooltips when DOM is ready
document.addEventListener('DOMContentLoaded', () => {
  if (typeof window.bootstrap !== 'undefined') {
    const tooltipTriggerList = [].slice.call(
      document.querySelectorAll('[data-bs-toggle="tooltip"]')
    );
    tooltipTriggerList.map(tooltipTriggerEl => {
      return new window.bootstrap.Tooltip(tooltipTriggerEl);
    });
  }
});

ReactDOM.createRoot(document.getElementById('root')).render(
  <React.StrictMode>
    <BrowserRouter>
      <AuthProvider>
        <NotificationProvider>
          <App />
        </NotificationProvider>
      </AuthProvider>
    </BrowserRouter>
  </React.StrictMode>
);

==============================

üìÅ File: .\src\components\attendance\AttendanceFilters.jsx
------------------------------
üîß FUNCTIONS:
   ‚Ä¢ AttendanceFilters (d√≤ng 3) - arrow function
   ‚Ä¢ handleFilterSubmit (d√≤ng 9) - arrow function
üì§ EXPORTS:
   ‚Ä¢ AttendanceFilters (d√≤ng 87)

üìÑ N·ªòI DUNG FILE:
==============================
import React from 'react';

const AttendanceFilters = ({ 
  employees, 
  filters, 
  onFilterChange, 
  onClearFilters 
}) => {
  const handleFilterSubmit = (e) => {
    e.preventDefault();
    const formData = new FormData(e.target);
    const newFilters = {
      employeeId: formData.get('employeeId'),
      dateFrom: formData.get('dateFrom'),
      dateTo: formData.get('dateTo')
    };
    
    // Remove empty filters
    Object.keys(newFilters).forEach(key => {
      if (!newFilters[key]) delete newFilters[key];
    });
    
    onFilterChange(newFilters);
  };

  return (
    <form onSubmit={handleFilterSubmit} id="filterForm">
      <div className="row">
        <div className="col-md-4">
          <label className="form-label">Nh√¢n vi√™n</label>
          <select 
            className="form-select" 
            name="employeeId"
            defaultValue={filters.employeeId || ''}
          >
            <option value="">T·∫•t c·∫£ nh√¢n vi√™n</option>
            {employees.map(employee => (
              <option key={employee.id} value={employee.employeeId}>
                {employee.employeeId} - {employee.fullName}
              </option>
            ))}
          </select>
        </div>
        
        <div className="col-md-3">
          <label className="form-label">T·ª´ ng√†y</label>
          <input 
            type="date" 
            className="form-control" 
            name="dateFrom"
            defaultValue={filters.dateFrom || ''}
          />
        </div>
        
        <div className="col-md-3">
          <label className="form-label">ƒê·∫øn ng√†y</label>
          <input 
            type="date" 
            className="form-control" 
            name="dateTo"
            defaultValue={filters.dateTo || ''}
          />
        </div>
        
        <div className="col-md-2">
          <label className="form-label">&nbsp;</label>
          <div className="d-grid gap-2">
            <button type="submit" className="btn btn-primary">
              <i className="fas fa-search me-2"></i>
              L·ªçc
            </button>
            <button 
              type="button" 
              className="btn btn-outline-secondary"
              onClick={onClearFilters}
            >
              <i className="fas fa-times me-2"></i>
              X√≥a
            </button>
          </div>
        </div>
      </div>
    </form>
  );
};

export default AttendanceFilters;

==============================

üìÅ File: .\src\components\attendance\AttendanceLogs.jsx
------------------------------
üîß FUNCTIONS:
   ‚Ä¢ AttendanceLogs (d√≤ng 3) - arrow function
üì§ EXPORTS:
   ‚Ä¢ AttendanceLogs (d√≤ng 45)

üìÑ N·ªòI DUNG FILE:
==============================
import React from 'react';

const AttendanceLogs = ({ logs }) => {
  if (!logs || logs.length === 0) {
    return (
      <div className="text-center py-4">
        <i className="fas fa-calendar-times fa-3x text-muted mb-3"></i>
        <p className="text-muted">Kh√¥ng c√≥ b·∫£n ghi ch·∫•m c√¥ng n√†o</p>
      </div>
    );
  }

  return (
    <div className="table-responsive">
      <table className="table table-striped table-hover">
        <thead className="table-dark">
          <tr>
            <th>M√£ nh√¢n vi√™n</th>
            <th>Ng√†y</th>
            <th>Gi·ªù v√†o</th>
            <th>Gi·ªù ra</th>
            <th>T·ªïng gi·ªù</th>
            <th>Ghi ch√∫</th>
          </tr>
        </thead>
        <tbody>
          {logs.map((log, index) => (
            <tr key={log.id || index}>
              <td>{log.employeeId}</td>
              <td>{log.date}</td>
              <td>{log.timeIn}</td>
              <td>{log.timeOut}</td>
              <td>
                <strong className="text-primary">{log.totalHours}</strong>
              </td>
              <td>{log.notes}</td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
};

export default AttendanceLogs;

==============================

üìÅ File: .\src\components\attendance\EmployeeHours.jsx
------------------------------
üîß FUNCTIONS:
   ‚Ä¢ EmployeeHours (d√≤ng 3) - arrow function
üì§ EXPORTS:
   ‚Ä¢ EmployeeHours (d√≤ng 69)

üìÑ N·ªòI DUNG FILE:
==============================
import React from 'react';

const EmployeeHours = ({ employees, employeeHours }) => {
  const hoursData = employees
    .map(employee => {
      const hours = employeeHours[employee.employeeId];
      return {
        ...employee,
        totalHours: hours ? hours.totalHours : 0
      };
    })
    .filter(emp => emp.totalHours > 0)
    .sort((a, b) => b.totalHours - a.totalHours);

  if (hoursData.length === 0) {
    return (
      <div className="text-center py-4">
        <i className="fas fa-clock fa-3x text-muted mb-3"></i>
        <p className="text-muted">Kh√¥ng c√≥ d·ªØ li·ªáu gi·ªù c√¥ng</p>
      </div>
    );
  }

  return (
    <div className="table-responsive">
      <table className="table table-striped table-hover">
        <thead className="table-dark">
          <tr>
            <th>M√£ nh√¢n vi√™n</th>
            <th>H·ªç t√™n</th>
            <th>T·ªïng gi·ªù c√¥ng</th>
            <th>S·ªë ng√†y</th>
            <th>Trung b√¨nh/ng√†y</th>
          </tr>
        </thead>
        <tbody>
          {hoursData.map((employee) => {
            const hours = employeeHours[employee.employeeId];
            const avgHours = hours ? (hours.totalHours / (hours.totalDays || 1)) : 0;
            
            return (
              <tr key={employee.id}>
                <td>{employee.employeeId}</td>
                <td>{employee.fullName}</td>
                <td>
                  <strong className="text-success">
                    {employee.totalHours.toFixed(1)} gi·ªù
                  </strong>
                </td>
                <td>
                  <span className="badge bg-info">
                    {hours ? hours.totalDays : 0} ng√†y
                  </span>
                </td>
                <td>
                  <span className="text-muted">
                    {avgHours.toFixed(1)} gi·ªù/ng√†y
                  </span>
                </td>
              </tr>
            );
          })}
        </tbody>
      </table>
    </div>
  );
};

export default EmployeeHours;

==============================

üìÅ File: .\src\components\auth\LoginForm.jsx
------------------------------

üìÑ N·ªòI DUNG FILE:
==============================

==============================

üìÅ File: .\src\components\auth\ProtectedRoute.jsx
------------------------------
üîß FUNCTIONS:
   ‚Ä¢ ProtectedRoute (d√≤ng 6) - arrow function
üì§ EXPORTS:
   ‚Ä¢ ProtectedRoute (d√≤ng 39)

üìÑ N·ªòI DUNG FILE:
==============================
import React from 'react';
import { Navigate, useLocation } from 'react-router-dom';
import { useAuth } from '../../hooks/useAuth';
import Loading from '../common/Loading';

const ProtectedRoute = ({ children, requiredRoles = [] }) => {
  const { user, loading } = useAuth();
  const location = useLocation();

  if (loading) {
    return <Loading fullScreen text="ƒêang ki·ªÉm tra quy·ªÅn truy c·∫≠p..." />;
  }

  if (!user) {
    return <Navigate to="/login" state={{ from: location }} replace />;
  }

  // Check role-based access
  if (requiredRoles.length > 0 && !requiredRoles.includes(user.role)) {
    return (
      <div className="container mt-5">
        <div className="alert alert-danger">
          <h4>Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p</h4>
          <p>B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p v√†o trang n√†y.</p>
          <button 
            className="btn btn-primary" 
            onClick={() => window.history.back()}
          >
            Quay l·∫°i
          </button>
        </div>
      </div>
    );
  }

  return children;
};

export default ProtectedRoute;

==============================

üìÅ File: .\src\components\common\Alert.jsx
------------------------------

üìÑ N·ªòI DUNG FILE:
==============================

==============================

üìÅ File: .\src\components\common\Loading.jsx
------------------------------
üîß FUNCTIONS:
   ‚Ä¢ Loading (d√≤ng 3) - arrow function
   ‚Ä¢ getSizeClass (d√≤ng 9) - arrow function
   ‚Ä¢ LoadingSpinner (d√≤ng 17) - arrow function
   ‚Ä¢ LoadingWrapper (d√≤ng 67) - arrow function
   ‚Ä¢ ButtonLoading (d√≤ng 75) - arrow function
üì§ EXPORTS:
   ‚Ä¢ const (d√≤ng 67)
   ‚Ä¢ const (d√≤ng 75)
   ‚Ä¢ Loading (d√≤ng 90)

üìÑ N·ªòI DUNG FILE:
==============================
import React from 'react';

const Loading = ({ 
  size = 'medium', 
  text = 'ƒêang t·∫£i...', 
  overlay = false,
  fullScreen = false 
}) => {
  const getSizeClass = () => {
    switch (size) {
      case 'small': return 'spinner-border-sm';
      case 'large': return 'spinner-border spinner-border-lg';
      default: return 'spinner-border';
    }
  };

  const LoadingSpinner = () => (
    <div className="d-flex flex-column align-items-center justify-content-center p-3">
      <div className={`${getSizeClass()} text-primary`} role="status">
        <span className="visually-hidden">Loading...</span>
      </div>
      {text && (
        <div className="mt-2 text-muted small">
          {text}
        </div>
      )}
    </div>
  );

  if (fullScreen) {
    return (
      <div 
        className="position-fixed top-0 start-0 w-100 h-100 d-flex align-items-center justify-content-center"
        style={{ 
          backgroundColor: 'rgba(255, 255, 255, 0.9)', 
          zIndex: 9999 
        }}
      >
        <div className="text-center">
          <div className="spinner-border spinner-border-lg text-primary" role="status">
            <span className="visually-hidden">Loading...</span>
          </div>
          <div className="mt-3 h5 text-muted">{text}</div>
        </div>
      </div>
    );
  }

  if (overlay) {
    return (
      <div 
        className="position-absolute top-0 start-0 w-100 h-100 d-flex align-items-center justify-content-center"
        style={{ 
          backgroundColor: 'rgba(255, 255, 255, 0.8)', 
          zIndex: 1000 
        }}
      >
        <LoadingSpinner />
      </div>
    );
  }

  return <LoadingSpinner />;
};

// Loading wrapper component for conditional loading states
export const LoadingWrapper = ({ loading, children, ...loadingProps }) => {
  if (loading) {
    return <Loading {...loadingProps} />;
  }
  return children;
};

// Inline loading component for buttons
export const ButtonLoading = ({ loading, children, disabled, ...props }) => {
  return (
    <button 
      {...props} 
      disabled={disabled || loading}
      className={`${props.className || ''} ${loading ? 'position-relative' : ''}`}
    >
      {loading && (
        <span className="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
      )}
      {children}
    </button>
  );
};

export default Loading;

==============================

üìÅ File: .\src\components\common\Modal.jsx
------------------------------
üîß FUNCTIONS:
   ‚Ä¢ Modal (d√≤ng 4) - arrow function
   ‚Ä¢ handleBackdropClick (d√≤ng 7) - arrow function
üì§ EXPORTS:
   ‚Ä¢ Modal (d√≤ng 38)

üìÑ N·ªòI DUNG FILE:
==============================
// src/components/common/Modal.jsx
import React from 'react';

const Modal = ({ isOpen, onClose, title, children, size = 'md' }) => {
  if (!isOpen) return null;

  const handleBackdropClick = (e) => {
    if (e.target === e.currentTarget) {
      onClose();
    }
  };

  return (
    <div 
      className="modal fade show d-block" 
      style={{ backgroundColor: 'rgba(0,0,0,0.5)' }}
      onClick={handleBackdropClick}
    >
      <div className={`modal-dialog modal-${size} modal-dialog-centered`}>
        <div className="modal-content">
          <div className="modal-header">
            <h5 className="modal-title">{title}</h5>
            <button 
              type="button" 
              className="btn-close" 
              onClick={onClose}
            ></button>
          </div>
          <div className="modal-body">
            {children}
          </div>
        </div>
      </div>
    </div>
  );
};

export default Modal;

==============================

üìÅ File: .\src\components\common\Table.jsx
------------------------------

üìÑ N·ªòI DUNG FILE:
==============================

==============================

üìÅ File: .\src\components\dashboard\Dashboard.jsx
------------------------------
üîß FUNCTIONS:
   ‚Ä¢ Dashboard (d√≤ng 8) - arrow function
üì§ EXPORTS:
   ‚Ä¢ Dashboard (d√≤ng 206)

üìÑ N·ªòI DUNG FILE:
==============================
// src/components/dashboard/Dashboard.jsx
import React, { useState, useEffect } from 'react';
import { useAuth } from '../../hooks/useAuth';
import { ApiClient } from '../../services/api';
import Loading from '../common/Loading';
import { useNotification } from '../../hooks/useNotification';

const Dashboard = () => {
  const [stats, setStats] = useState({});
  const [loading, setLoading] = useState(true);
  const { user } = useAuth();
  const { showNotification } = useNotification();

  useEffect(() => {
    loadStats();
    
    // Auto refresh every 5 minutes
    const interval = setInterval(loadStats, 5 * 60 * 1000);
    return () => clearInterval(interval);
  }, []);

  const loadStats = async () => {
    try {
      console.log('üîç Dashboard: Loading stats...');
      const response = await ApiClient.get('/api/employees/stats');
      
      console.log('üì® Dashboard: Raw response:', response);
      console.log('‚úÖ Dashboard: Response success:', response.success);
      console.log('üìä Dashboard: Response data:', response.data);
      
      // ‚úÖ FIX: S·ª≠ d·ª•ng response.data thay v√¨ response
      if (response.success && response.data) {
        console.log('‚úÖ Dashboard: Setting stats to:', response.data);
        setStats(response.data);
      } else {
        console.warn('‚ö†Ô∏è Dashboard: API returned success: false');
        showNotification('Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu th·ªëng k√™', 'warning');
      }
      
    } catch (error) {
      console.error('‚ùå Dashboard: Error loading stats:', error);
      showNotification('L·ªói khi t·∫£i th·ªëng k√™ dashboard', 'error');
    } finally {
      setLoading(false);
    }
  };

  const handleRefresh = async () => {
    setLoading(true);
    await loadStats();
    showNotification('ƒê√£ c·∫≠p nh·∫≠t d·ªØ li·ªáu dashboard', 'success');
  };

  // ‚úÖ DEBUG: Log current stats state
  console.log('üéØ Dashboard render - Current stats:', stats);
  console.log('üéØ Dashboard render - Loading:', loading);

  if (loading) {
    return <Loading fullScreen text="ƒêang t·∫£i dashboard..." />;
  }

  return (
    <div className="dashboard-page">
      {/* ‚úÖ DEBUG INFO - Remove this after fixing */}
      <div style={{ 
        background: '#f8f9fa', 
        border: '1px solid #dee2e6', 
        borderRadius: '0.25rem', 
        padding: '1rem', 
        marginBottom: '1rem' 
      }}>
        <h6 className="text-muted mb-2">üêõ DEBUG INFO:</h6>
        <small className="d-block">Raw stats: {JSON.stringify(stats)}</small>
        <small className="d-block">Total Employees: {stats.totalEmployees}</small>
        <small className="d-block">Active Employees: {stats.activeEmployees}</small>
        <small className="d-block">Inactive Employees: {stats.inactiveEmployees}</small>
      </div>

      {/* Header */}
      <div className="d-flex justify-content-between align-items-center mb-4">
        <div>
          <h1>Dashboard</h1>
          <p className="text-muted mb-0">Ch√†o m·ª´ng tr·ªü l·∫°i, {user?.fullName}!</p>
        </div>
        <button 
          className="btn btn-outline-primary"
          onClick={handleRefresh}
          disabled={loading}
        >
          <i className={`fas fa-sync-alt me-2 ${loading ? 'fa-spin' : ''}`}></i>
          L√†m m·ªõi
        </button>
      </div>

      {/* Stats Cards */}
      <div className="row mb-4">
        <div className="col-md-4 mb-3">
          <div className="card text-center bg-primary text-white h-100">
            <div className="card-body">
              <i className="fas fa-users fa-3x mb-3"></i>
              <h2 className="card-title" id="totalEmployees">
                {stats.totalEmployees || 0}
              </h2>
              <p className="card-text">T·ªïng nh√¢n vi√™n</p>
            </div>
          </div>
        </div>

        <div className="col-md-4 mb-3">
          <div className="card text-center bg-success text-white h-100">
            <div className="card-body">
              <i className="fas fa-user-check fa-3x mb-3"></i>
              <h2 className="card-title" id="activeEmployees">
                {stats.activeEmployees || 0}
              </h2>
              <p className="card-text">Nh√¢n vi√™n ho·∫°t ƒë·ªông</p>
            </div>
          </div>
        </div>

        <div className="col-md-4 mb-3">
          <div className="card text-center bg-info text-white h-100">
            <div className="card-body">
              <i className="fas fa-user-times fa-3x mb-3"></i>
              <h2 className="card-title" id="inactiveEmployees">
                {stats.inactiveEmployees || 0}
              </h2>
              <p className="card-text">Nh√¢n vi√™n kh√¥ng ho·∫°t ƒë·ªông</p>
            </div>
          </div>
        </div>
      </div>

      {/* Quick Actions */}
      <div className="row">
        <div className="col-12">
          <div className="card">
            <div className="card-header">
              <h5 className="card-title mb-0">Truy c·∫≠p nhanh</h5>
            </div>
            <div className="card-body">
              <div className="row">
                <div className="col-md-4 mb-3">
                  <a href="/attendance-logs" className="btn btn-outline-info w-100 h-100 d-flex flex-column justify-content-center">
                    <i className="fas fa-clock fa-2x mb-2"></i>
                    <span>Xem ch·∫•m c√¥ng</span>
                  </a>
                </div>

                {(user?.role === 'hr' || user?.role === 'admin') && (
                  <>
                    <div className="col-md-4 mb-3">
                      <a href="/employee-management" className="btn btn-outline-primary w-100 h-100 d-flex flex-column justify-content-center">
                        <i className="fas fa-users-cog fa-2x mb-2"></i>
                        <span>Qu·∫£n l√Ω nh√¢n vi√™n</span>
                      </a>
                    </div>
                    
                    <div className="col-md-4 mb-3">
                      <a href="/hr-dashboard" className="btn btn-outline-success w-100 h-100 d-flex flex-column justify-content-center">
                        <i className="fas fa-chart-bar fa-2x mb-2"></i>
                        <span>HR Dashboard</span>
                      </a>
                    </div>
                  </>
                )}
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* HR Functions */}
      {(user?.role === 'hr' || user?.role === 'admin') && (
        <div className="row mt-4">
          <div className="col-12">
            <div className="card">
              <div className="card-body text-center">
                <h5>Ch·ª©c nƒÉng HR</h5>
                <p className="text-muted">Truy c·∫≠p c√°c c√¥ng c·ª• d√†nh cho HR</p>
                <a 
                  href="https://forms.google.com/your-form-url" 
                  target="_blank"
                  rel="noopener noreferrer"
                  className="btn btn-outline-success me-2"
                >
                  <i className="fas fa-external-link-alt me-2"></i>
                  M·ªü Google Form tuy·ªÉn d·ª•ng
                </a>
                <a 
                  href="/hr-dashboard" 
                  className="btn btn-primary"
                >
                  <i className="fas fa-chart-line me-2"></i>
                  Xem b√°o c√°o HR
                </a>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default Dashboard;

==============================

üìÅ File: .\src\components\dashboard\HRDashboard.jsx
------------------------------

üìÑ N·ªòI DUNG FILE:
==============================

==============================

üìÅ File: .\src\components\dashboard\StatsCard.jsx
------------------------------

üìÑ N·ªòI DUNG FILE:
==============================

==============================

üìÅ File: .\src\components\employee\AddWorkHistoryModal.jsx
------------------------------
üîß FUNCTIONS:
   ‚Ä¢ AddWorkHistoryModal (d√≤ng 9) - arrow function
   ‚Ä¢ handleRecruitmentSelect (d√≤ng 15) - arrow function
üì§ EXPORTS:
   ‚Ä¢ AddWorkHistoryModal (d√≤ng 153)

üìÑ N·ªòI DUNG FILE:
==============================
// src/components/employee/AddWorkHistoryModal.jsx
import React, { useState } from 'react';
import { addWorkHistory } from '../../services/employee.js';
import { useNotification } from '../../hooks/useNotification';
import { ButtonLoading } from '../common/Loading';
import Modal from '../common/Modal';
import RecruitmentModal from './RecruitmentModal';

const AddWorkHistoryModal = ({ isOpen, onClose, employeeId, employeeName, onWorkHistoryAdded }) => {
  const [selectedRecruitment, setSelectedRecruitment] = useState(null);
  const [showRecruitmentModal, setShowRecruitmentModal] = useState(false);
  const [loading, setLoading] = useState(false);
  const { showNotification } = useNotification();

  const handleRecruitmentSelect = (recruitments) => {
    if (recruitments && recruitments.length > 0) {
      setSelectedRecruitment(recruitments[0]); // Ch·ªâ ch·ªçn 1
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    
    if (!selectedRecruitment) {
      showNotification('Vui l√≤ng ch·ªçn ƒë·ªÅ xu·∫•t tuy·ªÉn d·ª•ng', 'error');
      return;
    }

    setLoading(true);
    
    try {
      const workHistoryData = {
        employeeId: employeeId,
        requestNo: selectedRecruitment.requestNo
      };

      const response = await addWorkHistory(workHistoryData);
      
      if (response.success) {
        showNotification('Th√™m work history th√†nh c√¥ng!', 'success');
        onWorkHistoryAdded?.();
        onClose();
        setSelectedRecruitment(null);
      } else {
        showNotification(response.message || 'L·ªói khi th√™m work history', 'error');
      }
      
    } catch (error) {
      console.error('‚ùå Error adding work history:', error);
      showNotification(error.message || 'L·ªói k·∫øt n·ªëi ƒë·∫øn server. Vui l√≤ng th·ª≠ l·∫°i.', 'error');
    } finally {
      setLoading(false);
    }
  };

  if (!isOpen) return null;

  return (
    <>
      <Modal 
        isOpen={isOpen} 
        onClose={onClose}
        title={`Th√™m Work History - ${employeeName || employeeId}`}
        size="md"
      >
        <form onSubmit={handleSubmit}>
          <div className="mb-3">
            <label className="form-label">M√£ nh√¢n vi√™n</label>
            <input
              type="text"
              className="form-control"
              value={employeeId}
              disabled
            />
          </div>

          <div className="mb-3">
            <label className="form-label">ƒê·ªÅ xu·∫•t tuy·ªÉn d·ª•ng *</label>
            
            <div className="d-flex align-items-center gap-2 mb-2">
              <button
                type="button"
                className="btn btn-outline-primary"
                onClick={() => setShowRecruitmentModal(true)}
              >
                <i className="fas fa-plus me-2"></i>
                Ch·ªçn ƒë·ªÅ xu·∫•t
              </button>
              
              {selectedRecruitment && (
                <span className="badge bg-success">
                  <i className="fas fa-check me-1"></i>
                  ƒê√£ ch·ªçn
                </span>
              )}
            </div>

            {selectedRecruitment && (
              <div className="mt-2">
                <div className="card">
                  <div className="card-body py-2">
                    <div className="d-flex justify-content-between align-items-center">
                      <div>
                        <strong>{selectedRecruitment.requestNo}</strong> - {selectedRecruitment.department}
                        <br />
                        <small className="text-muted">
                          {selectedRecruitment.quantity} ng∆∞·ªùi ‚Ä¢ {selectedRecruitment.gender}
                        </small>
                      </div>
                      <button
                        type="button"
                        className="btn btn-outline-danger btn-sm"
                        onClick={() => setSelectedRecruitment(null)}
                      >
                        <i className="fas fa-times"></i>
                      </button>
                    </div>
                  </div>
                </div>
              </div>
            )}
          </div>

          <div className="d-flex gap-2 justify-content-end">
            <button type="button" className="btn btn-secondary" onClick={onClose}>
              H·ªßy
            </button>
            <ButtonLoading
              type="submit"
              className="btn btn-primary"
              loading={loading}
              disabled={loading || !selectedRecruitment}
            >
              {loading ? 'ƒêang th√™m...' : 'Th√™m Work History'}
            </ButtonLoading>
          </div>
        </form>
      </Modal>

      {showRecruitmentModal && (
        <RecruitmentModal
          isOpen={showRecruitmentModal}
          onClose={() => setShowRecruitmentModal(false)}
          onRecruitmentSelected={handleRecruitmentSelect}
          selectedRecruitment={selectedRecruitment}
          singleSelect={true}
        />
      )}
    </>
  );
};

export default AddWorkHistoryModal;

==============================

üìÅ File: .\src\components\employee\EmployeeEditModal.jsx
------------------------------
üîß FUNCTIONS:
   ‚Ä¢ EmployeeEditModal (d√≤ng 8) - arrow function
   ‚Ä¢ handleInputChange (d√≤ng 38) - arrow function
   ‚Ä¢ validateForm (d√≤ng 53) - arrow function
üì§ EXPORTS:
   ‚Ä¢ EmployeeEditModal (d√≤ng 256)

üìÑ N·ªòI DUNG FILE:
==============================
// src/components/employee/EmployeeEditModal.jsx
import React, { useState, useEffect } from 'react';
import { updateEmployee } from '../../services/employee.js';
import { useNotification } from '../../hooks/useNotification';
import { ButtonLoading } from '../common/Loading';
import Modal from '../common/Modal';

const EmployeeEditModal = ({ isOpen, onClose, employee, onEmployeeUpdated }) => {
  const [formData, setFormData] = useState({
    fullName: '',
    phoneNumber: '',
    gender: '',
    hourlyRate: '',
    bankAccount: '',
    bankName: '',
    status: 'active'
  });
  const [formErrors, setFormErrors] = useState({});
  const [loading, setLoading] = useState(false);
  const { showNotification } = useNotification();

  // Load employee data when modal opens
  useEffect(() => {
    if (employee && isOpen) {
      setFormData({
        fullName: employee.fullName || '',
        phoneNumber: employee.phoneNumber || '',
        gender: employee.gender || '',
        hourlyRate: employee.hourlyRate || '',
        bankAccount: employee.bankAccount || '',
        bankName: employee.bankName || '',
        status: employee.status || 'active'
      });
      setFormErrors({});
    }
  }, [employee, isOpen]);

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
    
    if (formErrors[name]) {
      setFormErrors(prev => ({
        ...prev,
        [name]: ''
      }));
    }
  };

  const validateForm = () => {
    const newErrors = {};
    
    if (!formData.fullName.trim()) {
      newErrors.fullName = 'H·ªç t√™n l√† b·∫Øt bu·ªôc';
    }
    
    if (!formData.phoneNumber.trim()) {
      newErrors.phoneNumber = 'S·ªë ƒëi·ªán tho·∫°i l√† b·∫Øt bu·ªôc';
    } else if (!/^\d{10,11}$/.test(formData.phoneNumber)) {
      newErrors.phoneNumber = 'S·ªë ƒëi·ªán tho·∫°i kh√¥ng h·ª£p l·ªá';
    }
    
    if (!formData.gender) {
      newErrors.gender = 'Gi·ªõi t√≠nh l√† b·∫Øt bu·ªôc';
    }
    
    if (!formData.hourlyRate || parseFloat(formData.hourlyRate) <= 0) {
      newErrors.hourlyRate = 'M·ª©c l∆∞∆°ng/gi·ªù ph·∫£i l·ªõn h∆°n 0';
    }
    
    if (!formData.bankAccount.trim()) {
      newErrors.bankAccount = 'S·ªë t√†i kho·∫£n l√† b·∫Øt bu·ªôc';
    }
    
    if (!formData.bankName.trim()) {
      newErrors.bankName = 'Ng√¢n h√†ng l√† b·∫Øt bu·ªôc';
    }

    setFormErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    
    if (!validateForm()) {
      showNotification('Vui l√≤ng ki·ªÉm tra l·∫°i th√¥ng tin!', 'error');
      return;
    }

    setLoading(true);
    
    try {
      const updateData = {
        ...formData,
        hourlyRate: parseFloat(formData.hourlyRate)
      };

      const response = await updateEmployee(employee.id, updateData);
      
      if (response.success) {
        showNotification('C·∫≠p nh·∫≠t nh√¢n vi√™n th√†nh c√¥ng!', 'success');
        onEmployeeUpdated?.();
        onClose();
      } else {
        showNotification(response.message || 'L·ªói khi c·∫≠p nh·∫≠t nh√¢n vi√™n', 'error');
      }
      
    } catch (error) {
      console.error('‚ùå Error updating employee:', error);
      showNotification(error.message || 'L·ªói k·∫øt n·ªëi ƒë·∫øn server. Vui l√≤ng th·ª≠ l·∫°i.', 'error');
    } finally {
      setLoading(false);
    }
  };

  if (!isOpen) return null;

  return (
    <Modal 
      isOpen={isOpen} 
      onClose={onClose}
      title={`Ch·ªânh s·ª≠a nh√¢n vi√™n: ${employee?.fullName || ''}`}
      size="lg"
    >
      <form onSubmit={handleSubmit}>
        <div className="row">
          <div className="col-md-6">
            <div className="mb-3">
              <label className="form-label">H·ªç t√™n *</label>
              <input
                type="text"
                className={`form-control ${formErrors.fullName ? 'is-invalid' : ''}`}
                name="fullName"
                value={formData.fullName}
                onChange={handleInputChange}
              />
              {formErrors.fullName && <div className="invalid-feedback">{formErrors.fullName}</div>}
            </div>
          </div>
          
          <div className="col-md-6">
            <div className="mb-3">
              <label className="form-label">S·ªë ƒëi·ªán tho·∫°i *</label>
              <input
                type="tel"
                className={`form-control ${formErrors.phoneNumber ? 'is-invalid' : ''}`}
                name="phoneNumber"
                value={formData.phoneNumber}
                onChange={handleInputChange}
              />
              {formErrors.phoneNumber && <div className="invalid-feedback">{formErrors.phoneNumber}</div>}
            </div>
          </div>
        </div>

        <div className="row">
          <div className="col-md-6">
            <div className="mb-3">
              <label className="form-label">Gi·ªõi t√≠nh *</label>
              <select
                className={`form-select ${formErrors.gender ? 'is-invalid' : ''}`}
                name="gender"
                value={formData.gender}
                onChange={handleInputChange}
              >
                <option value="">Ch·ªçn gi·ªõi t√≠nh</option>
                <option value="Nam">Nam</option>
                <option value="N·ªØ">N·ªØ</option>
              </select>
              {formErrors.gender && <div className="invalid-feedback">{formErrors.gender}</div>}
            </div>
          </div>
          
          <div className="col-md-6">
            <div className="mb-3">
              <label className="form-label">M·ª©c l∆∞∆°ng/gi·ªù (VNƒê) *</label>
              <input
                type="number"
                className={`form-control ${formErrors.hourlyRate ? 'is-invalid' : ''}`}
                name="hourlyRate"
                value={formData.hourlyRate}
                onChange={handleInputChange}
                min="0"
                step="1000"
              />
              {formErrors.hourlyRate && <div className="invalid-feedback">{formErrors.hourlyRate}</div>}
            </div>
          </div>
        </div>

        <div className="row">
          <div className="col-md-6">
            <div className="mb-3">
              <label className="form-label">S·ªë t√†i kho·∫£n *</label>
              <input
                type="text"
                className={`form-control ${formErrors.bankAccount ? 'is-invalid' : ''}`}
                name="bankAccount"
                value={formData.bankAccount}
                onChange={handleInputChange}
              />
              {formErrors.bankAccount && <div className="invalid-feedback">{formErrors.bankAccount}</div>}
            </div>
          </div>
          
          <div className="col-md-6">
            <div className="mb-3">
              <label className="form-label">Ng√¢n h√†ng *</label>
              <input
                type="text"
                className={`form-control ${formErrors.bankName ? 'is-invalid' : ''}`}
                name="bankName"
                value={formData.bankName}
                onChange={handleInputChange}
              />
              {formErrors.bankName && <div className="invalid-feedback">{formErrors.bankName}</div>}
            </div>
          </div>
        </div>

        <div className="mb-3">
          <label className="form-label">Tr·∫°ng th√°i</label>
          <select
            className="form-select"
            name="status"
            value={formData.status}
            onChange={handleInputChange}
          >
            <option value="active">Ho·∫°t ƒë·ªông</option>
            <option value="inactive">Ng∆∞ng ho·∫°t ƒë·ªông</option>
          </select>
        </div>

        <div className="d-flex gap-2 justify-content-end">
          <button type="button" className="btn btn-secondary" onClick={onClose}>
            H·ªßy
          </button>
          <ButtonLoading
            type="submit"
            className="btn btn-primary"
            loading={loading}
            disabled={loading}
          >
            {loading ? 'ƒêang c·∫≠p nh·∫≠t...' : 'C·∫≠p nh·∫≠t'}
          </ButtonLoading>
        </div>
      </form>
    </Modal>
  );
};

export default EmployeeEditModal;

==============================

üìÅ File: .\src\components\employee\EmployeeForm.jsx
------------------------------
üîß FUNCTIONS:
   ‚Ä¢ EmployeeForm (d√≤ng 8) - arrow function
   ‚Ä¢ handleInputChange (d√≤ng 23) - arrow function
   ‚Ä¢ handleRecruitmentSelect (d√≤ng 39) - arrow function
   ‚Ä¢ removeRecruitment (d√≤ng 50) - arrow function
   ‚Ä¢ validateForm (d√≤ng 55) - arrow function
   ‚Ä¢ handleFormError (d√≤ng 151) - arrow function
üì§ EXPORTS:
   ‚Ä¢ EmployeeForm (d√≤ng 375)

üìÑ N·ªòI DUNG FILE:
==============================
// src/components/employee/EmployeeForm.jsx
import React, { useState, useEffect } from 'react';
import { addEmployee } from '../../services/employee.js';
import { useNotification } from '../../hooks/useNotification';
import { ButtonLoading } from '../common/Loading';
import RecruitmentModal from './RecruitmentModal';

const EmployeeForm = ({ onEmployeeAdded }) => {
  const [formData, setFormData] = useState({
    fullName: '',
    phoneNumber: '',
    gender: '',
    hourlyRate: '',
    bankAccount: '',
    bankName: ''
  });
  const [selectedRecruitments, setSelectedRecruitments] = useState([]);
  const [showRecruitmentModal, setShowRecruitmentModal] = useState(false);
  const [formErrors, setFormErrors] = useState({});
  const [loading, setLoading] = useState(false);
  const { showNotification } = useNotification();

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
    
    // Clear error when user starts typing
    if (formErrors[name]) {
      setFormErrors(prev => ({
        ...prev,
        [name]: ''
      }));
    }
  };

  const handleRecruitmentSelect = (recruitments) => {
    setSelectedRecruitments(recruitments);
    // Clear work history error when recruitment is selected
    if (formErrors.workHistoryData) {
      setFormErrors(prev => ({
        ...prev,
        workHistoryData: ''
      }));
    }
  };

  const removeRecruitment = (requestNoToRemove) => {
    const updated = selectedRecruitments.filter(r => r.requestNo !== requestNoToRemove);
    setSelectedRecruitments(updated);
  };

  const validateForm = () => {
    const newErrors = {};
    
    if (!formData.fullName.trim()) {
      newErrors.fullName = 'H·ªç t√™n l√† b·∫Øt bu·ªôc';
    } else if (formData.fullName.trim().length < 2) {
      newErrors.fullName = 'H·ªç t√™n ph·∫£i c√≥ √≠t nh·∫•t 2 k√Ω t·ª±';
    }
    
    if (!formData.phoneNumber.trim()) {
      newErrors.phoneNumber = 'S·ªë ƒëi·ªán tho·∫°i l√† b·∫Øt bu·ªôc';
    } else if (!/^\d{10,11}$/.test(formData.phoneNumber)) {
      newErrors.phoneNumber = 'S·ªë ƒëi·ªán tho·∫°i kh√¥ng h·ª£p l·ªá';
    }
    
    if (!formData.gender) {
      newErrors.gender = 'Gi·ªõi t√≠nh l√† b·∫Øt bu·ªôc';
    }
    
    if (!formData.hourlyRate) {
      newErrors.hourlyRate = 'M·ª©c l∆∞∆°ng/gi·ªù l√† b·∫Øt bu·ªôc';
    } else if (isNaN(formData.hourlyRate) || parseFloat(formData.hourlyRate) <= 0) {
      newErrors.hourlyRate = 'M·ª©c l∆∞∆°ng/gi·ªù ph·∫£i l√† s·ªë d∆∞∆°ng';
    }
    
    if (!formData.bankAccount.trim()) {
      newErrors.bankAccount = 'S·ªë t√†i kho·∫£n l√† b·∫Øt bu·ªôc';
    }
    
    if (!formData.bankName.trim()) {
      newErrors.bankName = 'Ng√¢n h√†ng l√† b·∫Øt bu·ªôc';
    }

    // Validate recruitment selection
    if (selectedRecruitments.length === 0) {
      newErrors.workHistoryData = 'Vui l√≤ng ch·ªçn √≠t nh·∫•t m·ªôt ƒë·ªÅ xu·∫•t tuy·ªÉn d·ª•ng';
    }

    setFormErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    
    if (!validateForm()) {
      showNotification('Vui l√≤ng ki·ªÉm tra l·∫°i th√¥ng tin!', 'error');
      return;
    }

    setLoading(true);
    
    try {
      const employeeData = {
        ...formData,
        hourlyRate: parseFloat(formData.hourlyRate),
        workHistoryData: selectedRecruitments.map(r => ({ requestNo: r.requestNo }))
      };

      console.log('üì§ Sending employee data:', employeeData);

      // ‚úÖ S·ª¨A: G·ªçi qua service
      const response = await addEmployee(employeeData);
      
      if (response.success) {
        showNotification('Th√™m nh√¢n vi√™n th√†nh c√¥ng!', 'success');
        
        // Reset form
        setFormData({
          fullName: '',
          phoneNumber: '',
          gender: '',
          hourlyRate: '',
          bankAccount: '',
          bankName: ''
        });
        setSelectedRecruitments([]);
        setFormErrors({});
        
        // Callback to parent
        if (onEmployeeAdded) {
          onEmployeeAdded(response);
        }
      } else {
        handleFormError(response);
      }
      
    } catch (error) {
      console.error('‚ùå Error adding employee:', error);
      showNotification(error.message || 'L·ªói k·∫øt n·ªëi ƒë·∫øn server. Vui l√≤ng th·ª≠ l·∫°i.', 'error');
    } finally {
      setLoading(false);
    }
  };


  const handleFormError = (response) => {
    if (response.errorCode === 'DUPLICATE_EMPLOYEE_ID') {
      showNotification(
        '‚ö†Ô∏è M√£ nh√¢n vi√™n ƒë√£ t·ªìn t·∫°i!\n\n' +
        'Nh√¢n vi√™n v·ªõi t√™n v√† s·ªë ƒëi·ªán tho·∫°i n√†y ƒë√£ c√≥ trong h·ªá th·ªëng.\n' +
        'Vui l√≤ng ki·ªÉm tra l·∫°i ho·∫∑c s·ª≠ d·ª•ng th√¥ng tin kh√°c.', 
        'error'
      );
      
      setFormErrors({
        fullName: 'T√™n ƒë√£ t·ªìn t·∫°i',
        phoneNumber: 'S·ªë ƒëi·ªán tho·∫°i ƒë√£ t·ªìn t·∫°i'
      });
    } else if (response.errorCode === 'DUPLICATE_REQUEST_NO') {
      showNotification('Kh√¥ng ƒë∆∞·ª£c tr√πng l·∫∑p Request No. trong work history!', 'error');
      setFormErrors({ workHistoryData: 'Request No. b·ªã tr√πng l·∫∑p' });
    } else if (response.errorCode === 'WORK_HISTORY_REQUIRED') {
      showNotification('Vui l√≤ng ch·ªçn √≠t nh·∫•t m·ªôt ƒë·ªÅ xu·∫•t tuy·ªÉn d·ª•ng', 'error');
      setFormErrors({ workHistoryData: 'Vui l√≤ng ch·ªçn √≠t nh·∫•t m·ªôt ƒë·ªÅ xu·∫•t tuy·ªÉn d·ª•ng' });
    } else {
      showNotification(response.message || 'L·ªói khi th√™m nh√¢n vi√™n', 'error');
    }
  };

  return (
    <>
      <form onSubmit={handleSubmit} id="employeeForm">
        {/* Basic Information */}
        <div className="mb-3">
          <label htmlFor="fullName" className="form-label">
            H·ªç t√™n <span className="text-danger">*</span>
          </label>
          <input
            type="text"
            className={`form-control ${formErrors.fullName ? 'is-invalid' : ''}`}
            id="fullName"
            name="fullName"
            value={formData.fullName}
            onChange={handleInputChange}
            required
          />
          {formErrors.fullName && (
            <div className="invalid-feedback">{formErrors.fullName}</div>
          )}
        </div>

        <div className="mb-3">
          <label htmlFor="phoneNumber" className="form-label">
            S·ªë ƒëi·ªán tho·∫°i <span className="text-danger">*</span>
          </label>
          <input
            type="tel"
            className={`form-control ${formErrors.phoneNumber ? 'is-invalid' : ''}`}
            id="phoneNumber"
            name="phoneNumber"
            value={formData.phoneNumber}
            onChange={handleInputChange}
            required
          />
          {formErrors.phoneNumber && (
            <div className="invalid-feedback">{formErrors.phoneNumber}</div>
          )}
        </div>

        <div className="mb-3">
          <label htmlFor="gender" className="form-label">
            Gi·ªõi t√≠nh <span className="text-danger">*</span>
          </label>
          <select
            className={`form-select ${formErrors.gender ? 'is-invalid' : ''}`}
            id="gender"
            name="gender"
            value={formData.gender}
            onChange={handleInputChange}
            required
          >
            <option value="">Ch·ªçn gi·ªõi t√≠nh</option>
            <option value="Nam">Nam</option>
            <option value="N·ªØ">N·ªØ</option>
          </select>
          {formErrors.gender && (
            <div className="invalid-feedback">{formErrors.gender}</div>
          )}
        </div>

        <div className="mb-3">
          <label htmlFor="hourlyRate" className="form-label">
            M·ª©c l∆∞∆°ng/gi·ªù (VNƒê) <span className="text-danger">*</span>
          </label>
          <input
            type="number"
            className={`form-control ${formErrors.hourlyRate ? 'is-invalid' : ''}`}
            id="hourlyRate"
            name="hourlyRate"
            value={formData.hourlyRate}
            onChange={handleInputChange}
            min="0"
            step="1000"
            required
          />
          {formErrors.hourlyRate && (
            <div className="invalid-feedback">{formErrors.hourlyRate}</div>
          )}
        </div>

        <div className="mb-3">
          <label htmlFor="bankAccount" className="form-label">
            S·ªë t√†i kho·∫£n <span className="text-danger">*</span>
          </label>
          <input
            type="text"
            className={`form-control ${formErrors.bankAccount ? 'is-invalid' : ''}`}
            id="bankAccount"
            name="bankAccount"
            value={formData.bankAccount}
            onChange={handleInputChange}
            required
          />
          {formErrors.bankAccount && (
            <div className="invalid-feedback">{formErrors.bankAccount}</div>
          )}
        </div>

        <div className="mb-3">
          <label htmlFor="bankName" className="form-label">
            Ng√¢n h√†ng <span className="text-danger">*</span>
          </label>
          <input
            type="text"
            className={`form-control ${formErrors.bankName ? 'is-invalid' : ''}`}
            id="bankName"
            name="bankName"
            value={formData.bankName}
            onChange={handleInputChange}
            required
          />
          {formErrors.bankName && (
            <div className="invalid-feedback">{formErrors.bankName}</div>
          )}
        </div>

        {/* Recruitment Selection Section */}
        <div className="mb-3">
          <label className="form-label">
            ƒê·ªÅ xu·∫•t tuy·ªÉn d·ª•ng <span className="text-danger">*</span>
            <span className="text-muted ms-2">(Ch·ªçn t·ª´ danh s√°ch c√≥ s·∫µn)</span>
          </label>
          
          <div className="d-flex align-items-center gap-2 mb-2">
            <button
              type="button"
              className="btn btn-outline-primary"
              onClick={() => setShowRecruitmentModal(true)}
            >
              <i className="fas fa-plus me-2"></i>
              Ch·ªçn ƒë·ªÅ xu·∫•t tuy·ªÉn d·ª•ng
            </button>
            
            {selectedRecruitments.length > 0 && (
              <span className="badge bg-success">
                <i className="fas fa-check me-1"></i>
                ƒê√£ ch·ªçn {selectedRecruitments.length} ƒë·ªÅ xu·∫•t
              </span>
            )}
          </div>

          {/* Display Selected Recruitments */}
          {selectedRecruitments.length > 0 && (
            <div className="mt-2">
              <small className="text-muted">ƒê·ªÅ xu·∫•t ƒë√£ ch·ªçn:</small>
              <div className="mt-1">
                {selectedRecruitments.map((recruitment, index) => (
                  <div key={recruitment.requestNo} className="d-inline-block me-2 mb-1">
                    <span className="badge bg-info d-flex align-items-center">
                      <i className="fas fa-clipboard-list me-1"></i>
                      <span className="me-2">
                        <strong>{recruitment.requestNo}</strong> - {recruitment.department}
                        <br />
                        <small>
                          {recruitment.quantity} ng∆∞·ªùi ‚Ä¢ {recruitment.gender}
                        </small>
                      </span>
                      <button
                        type="button"
                        className="btn-close btn-close-white"
                        style={{ fontSize: '0.6rem' }}
                        onClick={() => removeRecruitment(recruitment.requestNo)}
                        title="X√≥a ƒë·ªÅ xu·∫•t n√†y"
                      ></button>
                    </span>
                  </div>
                ))}
              </div>
            </div>
          )}

          {formErrors.workHistoryData && (
            <div className="text-danger small mt-1">{formErrors.workHistoryData}</div>
          )}
        </div>

        <ButtonLoading
          type="submit"
          className="btn btn-primary w-100"
          loading={loading}
          disabled={loading}
        >
          {loading ? 'ƒêang th√™m nh√¢n vi√™n...' : 'Th√™m nh√¢n vi√™n'}
        </ButtonLoading>
      </form>

      {/* Recruitment Selection Modal */}
      {showRecruitmentModal && (
        <RecruitmentModal
          isOpen={showRecruitmentModal}
          onClose={() => setShowRecruitmentModal(false)}
          onRecruitmentSelected={handleRecruitmentSelect}
          selectedRecruitment={selectedRecruitments[0] || null}
        />
      )}
    </>
  );
};

export default EmployeeForm;

==============================

üìÅ File: .\src\components\employee\EmployeeList.jsx
------------------------------
üîß FUNCTIONS:
   ‚Ä¢ EmployeeList (d√≤ng 7) - arrow function
   ‚Ä¢ filterEmployees (d√≤ng 92) - arrow function
   ‚Ä¢ handleAddWorkHistory (d√≤ng 145) - arrow function
   ‚Ä¢ handleViewWorkHistory (d√≤ng 151) - arrow function
üì§ EXPORTS:
   ‚Ä¢ EmployeeList (d√≤ng 229)

üìÑ N·ªòI DUNG FILE:
==============================
import React, { useState, useEffect } from 'react';
import { ApiClient } from '../../services/api';
import { useNotification } from '../../hooks/useNotification';
import EmployeeTable from './EmployeeTable';
import Loading from '../common/Loading';

const EmployeeList = () => {
  const [employees, setEmployees] = useState([]);
  const [filteredEmployees, setFilteredEmployees] = useState([]);
  const [loading, setLoading] = useState(true);
  const [searchTerm, setSearchTerm] = useState('');
  const [statusFilter, setStatusFilter] = useState('');
  const { showNotification } = useNotification();

  useEffect(() => {
    loadEmployees();
  }, []);

  useEffect(() => {
    filterEmployees();
  }, [employees, searchTerm, statusFilter]);

  const loadEmployees = async () => {
    try {
      setLoading(true);
      console.log('üîç FRONTEND: Starting loadEmployees...');
      
      const response = await ApiClient.get('/api/employees');
      
      // üö® DEBUG: In ra to√†n b·ªô response ƒë·ªÉ xem c·∫•u tr√∫c
      console.log('üîç RAW RESPONSE FROM BACKEND:', response);
      console.log('üîç Response type:', typeof response);
      console.log('üîç Response keys:', Object.keys(response || {}));
      
      // Ki·ªÉm tra t·ª´ng thu·ªôc t√≠nh
      if (response?.data) {
        console.log('üîç response.data:', response.data);
        console.log('üîç response.data type:', typeof response.data);
        console.log('üîç response.data is Array:', Array.isArray(response.data));
        
        if (Array.isArray(response.data) && response.data.length > 0) {
          console.log('üîç First employee in response.data:', response.data[0]);
          console.log('üîç First employee keys:', Object.keys(response.data[0] || {}));
        }
      }
      
      if (response?.success) {
        console.log('üîç response.success:', response.success);
      }
      
      // X·ª≠ l√Ω d·ªØ li·ªáu d·ª±a tr√™n c·∫•u tr√∫c response
      let employeeData = [];
      
      if (response && response.success && Array.isArray(response.data)) {
        // Tr∆∞·ªùng h·ª£p API tr·∫£ v·ªÅ { success: true, data: [...] }
        employeeData = response.data;
        console.log('‚úÖ Using response.data (structured format)');
      } else if (Array.isArray(response)) {
        // Tr∆∞·ªùng h·ª£p API tr·∫£ v·ªÅ tr·ª±c ti·∫øp array
        employeeData = response;
        console.log('‚úÖ Using response directly (array format)');
      } else if (response && Array.isArray(response.employees)) {
        // Tr∆∞·ªùng h·ª£p API tr·∫£ v·ªÅ { employees: [...] }
        employeeData = response.employees;
        console.log('‚úÖ Using response.employees');
      } else {
        console.warn('‚ö†Ô∏è Unknown response format, using empty array');
        employeeData = [];
      }
      
      console.log('üîç Final employeeData to set:', employeeData);
      console.log('üîç Final employeeData length:', employeeData.length);
      
      setEmployees(employeeData);
      
    } catch (error) {
      console.error('‚ùå Error loading employees:', error);
      console.error('‚ùå Error details:', {
        message: error.message,
        response: error.response?.data,
        status: error.response?.status
      });
      
      // Set empty array on error
      setEmployees([]);
      showNotification('L·ªói khi t·∫£i danh s√°ch nh√¢n vi√™n', 'error');
    } finally {
      setLoading(false);
    }
  };

  const filterEmployees = () => {
    // ƒê·∫£m b·∫£o employees lu√¥n l√† array tr∆∞·ªõc khi filter
    const safeEmployees = Array.isArray(employees) ? employees : [];
    let filtered = safeEmployees;

    if (searchTerm) {
      filtered = filtered.filter(employee => {
        // Safe check cho t·ª´ng property
        const fullName = employee?.fullName || '';
        const employeeId = employee?.employeeId || '';
        const phoneNumber = employee?.phoneNumber || '';
        
        return (
          fullName.toLowerCase().includes(searchTerm.toLowerCase()) ||
          employeeId.toLowerCase().includes(searchTerm.toLowerCase()) ||
          phoneNumber.includes(searchTerm)
        );
      });
    }

    if (statusFilter) {
      filtered = filtered.filter(employee => employee?.status === statusFilter);
    }

    setFilteredEmployees(filtered);
  };

  const handleEdit = async (employeeId) => {
    // TODO: Implement edit functionality
    console.log('Edit employee:', employeeId);
    showNotification('Ch·ª©c nƒÉng ch·ªânh s·ª≠a ƒëang ƒë∆∞·ª£c ph√°t tri·ªÉn', 'info');
  };

  const handleDelete = async (employeeId) => {
    const employee = employees.find(emp => emp?.id === employeeId);
    if (!employee) return;

    const confirmed = window.confirm(`B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a nh√¢n vi√™n "${employee.fullName || 'N/A'}"?`);
    if (!confirmed) return;

    try {
      await ApiClient.delete(`/api/employees/${employeeId}`);
      
      // Remove from local state
      setEmployees(employees.filter(emp => emp?.id !== employeeId));
      showNotification('X√≥a nh√¢n vi√™n th√†nh c√¥ng', 'success');
      
    } catch (error) {
      console.error('Error deleting employee:', error);
      showNotification('L·ªói khi x√≥a nh√¢n vi√™n', 'error');
    }
  };

  const handleAddWorkHistory = (employeeId, employeeName) => {
    // TODO: Implement add work history functionality
    console.log('Add work history for:', employeeId, employeeName);
    showNotification('Ch·ª©c nƒÉng th√™m work history ƒëang ƒë∆∞·ª£c ph√°t tri·ªÉn', 'info');
  };

  const handleViewWorkHistory = (employeeId) => {
    // TODO: Implement view work history functionality
    console.log('View work history for:', employeeId);
    showNotification('Ch·ª©c nƒÉng xem work history ƒëang ƒë∆∞·ª£c ph√°t tri·ªÉn', 'info');
  };

  const handleRefresh = async () => {
    await loadEmployees();
    showNotification('ƒê√£ l√†m m·ªõi danh s√°ch nh√¢n vi√™n', 'success');
  };

  if (loading) {
    return <Loading text="ƒêang t·∫£i danh s√°ch nh√¢n vi√™n..." />;
  }

  return (
    <div className="employee-list">
      {/* Search and Filter Controls */}
      <div className="row mb-3">
        <div className="col-md-8">
          <input
            type="text"
            className="form-control"
            placeholder="T√¨m ki·∫øm nh√¢n vi√™n (t√™n, m√£ NV, s·ªë ƒêT)..."
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            id="employeeSearch"
          />
        </div>
        <div className="col-md-3">
          <select
            className="form-select"
            value={statusFilter}
            onChange={(e) => setStatusFilter(e.target.value)}
            id="employeeStatusFilter"
          >
            <option value="">T·∫•t c·∫£ tr·∫°ng th√°i</option>
            <option value="active">Ho·∫°t ƒë·ªông</option>
            <option value="inactive">Ng∆∞ng ho·∫°t ƒë·ªông</option>
          </select>
        </div>
        <div className="col-md-1">
          <button 
            className="btn btn-outline-secondary"
            onClick={handleRefresh}
            title="L√†m m·ªõi"
          >
            <i className="fas fa-sync-alt"></i>
          </button>
        </div>
      </div>

      {/* Employee Count */}
      <div className="mb-3">
        <small className="text-muted">
          Hi·ªÉn th·ªã {filteredEmployees.length} / {employees.length} nh√¢n vi√™n
        </small>
      </div>

      {/* Debug Info - Remove this in production */}
      <div className="mb-3 p-2 bg-light border rounded">
        <small className="text-muted">
          <strong>DEBUG:</strong> employees type: {typeof employees}, isArray: {Array.isArray(employees).toString()}, length: {Array.isArray(employees) ? employees.length : 'N/A'}
        </small>
      </div>

      {/* Employee Table */}
      <EmployeeTable
        employees={filteredEmployees}
        onEdit={handleEdit}
        onDelete={handleDelete}
        onAddWorkHistory={handleAddWorkHistory}
        onViewWorkHistory={handleViewWorkHistory}
      />
    </div>
  );
};

export default EmployeeList;

==============================

üìÅ File: .\src\components\employee\EmployeeTable.jsx
------------------------------
üîß FUNCTIONS:
   ‚Ä¢ EmployeeTable (d√≤ng 3) - arrow function
üì§ EXPORTS:
   ‚Ä¢ EmployeeTable (d√≤ng 153)

üìÑ N·ªòI DUNG FILE:
==============================
import React from 'react';

const EmployeeTable = ({ 
  employees, 
  onEdit, 
  onDelete, 
  onAddWorkHistory, 
  onViewWorkHistory 
}) => {
  // Ki·ªÉm tra v√† ƒë·∫£m b·∫£o employees lu√¥n l√† array
  const employeeList = React.useMemo(() => {
    if (!employees) {
      return [];
    }
    
    // N·∫øu employees l√† object c√≥ data property (t·ª´ API response)
    if (employees.data && Array.isArray(employees.data)) {
      return employees.data;
    }
    
    // N·∫øu employees ƒë√£ l√† array
    if (Array.isArray(employees)) {
      return employees;
    }
    
    // Fallback: tr·∫£ v·ªÅ empty array
    console.warn('EmployeeTable: employees prop is not an array:', typeof employees, employees);
    return [];
  }, [employees]);

  if (!employeeList || employeeList.length === 0) {
    return (
      <div className="text-center py-4">
        <i className="fas fa-users fa-3x text-muted mb-3"></i>
        <p className="text-muted">Kh√¥ng c√≥ nh√¢n vi√™n n√†o</p>
      </div>
    );
  }

  return (
    <div className="table-responsive">
      <table className="table table-striped table-hover">
        <thead className="table-dark">
          <tr>
            <th>M√£ NV</th>
            <th>H·ªç t√™n</th>
            <th>S·ªë ƒêT</th>
            <th>Gi·ªõi t√≠nh</th>
            <th>L∆∞∆°ng/gi·ªù</th>
            <th>T√†i kho·∫£n</th>
            <th>Ng√¢n h√†ng</th>
            <th>Tr·∫°ng th√°i</th>
            <th>Thao t√°c</th>
          </tr>
        </thead>
        <tbody id="employeeTableBody">
          {employeeList.map((employee, index) => {
            // ƒê·∫£m b·∫£o m·ªói employee c√≥ ƒë·ªß thu·ªôc t√≠nh
            const safeEmployee = {
              id: employee?.id || `emp_${index}`,
              employeeId: employee?.employeeId || 'N/A',
              fullName: employee?.fullName || 'N/A',
              phoneNumber: employee?.phoneNumber || 'N/A',
              gender: employee?.gender || 'N/A',
              hourlyRate: employee?.hourlyRate || 0,
              bankAccount: employee?.bankAccount || 'N/A',
              bankName: employee?.bankName || 'N/A',
              status: employee?.status || 'inactive'
            };

            return (
              <tr key={safeEmployee.id}>
                <td>{safeEmployee.employeeId}</td>
                <td>{safeEmployee.fullName}</td>
                <td>{safeEmployee.phoneNumber}</td>
                <td>{safeEmployee.gender}</td>
                <td>
                  {safeEmployee.hourlyRate && safeEmployee.hourlyRate > 0
                    ? safeEmployee.hourlyRate.toLocaleString('vi-VN') + ' VNƒê'
                    : 'N/A'
                  }
                </td>
                <td>{safeEmployee.bankAccount}</td>
                <td>{safeEmployee.bankName}</td>
                <td>
                  <span className={`badge ${
                    safeEmployee.status === 'active' 
                      ? 'bg-success' 
                      : 'bg-secondary'
                  }`}>
                    {safeEmployee.status === 'active' 
                      ? 'Ho·∫°t ƒë·ªông' 
                      : 'Ng∆∞ng ho·∫°t ƒë·ªông'
                    }
                  </span>
                </td>
                <td>
                  <div className="btn-group" role="group">
                    {onAddWorkHistory && (
                      <button
                        className="btn btn-sm btn-success"
                        onClick={() => onAddWorkHistory(safeEmployee.employeeId, safeEmployee.fullName)}
                        title="Th√™m work history"
                      >
                        <i className="fas fa-plus"></i>
                      </button>
                    )}
                    
                    {onViewWorkHistory && (
                      <button
                        className="btn btn-sm btn-info"
                        onClick={() => onViewWorkHistory(safeEmployee.employeeId)}
                        title="Xem l·ªãch s·ª≠"
                      >
                        <i className="fas fa-history"></i>
                      </button>
                    )}
                    
                    {onEdit && (
                      <button
                        className="btn btn-sm btn-primary"
                        onClick={() => onEdit(safeEmployee.id)}
                        title="Ch·ªânh s·ª≠a"
                      >
                        <i className="fas fa-edit"></i>
                      </button>
                    )}
                    
                    {onDelete && (
                      <button
                        className="btn btn-sm btn-danger"
                        onClick={() => {
                          if (window.confirm(`B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a nh√¢n vi√™n "${safeEmployee.fullName}"?`)) {
                            onDelete(safeEmployee.id);
                          }
                        }}
                        title="X√≥a"
                      >
                        <i className="fas fa-trash"></i>
                      </button>
                    )}
                  </div>
                </td>
              </tr>
            );
          })}
        </tbody>
      </table>
    </div>
  );
};

export default EmployeeTable;

==============================

üìÅ File: .\src\components\employee\RecruitmentModal.jsx
------------------------------
üîß FUNCTIONS:
   ‚Ä¢ RecruitmentModal (d√≤ng 7) - arrow function
   ‚Ä¢ getMockData (d√≤ng 42) - arrow function
   ‚Ä¢ handleItemSelect (d√≤ng 79) - arrow function
   ‚Ä¢ handleConfirm (d√≤ng 83) - arrow function
   ‚Ä¢ handleCancel (d√≤ng 94) - arrow function
üì§ EXPORTS:
   ‚Ä¢ RecruitmentModal (d√≤ng 257)

üìÑ N·ªòI DUNG FILE:
==============================
// src/components/employee/RecruitmentModal.jsx
import React, { useState, useEffect } from 'react';
import { ApiClient } from '../../services/api';
import { useNotification } from '../../hooks/useNotification';
import Loading from '../common/Loading';

const RecruitmentModal = ({ isOpen, onClose, onRecruitmentSelected, selectedRecruitment = null }) => {
  const [recruitmentData, setRecruitmentData] = useState([]);
  const [loading, setLoading] = useState(false);
  // ‚úÖ S·ª¨A: Ch·ªâ cho ph√©p ch·ªçn 1 ƒë·ªÅ xu·∫•t
  const [selectedItem, setSelectedItem] = useState(null);
  const [searchTerm, setSearchTerm] = useState('');
  const { showNotification } = useNotification();

  useEffect(() => {
    if (isOpen) {
      loadRecruitmentData();
      // ‚úÖ S·ª¨A: Set selected item t·ª´ props
      setSelectedItem(selectedRecruitment);
    }
  }, [isOpen, selectedRecruitment]);

  const loadRecruitmentData = async () => {
    try {
      setLoading(true);
      const response = await ApiClient.get('/api/recruitment');
      
      if (response.success) {
        setRecruitmentData(response.data || []);
      } else {
        throw new Error(response.message || 'L·ªói khi t·∫£i d·ªØ li·ªáu');
      }
    } catch (error) {
      console.error('Error loading recruitment data:', error);
      showNotification('L·ªói khi t·∫£i d·ªØ li·ªáu tuy·ªÉn d·ª•ng. S·ª≠ d·ª•ng d·ªØ li·ªáu m·∫´u.', 'warning');
      setRecruitmentData(getMockData());
    } finally {
      setLoading(false);
    }
  };

  const getMockData = () => {
    return [
      {
        id: '1',
        requestNo: '202507140017',
        requester: '236LH.Nguy·ªÖn Huy Th√†nh',
        status: 'ƒêang tuy·ªÉn d·ª•ng',
        department: '116 C·∫ßu Gi·∫•y',
        quantity: '2',
        gender: 'Nam/N·ªØ',
        fromDate: '2025-07-14',
        toDate: '2025-08-14',
        position: 'Nh√¢n vi√™n b√°n h√†ng'
      },
      {
        id: '2',
        requestNo: '202507140018',
        requester: '225VVN.Nguy·ªÖn Tr·ªçng Ho√†ng An',
        status: 'ƒêang tuy·ªÉn d·ª•ng', 
        department: 'Tr√¢m Tr·ªói',
        quantity: '1',
        gender: 'N·ªØ',
        fromDate: '2025-07-14',
        toDate: '2025-08-14',
        position: 'Thu ng√¢n'
      }
    ];
  };

  const filteredData = recruitmentData.filter(item =>
    item.requestNo?.toLowerCase().includes(searchTerm.toLowerCase()) ||
    item.department?.toLowerCase().includes(searchTerm.toLowerCase()) ||
    item.requester?.toLowerCase().includes(searchTerm.toLowerCase()) ||
    item.position?.toLowerCase().includes(searchTerm.toLowerCase())
  );

  // ‚úÖ S·ª¨A: Handle single selection
  const handleItemSelect = (item) => {
    setSelectedItem(selectedItem?.requestNo === item.requestNo ? null : item);
  };

  const handleConfirm = () => {
    if (!selectedItem) {
      showNotification('Vui l√≤ng ch·ªçn m·ªôt ƒë·ªÅ xu·∫•t tuy·ªÉn d·ª•ng', 'warning');
      return;
    }
    
    // ‚úÖ S·ª¨A: Ch·ªâ tr·∫£ v·ªÅ text c·ªßa Request No.
    onRecruitmentSelected([selectedItem]);
    onClose();
  };

  const handleCancel = () => {
    setSelectedItem(selectedRecruitment);
    onClose();
  };

  if (!isOpen) return null;

  return (
    <div className="modal fade show" style={{ display: 'block' }} tabIndex="-1">
      <div className="modal-dialog modal-xl">
        <div className="modal-content">
          <div className="modal-header">
            <h5 className="modal-title">
              <i className="fas fa-clipboard-list me-2"></i>
              Ch·ªçn ƒë·ªÅ xu·∫•t tuy·ªÉn d·ª•ng
            </h5>
            <button
              type="button"
              className="btn-close"
              onClick={handleCancel}
            ></button>
          </div>

          <div className="modal-body">
            {/* Search */}
            <div className="row mb-3">
              <div className="col-12">
                <div className="input-group">
                  <span className="input-group-text">
                    <i className="fas fa-search"></i>
                  </span>
                  <input
                    type="text"
                    className="form-control"
                    placeholder="T√¨m ki·∫øm theo Request No, Ph√≤ng ban, Ng∆∞·ªùi y√™u c·∫ßu, V·ªã tr√≠..."
                    value={searchTerm}
                    onChange={(e) => setSearchTerm(e.target.value)}
                  />
                </div>
              </div>
            </div>

            {/* Selected Info */}
            {selectedItem && (
              <div className="alert alert-info">
                <i className="fas fa-info-circle me-2"></i>
                ƒê√£ ch·ªçn: <strong>{selectedItem.requestNo}</strong> - {selectedItem.position} ({selectedItem.department})
              </div>
            )}

            {/* Content */}
            {loading ? (
              <Loading text="ƒêang t·∫£i danh s√°ch ƒë·ªÅ xu·∫•t..." />
            ) : (
              <div className="table-responsive" style={{ maxHeight: '400px', overflowY: 'auto' }}>
                <table className="table table-striped table-hover">
                  <thead className="table-dark sticky-top">
                    <tr>
                      <th width="50">
                        <i className="fas fa-check"></i>
                      </th>
                      <th>Request No.</th>
                      <th>V·ªã tr√≠ tuy·ªÉn d·ª•ng</th>
                      <th>Ng∆∞·ªùi y√™u c·∫ßu</th>
                      <th>Ph√≤ng ban</th>
                      <th>S·ªë l∆∞·ª£ng</th>
                      <th>Gi·ªõi t√≠nh</th>
                      <th>Th·ªùi gian</th>
                      <th>Tr·∫°ng th√°i</th>
                    </tr>
                  </thead>
                  <tbody>
                    {filteredData.map((item) => {
                      const isSelected = selectedItem?.requestNo === item.requestNo;
                      
                      return (
                        <tr 
                          key={item.id || item.requestNo}
                          className={isSelected ? 'table-primary' : ''}
                          style={{ cursor: 'pointer' }}
                          onClick={() => handleItemSelect(item)}
                        >
                          <td>
                            {/* ‚úÖ S·ª¨A: D√πng radio button thay v√¨ checkbox */}
                            <input
                              type="radio"
                              className="form-check-input"
                              checked={isSelected}
                              onChange={() => handleItemSelect(item)}
                            />
                          </td>
                          <td>
                            <strong className="text-primary">{item.requestNo}</strong>
                          </td>
                          <td>
                            <span className="badge bg-info">{item.position || 'N/A'}</span>
                          </td>
                          <td>{item.requester}</td>
                          <td>
                            <span className="badge bg-secondary">{item.department}</span>
                          </td>
                          <td className="text-center">
                            <span className="badge bg-warning text-dark">{item.quantity}</span>
                          </td>
                          <td>
                            <span className="badge bg-light text-dark">{item.gender}</span>
                          </td>
                          <td>
                            <small>
                              {item.fromDate}<br/>
                              ƒë·∫øn {item.toDate}
                            </small>
                          </td>
                          <td>
                            <span className={`badge ${
                              item.status === 'ƒêang tuy·ªÉn d·ª•ng' ? 'bg-success' : 'bg-warning'
                            }`}>
                              {item.status}
                            </span>
                          </td>
                        </tr>
                      );
                    })}
                  </tbody>
                </table>

                {filteredData.length === 0 && (
                  <div className="text-center py-4">
                    <i className="fas fa-search fa-3x text-muted mb-3"></i>
                    <p className="text-muted">
                      {searchTerm ? 'Kh√¥ng t√¨m th·∫•y ƒë·ªÅ xu·∫•t ph√π h·ª£p' : 'Ch∆∞a c√≥ ƒë·ªÅ xu·∫•t tuy·ªÉn d·ª•ng n√†o'}
                    </p>
                  </div>
                )}
              </div>
            )}
          </div>

          <div className="modal-footer">
            <button
              type="button"
              className="btn btn-secondary"
              onClick={handleCancel}
            >
              <i className="fas fa-times me-2"></i>
              H·ªßy
            </button>
            <button
              type="button"
              className="btn btn-primary"
              onClick={handleConfirm}
              disabled={!selectedItem}
            >
              <i className="fas fa-check me-2"></i>
              X√°c nh·∫≠n
            </button>
          </div>
        </div>
      </div>
    </div>
  );
};

export default RecruitmentModal;

==============================

üìÅ File: .\src\components\employee\WorkHistoryModal.jsx
------------------------------
üîß FUNCTIONS:
   ‚Ä¢ WorkHistoryModal (d√≤ng 8) - arrow function
üì§ EXPORTS:
   ‚Ä¢ WorkHistoryModal (d√≤ng 97)

üìÑ N·ªòI DUNG FILE:
==============================
// src/components/employee/WorkHistoryModal.jsx  
import React, { useState, useEffect } from 'react';
import { getEmployeeWorkHistory } from '../../services/employee.js';
import { useNotification } from '../../hooks/useNotification';
import Modal from '../common/Modal';
import Loading from '../common/Loading';

const WorkHistoryModal = ({ isOpen, onClose, employeeId, employeeName, workHistory }) => {
  const [workHistoryData, setWorkHistoryData] = useState([]);
  const [loading, setLoading] = useState(false);
  const { showNotification } = useNotification();

  useEffect(() => {
    if (isOpen && employeeId && !workHistory) {
      fetchWorkHistory();
    } else if (workHistory) {
      setWorkHistoryData(workHistory);
    }
  }, [isOpen, employeeId, workHistory]);

  const fetchWorkHistory = async () => {
    setLoading(true);
    try {
      const response = await getEmployeeWorkHistory(employeeId);
      
      if (response.success) {
        setWorkHistoryData(response.data || []);
      } else {
        showNotification(response.message || 'L·ªói khi t·∫£i work history', 'error');
      }
    } catch (error) {
      console.error('‚ùå Error fetching work history:', error);
      showNotification(error.message || 'L·ªói k·∫øt n·ªëi ƒë·∫øn server', 'error');
    } finally {
      setLoading(false);
    }
  };

  if (!isOpen) return null;

  return (
    <Modal 
      isOpen={isOpen} 
      onClose={onClose}
      title={`L·ªãch s·ª≠ l√†m vi·ªác - ${employeeName || employeeId}`}
      size="lg"
    >
      {loading ? (
        <Loading />
      ) : (
        <div>
          {workHistoryData.length === 0 ? (
            <div className="text-center py-4">
              <i className="fas fa-history fa-3x text-muted mb-3"></i>
              <p className="text-muted">Kh√¥ng c√≥ l·ªãch s·ª≠ l√†m vi·ªác</p>
            </div>
          ) : (
            <div className="table-responsive">
              <table className="table table-striped">
                <thead className="table-dark">
                  <tr>
                    <th>Request No.</th>
                    <th>M√£ nh√¢n vi√™n</th>
                    <th>Th·ªùi gian</th>
                  </tr>
                </thead>
                <tbody>
                  {workHistoryData.map((item, index) => (
                    <tr key={item.id || index}>
                      <td>
                        <span className="badge bg-primary">{item.requestNo}</span>
                      </td>
                      <td>{item.employeeId}</td>
                      <td>
                        <small className="text-muted">
                          {item.createdAt ? new Date(item.createdAt).toLocaleString('vi-VN') : 'N/A'}
                        </small>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          )}
          
          <div className="d-flex justify-content-end mt-3">
            <button type="button" className="btn btn-secondary" onClick={onClose}>
              ƒê√≥ng
            </button>
          </div>
        </div>
      )}
    </Modal>
  );
};

export default WorkHistoryModal;

==============================

üìÅ File: .\src\components\layout\Layout.jsx
------------------------------
üîß FUNCTIONS:
   ‚Ä¢ Layout (d√≤ng 6) - arrow function
üì§ EXPORTS:
   ‚Ä¢ Layout (d√≤ng 54)

üìÑ N·ªòI DUNG FILE:
==============================
import React, { useEffect } from 'react';
import { Outlet, useLocation } from 'react-router-dom';
import { useAuth } from '../../hooks/useAuth';
import ResponsiveNavigation from './ResponsiveNavigation';

const Layout = () => {
  const { user } = useAuth();
  const location = useLocation();

  useEffect(() => {
    // Initialize tooltips when location changes
    if (typeof window !== 'undefined' && window.bootstrap) {
      const tooltipTriggerList = [].slice.call(
        document.querySelectorAll('[data-bs-toggle="tooltip"]')
      );
      tooltipTriggerList.map(tooltipTriggerEl => {
        return new window.bootstrap.Tooltip(tooltipTriggerEl);
      });
    }
  }, [location]);

  if (!user) {
    return (
      <div className="d-flex justify-content-center align-items-center min-vh-100">
        <div className="spinner-border" role="status">
          <span className="visually-hidden">Loading...</span>
        </div>
      </div>
    );
  }

  return (
    <div className="d-flex">
      <ResponsiveNavigation />
      
      {/* Main content */}
      <div className="flex-grow-1">
        <main className="container-fluid py-4">
          <Outlet />
        </main>
      </div>

      {/* Alert container for notifications */}
      <div id="alert-container" className="position-fixed" style={{
        top: '20px',
        right: '20px',
        zIndex: 1055,
        minWidth: '300px'
      }}></div>
    </div>
  );
};

export default Layout;

==============================

üìÅ File: .\src\components\layout\ResponsiveNavigation.jsx
------------------------------
üîß FUNCTIONS:
   ‚Ä¢ ResponsiveNavigation (d√≤ng 6) - arrow function
   ‚Ä¢ checkScreenSize (d√≤ng 17) - arrow function
   ‚Ä¢ isActiveRoute (d√≤ng 58) - arrow function
   ‚Ä¢ DesktopNavigation (d√≤ng 73) - arrow function
   ‚Ä¢ MobileNavigation (d√≤ng 122) - arrow function
   ‚Ä¢ getRoleDisplayName (d√≤ng 210) - arrow function
üì§ EXPORTS:
   ‚Ä¢ ResponsiveNavigation (d√≤ng 231)

üìÑ N·ªòI DUNG FILE:
==============================
import React, { useState, useEffect } from 'react';
import { useLocation } from 'react-router-dom';
import { useAuth } from '../../hooks/useAuth';
import { useNotification } from '../../hooks/useNotification';

const ResponsiveNavigation = () => {
  const [isMobile, setIsMobile] = useState(false);
  const [sidebarOpen, setSidebarOpen] = useState(false);
  const [dropdownOpen, setDropdownOpen] = useState(false);
  
  const { user, logout } = useAuth();
  const { showNotification } = useNotification();
  const location = useLocation();

  // Detect mobile screen
  useEffect(() => {
    const checkScreenSize = () => {
      setIsMobile(window.innerWidth < 768);
    };
    
    checkScreenSize();
    window.addEventListener('resize', checkScreenSize);
    return () => window.removeEventListener('resize', checkScreenSize);
  }, []);

  // Menu items configuration
  const menuItems = [
    {
      path: '/dashboard',
      icon: 'fas fa-tachometer-alt',
      label: 'Dashboard',
      roles: ['admin', 'hr', 'sales_manager', 'finance_manager', 'director']
    },
    {
      path: '/employee-management',
      icon: 'fas fa-users-cog',
      label: 'Qu·∫£n l√Ω nh√¢n vi√™n',
      roles: ['admin', 'hr']
    },
    {
      path: '/hr-dashboard',
      icon: 'fas fa-chart-bar',
      label: 'HR Dashboard',
      roles: ['admin', 'hr']
    },
    {
      path: '/attendance-logs',
      icon: 'fas fa-clock',
      label: 'B·∫£n ghi ch·∫•m c√¥ng',
      roles: ['admin', 'hr', 'sales_manager', 'finance_manager', 'director']
    }
  ];

  const filteredMenuItems = menuItems.filter(item => 
    item.roles.includes(user?.role)
  );

  const isActiveRoute = (path) => {
    return location.pathname === path || location.pathname.startsWith(path + '/');
  };

  const handleLogout = async () => {
    try {
      await logout();
      showNotification('ƒêƒÉng xu·∫•t th√†nh c√¥ng!', 'success');
    } catch (error) {
      console.error('Logout error:', error);
      showNotification('L·ªói khi ƒëƒÉng xu·∫•t', 'error');
    }
  };

  // Desktop Navigation (Always visible sidebar)
  const DesktopNavigation = () => (
    <div className="d-none d-md-flex">
      {/* Desktop Sidebar */}
      <div className="bg-light border-end" style={{ width: '280px', minHeight: '100vh' }}>
        {/* Brand Header */}
        <div className="p-3 border-bottom">
          <div className="d-flex align-items-center">
            <div className="rounded-circle bg-primary d-flex align-items-center justify-content-center me-2" 
                 style={{ width: '40px', height: '40px' }}>
              <i className="fas fa-user text-white"></i>
            </div>
            <div>
              <div className="fw-semibold">{user?.fullName}</div>
              <small className="text-muted">{getRoleDisplayName(user?.role)}</small>
            </div>
          </div>
        </div>

        {/* Navigation Menu */}
        <nav className="flex-grow-1 p-2">
          {filteredMenuItems.map((item, index) => (
            <a
              key={index}
              href={item.path}
              className={`nav-link d-flex align-items-center rounded mb-1 p-3 ${
                isActiveRoute(item.path) ? 'active bg-primary text-white' : 'text-dark'
              }`}
            >
              <i className={`${item.icon} me-2`}></i>
              <span>{item.label}</span>
            </a>
          ))}
        </nav>

        {/* User Actions */}
        <div className="border-top p-3">
          <button 
            className="btn btn-outline-danger w-100"
            onClick={handleLogout}
          >
            <i className="fas fa-sign-out-alt me-2"></i>
            ƒêƒÉng xu·∫•t
          </button>
        </div>
      </div>
    </div>
  );

  // Mobile Navigation (Top navbar + collapsible menu)
  const MobileNavigation = () => (
    <div className="d-md-none">
      {/* Mobile Top Bar */}
      <nav className="navbar navbar-dark bg-dark">
        <div className="container-fluid">
          <a className="navbar-brand" href="/dashboard">
            <i className="fas fa-users me-2"></i>
            HR Management
          </a>
          
          <button
            className="navbar-toggler"
            type="button"
            onClick={() => setSidebarOpen(!sidebarOpen)}
          >
            <span className="navbar-toggler-icon"></span>
          </button>
        </div>
      </nav>

      {/* Mobile Sidebar Overlay */}
      {sidebarOpen && (
        <>
          {/* Backdrop */}
          <div 
            className="position-fixed top-0 start-0 w-100 h-100 bg-dark bg-opacity-50"
            style={{ zIndex: 1040 }}
            onClick={() => setSidebarOpen(false)}
          ></div>
          
          {/* Mobile Sidebar */}
          <div 
            className="position-fixed top-0 start-0 bg-light h-100"
            style={{ width: '280px', zIndex: 1050 }}
          >
            {/* Mobile Header */}
            <div className="p-3 border-bottom d-flex justify-content-between align-items-center">
              <div className="d-flex align-items-center">
                <div className="rounded-circle bg-primary d-flex align-items-center justify-content-center me-2" 
                     style={{ width: '32px', height: '32px' }}>
                  <i className="fas fa-user text-white"></i>
                </div>
                <div>
                  <div className="fw-semibold small">{user?.fullName}</div>
                  <small className="text-muted">{getRoleDisplayName(user?.role)}</small>
                </div>
              </div>
              <button 
                className="btn btn-sm btn-outline-secondary"
                onClick={() => setSidebarOpen(false)}
              >
                <i className="fas fa-times"></i>
              </button>
            </div>

            {/* Mobile Menu */}
            <nav className="p-2">
              {filteredMenuItems.map((item, index) => (
                <a
                  key={index}
                  href={item.path}
                  className={`nav-link d-flex align-items-center rounded mb-1 p-3 ${
                    isActiveRoute(item.path) ? 'active bg-primary text-white' : 'text-dark'
                  }`}
                  onClick={() => setSidebarOpen(false)}
                >
                  <i className={`${item.icon} me-2`}></i>
                  <span>{item.label}</span>
                </a>
              ))}
            </nav>

            {/* Mobile User Actions */}
            <div className="position-absolute bottom-0 w-100 border-top p-3">
              <button 
                className="btn btn-outline-danger w-100"
                onClick={handleLogout}
              >
                <i className="fas fa-sign-out-alt me-2"></i>
                ƒêƒÉng xu·∫•t
              </button>
            </div>
          </div>
        </>
      )}
    </div>
  );

  const getRoleDisplayName = (role) => {
    const roleMap = {
      'admin': 'Administrator',
      'hr': 'HR Manager',
      'sales_manager': 'Sales Manager',
      'finance_manager': 'Finance Manager',
      'director': 'Director'
    };
    return roleMap[role] || 'Nh√¢n vi√™n';
  };

  if (!user) return null;

  return (
    <>
      <DesktopNavigation />
      <MobileNavigation />
    </>
  );
};

export default ResponsiveNavigation;

==============================

üìÅ File: .\src\components\masterdata\PositionManager.jsx
------------------------------
üîß FUNCTIONS:
   ‚Ä¢ PositionManager (d√≤ng 6) - arrow function
   ‚Ä¢ handleInputChange (d√≤ng 33) - arrow function
   ‚Ä¢ handleEdit (d√≤ng 67) - arrow function
   ‚Ä¢ handleCancel (d√≤ng 89) - arrow function
üì§ EXPORTS:
   ‚Ä¢ PositionManager (d√≤ng 230)

üìÑ N·ªòI DUNG FILE:
==============================
import React, { useState, useEffect } from 'react';
import { ApiClient } from '../../services/api';
import { useNotification } from '../../hooks/useNotification';
import Loading from '../common/Loading';

const PositionManager = () => {
  const [positions, setPositions] = useState([]);
  const [loading, setLoading] = useState(true);
  const [formData, setFormData] = useState({
    positionName: '',
    description: ''
  });
  const [editingPosition, setEditingPosition] = useState(null);
  const { showNotification } = useNotification();

  useEffect(() => {
    loadPositions();
  }, []);

  const loadPositions = async () => {
    try {
      setLoading(true);
      const data = await ApiClient.get('/api/employees/positions');
      setPositions(data);
    } catch (error) {
      console.error('Error loading positions:', error);
      showNotification('L·ªói khi t·∫£i danh s√°ch v·ªã tr√≠', 'error');
    } finally {
      setLoading(false);
    }
  };

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    
    if (!formData.positionName.trim()) {
      showNotification('Vui l√≤ng nh·∫≠p t√™n v·ªã tr√≠!', 'error');
      return;
    }

    try {
      if (editingPosition) {
        await ApiClient.put(`/api/employees/positions/${editingPosition.id}`, formData);
        showNotification('C·∫≠p nh·∫≠t v·ªã tr√≠ th√†nh c√¥ng', 'success');
      } else {
        await ApiClient.post('/api/employees/positions', formData);
        showNotification('Th√™m v·ªã tr√≠ th√†nh c√¥ng', 'success');
      }
      
      setFormData({ positionName: '', description: '' });
      setEditingPosition(null);
      await loadPositions();
    } catch (error) {
      console.error('Error saving position:', error);
      showNotification('L·ªói khi l∆∞u v·ªã tr√≠', 'error');
    }
  };

  const handleEdit = (position) => {
    setEditingPosition(position);
    setFormData({
      positionName: position.positionName,
      description: position.description || ''
    });
  };

  const handleDelete = async (position) => {
    const confirmed = window.confirm(`B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a v·ªã tr√≠ "${position.positionName}"?`);
    if (!confirmed) return;

    try {
      await ApiClient.delete(`/api/employees/positions/${position.id}`);
      showNotification('X√≥a v·ªã tr√≠ th√†nh c√¥ng', 'success');
      await loadPositions();
    } catch (error) {
      console.error('Error deleting position:', error);
      showNotification('L·ªói khi x√≥a v·ªã tr√≠', 'error');
    }
  };

  const handleCancel = () => {
    setEditingPosition(null);
    setFormData({ positionName: '', description: '' });
  };

  if (loading) {
    return <Loading text="ƒêang t·∫£i danh s√°ch v·ªã tr√≠..." />;
  }

  return (
    <div className="position-manager">
      <div className="row">
        <div className="col-md-4">
          <div className="card">
            <div className="card-header">
              <h5>{editingPosition ? 'Ch·ªânh s·ª≠a' : 'Th√™m'} v·ªã tr√≠</h5>
            </div>
            <div className="card-body">
              <form onSubmit={handleSubmit}>
                <div className="mb-3">
                  <label className="form-label">
                    T√™n v·ªã tr√≠ <span className="text-danger">*</span>
                  </label>
                  <input
                    type="text"
                    className="form-control"
                    name="positionName"
                    value={formData.positionName}
                    onChange={handleInputChange}
                    required
                  />
                </div>
                
                <div className="mb-3">
                  <label className="form-label">M√¥ t·∫£</label>
                  <textarea
                    className="form-control"
                    name="description"
                    value={formData.description}
                    onChange={handleInputChange}
                    rows="3"
                    placeholder="M√¥ t·∫£ v·ªÅ v·ªã tr√≠ c√¥ng vi·ªác..."
                  />
                </div>
                
                <div className="d-grid gap-2">
                  <button type="submit" className="btn btn-primary">
                    {editingPosition ? 'C·∫≠p nh·∫≠t' : 'Th√™m'} v·ªã tr√≠
                  </button>
                  {editingPosition && (
                    <button 
                      type="button" 
                      className="btn btn-secondary"
                      onClick={handleCancel}
                    >
                      H·ªßy
                    </button>
                  )}
                </div>
              </form>
            </div>
          </div>
        </div>
        
        <div className="col-md-8">
          <div className="card">
            <div className="card-header">
              <h5>Danh s√°ch v·ªã tr√≠</h5>
            </div>
            <div className="card-body">
              {positions.length === 0 ? (
                <div className="text-center py-4">
                  <i className="fas fa-briefcase fa-3x text-muted mb-3"></i>
                  <p className="text-muted">Ch∆∞a c√≥ v·ªã tr√≠ n√†o</p>
                </div>
              ) : (
                <div className="table-responsive">
                  <table className="table table-striped table-hover">
                    <thead className="table-dark">
                      <tr>
                        <th>T√™n v·ªã tr√≠</th>
                        <th>M√¥ t·∫£</th>
                        <th>Tr·∫°ng th√°i</th>
                        <th>Thao t√°c</th>
                      </tr>
                    </thead>
                    <tbody>
                      {positions.map(position => (
                        <tr key={position.id}>
                          <td>
                            <strong>{position.positionName}</strong>
                          </td>
                          <td>
                            <span className="text-muted">
                              {position.description || 'Kh√¥ng c√≥ m√¥ t·∫£'}
                            </span>
                          </td>
                          <td>
                            <span className={`badge ${
                              position.status === 'active' 
                                ? 'bg-success' 
                                : 'bg-secondary'
                            }`}>
                              {position.status === 'active' 
                                ? 'Ho·∫°t ƒë·ªông' 
                                : 'Ng∆∞ng ho·∫°t ƒë·ªông'
                              }
                            </span>
                          </td>
                          <td>
                            <div className="btn-group" role="group">
                              <button
                                className="btn btn-sm btn-primary"
                                onClick={() => handleEdit(position)}
                                title="Ch·ªânh s·ª≠a"
                              >
                                <i className="fas fa-edit"></i>
                              </button>
                              <button
                                className="btn btn-sm btn-danger"
                                onClick={() => handleDelete(position)}
                                title="X√≥a"
                              >
                                <i className="fas fa-trash"></i>
                              </button>
                            </div>
                          </td>
                        </tr>
                      ))}
                    </tbody>
                  </table>
                </div>
              )}
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default PositionManager;

==============================

üìÅ File: .\src\components\masterdata\StoreManager.jsx
------------------------------
üîß FUNCTIONS:
   ‚Ä¢ StoreManager (d√≤ng 6) - arrow function
   ‚Ä¢ handleInputChange (d√≤ng 33) - arrow function
   ‚Ä¢ handleEdit (d√≤ng 67) - arrow function
   ‚Ä¢ handleCancel (d√≤ng 89) - arrow function
üì§ EXPORTS:
   ‚Ä¢ StoreManager (d√≤ng 226)

üìÑ N·ªòI DUNG FILE:
==============================
import React, { useState, useEffect } from 'react';
import { ApiClient } from '../../services/api';
import { useNotification } from '../../hooks/useNotification';
import Loading from '../common/Loading';

const StoreManager = () => {
  const [stores, setStores] = useState([]);
  const [loading, setLoading] = useState(true);
  const [formData, setFormData] = useState({
    storeName: '',
    address: ''
  });
  const [editingStore, setEditingStore] = useState(null);
  const { showNotification } = useNotification();

  useEffect(() => {
    loadStores();
  }, []);

  const loadStores = async () => {
    try {
      setLoading(true);
      const data = await ApiClient.get('/api/employees/stores');
      setStores(data);
    } catch (error) {
      console.error('Error loading stores:', error);
      showNotification('L·ªói khi t·∫£i danh s√°ch c·ª≠a h√†ng', 'error');
    } finally {
      setLoading(false);
    }
  };

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    
    if (!formData.storeName.trim() || !formData.address.trim()) {
      showNotification('Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin!', 'error');
      return;
    }

    try {
      if (editingStore) {
        await ApiClient.put(`/api/employees/stores/${editingStore.id}`, formData);
        showNotification('C·∫≠p nh·∫≠t c·ª≠a h√†ng th√†nh c√¥ng', 'success');
      } else {
        await ApiClient.post('/api/employees/stores', formData);
        showNotification('Th√™m c·ª≠a h√†ng th√†nh c√¥ng', 'success');
      }
      
      setFormData({ storeName: '', address: '' });
      setEditingStore(null);
      await loadStores();
    } catch (error) {
      console.error('Error saving store:', error);
      showNotification('L·ªói khi l∆∞u c·ª≠a h√†ng', 'error');
    }
  };

  const handleEdit = (store) => {
    setEditingStore(store);
    setFormData({
      storeName: store.storeName,
      address: store.address
    });
  };

  const handleDelete = async (store) => {
    const confirmed = window.confirm(`B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a c·ª≠a h√†ng "${store.storeName}"?`);
    if (!confirmed) return;

    try {
      await ApiClient.delete(`/api/employees/stores/${store.id}`);
      showNotification('X√≥a c·ª≠a h√†ng th√†nh c√¥ng', 'success');
      await loadStores();
    } catch (error) {
      console.error('Error deleting store:', error);
      showNotification('L·ªói khi x√≥a c·ª≠a h√†ng', 'error');
    }
  };

  const handleCancel = () => {
    setEditingStore(null);
    setFormData({ storeName: '', address: '' });
  };

  if (loading) {
    return <Loading text="ƒêang t·∫£i danh s√°ch c·ª≠a h√†ng..." />;
  }

  return (
    <div className="store-manager">
      <div className="row">
        <div className="col-md-4">
          <div className="card">
            <div className="card-header">
              <h5>{editingStore ? 'Ch·ªânh s·ª≠a' : 'Th√™m'} c·ª≠a h√†ng</h5>
            </div>
            <div className="card-body">
              <form onSubmit={handleSubmit}>
                <div className="mb-3">
                  <label className="form-label">
                    T√™n c·ª≠a h√†ng <span className="text-danger">*</span>
                  </label>
                  <input
                    type="text"
                    className="form-control"
                    name="storeName"
                    value={formData.storeName}
                    onChange={handleInputChange}
                    required
                  />
                </div>
                
                <div className="mb-3">
                  <label className="form-label">
                    ƒê·ªãa ch·ªâ <span className="text-danger">*</span>
                  </label>
                  <textarea
                    className="form-control"
                    name="address"
                    value={formData.address}
                    onChange={handleInputChange}
                    rows="3"
                    required
                  />
                </div>
                
                <div className="d-grid gap-2">
                  <button type="submit" className="btn btn-primary">
                    {editingStore ? 'C·∫≠p nh·∫≠t' : 'Th√™m'} c·ª≠a h√†ng
                  </button>
                  {editingStore && (
                    <button 
                      type="button" 
                      className="btn btn-secondary"
                      onClick={handleCancel}
                    >
                      H·ªßy
                    </button>
                  )}
                </div>
              </form>
            </div>
          </div>
        </div>
        
        <div className="col-md-8">
          <div className="card">
            <div className="card-header">
              <h5>Danh s√°ch c·ª≠a h√†ng</h5>
            </div>
            <div className="card-body">
              {stores.length === 0 ? (
                <div className="text-center py-4">
                  <i className="fas fa-store fa-3x text-muted mb-3"></i>
                  <p className="text-muted">Ch∆∞a c√≥ c·ª≠a h√†ng n√†o</p>
                </div>
              ) : (
                <div className="table-responsive">
                  <table className="table table-striped table-hover">
                    <thead className="table-dark">
                      <tr>
                        <th>T√™n c·ª≠a h√†ng</th>
                        <th>ƒê·ªãa ch·ªâ</th>
                        <th>Tr·∫°ng th√°i</th>
                        <th>Thao t√°c</th>
                      </tr>
                    </thead>
                    <tbody>
                      {stores.map(store => (
                        <tr key={store.id}>
                          <td>{store.storeName}</td>
                          <td>{store.address}</td>
                          <td>
                            <span className={`badge ${
                              store.status === 'active' 
                                ? 'bg-success' 
                                : 'bg-secondary'
                            }`}>
                              {store.status === 'active' 
                                ? 'Ho·∫°t ƒë·ªông' 
                                : 'Ng∆∞ng ho·∫°t ƒë·ªông'
                              }
                            </span>
                          </td>
                          <td>
                            <div className="btn-group" role="group">
                              <button
                                className="btn btn-sm btn-primary"
                                onClick={() => handleEdit(store)}
                                title="Ch·ªânh s·ª≠a"
                              >
                                <i className="fas fa-edit"></i>
                              </button>
                              <button
                                className="btn btn-sm btn-danger"
                                onClick={() => handleDelete(store)}
                                title="X√≥a"
                              >
                                <i className="fas fa-trash"></i>
                              </button>
                            </div>
                          </td>
                        </tr>
                      ))}
                    </tbody>
                  </table>
                </div>
              )}
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default StoreManager;

==============================

üìÅ File: .\src\contexts\AppContext.jsx
------------------------------

üìÑ N·ªòI DUNG FILE:
==============================

==============================

üìÅ File: .\src\contexts\AuthContext.jsx
------------------------------
üîß FUNCTIONS:
   ‚Ä¢ AuthProvider (d√≤ng 6) - arrow function
   ‚Ä¢ updateUserInfo (d√≤ng 87) - arrow function
   ‚Ä¢ hasRole (d√≤ng 94) - arrow function
   ‚Ä¢ isHR (d√≤ng 105) - arrow function
   ‚Ä¢ isAdmin (d√≤ng 109) - arrow function
   ‚Ä¢ useAuth (d√≤ng 133) - arrow function
üì§ EXPORTS:
   ‚Ä¢ const (d√≤ng 6)
   ‚Ä¢ const (d√≤ng 133)
   ‚Ä¢ AuthContext (d√≤ng 141)

üìÑ N·ªòI DUNG FILE:
==============================
import React, { createContext, useContext, useState, useEffect } from 'react';
import { ApiClient } from '../services/api.js';

const AuthContext = createContext();

export const AuthProvider = ({ children }) => {
  const [user, setUser] = useState(null);
  const [loading, setLoading] = useState(true);
  const [initialized, setInitialized] = useState(false);

  useEffect(() => {
    initializeAuth();
  }, []);

  const initializeAuth = async () => {
    try {
      setLoading(true);
      const user = await checkAuth();
      setUser(user);
      setInitialized(true);
    } catch (error) {
      console.error('Auth initialization error:', error);
      setUser(null);
    } finally {
      setLoading(false);
    }
  };

  const checkAuth = async () => {
    try {
      const response = await fetch('/api/auth/profile', {
        credentials: 'include'
      });
      
      if (response.ok) {
        const data = await response.json();
        return data.user;
      } else {
        return null;
      }
    } catch (error) {
      console.error('Auth check error:', error);
      return null;
    }
  };

  const login = async (credentials) => {
    try {
      setLoading(true);
      const response = await ApiClient.post('/api/auth/login', credentials);
      
      if (response.user) {
        setUser(response.user);
        return response;
      } else {
        throw new Error('Login failed');
      }
    } catch (error) {
      console.error('Login error:', error);
      throw error;
    } finally {
      setLoading(false);
    }
  };

  const logout = async () => {
    try {
      setLoading(true);
      await ApiClient.post('/api/auth/logout');
      setUser(null);
      
      // Redirect after logout
      setTimeout(() => {
        window.location.href = '/login';
      }, 1000);
      
    } catch (error) {
      console.error('Logout error:', error);
      // Force logout even if API fails
      setUser(null);
      window.location.href = '/login';
    } finally {
      setLoading(false);
    }
  };

  const updateUserInfo = (userData) => {
    setUser(prevUser => ({
      ...prevUser,
      ...userData
    }));
  };

  const hasRole = (requiredRoles) => {
    if (!user) return false;
    if (typeof requiredRoles === 'string') {
      return user.role === requiredRoles;
    }
    if (Array.isArray(requiredRoles)) {
      return requiredRoles.includes(user.role);
    }
    return false;
  };

  const isHR = () => {
    return user && (user.role === 'hr' || user.role === 'admin');
  };

  const isAdmin = () => {
    return user && user.role === 'admin';
  };

  const value = {
    user,
    loading,
    initialized,
    login,
    logout,
    checkAuth,
    updateUserInfo,
    hasRole,
    isHR,
    isAdmin
  };

  return (
    <AuthContext.Provider value={value}>
      {children}
    </AuthContext.Provider>
  );
};

export const useAuth = () => {
  const context = useContext(AuthContext);
  if (!context) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
};

export default AuthContext;

==============================

üìÅ File: .\src\contexts\NotificationContext.jsx
------------------------------
üîß FUNCTIONS:
   ‚Ä¢ NotificationProvider (d√≤ng 5) - arrow function
   ‚Ä¢ getIconByType (d√≤ng 38) - arrow function
   ‚Ä¢ useNotification (d√≤ng 68) - arrow function
üì§ EXPORTS:
   ‚Ä¢ const (d√≤ng 5)
   ‚Ä¢ const (d√≤ng 68)
   ‚Ä¢ NotificationContext (d√≤ng 77)
   ‚Ä¢  NotificationContext  (d√≤ng 76)

üìÑ N·ªòI DUNG FILE:
==============================
import React, { createContext, useContext, useCallback } from 'react';

const NotificationContext = createContext();

export const NotificationProvider = ({ children }) => {
  const showNotification = useCallback((message, type = 'info', duration = 5000) => {
    const alertContainer = document.getElementById('alert-container');
    if (!alertContainer) {
      console.warn('Alert container not found');
      return;
    }
    
    const alertId = `alert-${Date.now()}`;
    const alertDiv = document.createElement('div');
    alertDiv.id = alertId;
    alertDiv.className = `alert alert-${type === 'error' ? 'danger' : type} alert-dismissible fade show`;
    alertDiv.style.marginBottom = '10px';
    
    alertDiv.innerHTML = `
      <div class="d-flex align-items-center">
        <i class="fas fa-${getIconByType(type)} me-2"></i>
        <div class="flex-grow-1">${message}</div>
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
      </div>
    `;
    
    alertContainer.appendChild(alertDiv);
    
    // Auto remove after duration
    setTimeout(() => {
      const element = document.getElementById(alertId);
      if (element && element.parentNode) {
        element.parentNode.removeChild(element);
      }
    }, duration);
  }, []);

  const getIconByType = (type) => {
    switch (type) {
      case 'success': return 'check-circle';
      case 'error': 
      case 'danger': return 'exclamation-triangle';
      case 'warning': return 'exclamation-circle';
      case 'info': return 'info-circle';
      default: return 'info-circle';
    }
  };

  const clearNotifications = useCallback(() => {
    const alertContainer = document.getElementById('alert-container');
    if (alertContainer) {
      alertContainer.innerHTML = '';
    }
  }, []);

  const value = {
    showNotification,
    clearNotifications
  };

  return (
    <NotificationContext.Provider value={value}>
      {children}
    </NotificationContext.Provider>
  );
};

export const useNotification = () => {
  const context = useContext(NotificationContext);
  if (!context) {
    throw new Error('useNotification must be used within a NotificationProvider');
  }
  return context;
};

export { NotificationContext };
export default NotificationContext;


==============================

üìÅ File: .\src\hooks\useApi.js
------------------------------

üìÑ N·ªòI DUNG FILE:
==============================

==============================

üìÅ File: .\src\hooks\useAttendance.js
------------------------------
üîß FUNCTIONS:
   ‚Ä¢ useAttendanceStats (d√≤ng 1) - arrow function
üì§ EXPORTS:
   ‚Ä¢ const (d√≤ng 1)

üìÑ N·ªòI DUNG FILE:
==============================
export const useAttendanceStats = () => {
    const [stats, setStats] = useState({
        totalAttendanceLogs: 0,
        todayLogs: 0,
        thisWeekLogs: 0
    });
    const [loading, setLoading] = useState(false);
    
    const fetchStats = async () => {
        setLoading(true);
        try {
            const response = await api.get('/attendance/stats');
            if (response.data.success) {
                setStats(response.data.data);
            }
        } catch (error) {
            console.error('Error fetching attendance stats:', error);
        } finally {
            setLoading(false);
        }
    };
    
    return { stats, loading, fetchStats };
};

==============================

üìÅ File: .\src\hooks\useAuth.js
------------------------------
üîß FUNCTIONS:
   ‚Ä¢ useAuth (d√≤ng 4) - arrow function
üì§ EXPORTS:
   ‚Ä¢ const (d√≤ng 4)
   ‚Ä¢ useAuth (d√≤ng 14)

üìÑ N·ªòI DUNG FILE:
==============================
import { useContext } from 'react';
import AuthContext from '../contexts/AuthContext';

export const useAuth = () => {
  const context = useContext(AuthContext);
  
  if (!context) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  
  return context;
};

export default useAuth;

==============================

üìÅ File: .\src\hooks\useEmployees.js
------------------------------
üîß FUNCTIONS:
   ‚Ä¢ useEmployeeStats (d√≤ng 5) - arrow function
   ‚Ä¢ useEmployeeStats (d√≤ng 55) - arrow function
   ‚Ä¢ useEmployees (d√≤ng 95) - arrow function
üì§ EXPORTS:
   ‚Ä¢ const (d√≤ng 5)
   ‚Ä¢ const (d√≤ng 55)
   ‚Ä¢ const (d√≤ng 95)

üìÑ N·ªòI DUNG FILE:
==============================
// // src/hooks/useEmployees.js
// import { useState, useCallback } from 'react';
// import api from '../services/api.js';

// export const useEmployeeStats = () => {
//     const [stats, setStats] = useState({
//         totalEmployees: 0,
//         activeEmployees: 0,
//         inactiveEmployees: 0
//     });
//     const [loading, setLoading] = useState(false);
    
//     // ‚úÖ Wrap fetchStats v·ªõi useCallback ƒë·ªÉ tr√°nh re-creation
//     const fetchStats = useCallback(async () => {
//         console.log('\nüîç FRONTEND: useEmployeeStats.fetchStats() called');
//         setLoading(true);
        
//         try {
//             console.log('üì° Making API request to /employees/stats...');
//             const response = await api.get('/employees/stats');
            
//             console.log('üì® Full API Response:', response);
//             console.log('‚úÖ Success check:', response.data.success);
//             console.log('üìä Stats data:', response.data.data);
            
//             if (response.data.success) {
//                 console.log('‚úÖ Setting stats to:', response.data.data);
//                 setStats(response.data.data);
//             } else {
//                 console.warn('‚ö†Ô∏è API returned success: false');
//             }
            
//         } catch (error) {
//             console.error('‚ùå Error in fetchStats:', error);
//         } finally {
//             setLoading(false);
//             console.log('üèÅ fetchStats completed');
//         }
//     }, []); // ‚Üê ‚úÖ Empty deps ƒë·ªÉ tr√°nh re-creation
    
//     return { stats, loading, fetchStats };
// };

// src/hooks/useEmployees.js
// src/hooks/useEmployees.js
// src/hooks/useEmployees.js




// --------------------------------------- v2 ---------------------------------------
// import { useState, useCallback } from 'react';
// import api from '../services/api.js';

// export const useEmployeeStats = () => {
//     const [stats, setStats] = useState({
//         totalEmployees: 0,
//         activeEmployees: 0,
//         inactiveEmployees: 0
//     });
//     const [loading, setLoading] = useState(false);
    
//     const fetchStats = useCallback(async () => {
//         console.log('üîç FRONTEND: fetchStats called');
//         setLoading(true);
        
//         try {
//             // ‚úÖ TH√äM PREFIX /api v√†o ƒë√¢y
//             const response = await api.get('/api/employees/stats');
            
//             console.log('üì® API Response:', response);
            
//             if (response.success) {
//                 console.log('‚úÖ Setting stats:', response.data);
//                 setStats(response.data);
//             } else {
//                 console.warn('‚ö†Ô∏è API returned success: false');
//             }
            
//         } catch (error) {
//             console.error('‚ùå Error in fetchStats:', error);
//         } finally {
//             setLoading(false);
//         }
//     }, []);
    
//     return { stats, loading, fetchStats };
// };


import { useState, useEffect } from 'react';
import * as employeeService from '../services/employee.js';
import { useNotification } from './useNotification';

export const useEmployees = () => {
  const [employees, setEmployees] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const { showNotification } = useNotification();

  // Fetch all employees
  const fetchEmployees = async () => {
    setLoading(true);
    setError(null);
    
    try {
      const response = await employeeService.getAllEmployees();
      setEmployees(response.data || []);
    } catch (error) {
      console.error('Error fetching employees:', error);
      setError(error.message);
      showNotification(error.message, 'error');
      setEmployees([]);
    } finally {
      setLoading(false);
    }
  };

  // Add employee
  const addEmployeeHandler = async (employeeData) => {
    try {
      const response = await employeeService.addEmployee(employeeData);
      showNotification('Th√™m nh√¢n vi√™n th√†nh c√¥ng!', 'success');
      await fetchEmployees(); // Refresh list
      return response;
    } catch (error) {
      console.error('Error adding employee:', error);
      throw error; // Re-throw ƒë·ªÉ component handle
    }
  };

  // Update employee
  const updateEmployeeHandler = async (employeeId, employeeData) => {
    try {
      const response = await employeeService.updateEmployee(employeeId, employeeData);
      showNotification('C·∫≠p nh·∫≠t nh√¢n vi√™n th√†nh c√¥ng!', 'success');
      await fetchEmployees(); // Refresh list
      return response;
    } catch (error) {
      console.error('Error updating employee:', error);
      throw error;
    }
  };

  // Delete employee
  const deleteEmployeeHandler = async (employeeId) => {
    try {
      await employeeService.deleteEmployee(employeeId);
      showNotification('X√≥a nh√¢n vi√™n th√†nh c√¥ng!', 'success');
      await fetchEmployees(); // Refresh list
    } catch (error) {
      console.error('Error deleting employee:', error);
      showNotification(error.message, 'error');
      throw error;
    }
  };

  // Search employees
  const searchEmployees = async (query) => {
    setLoading(true);
    try {
      const response = await employeeService.searchEmployees(query);
      setEmployees(response.data || []);
    } catch (error) {
      console.error('Error searching employees:', error);
      showNotification(error.message, 'error');
    } finally {
      setLoading(false);
    }
  };

  // Get work history
  const getWorkHistory = async (employeeId) => {
    try {
      const response = await employeeService.getEmployeeWorkHistory(employeeId);
      return response.data || [];
    } catch (error) {
      console.error('Error fetching work history:', error);
      showNotification(error.message, 'error');
      return [];
    }
  };

  // Add work history
  const addWorkHistoryHandler = async (workHistoryData) => {
    try {
      const response = await employeeService.addWorkHistory(workHistoryData);
      showNotification('Th√™m work history th√†nh c√¥ng!', 'success');
      return response;
    } catch (error) {
      console.error('Error adding work history:', error);
      throw error;
    }
  };

  useEffect(() => {
    fetchEmployees();
  }, []);

  return {
    employees,
    loading,
    error,
    fetchEmployees,
    addEmployee: addEmployeeHandler,
    updateEmployee: updateEmployeeHandler,
    deleteEmployee: deleteEmployeeHandler,
    searchEmployees,
    getWorkHistory,
    addWorkHistory: addWorkHistoryHandler
  };
};

==============================

üìÅ File: .\src\hooks\useNotification.js
------------------------------
üîß FUNCTIONS:
   ‚Ä¢ useNotification (d√≤ng 4) - arrow function
üì§ EXPORTS:
   ‚Ä¢ const (d√≤ng 4)
   ‚Ä¢ useNotification (d√≤ng 12)

üìÑ N·ªòI DUNG FILE:
==============================
import { useContext } from 'react';
import { NotificationContext } from '../contexts/NotificationContext';

export const useNotification = () => {
  const context = useContext(NotificationContext);
  if (!context) {
    throw new Error('useNotification must be used within a NotificationProvider');
  }
  return context;
};

export default useNotification;

==============================

üìÅ File: .\src\pages\AttendanceLogsPage.jsx
------------------------------
üîß FUNCTIONS:
   ‚Ä¢ AttendanceLogsPage (d√≤ng 9) - arrow function
üì§ EXPORTS:
   ‚Ä¢ AttendanceLogsPage (d√≤ng 194)

üìÑ N·ªòI DUNG FILE:
==============================
import React, { useState, useEffect } from 'react';
import { ApiClient } from '../services/api';
import { useNotification } from '../hooks/useNotification';
import Loading from '../components/common/Loading';
import AttendanceFilters from '../components/attendance/AttendanceFilters';
import AttendanceLogs from '../components/attendance/AttendanceLogs';
import EmployeeHours from '../components/attendance/EmployeeHours';

const AttendanceLogsPage = () => {
  const [employees, setEmployees] = useState([]);
  const [logs, setLogs] = useState([]);
  const [employeeHours, setEmployeeHours] = useState({});
  const [loading, setLoading] = useState(true);
  const [filters, setFilters] = useState({});
  const { showNotification } = useNotification();

  useEffect(() => {
    loadInitialData();
  }, []);

  const loadInitialData = async () => {
    try {
      setLoading(true);
      await Promise.all([
        loadEmployees(),
        loadAttendanceLogs(),
        loadEmployeeHours()
      ]);
    } catch (error) {
      console.error('Error loading initial data:', error);
      showNotification('L·ªói khi t·∫£i d·ªØ li·ªáu ch·∫•m c√¥ng', 'error');
    } finally {
      setLoading(false);
    }
  };

  const loadEmployees = async () => {
    try {
      const data = await ApiClient.get('/api/employees');
      setEmployees(data);
    } catch (error) {
      console.error('Error loading employees:', error);
      showNotification('L·ªói khi t·∫£i danh s√°ch nh√¢n vi√™n', 'error');
    }
  };

  const loadAttendanceLogs = async (filterParams = {}) => {
    try {
      const data = await ApiClient.get('/api/attendance/logs', filterParams);
      setLogs(data);
    } catch (error) {
      console.error('Error loading attendance logs:', error);
      showNotification('L·ªói khi t·∫£i b·∫£n ghi ch·∫•m c√¥ng', 'error');
    }
  };

  const loadEmployeeHours = async () => {
    try {
      const data = await ApiClient.get('/api/attendance/employee-hours');
      setEmployeeHours(data);
    } catch (error) {
      console.error('Error loading employee hours:', error);
      showNotification('L·ªói khi t·∫£i t·ªïng gi·ªù c√¥ng', 'error');
    }
  };

  const handleFilterChange = async (newFilters) => {
    setFilters(newFilters);
    await loadAttendanceLogs(newFilters);
  };

  const handleClearFilters = async () => {
    setFilters({});
    await loadAttendanceLogs();
  };

  const handleRefresh = async () => {
    await loadInitialData();
    showNotification('ƒê√£ c·∫≠p nh·∫≠t d·ªØ li·ªáu ch·∫•m c√¥ng', 'success');
  };

  if (loading) {
    return <Loading fullScreen text="ƒêang t·∫£i d·ªØ li·ªáu ch·∫•m c√¥ng..." />;
  }

  return (
    <div className="attendance-logs-page">
      {/* Header */}
      <div className="d-flex justify-content-between align-items-center mb-4">
        <div>
          <h1>B·∫£n ghi ch·∫•m c√¥ng</h1>
          <p className="text-muted mb-0">Xem v√† qu·∫£n l√Ω b·∫£n ghi ch·∫•m c√¥ng c·ªßa nh√¢n vi√™n</p>
        </div>
        <button 
          className="btn btn-outline-primary"
          onClick={handleRefresh}
        >
          <i className="fas fa-sync-alt me-2"></i>
          L√†m m·ªõi
        </button>
      </div>

      {/* Filters */}
      <div className="card mb-4">
        <div className="card-header">
          <h5 className="mb-0">B·ªô l·ªçc</h5>
        </div>
        <div className="card-body">
          <AttendanceFilters
            employees={employees}
            filters={filters}
            onFilterChange={handleFilterChange}
            onClearFilters={handleClearFilters}
          />
        </div>
      </div>

      {/* Statistics */}
      <div className="row mb-4">
        <div className="col-md-4">
          <div className="card text-center bg-primary text-white">
            <div className="card-body">
              <h3 id="logCount">{logs.length}</h3>
              <p className="mb-0">T·ªïng b·∫£n ghi</p>
            </div>
          </div>
        </div>
        <div className="col-md-4">
          <div className="card text-center bg-success text-white">
            <div className="card-body">
              <h3>{employees.filter(emp => emp.status === 'active').length}</h3>
              <p className="mb-0">Nh√¢n vi√™n ho·∫°t ƒë·ªông</p>
            </div>
          </div>
        </div>
        <div className="col-md-4">
          <div className="card text-center bg-info text-white">
            <div className="card-body">
              <h3>{Object.keys(employeeHours).length}</h3>
              <p className="mb-0">Nh√¢n vi√™n c√≥ gi·ªù c√¥ng</p>
            </div>
          </div>
        </div>
      </div>

      {/* Content Tabs */}
      <ul className="nav nav-tabs mb-4">
        <li className="nav-item">
          <a className="nav-link active" data-bs-toggle="tab" href="#logs-tab">
            <i className="fas fa-list me-2"></i>
            B·∫£n ghi ch·∫•m c√¥ng
          </a>
        </li>
        <li className="nav-item">
          <a className="nav-link" data-bs-toggle="tab" href="#hours-tab">
            <i className="fas fa-clock me-2"></i>
            T·ªïng gi·ªù c√¥ng
          </a>
        </li>
      </ul>

      <div className="tab-content">
        {/* Attendance Logs Tab */}
        <div className="tab-pane fade show active" id="logs-tab">
          <div className="card">
            <div className="card-header">
              <h5 className="mb-0">Chi ti·∫øt b·∫£n ghi ch·∫•m c√¥ng</h5>
            </div>
            <div className="card-body">
              <AttendanceLogs logs={logs} />
            </div>
          </div>
        </div>

        {/* Employee Hours Tab */}
        <div className="tab-pane fade" id="hours-tab">
          <div className="card">
            <div className="card-header">
              <h5 className="mb-0">T·ªïng gi·ªù c√¥ng theo nh√¢n vi√™n</h5>
            </div>
            <div className="card-body">
              <EmployeeHours 
                employees={employees}
                employeeHours={employeeHours}
              />
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default AttendanceLogsPage;

==============================

üìÅ File: .\src\pages\DashboardPage.jsx
------------------------------
üîß FUNCTIONS:
   ‚Ä¢ DashboardPage (d√≤ng 6) - arrow function
   ‚Ä¢ DashboardPage (d√≤ng 24) - arrow function
üì§ EXPORTS:
   ‚Ä¢ DashboardPage (d√≤ng 16)
   ‚Ä¢ DashboardPage (d√≤ng 63)

üìÑ N·ªòI DUNG FILE:
==============================
// // src/pages/DashboardPage.jsx
// import React from 'react';
// import { useAuth } from '../hooks/useAuth.js';
// import Dashboard from '../components/dashboard/Dashboard.jsx';

// const DashboardPage = () => {
//   const { user } = useAuth();

//   return (
//     <div className="dashboard-page">
//       <Dashboard user={user} />
//     </div>
//   );
// };

// export default DashboardPage;

// src/pages/DashboardPage.jsx
import React, { useEffect } from 'react';
import { useAuth } from '../hooks/useAuth.js';
import { useEmployeeStats } from '../hooks/useEmployees.js';
import Dashboard from '../components/dashboard/Dashboard.jsx';

const DashboardPage = () => {
  const { user } = useAuth();
  
  // ‚úÖ G·ªçi hook useEmployeeStats
  const { stats, loading, fetchStats } = useEmployeeStats();
  
  // ‚úÖ FIX: B·ªè fetchStats kh·ªèi dependency array
  useEffect(() => {
    console.log('üìä DashboardPage: Fetching employee stats...');
    fetchStats();
  }, []); // ‚Üê ‚úÖ Ch·ªâ ch·∫°y 1 l·∫ßn khi mount
  
  // ‚úÖ Debug logs
  useEffect(() => {
    console.log('üìä DashboardPage: Stats updated:', {
      totalEmployees: stats.totalEmployees,
      activeEmployees: stats.activeEmployees,
      loading: loading
    });
  }, [stats, loading]);

  console.log('üéØ DashboardPage render:', { 
    totalEmployees: stats.totalEmployees,
    loading,
    hasUser: !!user
  });

  return (
    <div className="dashboard-page">
      {/* ‚úÖ Truy·ªÅn stats xu·ªëng Dashboard component */}
      <Dashboard 
        user={user} 
        employeeStats={stats}
        loading={loading}
      />
    </div>
  );
};

export default DashboardPage;

==============================

üìÅ File: .\src\pages\EmployeeManagementPage.jsx
------------------------------
üîß FUNCTIONS:
   ‚Ä¢ EmployeeManagementPage (d√≤ng 20) - arrow function
   ‚Ä¢ checkPermissions (d√≤ng 55) - arrow function
   ‚Ä¢ handleTabClick (d√≤ng 63) - arrow function
   ‚Ä¢ handleEditEmployee (d√≤ng 80) - arrow function
   ‚Ä¢ handleAddWorkHistory (d√≤ng 123) - arrow function
   ‚Ä¢ handleEmployeeAdded (d√≤ng 138) - arrow function
   ‚Ä¢ handleSearchInputChange (d√≤ng 153) - arrow function
   ‚Ä¢ handleRefresh (d√≤ng 160) - arrow function
üì§ EXPORTS:
   ‚Ä¢ EmployeeManagementPage (d√≤ng 383)

üìÑ N·ªòI DUNG FILE:
==============================
// src/pages/EmployeeManagementPage.jsx - REFACTORED VERSION
import React, { useState, useEffect } from 'react';
import { useAuth } from '../hooks/useAuth';
import { useNotification } from '../hooks/useNotification';
import { useEmployees } from '../hooks/useEmployees';

// ===== S·ª¨A: Import ƒë√∫ng components =====
import EmployeeTable from '../components/employee/EmployeeTable';  // ‚úÖ S·ª¨A: Table thay v√¨ List
import EmployeeForm from '../components/employee/EmployeeForm';
import StoreManager from '../components/masterdata/StoreManager';
import PositionManager from '../components/masterdata/PositionManager';
import Loading from '../components/common/Loading';

// ===== TH√äM: Import modal components =====
import EmployeeEditModal from '../components/employee/EmployeeEditModal';
import WorkHistoryModal from '../components/employee/WorkHistoryModal';
import AddWorkHistoryModal from '../components/employee/AddWorkHistoryModal';
import RecruitmentModal from '../components/employee/RecruitmentModal';

const EmployeeManagementPage = () => {
  const [activeTab, setActiveTab] = useState('employees');
  const [loading, setLoading] = useState(true);
  
  // ===== TH√äM: Modal states =====
  const [showEditModal, setShowEditModal] = useState(false);
  const [showWorkHistoryModal, setShowWorkHistoryModal] = useState(false);
  const [showAddWorkHistoryModal, setShowAddWorkHistoryModal] = useState(false);
  const [selectedEmployee, setSelectedEmployee] = useState(null);
  const [selectedEmployeeForHistory, setSelectedEmployeeForHistory] = useState(null);
  const [searchQuery, setSearchQuery] = useState('');

  // ===== S·ª¨A: S·ª≠ d·ª•ng hooks =====
  const { user } = useAuth();
  const { showNotification } = useNotification();
  
  // ‚úÖ S·ª¨A: S·ª≠ d·ª•ng useEmployees hook theo service layer pattern
  const {
    employees,
    loading: employeesLoading,
    error,
    fetchEmployees,
    addEmployee,
    updateEmployee,
    deleteEmployee,
    searchEmployees,
    getWorkHistory,
    addWorkHistory
  } = useEmployees();

  useEffect(() => {
    checkPermissions();
    setLoading(false);
  }, []);

  const checkPermissions = () => {
    if (!user || (user.role !== 'hr' && user.role !== 'admin')) {
      showNotification('B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p trang n√†y', 'error');
      window.location.href = '/dashboard';
      return;
    }
  };

  const handleTabClick = (tabId) => {
    setActiveTab(tabId);
  };

  // ===== TH√äM: Employee handlers theo service layer pattern =====
  const handleDeleteEmployee = async (employeeId) => {
    if (window.confirm('B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a nh√¢n vi√™n n√†y?')) {
      try {
        await deleteEmployee(employeeId);
        // Success notification ƒë√£ ƒë∆∞·ª£c handle trong hook
      } catch (error) {
        console.error('Delete employee error:', error);
        // Error notification ƒë√£ ƒë∆∞·ª£c handle trong hook
      }
    }
  };

  const handleEditEmployee = (employeeId) => {
    const employee = employees.find(emp => emp.id === employeeId);
    if (employee) {
      setSelectedEmployee(employee);
      setShowEditModal(true);
    } else {
      showNotification('Kh√¥ng t√¨m th·∫•y th√¥ng tin nh√¢n vi√™n', 'error');
    }
  };

  const handleEmployeeUpdated = async () => {
    setShowEditModal(false);
    setSelectedEmployee(null);
    // employees s·∫Ω ƒë∆∞·ª£c t·ª± ƒë·ªông refresh b·ªüi hook
  };

  const handleViewWorkHistory = async (employeeId) => {
    const employee = employees.find(emp => emp.employeeId === employeeId);
    if (!employee) {
      showNotification('Kh√¥ng t√¨m th·∫•y th√¥ng tin nh√¢n vi√™n', 'error');
      return;
    }

    setSelectedEmployeeForHistory({ 
      employeeId, 
      name: employee.fullName,
      workHistory: null 
    });
    
    try {
      const workHistory = await getWorkHistory(employeeId);
      setSelectedEmployeeForHistory(prev => ({ 
        ...prev, 
        workHistory 
      }));
    } catch (error) {
      console.error('Error loading work history:', error);
      // Error ƒë√£ ƒë∆∞·ª£c handle trong hook
    }
    
    setShowWorkHistoryModal(true);
  };

  const handleAddWorkHistory = (employeeId, employeeName) => {
    setSelectedEmployeeForHistory({ 
      employeeId, 
      name: employeeName 
    });
    setShowAddWorkHistoryModal(true);
  };

  const handleWorkHistoryAdded = async () => {
    setShowAddWorkHistoryModal(false);
    setSelectedEmployeeForHistory(null);
    // Refresh employees n·∫øu c·∫ßn
    await fetchEmployees();
  };

  const handleEmployeeAdded = (response) => {
    console.log('Employee added successfully:', response);
    // employees s·∫Ω ƒë∆∞·ª£c t·ª± ƒë·ªông refresh b·ªüi hook
  };

  // ===== TH√äM: Search handlers =====
  const handleSearch = async (e) => {
    e.preventDefault();
    if (searchQuery.trim()) {
      await searchEmployees(searchQuery);
    } else {
      await fetchEmployees();
    }
  };

  const handleSearchInputChange = (e) => {
    setSearchQuery(e.target.value);
    if (e.target.value === '') {
      fetchEmployees();
    }
  };

  const handleRefresh = () => {
    fetchEmployees();
    showNotification('ƒê√£ l√†m m·ªõi d·ªØ li·ªáu', 'success');
  };

  if (loading) {
    return <Loading fullScreen text="ƒêang t·∫£i trang qu·∫£n l√Ω nh√¢n vi√™n..." />;
  }

  return (
    <div className="employee-management-page">
      {/* Header */}
      <div className="d-flex justify-content-between align-items-center mb-4">
        <div>
          <h1>Qu·∫£n l√Ω nh√¢n vi√™n</h1>
          <p className="text-muted mb-0">Qu·∫£n l√Ω th√¥ng tin nh√¢n vi√™n, c·ª≠a h√†ng v√† v·ªã tr√≠</p>
        </div>
        <div>
          <button 
            className="btn btn-outline-primary me-2"
            onClick={handleRefresh}
            disabled={employeesLoading}
          >
            <i className={`fas fa-sync-alt me-2 ${employeesLoading ? 'fa-spin' : ''}`}></i>
            L√†m m·ªõi
          </button>
        </div>
      </div>

      {/* Navigation Tabs */}
      <ul className="nav nav-tabs mb-4">
        <li className="nav-item">
          <button
            className={`nav-link ${activeTab === 'employees' ? 'active' : ''}`}
            onClick={() => handleTabClick('employees')}
          >
            <i className="fas fa-users me-2"></i>
            Nh√¢n vi√™n
          </button>
        </li>
        <li className="nav-item">
          <button
            className={`nav-link ${activeTab === 'stores' ? 'active' : ''}`}
            onClick={() => handleTabClick('stores')}
          >
            <i className="fas fa-store me-2"></i>
            C·ª≠a h√†ng
          </button>
        </li>
        <li className="nav-item">
          <button
            className={`nav-link ${activeTab === 'positions' ? 'active' : ''}`}
            onClick={() => handleTabClick('positions')}
          >
            <i className="fas fa-briefcase me-2"></i>
            V·ªã tr√≠
          </button>
        </li>
      </ul>

      {/* Tab Content */}
      <div className="tab-content">
        {/* Employees Tab */}
        {activeTab === 'employees' && (
          <div className="tab-pane fade show active">
            {/* ===== TH√äM: Search Section ===== */}
            <div className="row mb-4">
              <div className="col-12">
                <div className="card">
                  <div className="card-body">
                    <form onSubmit={handleSearch} className="d-flex gap-2">
                      <div className="flex-grow-1">
                        <input
                          type="text"
                          className="form-control"
                          placeholder="T√¨m ki·∫øm nh√¢n vi√™n theo t√™n, m√£ nh√¢n vi√™n, s·ªë ƒëi·ªán tho·∫°i..."
                          value={searchQuery}
                          onChange={handleSearchInputChange}
                        />
                      </div>
                      <button 
                        type="submit" 
                        className="btn btn-outline-primary"
                        disabled={employeesLoading}
                      >
                        <i className="fas fa-search"></i>
                      </button>
                      <button 
                        type="button" 
                        className="btn btn-outline-secondary"
                        onClick={() => {
                          setSearchQuery('');
                          fetchEmployees();
                        }}
                        disabled={employeesLoading}
                      >
                        <i className="fas fa-times"></i>
                      </button>
                    </form>
                  </div>
                </div>
              </div>
            </div>

            <div className="row">
              <div className="col-md-4">
                <div className="card">
                  <div className="card-header">
                    <h5>Th√™m nh√¢n vi√™n m·ªõi</h5>
                  </div>
                  <div className="card-body">
                    <EmployeeForm onEmployeeAdded={handleEmployeeAdded} />
                  </div>
                </div>
              </div>
              <div className="col-md-8">
                <div className="card">
                  <div className="card-header d-flex justify-content-between align-items-center">
                    <h5>Danh s√°ch nh√¢n vi√™n</h5>
                    {employees.length > 0 && (
                      <span className="badge bg-primary">
                        {employees.length} nh√¢n vi√™n
                      </span>
                    )}
                  </div>
                  <div className="card-body">
                    {/* ===== S·ª¨A: Hi·ªÉn th·ªã loading v√† error states ===== */}
                    {employeesLoading ? (
                      <div className="text-center py-4">
                        <div className="spinner-border" role="status">
                          <span className="visually-hidden">Loading...</span>
                        </div>
                        <p className="mt-2 text-muted">ƒêang t·∫£i danh s√°ch nh√¢n vi√™n...</p>
                      </div>
                    ) : error ? (
                      <div className="alert alert-danger" role="alert">
                        <i className="fas fa-exclamation-triangle me-2"></i>
                        {error}
                        <button 
                          className="btn btn-sm btn-outline-danger ms-2"
                          onClick={fetchEmployees}
                        >
                          <i className="fas fa-redo me-1"></i>
                          Th·ª≠ l·∫°i
                        </button>
                      </div>
                    ) : (
                      /* ===== S·ª¨A: S·ª≠ d·ª•ng EmployeeTable v·ªõi handlers ===== */
                      <EmployeeTable
                        employees={employees}
                        onEdit={handleEditEmployee}
                        onDelete={handleDeleteEmployee}
                        onAddWorkHistory={handleAddWorkHistory}
                        onViewWorkHistory={handleViewWorkHistory}
                      />
                    )}
                  </div>
                </div>
              </div>
            </div>
          </div>
        )}

        {/* Stores Tab */}
        {activeTab === 'stores' && (
          <div className="tab-pane fade show active">
            <StoreManager />
          </div>
        )}

        {/* Positions Tab */}
        {activeTab === 'positions' && (
          <div className="tab-pane fade show active">
            <PositionManager />
          </div>
        )}
      </div>

      {/* ===== TH√äM: Modal Components ===== */}
      {/* Employee Edit Modal */}
      {showEditModal && selectedEmployee && (
        <EmployeeEditModal
          isOpen={showEditModal}
          onClose={() => {
            setShowEditModal(false);
            setSelectedEmployee(null);
          }}
          employee={selectedEmployee}
          onEmployeeUpdated={handleEmployeeUpdated}
        />
      )}

      {/* Work History View Modal */}
      {showWorkHistoryModal && selectedEmployeeForHistory && (
        <WorkHistoryModal
          isOpen={showWorkHistoryModal}
          onClose={() => {
            setShowWorkHistoryModal(false);
            setSelectedEmployeeForHistory(null);
          }}
          employeeId={selectedEmployeeForHistory.employeeId}
          employeeName={selectedEmployeeForHistory.name}
          workHistory={selectedEmployeeForHistory.workHistory}
        />
      )}

      {/* Add Work History Modal */}
      {showAddWorkHistoryModal && selectedEmployeeForHistory && (
        <AddWorkHistoryModal
          isOpen={showAddWorkHistoryModal}
          onClose={() => {
            setShowAddWorkHistoryModal(false);
            setSelectedEmployeeForHistory(null);
          }}
          employeeId={selectedEmployeeForHistory.employeeId}
          employeeName={selectedEmployeeForHistory.name}
          onWorkHistoryAdded={handleWorkHistoryAdded}
        />
      )}
    </div>
  );
};

export default EmployeeManagementPage;

==============================

üìÅ File: .\src\pages\HRDashboardPage.jsx
------------------------------
üîß FUNCTIONS:
   ‚Ä¢ HRDashboardPage (d√≤ng 7) - arrow function
   ‚Ä¢ checkPermissions (d√≤ng 18) - arrow function
üì§ EXPORTS:
   ‚Ä¢ me (d√≤ng 180)
   ‚Ä¢ HRDashboardPage (d√≤ng 238)

üìÑ N·ªòI DUNG FILE:
==============================
import React, { useState, useEffect } from 'react';
import { useAuth } from '../hooks/useAuth';
import { ApiClient } from '../services/api';
import { useNotification } from '../hooks/useNotification';
import Loading from '../components/common/Loading';

const HRDashboardPage = () => {
  const [stats, setStats] = useState({});
  const [loading, setLoading] = useState(true);
  const { user } = useAuth();
  const { showNotification } = useNotification();

  useEffect(() => {
    checkPermissions();
    loadStats();
  }, []);

  const checkPermissions = () => {
    if (!user || (user.role !== 'hr' && user.role !== 'admin')) {
      showNotification('B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p trang n√†y', 'error');
      window.location.href = '/dashboard';
      return;
    }
  };

  const loadStats = async () => {
    try {
      console.log('üîç HRDashboard: Loading stats...');
      const response = await ApiClient.get('/api/employees/stats');
      
      console.log('üì® HRDashboard: Raw response:', response);
      console.log('‚úÖ HRDashboard: Response success:', response.success);
      console.log('üìä HRDashboard: Response data:', response.data);
      
      // ‚úÖ FIX: S·ª≠ d·ª•ng response.data thay v√¨ response
      if (response.success && response.data) {
        console.log('‚úÖ HRDashboard: Setting stats to:', response.data);
        setStats(response.data);
      } else {
        console.warn('‚ö†Ô∏è HRDashboard: API returned success: false');
        showNotification('Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu th·ªëng k√™', 'warning');
      }
      
    } catch (error) {
      console.error('‚ùå HRDashboard: Error loading stats:', error);
      showNotification('L·ªói khi t·∫£i th·ªëng k√™ HR', 'error');
    } finally {
      setLoading(false);
    }
  };

  const handleRefresh = async () => {
    setLoading(true);
    await loadStats();
    showNotification('ƒê√£ c·∫≠p nh·∫≠t d·ªØ li·ªáu HR dashboard', 'success');
  };

  // ‚úÖ DEBUG: Log current stats state
  console.log('üéØ HRDashboard render - Current stats:', stats);
  console.log('üéØ HRDashboard render - Loading:', loading);

  if (loading) {
    return <Loading fullScreen text="ƒêang t·∫£i HR dashboard..." />;
  }

  return (
    <div className="hr-dashboard-page">
      {/* ‚úÖ DEBUG INFO - Remove this after fixing */}
      <div style={{ 
        background: '#f8f9fa', 
        border: '1px solid #dee2e6', 
        borderRadius: '0.25rem', 
        padding: '1rem', 
        marginBottom: '1rem' 
      }}>
        <h6 className="text-muted mb-2">üêõ DEBUG INFO (HR Dashboard):</h6>
        <small className="d-block">Raw stats: {JSON.stringify(stats)}</small>
        <small className="d-block">Total Employees: {stats.totalEmployees}</small>
        <small className="d-block">Active Employees: {stats.activeEmployees}</small>
        <small className="d-block">Inactive Employees: {stats.inactiveEmployees}</small>
      </div>

      {/* Header */}
      <div className="d-flex justify-content-between align-items-center mb-4">
        <div>
          <h1>HR Dashboard</h1>
          <p className="text-muted mb-0">Dashboard d√†nh cho b·ªô ph·∫≠n nh√¢n s·ª±</p>
        </div>
        <button 
          className="btn btn-outline-primary"
          onClick={handleRefresh}
          disabled={loading}
        >
          <i className={`fas fa-sync-alt me-2 ${loading ? 'fa-spin' : ''}`}></i>
          L√†m m·ªõi
        </button>
      </div>

      {/* Stats Cards */}
      <div className="row mb-4">
        <div className="col-md-3 mb-3">
          <div className="card text-center bg-primary text-white h-100">
            <div className="card-body">
              <i className="fas fa-users fa-3x mb-3"></i>
              <h2>{stats.totalEmployees || 0}</h2>
              <p className="mb-0">T·ªïng nh√¢n vi√™n</p>
            </div>
          </div>
        </div>

        <div className="col-md-3 mb-3">
          <div className="card text-center bg-success text-white h-100">
            <div className="card-body">
              <i className="fas fa-user-check fa-3x mb-3"></i>
              <h2>{stats.activeEmployees || 0}</h2>
              <p className="mb-0">Nh√¢n vi√™n ho·∫°t ƒë·ªông</p>
            </div>
          </div>
        </div>

        <div className="col-md-3 mb-3">
          <div className="card text-center bg-warning text-white h-100">
            <div className="card-body">
              <i className="fas fa-user-times fa-3x mb-3"></i>
              <h2>{stats.inactiveEmployees || 0}</h2>
              <p className="mb-0">Nh√¢n vi√™n kh√¥ng ho·∫°t ƒë·ªông</p>
            </div>
          </div>
        </div>

        <div className="col-md-3 mb-3">
          <div className="card text-center bg-info text-white h-100">
            <div className="card-body">
              <i className="fas fa-clock fa-3x mb-3"></i>
              <h2>0</h2>
              <p className="mb-0">T·ªïng ch·∫•m c√¥ng</p>
            </div>
          </div>
        </div>
      </div>

      {/* Management Actions */}
      <div className="row mb-4">
        <div className="col-md-6">
          <div className="card">
            <div className="card-header">
              <h5 className="mb-0">Qu·∫£n l√Ω nh√¢n s·ª±</h5>
            </div>
            <div className="card-body">
              <div className="d-grid gap-2">
                <a href="/employee-management" className="btn btn-primary">
                  <i className="fas fa-users-cog me-2"></i>
                  Qu·∫£n l√Ω nh√¢n vi√™n
                </a>
                <a href="/attendance-logs" className="btn btn-info">
                  <i className="fas fa-clock me-2"></i>
                  Xem ch·∫•m c√¥ng
                </a>
                <button className="btn btn-success" onClick={handleRefresh}>
                  <i className="fas fa-sync-alt me-2"></i>
                  C·∫≠p nh·∫≠t d·ªØ li·ªáu
                </button>
              </div>
            </div>
          </div>
        </div>

        <div className="col-md-6">
          <div className="card">
            <div className="card-header">
              <h5 className="mb-0">C√¥ng c·ª• HR</h5>
            </div>
            <div className="card-body">
              <div className="d-grid gap-2">
                <button className="btn btn-outline-primary" disabled>
                  <i className="fas fa-user-plus me-2"></i>
                  Tuy·ªÉn d·ª•ng (S·∫Øp c√≥)
                </button>
                <button className="btn btn-outline-secondary" disabled>
                  <i className="fas fa-file-export me-2"></i>
                  Xu·∫•t b√°o c√°o (S·∫Øp c√≥)
                </button>
                <a href="/dashboard" className="btn btn-outline-info">
                  <i className="fas fa-tachometer-alt me-2"></i>
                  Dashboard ch√≠nh
                </a>
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* HR Reports Section */}
      <div className="row">
        <div className="col-12">
          <div className="card">
            <div className="card-header">
              <h5 className="mb-0">B√°o c√°o HR</h5>
            </div>
            <div className="card-body">
              <div className="row">
                <div className="col-md-4 text-center">
                  <div className="p-3">
                    <i className="fas fa-chart-bar fa-2x text-primary mb-2"></i>
                    <h6>B√°o c√°o nh√¢n s·ª±</h6>
                    <button className="btn btn-sm btn-primary" disabled>
                      Xem b√°o c√°o (S·∫Øp c√≥)
                    </button>
                  </div>
                </div>
                <div className="col-md-4 text-center">
                  <div className="p-3">
                    <i className="fas fa-chart-line fa-2x text-success mb-2"></i>
                    <h6>B√°o c√°o ch·∫•m c√¥ng</h6>
                    <button className="btn btn-sm btn-success" disabled>
                      Xem b√°o c√°o (S·∫Øp c√≥)
                    </button>
                  </div>
                </div>
                <div className="col-md-4 text-center">
                  <div className="p-3">
                    <i className="fas fa-chart-pie fa-2x text-info mb-2"></i>
                    <h6>B√°o c√°o t·ªïng h·ª£p</h6>
                    <button className="btn btn-sm btn-info" disabled>
                      Xem b√°o c√°o (S·∫Øp c√≥)
                    </button>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default HRDashboardPage;

==============================

üìÅ File: .\src\pages\LoginPage.jsx
------------------------------
üîß FUNCTIONS:
   ‚Ä¢ LoginPage (d√≤ng 7) - arrow function
   ‚Ä¢ handleInputChange (d√≤ng 26) - arrow function
   ‚Ä¢ validateForm (d√≤ng 42) - arrow function
üì§ EXPORTS:
   ‚Ä¢ LoginPage (d√≤ng 195)

üìÑ N·ªòI DUNG FILE:
==============================
import React, { useState, useEffect } from 'react';
import { Navigate } from 'react-router-dom';
import { useAuth } from '../hooks/useAuth';
import { useNotification } from '../hooks/useNotification';
import Loading from '../components/common/Loading';

const LoginPage = () => {
  const [credentials, setCredentials] = useState({
    username: '',
    password: ''
  });
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [errors, setErrors] = useState({});
  
  const { user, login, loading } = useAuth();
  const { showNotification } = useNotification();

  useEffect(() => {
    // Clear any existing alerts
    const alertContainer = document.getElementById('alert-container');
    if (alertContainer) {
      alertContainer.innerHTML = '';
    }
  }, []);

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setCredentials(prev => ({
      ...prev,
      [name]: value
    }));
    
    // Clear error when user starts typing
    if (errors[name]) {
      setErrors(prev => ({
        ...prev,
        [name]: ''
      }));
    }
  };

  const validateForm = () => {
    const newErrors = {};
    
    if (!credentials.username.trim()) {
      newErrors.username = 'Vui l√≤ng nh·∫≠p t√™n ƒëƒÉng nh·∫≠p';
    }
    
    if (!credentials.password.trim()) {
      newErrors.password = 'Vui l√≤ng nh·∫≠p m·∫≠t kh·∫©u';
    }
    
    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    
    if (!validateForm()) {
      showNotification('Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin!', 'error');
      return;
    }

    setIsSubmitting(true);
    
    try {
      const response = await login(credentials);
      
      showNotification('ƒêƒÉng nh·∫≠p th√†nh c√¥ng!', 'success');
      
      // Redirect based on role after short delay
      setTimeout(() => {
        if (response.user.role === 'hr' || response.user.role === 'admin') {
          window.location.href = '/hr-dashboard';
        } else {
          window.location.href = '/dashboard';
        }
      }, 1000);
      
    } catch (error) {
      console.error('Login error:', error);
      showNotification('T√™n ƒëƒÉng nh·∫≠p ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng!', 'error');
    } finally {
      setIsSubmitting(false);
    }
  };

  // Redirect if already logged in
  if (user) {
    const redirectPath = user.role === 'hr' || user.role === 'admin' ? '/hr-dashboard' : '/dashboard';
    return <Navigate to={redirectPath} replace />;
  }

  // Show loading during auth check
  if (loading) {
    return (
      <div className="d-flex justify-content-center align-items-center min-vh-100">
        <Loading />
      </div>
    );
  }

  return (
    <div className="min-vh-100 d-flex align-items-center justify-content-center bg-light">
      <div className="container">
        <div className="row justify-content-center">
          <div className="col-md-6 col-lg-4">
            <div className="card shadow">
              <div className="card-body p-4">
                <div className="text-center mb-4">
                  <h2 className="card-title">ƒêƒÉng nh·∫≠p</h2>
                  <p className="text-muted">H·ªá th·ªëng qu·∫£n l√Ω nh√¢n s·ª±</p>
                </div>

                <form onSubmit={handleSubmit} noValidate>
                  <div className="mb-3">
                    <label htmlFor="username" className="form-label">
                      T√™n ƒëƒÉng nh·∫≠p <span className="text-danger">*</span>
                    </label>
                    <input
                      type="text"
                      className={`form-control ${errors.username ? 'is-invalid' : ''}`}
                      id="username"
                      name="username"
                      value={credentials.username}
                      onChange={handleInputChange}
                      placeholder="Nh·∫≠p t√™n ƒëƒÉng nh·∫≠p"
                      disabled={isSubmitting}
                      required
                    />
                    {errors.username && (
                      <div className="invalid-feedback">
                        {errors.username}
                      </div>
                    )}
                  </div>

                  <div className="mb-4">
                    <label htmlFor="password" className="form-label">
                      M·∫≠t kh·∫©u <span className="text-danger">*</span>
                    </label>
                    <input
                      type="password"
                      className={`form-control ${errors.password ? 'is-invalid' : ''}`}
                      id="password"
                      name="password"
                      value={credentials.password}
                      onChange={handleInputChange}
                      placeholder="Nh·∫≠p m·∫≠t kh·∫©u"
                      disabled={isSubmitting}
                      required
                    />
                    {errors.password && (
                      <div className="invalid-feedback">
                        {errors.password}
                      </div>
                    )}
                  </div>

                  <button
                    type="submit"
                    className="btn btn-primary w-100"
                    disabled={isSubmitting}
                  >
                    {isSubmitting ? (
                      <>
                        <span className="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                        ƒêang ƒëƒÉng nh·∫≠p...
                      </>
                    ) : (
                      'ƒêƒÉng nh·∫≠p'
                    )}
                  </button>
                </form>

                {/* Demo credentials info */}
                <div className="mt-4 p-3 bg-light rounded">
                  <small className="text-muted">
                    <strong>T√†i kho·∫£n demo:</strong><br />
                    Admin: admin / admin123<br />
                    HR: hr / hr123<br />
                    Sales: sales / sales123
                  </small>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default LoginPage;

==============================

üìÅ File: .\src\services\api.js
------------------------------
üèõÔ∏è  CLASSES:
   ‚Ä¢ ApiClient (d√≤ng 2)
üì§ EXPORTS:
   ‚Ä¢ class (d√≤ng 2)
   ‚Ä¢ ApiClient (d√≤ng 78)

üìÑ N·ªòI DUNG FILE:
==============================
// API helper functions - converted from vanilla JS
export class ApiClient {
  static async request(url, options = {}) {
    try {
      const response = await fetch(url, {
        headers: {
          'Content-Type': 'application/json',
          ...options.headers
        },
        credentials: 'include',
        ...options
      });

      // ‚úÖ TH√äM: Log request details ƒë·ªÉ debug
      console.log('API Request:', {
        url,
        method: options.method || 'GET',
        body: options.body,
        status: response.status,
        statusText: response.statusText
      });

      if (!response.ok) {
        let errorData;
        try {
          errorData = await response.json();
          // ‚úÖ TH√äM: Log full error response
          console.error('Server error response:', errorData);
        } catch (parseError) {
          console.error('Could not parse error response:', parseError);
          errorData = { error: `HTTP ${response.status}: ${response.statusText}` };
        }
        
        // ‚úÖ S·ª¨A: Tr·∫£ v·ªÅ object ch·ª©a ƒë·∫ßy ƒë·ªß th√¥ng tin l·ªói
        throw new Error(JSON.stringify({
          status: response.status,
          message: errorData.message || errorData.error || 'Request failed',
          details: errorData
        }));
      }

      const data = await response.json();
      console.log('API Response:', data);
      return data;
    } catch (error) {
      console.error('API request error:', error);
      throw error;
    }
  }

  static async get(url, params = {}) {
    const queryString = new URLSearchParams(params).toString();
    const fullUrl = queryString ? `${url}?${queryString}` : url;
    return this.request(fullUrl);
  }

  static async post(url, data) {
    return this.request(url, {
      method: 'POST',
      body: JSON.stringify(data)
    });
  }

  static async put(url, data) {
    return this.request(url, {
      method: 'PUT',
      body: JSON.stringify(data)
    });
  }

  static async delete(url) {
    return this.request(url, {
      method: 'DELETE'
    });
  }
}

export default ApiClient;

==============================

üìÅ File: .\src\services\auth.js
------------------------------

üìÑ N·ªòI DUNG FILE:
==============================

==============================

üìÅ File: .\src\services\employee.js
------------------------------
üì§ EXPORTS:
   ‚Ä¢ const (d√≤ng 5)
   ‚Ä¢ const (d√≤ng 14)
   ‚Ä¢ const (d√≤ng 23)
   ‚Ä¢ const (d√≤ng 32)
   ‚Ä¢ const (d√≤ng 41)
   ‚Ä¢ const (d√≤ng 51)
   ‚Ä¢ const (d√≤ng 60)
   ‚Ä¢ const (d√≤ng 70)
   ‚Ä¢ const (d√≤ng 81)
   ‚Ä¢ const (d√≤ng 91)
   ‚Ä¢ const (d√≤ng 100)

üìÑ N·ªòI DUNG FILE:
==============================
// src/services/employee.js - PHI√äN B·∫¢N HO√ÄN CH·ªàNH
import api from './api.js';

// ==================== EMPLOYEE CRUD ====================
export const getAllEmployees = async () => {
  try {
    const response = await api.get('/employees');
    return response.data;
  } catch (error) {
    throw new Error(error.response?.data?.message || 'L·∫•y danh s√°ch nh√¢n vi√™n th·∫•t b·∫°i');
  }
};

export const addEmployee = async (employeeData) => {
  try {
    const response = await api.post('/employees', employeeData);
    return response.data;
  } catch (error) {
    throw new Error(error.response?.data?.message || 'Th√™m nh√¢n vi√™n th·∫•t b·∫°i');
  }
};

export const updateEmployee = async (employeeId, employeeData) => {
  try {
    const response = await api.put(`/employees/${employeeId}`, employeeData);
    return response.data;
  } catch (error) {
    throw new Error(error.response?.data?.message || 'C·∫≠p nh·∫≠t nh√¢n vi√™n th·∫•t b·∫°i');
  }
};

export const deleteEmployee = async (employeeId) => {
  try {
    const response = await api.delete(`/employees/${employeeId}`);
    return response.data;
  } catch (error) {
    throw new Error(error.response?.data?.message || 'X√≥a nh√¢n vi√™n th·∫•t b·∫°i');
  }
};

export const searchEmployees = async (query) => {
  try {
    const response = await api.get(`/employees/search?q=${encodeURIComponent(query)}`);
    return response.data;
  } catch (error) {
    throw new Error(error.response?.data?.message || 'T√¨m ki·∫øm nh√¢n vi√™n th·∫•t b·∫°i');
  }
};

// ==================== WORK HISTORY ====================
export const getEmployeeWorkHistory = async (employeeId) => {
  try {
    const response = await api.get(`/employees/${encodeURIComponent(employeeId)}/work-history`);
    return response.data;
  } catch (error) {
    throw new Error(error.response?.data?.message || 'L·∫•y work history th·∫•t b·∫°i');
  }
};

export const addWorkHistory = async (workHistoryData) => {
  try {
    const response = await api.post('/employees/work-history', workHistoryData);
    return response.data;
  } catch (error) {
    throw new Error(error.response?.data?.message || 'Th√™m work history th·∫•t b·∫°i');
  }
};

// ==================== RECRUITMENT ====================
export const getRecruitmentRequests = async (filters = {}) => {
  try {
    const params = new URLSearchParams(filters).toString();
    const response = await api.get(`/employees/recruitment-requests?${params}`);
    return response.data;
  } catch (error) {
    throw new Error(error.response?.data?.message || 'L·∫•y danh s√°ch tuy·ªÉn d·ª•ng th·∫•t b·∫°i');
  }
};

// ==================== STATS ====================
export const getEmployeeStats = async () => {
  try {
    const response = await api.get('/employees/stats');
    return response.data;
  } catch (error) {
    throw new Error(error.response?.data?.message || 'L·∫•y th·ªëng k√™ nh√¢n vi√™n th·∫•t b·∫°i');
  }
};

// ==================== MASTER DATA ====================
export const getStores = async () => {
  try {
    const response = await api.get('/employees/stores');
    return response.data;
  } catch (error) {
    throw new Error(error.response?.data?.message || 'L·∫•y danh s√°ch c·ª≠a h√†ng th·∫•t b·∫°i');
  }
};

export const getPositions = async () => {
  try {
    const response = await api.get('/employees/positions');
    return response.data;
  } catch (error) {
    throw new Error(error.response?.data?.message || 'L·∫•y danh s√°ch v·ªã tr√≠ th·∫•t b·∫°i');
  }
};

==============================

üìÑ OTHER CODE FILES:
==================================================

üìÅ File: .\index.html
------------------------------
üìÑ N·ªòI DUNG FILE:
==============================
<!DOCTYPE html>
<html lang="vi">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>HR Management System - React</title>
</head>
<body>
  <div id="root"></div>
  <div id="alert-container"></div>
  <script type="module" src="/src/main.jsx"></script>
</body>
</html>

==============================

üìÅ File: .\package-lock.json
------------------------------
üìÑ N·ªòI DUNG FILE:
==============================
{
  "name": "hr-management-system-react",
  "version": "1.0.0",
  "lockfileVersion": 3,
  "requires": true,
  "packages": {
    "": {
      "name": "hr-management-system-react",
      "version": "1.0.0",
      "dependencies": {
        "@fortawesome/fontawesome-free": "^6.7.2",
        "axios": "^1.10.0",
        "bootstrap": "^5.3.7",
        "cors": "^2.8.5",
        "dotenv": "^16.6.1",
        "express": "^4.21.2",
        "express-session": "^1.18.2",
        "react": "^18.3.1",
        "react-dom": "^18.3.1",
        "react-router-dom": "^6.30.1"
      },
      "devDependencies": {
        "@types/react": "^18.0.28",
        "@types/react-dom": "^18.0.11",
        "@vitejs/plugin-react": "^3.1.0",
        "eslint": "^8.38.0",
        "eslint-plugin-react": "^7.32.2",
        "eslint-plugin-react-hooks": "^4.6.0",
        "eslint-plugin-react-refresh": "^0.3.4",
        "vite": "^4.5.14"
      }
    },
    "node_modules/@ampproject/remapping": {
      "version": "2.3.0",
      "resolved": "https://registry.npmjs.org/@ampproject/remapping/-/remapping-2.3.0.tgz",
      "integrity": "sha512-30iZtAPgz+LTIYoeivqYo853f02jBYSd5uGnGpkFV0M3xOt9aN73erkgYAmZU43x4VfqcnLxW9Kpg3R5LC4YYw==",
      "dev": true,
      "license": "Apache-2.0",
      "dependencies": {
        "@jridgewell/gen-mapping": "^0.3.5",
        "@jridgewell/trace-mapping": "^0.3.24"
      },
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/@babel/code-frame": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/code-frame/-/code-frame-7.27.1.tgz",
      "integrity": "sha512-cjQ7ZlQ0Mv3b47hABuTevyTuYN4i+loJKGeV9flcCgIK37cCXRh+L1bd3iBHlynerhQ7BhCkn2BPbQUL+rGqFg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-validator-identifier": "^7.27.1",
        "js-tokens": "^4.0.0",
        "picocolors": "^1.1.1"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/compat-data": {
      "version": "7.28.0",
      "resolved": "https://registry.npmjs.org/@babel/compat-data/-/compat-data-7.28.0.tgz",
      "integrity": "sha512-60X7qkglvrap8mn1lh2ebxXdZYtUcpd7gsmy9kLaBJ4i/WdY8PqTSdxyA8qraikqKQK5C1KRBKXqznrVapyNaw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/core": {
      "version": "7.28.0",
      "resolved": "https://registry.npmjs.org/@babel/core/-/core-7.28.0.tgz",
      "integrity": "sha512-UlLAnTPrFdNGoFtbSXwcGFQBtQZJCNjaN6hQNP3UPvuNXT1i82N26KL3dZeIpNalWywr9IuQuncaAfUaS1g6sQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@ampproject/remapping": "^2.2.0",
        "@babel/code-frame": "^7.27.1",
        "@babel/generator": "^7.28.0",
        "@babel/helper-compilation-targets": "^7.27.2",
        "@babel/helper-module-transforms": "^7.27.3",
        "@babel/helpers": "^7.27.6",
        "@babel/parser": "^7.28.0",
        "@babel/template": "^7.27.2",
        "@babel/traverse": "^7.28.0",
        "@babel/types": "^7.28.0",
        "convert-source-map": "^2.0.0",
        "debug": "^4.1.0",
        "gensync": "^1.0.0-beta.2",
        "json5": "^2.2.3",
        "semver": "^6.3.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/babel"
      }
    },
    "node_modules/@babel/generator": {
      "version": "7.28.0",
      "resolved": "https://registry.npmjs.org/@babel/generator/-/generator-7.28.0.tgz",
      "integrity": "sha512-lJjzvrbEeWrhB4P3QBsH7tey117PjLZnDbLiQEKjQ/fNJTjuq4HSqgFA+UNSwZT8D7dxxbnuSBMsa1lrWzKlQg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/parser": "^7.28.0",
        "@babel/types": "^7.28.0",
        "@jridgewell/gen-mapping": "^0.3.12",
        "@jridgewell/trace-mapping": "^0.3.28",
        "jsesc": "^3.0.2"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-compilation-targets": {
      "version": "7.27.2",
      "resolved": "https://registry.npmjs.org/@babel/helper-compilation-targets/-/helper-compilation-targets-7.27.2.tgz",
      "integrity": "sha512-2+1thGUUWWjLTYTHZWK1n8Yga0ijBz1XAhUXcKy81rd5g6yh7hGqMp45v7cadSbEHc9G3OTv45SyneRN3ps4DQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/compat-data": "^7.27.2",
        "@babel/helper-validator-option": "^7.27.1",
        "browserslist": "^4.24.0",
        "lru-cache": "^5.1.1",
        "semver": "^6.3.1"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-globals": {
      "version": "7.28.0",
      "resolved": "https://registry.npmjs.org/@babel/helper-globals/-/helper-globals-7.28.0.tgz",
      "integrity": "sha512-+W6cISkXFa1jXsDEdYA8HeevQT/FULhxzR99pxphltZcVaugps53THCeiWA8SguxxpSp3gKPiuYfSWopkLQ4hw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-module-imports": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/helper-module-imports/-/helper-module-imports-7.27.1.tgz",
      "integrity": "sha512-0gSFWUPNXNopqtIPQvlD5WgXYI5GY2kP2cCvoT8kczjbfcfuIljTbcWrulD1CIPIX2gt1wghbDy08yE1p+/r3w==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/traverse": "^7.27.1",
        "@babel/types": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-module-transforms": {
      "version": "7.27.3",
      "resolved": "https://registry.npmjs.org/@babel/helper-module-transforms/-/helper-module-transforms-7.27.3.tgz",
      "integrity": "sha512-dSOvYwvyLsWBeIRyOeHXp5vPj5l1I011r52FM1+r1jCERv+aFXYk4whgQccYEGYxK2H3ZAIA8nuPkQ0HaUo3qg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-module-imports": "^7.27.1",
        "@babel/helper-validator-identifier": "^7.27.1",
        "@babel/traverse": "^7.27.3"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0"
      }
    },
    "node_modules/@babel/helper-plugin-utils": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/helper-plugin-utils/-/helper-plugin-utils-7.27.1.tgz",
      "integrity": "sha512-1gn1Up5YXka3YYAHGKpbideQ5Yjf1tDa9qYcgysz+cNCXukyLl6DjPXhD3VRwSb8c0J9tA4b2+rHEZtc6R0tlw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-string-parser": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/helper-string-parser/-/helper-string-parser-7.27.1.tgz",
      "integrity": "sha512-qMlSxKbpRlAridDExk92nSobyDdpPijUq2DW6oDnUqd0iOGxmQjyqhMIihI9+zv4LPyZdRje2cavWPbCbWm3eA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-validator-identifier": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/helper-validator-identifier/-/helper-validator-identifier-7.27.1.tgz",
      "integrity": "sha512-D2hP9eA+Sqx1kBZgzxZh0y1trbuU+JoDkiEwqhQ36nodYqJwyEIhPSdMNd7lOm/4io72luTPWH20Yda0xOuUow==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-validator-option": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/helper-validator-option/-/helper-validator-option-7.27.1.tgz",
      "integrity": "sha512-YvjJow9FxbhFFKDSuFnVCe2WxXk1zWc22fFePVNEaWJEu8IrZVlda6N0uHwzZrUM1il7NC9Mlp4MaJYbYd9JSg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helpers": {
      "version": "7.27.6",
      "resolved": "https://registry.npmjs.org/@babel/helpers/-/helpers-7.27.6.tgz",
      "integrity": "sha512-muE8Tt8M22638HU31A3CgfSUciwz1fhATfoVai05aPXGor//CdWDCbnlY1yvBPo07njuVOCNGCSp/GTt12lIug==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/template": "^7.27.2",
        "@babel/types": "^7.27.6"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/parser": {
      "version": "7.28.0",
      "resolved": "https://registry.npmjs.org/@babel/parser/-/parser-7.28.0.tgz",
      "integrity": "sha512-jVZGvOxOuNSsuQuLRTh13nU0AogFlw32w/MT+LV6D3sP5WdbW61E77RnkbaO2dUvmPAYrBDJXGn5gGS6tH4j8g==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/types": "^7.28.0"
      },
      "bin": {
        "parser": "bin/babel-parser.js"
      },
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/@babel/plugin-transform-react-jsx-self": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-react-jsx-self/-/plugin-transform-react-jsx-self-7.27.1.tgz",
      "integrity": "sha512-6UzkCs+ejGdZ5mFFC/OCUrv028ab2fp1znZmCZjAOBKiBK2jXD1O+BPSfX8X2qjJ75fZBMSnQn3Rq2mrBJK2mw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-react-jsx-source": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-react-jsx-source/-/plugin-transform-react-jsx-source-7.27.1.tgz",
      "integrity": "sha512-zbwoTsBruTeKB9hSq73ha66iFeJHuaFkUbwvqElnygoNbj/jHRsSeokowZFN3CZ64IvEqcmmkVe89OPXc7ldAw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/template": {
      "version": "7.27.2",
      "resolved": "https://registry.npmjs.org/@babel/template/-/template-7.27.2.tgz",
      "integrity": "sha512-LPDZ85aEJyYSd18/DkjNh4/y1ntkE5KwUHWTiqgRxruuZL2F1yuHligVHLvcHY2vMHXttKFpJn6LwfI7cw7ODw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/code-frame": "^7.27.1",
        "@babel/parser": "^7.27.2",
        "@babel/types": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/traverse": {
      "version": "7.28.0",
      "resolved": "https://registry.npmjs.org/@babel/traverse/-/traverse-7.28.0.tgz",
      "integrity": "sha512-mGe7UK5wWyh0bKRfupsUchrQGqvDbZDbKJw+kcRGSmdHVYrv+ltd0pnpDTVpiTqnaBru9iEvA8pz8W46v0Amwg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/code-frame": "^7.27.1",
        "@babel/generator": "^7.28.0",
        "@babel/helper-globals": "^7.28.0",
        "@babel/parser": "^7.28.0",
        "@babel/template": "^7.27.2",
        "@babel/types": "^7.28.0",
        "debug": "^4.3.1"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/types": {
      "version": "7.28.1",
      "resolved": "https://registry.npmjs.org/@babel/types/-/types-7.28.1.tgz",
      "integrity": "sha512-x0LvFTekgSX+83TI28Y9wYPUfzrnl2aT5+5QLnO6v7mSJYtEEevuDRN0F0uSHRk1G1IWZC43o00Y0xDDrpBGPQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-string-parser": "^7.27.1",
        "@babel/helper-validator-identifier": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@esbuild/win32-x64": {
      "version": "0.18.20",
      "resolved": "https://registry.npmjs.org/@esbuild/win32-x64/-/win32-x64-0.18.20.tgz",
      "integrity": "sha512-kTdfRcSiDfQca/y9QIkng02avJ+NCaQvrMejlsB3RRv5sE9rRoeBPISaZpKxHELzRxZyLvNts1P27W3wV+8geQ==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "win32"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@eslint-community/eslint-utils": {
      "version": "4.7.0",
      "resolved": "https://registry.npmjs.org/@eslint-community/eslint-utils/-/eslint-utils-4.7.0.tgz",
      "integrity": "sha512-dyybb3AcajC7uha6CvhdVRJqaKyn7w2YKqKyAN37NKYgZT36w+iRb0Dymmc5qEJ549c/S31cMMSFd75bteCpCw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "eslint-visitor-keys": "^3.4.3"
      },
      "engines": {
        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
      },
      "funding": {
        "url": "https://opencollective.com/eslint"
      },
      "peerDependencies": {
        "eslint": "^6.0.0 || ^7.0.0 || >=8.0.0"
      }
    },
    "node_modules/@eslint-community/regexpp": {
      "version": "4.12.1",
      "resolved": "https://registry.npmjs.org/@eslint-community/regexpp/-/regexpp-4.12.1.tgz",
      "integrity": "sha512-CCZCDJuduB9OUkFkY2IgppNZMi2lBQgD2qzwXkEia16cge2pijY/aXi96CJMquDMn3nJdlPV1A5KrJEXwfLNzQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": "^12.0.0 || ^14.0.0 || >=16.0.0"
      }
    },
    "node_modules/@eslint/eslintrc": {
      "version": "2.1.4",
      "resolved": "https://registry.npmjs.org/@eslint/eslintrc/-/eslintrc-2.1.4.tgz",
      "integrity": "sha512-269Z39MS6wVJtsoUl10L60WdkhJVdPG24Q4eZTH3nnF6lpvSShEK3wQjDX9JRWAUPvPh7COouPpU9IrqaZFvtQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "ajv": "^6.12.4",
        "debug": "^4.3.2",
        "espree": "^9.6.0",
        "globals": "^13.19.0",
        "ignore": "^5.2.0",
        "import-fresh": "^3.2.1",
        "js-yaml": "^4.1.0",
        "minimatch": "^3.1.2",
        "strip-json-comments": "^3.1.1"
      },
      "engines": {
        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
      },
      "funding": {
        "url": "https://opencollective.com/eslint"
      }
    },
    "node_modules/@eslint/js": {
      "version": "8.57.1",
      "resolved": "https://registry.npmjs.org/@eslint/js/-/js-8.57.1.tgz",
      "integrity": "sha512-d9zaMRSTIKDLhctzH12MtXvJKSSUhaHcjV+2Z+GK+EEY7XKpP5yR4x+N3TAcHTcu963nIr+TMcCb4DBCYX1z6Q==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
      }
    },
    "node_modules/@fortawesome/fontawesome-free": {
      "version": "6.7.2",
      "resolved": "https://registry.npmjs.org/@fortawesome/fontawesome-free/-/fontawesome-free-6.7.2.tgz",
      "integrity": "sha512-JUOtgFW6k9u4Y+xeIaEiLr3+cjoUPiAuLXoyKOJSia6Duzb7pq+A76P9ZdPDoAoxHdHzq6gE9/jKBGXlZT8FbA==",
      "license": "(CC-BY-4.0 AND OFL-1.1 AND MIT)",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/@humanwhocodes/config-array": {
      "version": "0.13.0",
      "resolved": "https://registry.npmjs.org/@humanwhocodes/config-array/-/config-array-0.13.0.tgz",
      "integrity": "sha512-DZLEEqFWQFiyK6h5YIeynKx7JlvCYWL0cImfSRXZ9l4Sg2efkFGTuFf6vzXjK1cq6IYkU+Eg/JizXw+TD2vRNw==",
      "deprecated": "Use @eslint/config-array instead",
      "dev": true,
      "license": "Apache-2.0",
      "dependencies": {
        "@humanwhocodes/object-schema": "^2.0.3",
        "debug": "^4.3.1",
        "minimatch": "^3.0.5"
      },
      "engines": {
        "node": ">=10.10.0"
      }
    },
    "node_modules/@humanwhocodes/module-importer": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/@humanwhocodes/module-importer/-/module-importer-1.0.1.tgz",
      "integrity": "sha512-bxveV4V8v5Yb4ncFTT3rPSgZBOpCkjfK0y4oVVVJwIuDVBRMDXrPyXRL988i5ap9m9bnyEEjWfm5WkBmtffLfA==",
      "dev": true,
      "license": "Apache-2.0",
      "engines": {
        "node": ">=12.22"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/nzakas"
      }
    },
    "node_modules/@humanwhocodes/object-schema": {
      "version": "2.0.3",
      "resolved": "https://registry.npmjs.org/@humanwhocodes/object-schema/-/object-schema-2.0.3.tgz",
      "integrity": "sha512-93zYdMES/c1D69yZiKDBj0V24vqNzB/koF26KPaagAfd3P/4gUlh3Dys5ogAK+Exi9QyzlD8x/08Zt7wIKcDcA==",
      "deprecated": "Use @eslint/object-schema instead",
      "dev": true,
      "license": "BSD-3-Clause"
    },
    "node_modules/@jridgewell/gen-mapping": {
      "version": "0.3.12",
      "resolved": "https://registry.npmjs.org/@jridgewell/gen-mapping/-/gen-mapping-0.3.12.tgz",
      "integrity": "sha512-OuLGC46TjB5BbN1dH8JULVVZY4WTdkF7tV9Ys6wLL1rubZnCMstOhNHueU5bLCrnRuDhKPDM4g6sw4Bel5Gzqg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@jridgewell/sourcemap-codec": "^1.5.0",
        "@jridgewell/trace-mapping": "^0.3.24"
      }
    },
    "node_modules/@jridgewell/resolve-uri": {
      "version": "3.1.2",
      "resolved": "https://registry.npmjs.org/@jridgewell/resolve-uri/-/resolve-uri-3.1.2.tgz",
      "integrity": "sha512-bRISgCIjP20/tbWSPWMEi54QVPRZExkuD9lJL+UIxUKtwVJA8wW1Trb1jMs1RFXo1CBTNZ/5hpC9QvmKWdopKw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/@jridgewell/sourcemap-codec": {
      "version": "1.5.4",
      "resolved": "https://registry.npmjs.org/@jridgewell/sourcemap-codec/-/sourcemap-codec-1.5.4.tgz",
      "integrity": "sha512-VT2+G1VQs/9oz078bLrYbecdZKs912zQlkelYpuf+SXF+QvZDYJlbx/LSx+meSAwdDFnF8FVXW92AVjjkVmgFw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/@jridgewell/trace-mapping": {
      "version": "0.3.29",
      "resolved": "https://registry.npmjs.org/@jridgewell/trace-mapping/-/trace-mapping-0.3.29.tgz",
      "integrity": "sha512-uw6guiW/gcAGPDhLmd77/6lW8QLeiV5RUTsAX46Db6oLhGaVj4lhnPwb184s1bkc8kdVg/+h988dro8GRDpmYQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@jridgewell/resolve-uri": "^3.1.0",
        "@jridgewell/sourcemap-codec": "^1.4.14"
      }
    },
    "node_modules/@nodelib/fs.scandir": {
      "version": "2.1.5",
      "resolved": "https://registry.npmjs.org/@nodelib/fs.scandir/-/fs.scandir-2.1.5.tgz",
      "integrity": "sha512-vq24Bq3ym5HEQm2NKCr3yXDwjc7vTsEThRDnkp2DK9p1uqLR+DHurm/NOTo0KG7HYHU7eppKZj3MyqYuMBf62g==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@nodelib/fs.stat": "2.0.5",
        "run-parallel": "^1.1.9"
      },
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/@nodelib/fs.stat": {
      "version": "2.0.5",
      "resolved": "https://registry.npmjs.org/@nodelib/fs.stat/-/fs.stat-2.0.5.tgz",
      "integrity": "sha512-RkhPPp2zrqDAQA/2jNhnztcPAlv64XdhIp7a7454A5ovI7Bukxgt7MX7udwAu3zg1DcpPU0rz3VV1SeaqvY4+A==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/@nodelib/fs.walk": {
      "version": "1.2.8",
      "resolved": "https://registry.npmjs.org/@nodelib/fs.walk/-/fs.walk-1.2.8.tgz",
      "integrity": "sha512-oGB+UxlgWcgQkgwo8GcEGwemoTFt3FIO9ababBmaGwXIoBKZ+GTy0pP185beGg7Llih/NSHSV2XAs1lnznocSg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@nodelib/fs.scandir": "2.1.5",
        "fastq": "^1.6.0"
      },
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/@popperjs/core": {
      "version": "2.11.8",
      "resolved": "https://registry.npmjs.org/@popperjs/core/-/core-2.11.8.tgz",
      "integrity": "sha512-P1st0aksCrn9sGZhp8GMYwBnQsbvAWsZAX44oXNNvLHGqAOcoVxmjZiohstwQ7SqKnbR47akdNi+uleWD8+g6A==",
      "license": "MIT",
      "peer": true,
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/popperjs"
      }
    },
    "node_modules/@remix-run/router": {
      "version": "1.23.0",
      "resolved": "https://registry.npmjs.org/@remix-run/router/-/router-1.23.0.tgz",
      "integrity": "sha512-O3rHJzAQKamUz1fvE0Qaw0xSFqsA/yafi2iqeE0pvdFtCO1viYx8QL6f3Ln/aCCTLxs68SLf0KPM9eSeM8yBnA==",
      "license": "MIT",
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@types/prop-types": {
      "version": "15.7.15",
      "resolved": "https://registry.npmjs.org/@types/prop-types/-/prop-types-15.7.15.tgz",
      "integrity": "sha512-F6bEyamV9jKGAFBEmlQnesRPGOQqS2+Uwi0Em15xenOxHaf2hv6L8YCVn3rPdPJOiJfPiCnLIRyvwVaqMY3MIw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/@types/react": {
      "version": "18.3.23",
      "resolved": "https://registry.npmjs.org/@types/react/-/react-18.3.23.tgz",
      "integrity": "sha512-/LDXMQh55EzZQ0uVAZmKKhfENivEvWz6E+EYzh+/MCjMhNsotd+ZHhBGIjFDTi6+fz0OhQQQLbTgdQIxxCsC0w==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@types/prop-types": "*",
        "csstype": "^3.0.2"
      }
    },
    "node_modules/@types/react-dom": {
      "version": "18.3.7",
      "resolved": "https://registry.npmjs.org/@types/react-dom/-/react-dom-18.3.7.tgz",
      "integrity": "sha512-MEe3UeoENYVFXzoXEWsvcpg6ZvlrFNlOQ7EOsvhI3CfAXwzPfO8Qwuxd40nepsYKqyyVQnTdEfv68q91yLcKrQ==",
      "dev": true,
      "license": "MIT",
      "peerDependencies": {
        "@types/react": "^18.0.0"
      }
    },
    "node_modules/@ungap/structured-clone": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/@ungap/structured-clone/-/structured-clone-1.3.0.tgz",
      "integrity": "sha512-WmoN8qaIAo7WTYWbAZuG8PYEhn5fkz7dZrqTBZ7dtt//lL2Gwms1IcnQ5yHqjDfX8Ft5j4YzDM23f87zBfDe9g==",
      "dev": true,
      "license": "ISC"
    },
    "node_modules/@vitejs/plugin-react": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/@vitejs/plugin-react/-/plugin-react-3.1.0.tgz",
      "integrity": "sha512-AfgcRL8ZBhAlc3BFdigClmTUMISmmzHn7sB2h9U1odvc5U/MjWXsAaz18b/WoppUTDBzxOJwo2VdClfUcItu9g==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/core": "^7.20.12",
        "@babel/plugin-transform-react-jsx-self": "^7.18.6",
        "@babel/plugin-transform-react-jsx-source": "^7.19.6",
        "magic-string": "^0.27.0",
        "react-refresh": "^0.14.0"
      },
      "engines": {
        "node": "^14.18.0 || >=16.0.0"
      },
      "peerDependencies": {
        "vite": "^4.1.0-beta.0"
      }
    },
    "node_modules/accepts": {
      "version": "1.3.8",
      "resolved": "https://registry.npmjs.org/accepts/-/accepts-1.3.8.tgz",
      "integrity": "sha512-PYAthTa2m2VKxuvSD3DPC/Gy+U+sOA1LAuT8mkmRuvw+NACSaeXEQ+NHcVF7rONl6qcaxV3Uuemwawk+7+SJLw==",
      "license": "MIT",
      "dependencies": {
        "mime-types": "~2.1.34",
        "negotiator": "0.6.3"
      },
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/acorn": {
      "version": "8.15.0",
      "resolved": "https://registry.npmjs.org/acorn/-/acorn-8.15.0.tgz",
      "integrity": "sha512-NZyJarBfL7nWwIq+FDL6Zp/yHEhePMNnnJ0y3qfieCrmNvYct8uvtiV41UvlSe6apAfk0fY1FbWx+NwfmpvtTg==",
      "dev": true,
      "license": "MIT",
      "bin": {
        "acorn": "bin/acorn"
      },
      "engines": {
        "node": ">=0.4.0"
      }
    },
    "node_modules/acorn-jsx": {
      "version": "5.3.2",
      "resolved": "https://registry.npmjs.org/acorn-jsx/-/acorn-jsx-5.3.2.tgz",
      "integrity": "sha512-rq9s+JNhf0IChjtDXxllJ7g41oZk5SlXtp0LHwyA5cejwn7vKmKp4pPri6YEePv2PU65sAsegbXtIinmDFDXgQ==",
      "dev": true,
      "license": "MIT",
      "peerDependencies": {
        "acorn": "^6.0.0 || ^7.0.0 || ^8.0.0"
      }
    },
    "node_modules/ajv": {
      "version": "6.12.6",
      "resolved": "https://registry.npmjs.org/ajv/-/ajv-6.12.6.tgz",
      "integrity": "sha512-j3fVLgvTo527anyYyJOGTYJbG+vnnQYvE0m5mmkc1TK+nxAppkCLMIL0aZ4dblVCNoGShhm+kzE4ZUykBoMg4g==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "fast-deep-equal": "^3.1.1",
        "fast-json-stable-stringify": "^2.0.0",
        "json-schema-traverse": "^0.4.1",
        "uri-js": "^4.2.2"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/epoberezkin"
      }
    },
    "node_modules/ansi-regex": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-5.0.1.tgz",
      "integrity": "sha512-quJQXlTSUGL2LH9SUXo8VwsY4soanhgo6LNSm84E1LBcE8s3O0wpdiRzyR9z/ZZJMlMWv37qOOb9pdJlMUEKFQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/ansi-styles": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
      "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "color-convert": "^2.0.1"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
      }
    },
    "node_modules/argparse": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/argparse/-/argparse-2.0.1.tgz",
      "integrity": "sha512-8+9WqebbFzpX9OR+Wa6O29asIogeRMzcGtAINdpMHHyAg10f05aSFVBbcEqGf/PXw1EjAZ+q2/bEBg3DvurK3Q==",
      "dev": true,
      "license": "Python-2.0"
    },
    "node_modules/array-buffer-byte-length": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/array-buffer-byte-length/-/array-buffer-byte-length-1.0.2.tgz",
      "integrity": "sha512-LHE+8BuR7RYGDKvnrmcuSq3tDcKv9OFEXQt/HpbZhY7V6h0zlUXutnAD82GiFx9rdieCMjkvtcsPqBwgUl1Iiw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.3",
        "is-array-buffer": "^3.0.5"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/array-flatten": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/array-flatten/-/array-flatten-1.1.1.tgz",
      "integrity": "sha512-PCVAQswWemu6UdxsDFFX/+gVeYqKAod3D3UVm91jHwynguOwAvYPhx8nNlM++NqRcK6CxxpUafjmhIdKiHibqg==",
      "license": "MIT"
    },
    "node_modules/array-includes": {
      "version": "3.1.9",
      "resolved": "https://registry.npmjs.org/array-includes/-/array-includes-3.1.9.tgz",
      "integrity": "sha512-FmeCCAenzH0KH381SPT5FZmiA/TmpndpcaShhfgEN9eCVjnFBqq3l1xrI42y8+PPLI6hypzou4GXw00WHmPBLQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.8",
        "call-bound": "^1.0.4",
        "define-properties": "^1.2.1",
        "es-abstract": "^1.24.0",
        "es-object-atoms": "^1.1.1",
        "get-intrinsic": "^1.3.0",
        "is-string": "^1.1.1",
        "math-intrinsics": "^1.1.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/array.prototype.findlast": {
      "version": "1.2.5",
      "resolved": "https://registry.npmjs.org/array.prototype.findlast/-/array.prototype.findlast-1.2.5.tgz",
      "integrity": "sha512-CVvd6FHg1Z3POpBLxO6E6zr+rSKEQ9L6rZHAaY7lLfhKsWYUBBOuMs0e9o24oopj6H+geRCX0YJ+TJLBK2eHyQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.7",
        "define-properties": "^1.2.1",
        "es-abstract": "^1.23.2",
        "es-errors": "^1.3.0",
        "es-object-atoms": "^1.0.0",
        "es-shim-unscopables": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/array.prototype.flat": {
      "version": "1.3.3",
      "resolved": "https://registry.npmjs.org/array.prototype.flat/-/array.prototype.flat-1.3.3.tgz",
      "integrity": "sha512-rwG/ja1neyLqCuGZ5YYrznA62D4mZXg0i1cIskIUKSiqF3Cje9/wXAls9B9s1Wa2fomMsIv8czB8jZcPmxCXFg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.8",
        "define-properties": "^1.2.1",
        "es-abstract": "^1.23.5",
        "es-shim-unscopables": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/array.prototype.flatmap": {
      "version": "1.3.3",
      "resolved": "https://registry.npmjs.org/array.prototype.flatmap/-/array.prototype.flatmap-1.3.3.tgz",
      "integrity": "sha512-Y7Wt51eKJSyi80hFrJCePGGNo5ktJCslFuboqJsbf57CCPcm5zztluPlc4/aD8sWsKvlwatezpV4U1efk8kpjg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.8",
        "define-properties": "^1.2.1",
        "es-abstract": "^1.23.5",
        "es-shim-unscopables": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/array.prototype.tosorted": {
      "version": "1.1.4",
      "resolved": "https://registry.npmjs.org/array.prototype.tosorted/-/array.prototype.tosorted-1.1.4.tgz",
      "integrity": "sha512-p6Fx8B7b7ZhL/gmUsAy0D15WhvDccw3mnGNbZpi3pmeJdxtWsj2jEaI4Y6oo3XiHfzuSgPwKc04MYt6KgvC/wA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.7",
        "define-properties": "^1.2.1",
        "es-abstract": "^1.23.3",
        "es-errors": "^1.3.0",
        "es-shim-unscopables": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/arraybuffer.prototype.slice": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/arraybuffer.prototype.slice/-/arraybuffer.prototype.slice-1.0.4.tgz",
      "integrity": "sha512-BNoCY6SXXPQ7gF2opIP4GBE+Xw7U+pHMYKuzjgCN3GwiaIR09UUeKfheyIry77QtrCBlC0KK0q5/TER/tYh3PQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "array-buffer-byte-length": "^1.0.1",
        "call-bind": "^1.0.8",
        "define-properties": "^1.2.1",
        "es-abstract": "^1.23.5",
        "es-errors": "^1.3.0",
        "get-intrinsic": "^1.2.6",
        "is-array-buffer": "^3.0.4"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/async-function": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/async-function/-/async-function-1.0.0.tgz",
      "integrity": "sha512-hsU18Ae8CDTR6Kgu9DYf0EbCr/a5iGL0rytQDobUcdpYOKokk8LEjVphnXkDkgpi0wYVsqrXuP0bZxJaTqdgoA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/asynckit": {
      "version": "0.4.0",
      "resolved": "https://registry.npmjs.org/asynckit/-/asynckit-0.4.0.tgz",
      "integrity": "sha512-Oei9OH4tRh0YqU3GxhX79dM/mwVgvbZJaSNaRk+bshkj0S5cfHcgYakreBjrHwatXKbz+IoIdYLxrKim2MjW0Q==",
      "license": "MIT"
    },
    "node_modules/available-typed-arrays": {
      "version": "1.0.7",
      "resolved": "https://registry.npmjs.org/available-typed-arrays/-/available-typed-arrays-1.0.7.tgz",
      "integrity": "sha512-wvUjBtSGN7+7SjNpq/9M2Tg350UZD3q62IFZLbRAR1bSMlCo1ZaeW+BJ+D090e4hIIZLBcTDWe4Mh4jvUDajzQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "possible-typed-array-names": "^1.0.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/axios": {
      "version": "1.10.0",
      "resolved": "https://registry.npmjs.org/axios/-/axios-1.10.0.tgz",
      "integrity": "sha512-/1xYAC4MP/HEG+3duIhFr4ZQXR4sQXOIe+o6sdqzeykGLx6Upp/1p8MHqhINOvGeP7xyNHe7tsiJByc4SSVUxw==",
      "license": "MIT",
      "dependencies": {
        "follow-redirects": "^1.15.6",
        "form-data": "^4.0.0",
        "proxy-from-env": "^1.1.0"
      }
    },
    "node_modules/balanced-match": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/balanced-match/-/balanced-match-1.0.2.tgz",
      "integrity": "sha512-3oSeUO0TMV67hN1AmbXsK4yaqU7tjiHlbxRDZOpH0KW9+CeX4bRAaX0Anxt0tx2MrpRpWwQaPwIlISEJhYU5Pw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/body-parser": {
      "version": "1.20.3",
      "resolved": "https://registry.npmjs.org/body-parser/-/body-parser-1.20.3.tgz",
      "integrity": "sha512-7rAxByjUMqQ3/bHJy7D6OGXvx/MMc4IqBn/X0fcM1QUcAItpZrBEYhWGem+tzXH90c+G01ypMcYJBO9Y30203g==",
      "license": "MIT",
      "dependencies": {
        "bytes": "3.1.2",
        "content-type": "~1.0.5",
        "debug": "2.6.9",
        "depd": "2.0.0",
        "destroy": "1.2.0",
        "http-errors": "2.0.0",
        "iconv-lite": "0.4.24",
        "on-finished": "2.4.1",
        "qs": "6.13.0",
        "raw-body": "2.5.2",
        "type-is": "~1.6.18",
        "unpipe": "1.0.0"
      },
      "engines": {
        "node": ">= 0.8",
        "npm": "1.2.8000 || >= 1.4.16"
      }
    },
    "node_modules/body-parser/node_modules/debug": {
      "version": "2.6.9",
      "resolved": "https://registry.npmjs.org/debug/-/debug-2.6.9.tgz",
      "integrity": "sha512-bC7ElrdJaJnPbAP+1EotYvqZsb3ecl5wi6Bfi6BJTUcNowp6cvspg0jXznRTKDjm/E7AdgFBVeAPVMNcKGsHMA==",
      "license": "MIT",
      "dependencies": {
        "ms": "2.0.0"
      }
    },
    "node_modules/body-parser/node_modules/ms": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.0.0.tgz",
      "integrity": "sha512-Tpp60P6IUJDTuOq/5Z8cdskzJujfwqfOTkrwIwj7IRISpnkJnT6SyJ4PCPnGMoFjC9ddhal5KVIYtAt97ix05A==",
      "license": "MIT"
    },
    "node_modules/bootstrap": {
      "version": "5.3.7",
      "resolved": "https://registry.npmjs.org/bootstrap/-/bootstrap-5.3.7.tgz",
      "integrity": "sha512-7KgiD8UHjfcPBHEpDNg+zGz8L3LqR3GVwqZiBRFX04a1BCArZOz1r2kjly2HQ0WokqTO0v1nF+QAt8dsW4lKlw==",
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/twbs"
        },
        {
          "type": "opencollective",
          "url": "https://opencollective.com/bootstrap"
        }
      ],
      "license": "MIT",
      "peerDependencies": {
        "@popperjs/core": "^2.11.8"
      }
    },
    "node_modules/brace-expansion": {
      "version": "1.1.12",
      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-1.1.12.tgz",
      "integrity": "sha512-9T9UjW3r0UW5c1Q7GTwllptXwhvYmEzFhzMfZ9H7FQWt+uZePjZPjBP/W1ZEyZ1twGWom5/56TF4lPcqjnDHcg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "balanced-match": "^1.0.0",
        "concat-map": "0.0.1"
      }
    },
    "node_modules/browserslist": {
      "version": "4.25.1",
      "resolved": "https://registry.npmjs.org/browserslist/-/browserslist-4.25.1.tgz",
      "integrity": "sha512-KGj0KoOMXLpSNkkEI6Z6mShmQy0bc1I+T7K9N81k4WWMrfz+6fQ6es80B/YLAeRoKvjYE1YSHHOW1qe9xIVzHw==",
      "dev": true,
      "funding": [
        {
          "type": "opencollective",
          "url": "https://opencollective.com/browserslist"
        },
        {
          "type": "tidelift",
          "url": "https://tidelift.com/funding/github/npm/browserslist"
        },
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "license": "MIT",
      "dependencies": {
        "caniuse-lite": "^1.0.30001726",
        "electron-to-chromium": "^1.5.173",
        "node-releases": "^2.0.19",
        "update-browserslist-db": "^1.1.3"
      },
      "bin": {
        "browserslist": "cli.js"
      },
      "engines": {
        "node": "^6 || ^7 || ^8 || ^9 || ^10 || ^11 || ^12 || >=13.7"
      }
    },
    "node_modules/bytes": {
      "version": "3.1.2",
      "resolved": "https://registry.npmjs.org/bytes/-/bytes-3.1.2.tgz",
      "integrity": "sha512-/Nf7TyzTx6S3yRJObOAV7956r8cr2+Oj8AC5dt8wSP3BQAoeX58NoHyCU8P8zGkNXStjTSi6fzO6F0pBdcYbEg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/call-bind": {
      "version": "1.0.8",
      "resolved": "https://registry.npmjs.org/call-bind/-/call-bind-1.0.8.tgz",
      "integrity": "sha512-oKlSFMcMwpUg2ednkhQ454wfWiU/ul3CkJe/PEHcTKuiX6RpbehUiFMXu13HalGZxfUwCQzZG747YXBn1im9ww==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bind-apply-helpers": "^1.0.0",
        "es-define-property": "^1.0.0",
        "get-intrinsic": "^1.2.4",
        "set-function-length": "^1.2.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/call-bind-apply-helpers": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/call-bind-apply-helpers/-/call-bind-apply-helpers-1.0.2.tgz",
      "integrity": "sha512-Sp1ablJ0ivDkSzjcaJdxEunN5/XvksFJ2sMBFfq6x0ryhQV/2b/KwFe21cMpmHtPOSij8K99/wSfoEuTObmuMQ==",
      "license": "MIT",
      "dependencies": {
        "es-errors": "^1.3.0",
        "function-bind": "^1.1.2"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/call-bound": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/call-bound/-/call-bound-1.0.4.tgz",
      "integrity": "sha512-+ys997U96po4Kx/ABpBCqhA9EuxJaQWDQg7295H4hBphv3IZg0boBKuwYpt4YXp6MZ5AmZQnU/tyMTlRpaSejg==",
      "license": "MIT",
      "dependencies": {
        "call-bind-apply-helpers": "^1.0.2",
        "get-intrinsic": "^1.3.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/callsites": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/callsites/-/callsites-3.1.0.tgz",
      "integrity": "sha512-P8BjAsXvZS+VIDUI11hHCQEv74YT67YUi5JJFNWIqL235sBmjX4+qx9Muvls5ivyNENctx46xQLQ3aTuE7ssaQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/caniuse-lite": {
      "version": "1.0.30001727",
      "resolved": "https://registry.npmjs.org/caniuse-lite/-/caniuse-lite-1.0.30001727.tgz",
      "integrity": "sha512-pB68nIHmbN6L/4C6MH1DokyR3bYqFwjaSs/sWDHGj4CTcFtQUQMuJftVwWkXq7mNWOybD3KhUv3oWHoGxgP14Q==",
      "dev": true,
      "funding": [
        {
          "type": "opencollective",
          "url": "https://opencollective.com/browserslist"
        },
        {
          "type": "tidelift",
          "url": "https://tidelift.com/funding/github/npm/caniuse-lite"
        },
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "license": "CC-BY-4.0"
    },
    "node_modules/chalk": {
      "version": "4.1.2",
      "resolved": "https://registry.npmjs.org/chalk/-/chalk-4.1.2.tgz",
      "integrity": "sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "ansi-styles": "^4.1.0",
        "supports-color": "^7.1.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/chalk/chalk?sponsor=1"
      }
    },
    "node_modules/color-convert": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-2.0.1.tgz",
      "integrity": "sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "color-name": "~1.1.4"
      },
      "engines": {
        "node": ">=7.0.0"
      }
    },
    "node_modules/color-name": {
      "version": "1.1.4",
      "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.4.tgz",
      "integrity": "sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/combined-stream": {
      "version": "1.0.8",
      "resolved": "https://registry.npmjs.org/combined-stream/-/combined-stream-1.0.8.tgz",
      "integrity": "sha512-FQN4MRfuJeHf7cBbBMJFXhKSDq+2kAArBlmRBvcvFE5BB1HZKXtSFASDhdlz9zOYwxh8lDdnvmMOe/+5cdoEdg==",
      "license": "MIT",
      "dependencies": {
        "delayed-stream": "~1.0.0"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/concat-map": {
      "version": "0.0.1",
      "resolved": "https://registry.npmjs.org/concat-map/-/concat-map-0.0.1.tgz",
      "integrity": "sha512-/Srv4dswyQNBfohGpz9o6Yb3Gz3SrUDqBH5rTuhGR7ahtlbYKnVxw2bCFMRljaA7EXHaXZ8wsHdodFvbkhKmqg==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/content-disposition": {
      "version": "0.5.4",
      "resolved": "https://registry.npmjs.org/content-disposition/-/content-disposition-0.5.4.tgz",
      "integrity": "sha512-FveZTNuGw04cxlAiWbzi6zTAL/lhehaWbTtgluJh4/E95DqMwTmha3KZN1aAWA8cFIhHzMZUvLevkw5Rqk+tSQ==",
      "license": "MIT",
      "dependencies": {
        "safe-buffer": "5.2.1"
      },
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/content-type": {
      "version": "1.0.5",
      "resolved": "https://registry.npmjs.org/content-type/-/content-type-1.0.5.tgz",
      "integrity": "sha512-nTjqfcBFEipKdXCv4YDQWCfmcLZKm81ldF0pAopTvyrFGVbcR6P/VAAd5G7N+0tTr8QqiU0tFadD6FK4NtJwOA==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/convert-source-map": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/convert-source-map/-/convert-source-map-2.0.0.tgz",
      "integrity": "sha512-Kvp459HrV2FEJ1CAsi1Ku+MY3kasH19TFykTz2xWmMeq6bk2NU3XXvfJ+Q61m0xktWwt+1HSYf3JZsTms3aRJg==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/cookie": {
      "version": "0.7.1",
      "resolved": "https://registry.npmjs.org/cookie/-/cookie-0.7.1.tgz",
      "integrity": "sha512-6DnInpx7SJ2AK3+CTUE/ZM0vWTUboZCegxhC2xiIydHR9jNuTAASBrfEpHhiGOZw/nX51bHt6YQl8jsGo4y/0w==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/cookie-signature": {
      "version": "1.0.6",
      "resolved": "https://registry.npmjs.org/cookie-signature/-/cookie-signature-1.0.6.tgz",
      "integrity": "sha512-QADzlaHc8icV8I7vbaJXJwod9HWYp8uCqf1xa4OfNu1T7JVxQIrUgOWtHdNDtPiywmFbiS12VjotIXLrKM3orQ==",
      "license": "MIT"
    },
    "node_modules/cors": {
      "version": "2.8.5",
      "resolved": "https://registry.npmjs.org/cors/-/cors-2.8.5.tgz",
      "integrity": "sha512-KIHbLJqu73RGr/hnbrO9uBeixNGuvSQjul/jdFvS/KFSIH1hWVd1ng7zOHx+YrEfInLG7q4n6GHQ9cDtxv/P6g==",
      "license": "MIT",
      "dependencies": {
        "object-assign": "^4",
        "vary": "^1"
      },
      "engines": {
        "node": ">= 0.10"
      }
    },
    "node_modules/cross-spawn": {
      "version": "7.0.6",
      "resolved": "https://registry.npmjs.org/cross-spawn/-/cross-spawn-7.0.6.tgz",
      "integrity": "sha512-uV2QOWP2nWzsy2aMp8aRibhi9dlzF5Hgh5SHaB9OiTGEyDTiJJyx0uy51QXdyWbtAHNua4XJzUKca3OzKUd3vA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "path-key": "^3.1.0",
        "shebang-command": "^2.0.0",
        "which": "^2.0.1"
      },
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/csstype": {
      "version": "3.1.3",
      "resolved": "https://registry.npmjs.org/csstype/-/csstype-3.1.3.tgz",
      "integrity": "sha512-M1uQkMl8rQK/szD0LNhtqxIPLpimGm8sOBwU7lLnCpSbTyY3yeU1Vc7l4KT5zT4s/yOxHH5O7tIuuLOCnLADRw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/data-view-buffer": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/data-view-buffer/-/data-view-buffer-1.0.2.tgz",
      "integrity": "sha512-EmKO5V3OLXh1rtK2wgXRansaK1/mtVdTUEiEI0W8RkvgT05kfxaH29PliLnpLP73yYO6142Q72QNa8Wx/A5CqQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.3",
        "es-errors": "^1.3.0",
        "is-data-view": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/data-view-byte-length": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/data-view-byte-length/-/data-view-byte-length-1.0.2.tgz",
      "integrity": "sha512-tuhGbE6CfTM9+5ANGf+oQb72Ky/0+s3xKUpHvShfiz2RxMFgFPjsXuRLBVMtvMs15awe45SRb83D6wH4ew6wlQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.3",
        "es-errors": "^1.3.0",
        "is-data-view": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/inspect-js"
      }
    },
    "node_modules/data-view-byte-offset": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/data-view-byte-offset/-/data-view-byte-offset-1.0.1.tgz",
      "integrity": "sha512-BS8PfmtDGnrgYdOonGZQdLZslWIeCGFP9tpan0hi1Co2Zr2NKADsvGYA8XxuG/4UWgJ6Cjtv+YJnB6MM69QGlQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.2",
        "es-errors": "^1.3.0",
        "is-data-view": "^1.0.1"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/debug": {
      "version": "4.4.1",
      "resolved": "https://registry.npmjs.org/debug/-/debug-4.4.1.tgz",
      "integrity": "sha512-KcKCqiftBJcZr++7ykoDIEwSa3XWowTfNPo92BYxjXiyYEVrUQh2aLyhxBCwww+heortUFxEJYcRzosstTEBYQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "ms": "^2.1.3"
      },
      "engines": {
        "node": ">=6.0"
      },
      "peerDependenciesMeta": {
        "supports-color": {
          "optional": true
        }
      }
    },
    "node_modules/deep-is": {
      "version": "0.1.4",
      "resolved": "https://registry.npmjs.org/deep-is/-/deep-is-0.1.4.tgz",
      "integrity": "sha512-oIPzksmTg4/MriiaYGO+okXDT7ztn/w3Eptv/+gSIdMdKsJo0u4CfYNFJPy+4SKMuCqGw2wxnA+URMg3t8a/bQ==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/define-data-property": {
      "version": "1.1.4",
      "resolved": "https://registry.npmjs.org/define-data-property/-/define-data-property-1.1.4.tgz",
      "integrity": "sha512-rBMvIzlpA8v6E+SJZoo++HAYqsLrkg7MSfIinMPFhmkorw7X+dOXVJQs+QT69zGkzMyfDnIMN2Wid1+NbL3T+A==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "es-define-property": "^1.0.0",
        "es-errors": "^1.3.0",
        "gopd": "^1.0.1"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/define-properties": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/define-properties/-/define-properties-1.2.1.tgz",
      "integrity": "sha512-8QmQKqEASLd5nx0U1B1okLElbUuuttJ/AnYmRXbbbGDWh6uS208EjD4Xqq/I9wK7u0v6O08XhTWnt5XtEbR6Dg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "define-data-property": "^1.0.1",
        "has-property-descriptors": "^1.0.0",
        "object-keys": "^1.1.1"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/delayed-stream": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/delayed-stream/-/delayed-stream-1.0.0.tgz",
      "integrity": "sha512-ZySD7Nf91aLB0RxL4KGrKHBXl7Eds1DAmEdcoVawXnLD7SDhpNgtuII2aAkg7a7QS41jxPSZ17p4VdGnMHk3MQ==",
      "license": "MIT",
      "engines": {
        "node": ">=0.4.0"
      }
    },
    "node_modules/depd": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/depd/-/depd-2.0.0.tgz",
      "integrity": "sha512-g7nH6P6dyDioJogAAGprGpCtVImJhpPk/roCzdb3fIh61/s/nPsfR6onyMwkCAR/OlC3yBC0lESvUoQEAssIrw==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/destroy": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/destroy/-/destroy-1.2.0.tgz",
      "integrity": "sha512-2sJGJTaXIIaR1w4iJSNoN0hnMY7Gpc/n8D4qSCJw8QqFWXf7cuAgnEHxBpweaVcPevC2l3KpjYCx3NypQQgaJg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8",
        "npm": "1.2.8000 || >= 1.4.16"
      }
    },
    "node_modules/doctrine": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/doctrine/-/doctrine-3.0.0.tgz",
      "integrity": "sha512-yS+Q5i3hBf7GBkd4KG8a7eBNNWNGLTaEwwYWUijIYM7zrlYDM0BFXHjjPWlWZ1Rg7UaddZeIDmi9jF3HmqiQ2w==",
      "dev": true,
      "license": "Apache-2.0",
      "dependencies": {
        "esutils": "^2.0.2"
      },
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/dotenv": {
      "version": "16.6.1",
      "resolved": "https://registry.npmjs.org/dotenv/-/dotenv-16.6.1.tgz",
      "integrity": "sha512-uBq4egWHTcTt33a72vpSG0z3HnPuIl6NqYcTrKEg2azoEyl2hpW0zqlxysq2pK9HlDIHyHyakeYaYnSAwd8bow==",
      "license": "BSD-2-Clause",
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://dotenvx.com"
      }
    },
    "node_modules/dunder-proto": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/dunder-proto/-/dunder-proto-1.0.1.tgz",
      "integrity": "sha512-KIN/nDJBQRcXw0MLVhZE9iQHmG68qAVIBg9CqmUYjmQIhgij9U5MFvrqkUL5FbtyyzZuOeOt0zdeRe4UY7ct+A==",
      "license": "MIT",
      "dependencies": {
        "call-bind-apply-helpers": "^1.0.1",
        "es-errors": "^1.3.0",
        "gopd": "^1.2.0"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/ee-first": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/ee-first/-/ee-first-1.1.1.tgz",
      "integrity": "sha512-WMwm9LhRUo+WUaRN+vRuETqG89IgZphVSNkdFgeb6sS/E4OrDIN7t48CAewSHXc6C8lefD8KKfr5vY61brQlow==",
      "license": "MIT"
    },
    "node_modules/electron-to-chromium": {
      "version": "1.5.187",
      "resolved": "https://registry.npmjs.org/electron-to-chromium/-/electron-to-chromium-1.5.187.tgz",
      "integrity": "sha512-cl5Jc9I0KGUoOoSbxvTywTa40uspGJt/BDBoDLoxJRSBpWh4FFXBsjNRHfQrONsV/OoEjDfHUmZQa2d6Ze4YgA==",
      "dev": true,
      "license": "ISC"
    },
    "node_modules/encodeurl": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/encodeurl/-/encodeurl-2.0.0.tgz",
      "integrity": "sha512-Q0n9HRi4m6JuGIV1eFlmvJB7ZEVxu93IrMyiMsGC0lrMJMWzRgx6WGquyfQgZVb31vhGgXnfmPNNXmxnOkRBrg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/es-abstract": {
      "version": "1.24.0",
      "resolved": "https://registry.npmjs.org/es-abstract/-/es-abstract-1.24.0.tgz",
      "integrity": "sha512-WSzPgsdLtTcQwm4CROfS5ju2Wa1QQcVeT37jFjYzdFz1r9ahadC8B8/a4qxJxM+09F18iumCdRmlr96ZYkQvEg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "array-buffer-byte-length": "^1.0.2",
        "arraybuffer.prototype.slice": "^1.0.4",
        "available-typed-arrays": "^1.0.7",
        "call-bind": "^1.0.8",
        "call-bound": "^1.0.4",
        "data-view-buffer": "^1.0.2",
        "data-view-byte-length": "^1.0.2",
        "data-view-byte-offset": "^1.0.1",
        "es-define-property": "^1.0.1",
        "es-errors": "^1.3.0",
        "es-object-atoms": "^1.1.1",
        "es-set-tostringtag": "^2.1.0",
        "es-to-primitive": "^1.3.0",
        "function.prototype.name": "^1.1.8",
        "get-intrinsic": "^1.3.0",
        "get-proto": "^1.0.1",
        "get-symbol-description": "^1.1.0",
        "globalthis": "^1.0.4",
        "gopd": "^1.2.0",
        "has-property-descriptors": "^1.0.2",
        "has-proto": "^1.2.0",
        "has-symbols": "^1.1.0",
        "hasown": "^2.0.2",
        "internal-slot": "^1.1.0",
        "is-array-buffer": "^3.0.5",
        "is-callable": "^1.2.7",
        "is-data-view": "^1.0.2",
        "is-negative-zero": "^2.0.3",
        "is-regex": "^1.2.1",
        "is-set": "^2.0.3",
        "is-shared-array-buffer": "^1.0.4",
        "is-string": "^1.1.1",
        "is-typed-array": "^1.1.15",
        "is-weakref": "^1.1.1",
        "math-intrinsics": "^1.1.0",
        "object-inspect": "^1.13.4",
        "object-keys": "^1.1.1",
        "object.assign": "^4.1.7",
        "own-keys": "^1.0.1",
        "regexp.prototype.flags": "^1.5.4",
        "safe-array-concat": "^1.1.3",
        "safe-push-apply": "^1.0.0",
        "safe-regex-test": "^1.1.0",
        "set-proto": "^1.0.0",
        "stop-iteration-iterator": "^1.1.0",
        "string.prototype.trim": "^1.2.10",
        "string.prototype.trimend": "^1.0.9",
        "string.prototype.trimstart": "^1.0.8",
        "typed-array-buffer": "^1.0.3",
        "typed-array-byte-length": "^1.0.3",
        "typed-array-byte-offset": "^1.0.4",
        "typed-array-length": "^1.0.7",
        "unbox-primitive": "^1.1.0",
        "which-typed-array": "^1.1.19"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/es-define-property": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/es-define-property/-/es-define-property-1.0.1.tgz",
      "integrity": "sha512-e3nRfgfUZ4rNGL232gUgX06QNyyez04KdjFrF+LTRoOXmrOgFKDg4BCdsjW8EnT69eqdYGmRpJwiPVYNrCaW3g==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/es-errors": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/es-errors/-/es-errors-1.3.0.tgz",
      "integrity": "sha512-Zf5H2Kxt2xjTvbJvP2ZWLEICxA6j+hAmMzIlypy4xcBg1vKVnx89Wy0GbS+kf5cwCVFFzdCFh2XSCFNULS6csw==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/es-iterator-helpers": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/es-iterator-helpers/-/es-iterator-helpers-1.2.1.tgz",
      "integrity": "sha512-uDn+FE1yrDzyC0pCo961B2IHbdM8y/ACZsKD4dG6WqrjV53BADjwa7D+1aom2rsNVfLyDgU/eigvlJGJ08OQ4w==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.8",
        "call-bound": "^1.0.3",
        "define-properties": "^1.2.1",
        "es-abstract": "^1.23.6",
        "es-errors": "^1.3.0",
        "es-set-tostringtag": "^2.0.3",
        "function-bind": "^1.1.2",
        "get-intrinsic": "^1.2.6",
        "globalthis": "^1.0.4",
        "gopd": "^1.2.0",
        "has-property-descriptors": "^1.0.2",
        "has-proto": "^1.2.0",
        "has-symbols": "^1.1.0",
        "internal-slot": "^1.1.0",
        "iterator.prototype": "^1.1.4",
        "safe-array-concat": "^1.1.3"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/es-object-atoms": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/es-object-atoms/-/es-object-atoms-1.1.1.tgz",
      "integrity": "sha512-FGgH2h8zKNim9ljj7dankFPcICIK9Cp5bm+c2gQSYePhpaG5+esrLODihIorn+Pe6FGJzWhXQotPv73jTaldXA==",
      "license": "MIT",
      "dependencies": {
        "es-errors": "^1.3.0"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/es-set-tostringtag": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/es-set-tostringtag/-/es-set-tostringtag-2.1.0.tgz",
      "integrity": "sha512-j6vWzfrGVfyXxge+O0x5sh6cvxAog0a/4Rdd2K36zCMV5eJ+/+tOAngRO8cODMNWbVRdVlmGZQL2YS3yR8bIUA==",
      "license": "MIT",
      "dependencies": {
        "es-errors": "^1.3.0",
        "get-intrinsic": "^1.2.6",
        "has-tostringtag": "^1.0.2",
        "hasown": "^2.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/es-shim-unscopables": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/es-shim-unscopables/-/es-shim-unscopables-1.1.0.tgz",
      "integrity": "sha512-d9T8ucsEhh8Bi1woXCf+TIKDIROLG5WCkxg8geBCbvk22kzwC5G2OnXVMO6FUsvQlgUUXQ2itephWDLqDzbeCw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "hasown": "^2.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/es-to-primitive": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/es-to-primitive/-/es-to-primitive-1.3.0.tgz",
      "integrity": "sha512-w+5mJ3GuFL+NjVtJlvydShqE1eN3h3PbI7/5LAsYJP/2qtuMXjfL2LpHSRqo4b4eSF5K/DH1JXKUAHSB2UW50g==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "is-callable": "^1.2.7",
        "is-date-object": "^1.0.5",
        "is-symbol": "^1.0.4"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/esbuild": {
      "version": "0.18.20",
      "resolved": "https://registry.npmjs.org/esbuild/-/esbuild-0.18.20.tgz",
      "integrity": "sha512-ceqxoedUrcayh7Y7ZX6NdbbDzGROiyVBgC4PriJThBKSVPWnnFHZAkfI1lJT8QFkOwH4qOS2SJkS4wvpGl8BpA==",
      "dev": true,
      "hasInstallScript": true,
      "license": "MIT",
      "bin": {
        "esbuild": "bin/esbuild"
      },
      "engines": {
        "node": ">=12"
      },
      "optionalDependencies": {
        "@esbuild/android-arm": "0.18.20",
        "@esbuild/android-arm64": "0.18.20",
        "@esbuild/android-x64": "0.18.20",
        "@esbuild/darwin-arm64": "0.18.20",
        "@esbuild/darwin-x64": "0.18.20",
        "@esbuild/freebsd-arm64": "0.18.20",
        "@esbuild/freebsd-x64": "0.18.20",
        "@esbuild/linux-arm": "0.18.20",
        "@esbuild/linux-arm64": "0.18.20",
        "@esbuild/linux-ia32": "0.18.20",
        "@esbuild/linux-loong64": "0.18.20",
        "@esbuild/linux-mips64el": "0.18.20",
        "@esbuild/linux-ppc64": "0.18.20",
        "@esbuild/linux-riscv64": "0.18.20",
        "@esbuild/linux-s390x": "0.18.20",
        "@esbuild/linux-x64": "0.18.20",
        "@esbuild/netbsd-x64": "0.18.20",
        "@esbuild/openbsd-x64": "0.18.20",
        "@esbuild/sunos-x64": "0.18.20",
        "@esbuild/win32-arm64": "0.18.20",
        "@esbuild/win32-ia32": "0.18.20",
        "@esbuild/win32-x64": "0.18.20"
      }
    },
    "node_modules/escalade": {
      "version": "3.2.0",
      "resolved": "https://registry.npmjs.org/escalade/-/escalade-3.2.0.tgz",
      "integrity": "sha512-WUj2qlxaQtO4g6Pq5c29GTcWGDyd8itL8zTlipgECz3JesAiiOKotd8JU6otB3PACgG6xkJUyVhboMS+bje/jA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/escape-html": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/escape-html/-/escape-html-1.0.3.tgz",
      "integrity": "sha512-NiSupZ4OeuGwr68lGIeym/ksIZMJodUGOSCZ/FSnTxcrekbvqrgdUxlJOMpijaKZVjAJrWrGs/6Jy8OMuyj9ow==",
      "license": "MIT"
    },
    "node_modules/escape-string-regexp": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/escape-string-regexp/-/escape-string-regexp-4.0.0.tgz",
      "integrity": "sha512-TtpcNJ3XAzx3Gq8sWRzJaVajRs0uVxA2YAkdb1jm2YkPz4G6egUFAyA3n5vtEIZefPk5Wa4UXbKuS5fKkJWdgA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/eslint": {
      "version": "8.57.1",
      "resolved": "https://registry.npmjs.org/eslint/-/eslint-8.57.1.tgz",
      "integrity": "sha512-ypowyDxpVSYpkXr9WPv2PAZCtNip1Mv5KTW0SCurXv/9iOpcrH9PaqUElksqEB6pChqHGDRCFTyrZlGhnLNGiA==",
      "deprecated": "This version is no longer supported. Please see https://eslint.org/version-support for other options.",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@eslint-community/eslint-utils": "^4.2.0",
        "@eslint-community/regexpp": "^4.6.1",
        "@eslint/eslintrc": "^2.1.4",
        "@eslint/js": "8.57.1",
        "@humanwhocodes/config-array": "^0.13.0",
        "@humanwhocodes/module-importer": "^1.0.1",
        "@nodelib/fs.walk": "^1.2.8",
        "@ungap/structured-clone": "^1.2.0",
        "ajv": "^6.12.4",
        "chalk": "^4.0.0",
        "cross-spawn": "^7.0.2",
        "debug": "^4.3.2",
        "doctrine": "^3.0.0",
        "escape-string-regexp": "^4.0.0",
        "eslint-scope": "^7.2.2",
        "eslint-visitor-keys": "^3.4.3",
        "espree": "^9.6.1",
        "esquery": "^1.4.2",
        "esutils": "^2.0.2",
        "fast-deep-equal": "^3.1.3",
        "file-entry-cache": "^6.0.1",
        "find-up": "^5.0.0",
        "glob-parent": "^6.0.2",
        "globals": "^13.19.0",
        "graphemer": "^1.4.0",
        "ignore": "^5.2.0",
        "imurmurhash": "^0.1.4",
        "is-glob": "^4.0.0",
        "is-path-inside": "^3.0.3",
        "js-yaml": "^4.1.0",
        "json-stable-stringify-without-jsonify": "^1.0.1",
        "levn": "^0.4.1",
        "lodash.merge": "^4.6.2",
        "minimatch": "^3.1.2",
        "natural-compare": "^1.4.0",
        "optionator": "^0.9.3",
        "strip-ansi": "^6.0.1",
        "text-table": "^0.2.0"
      },
      "bin": {
        "eslint": "bin/eslint.js"
      },
      "engines": {
        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
      },
      "funding": {
        "url": "https://opencollective.com/eslint"
      }
    },
    "node_modules/eslint-plugin-react": {
      "version": "7.37.5",
      "resolved": "https://registry.npmjs.org/eslint-plugin-react/-/eslint-plugin-react-7.37.5.tgz",
      "integrity": "sha512-Qteup0SqU15kdocexFNAJMvCJEfa2xUKNV4CC1xsVMrIIqEy3SQ/rqyxCWNzfrd3/ldy6HMlD2e0JDVpDg2qIA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "array-includes": "^3.1.8",
        "array.prototype.findlast": "^1.2.5",
        "array.prototype.flatmap": "^1.3.3",
        "array.prototype.tosorted": "^1.1.4",
        "doctrine": "^2.1.0",
        "es-iterator-helpers": "^1.2.1",
        "estraverse": "^5.3.0",
        "hasown": "^2.0.2",
        "jsx-ast-utils": "^2.4.1 || ^3.0.0",
        "minimatch": "^3.1.2",
        "object.entries": "^1.1.9",
        "object.fromentries": "^2.0.8",
        "object.values": "^1.2.1",
        "prop-types": "^15.8.1",
        "resolve": "^2.0.0-next.5",
        "semver": "^6.3.1",
        "string.prototype.matchall": "^4.0.12",
        "string.prototype.repeat": "^1.0.0"
      },
      "engines": {
        "node": ">=4"
      },
      "peerDependencies": {
        "eslint": "^3 || ^4 || ^5 || ^6 || ^7 || ^8 || ^9.7"
      }
    },
    "node_modules/eslint-plugin-react-hooks": {
      "version": "4.6.2",
      "resolved": "https://registry.npmjs.org/eslint-plugin-react-hooks/-/eslint-plugin-react-hooks-4.6.2.tgz",
      "integrity": "sha512-QzliNJq4GinDBcD8gPB5v0wh6g8q3SUi6EFF0x8N/BL9PoVs0atuGc47ozMRyOWAKdwaZ5OnbOEa3WR+dSGKuQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=10"
      },
      "peerDependencies": {
        "eslint": "^3.0.0 || ^4.0.0 || ^5.0.0 || ^6.0.0 || ^7.0.0 || ^8.0.0-0"
      }
    },
    "node_modules/eslint-plugin-react-refresh": {
      "version": "0.3.5",
      "resolved": "https://registry.npmjs.org/eslint-plugin-react-refresh/-/eslint-plugin-react-refresh-0.3.5.tgz",
      "integrity": "sha512-61qNIsc7fo9Pp/mju0J83kzvLm0Bsayu7OQSLEoJxLDCBjIIyb87bkzufoOvdDxLkSlMfkF7UxomC4+eztUBSA==",
      "dev": true,
      "license": "MIT",
      "peerDependencies": {
        "eslint": ">=7"
      }
    },
    "node_modules/eslint-plugin-react/node_modules/doctrine": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/doctrine/-/doctrine-2.1.0.tgz",
      "integrity": "sha512-35mSku4ZXK0vfCuHEDAwt55dg2jNajHZ1odvF+8SSr82EsZY4QmXfuWso8oEd8zRhVObSN18aM0CjSdoBX7zIw==",
      "dev": true,
      "license": "Apache-2.0",
      "dependencies": {
        "esutils": "^2.0.2"
      },
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/eslint-scope": {
      "version": "7.2.2",
      "resolved": "https://registry.npmjs.org/eslint-scope/-/eslint-scope-7.2.2.tgz",
      "integrity": "sha512-dOt21O7lTMhDM+X9mB4GX+DZrZtCUJPL/wlcTqxyrx5IvO0IYtILdtrQGQp+8n5S0gwSVmOf9NQrjMOgfQZlIg==",
      "dev": true,
      "license": "BSD-2-Clause",
      "dependencies": {
        "esrecurse": "^4.3.0",
        "estraverse": "^5.2.0"
      },
      "engines": {
        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
      },
      "funding": {
        "url": "https://opencollective.com/eslint"
      }
    },
    "node_modules/eslint-visitor-keys": {
      "version": "3.4.3",
      "resolved": "https://registry.npmjs.org/eslint-visitor-keys/-/eslint-visitor-keys-3.4.3.tgz",
      "integrity": "sha512-wpc+LXeiyiisxPlEkUzU6svyS1frIO3Mgxj1fdy7Pm8Ygzguax2N3Fa/D/ag1WqbOprdI+uY6wMUl8/a2G+iag==",
      "dev": true,
      "license": "Apache-2.0",
      "engines": {
        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
      },
      "funding": {
        "url": "https://opencollective.com/eslint"
      }
    },
    "node_modules/espree": {
      "version": "9.6.1",
      "resolved": "https://registry.npmjs.org/espree/-/espree-9.6.1.tgz",
      "integrity": "sha512-oruZaFkjorTpF32kDSI5/75ViwGeZginGGy2NoOSg3Q9bnwlnmDm4HLnkl0RE3n+njDXR037aY1+x58Z/zFdwQ==",
      "dev": true,
      "license": "BSD-2-Clause",
      "dependencies": {
        "acorn": "^8.9.0",
        "acorn-jsx": "^5.3.2",
        "eslint-visitor-keys": "^3.4.1"
      },
      "engines": {
        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
      },
      "funding": {
        "url": "https://opencollective.com/eslint"
      }
    },
    "node_modules/esquery": {
      "version": "1.6.0",
      "resolved": "https://registry.npmjs.org/esquery/-/esquery-1.6.0.tgz",
      "integrity": "sha512-ca9pw9fomFcKPvFLXhBKUK90ZvGibiGOvRJNbjljY7s7uq/5YO4BOzcYtJqExdx99rF6aAcnRxHmcUHcz6sQsg==",
      "dev": true,
      "license": "BSD-3-Clause",
      "dependencies": {
        "estraverse": "^5.1.0"
      },
      "engines": {
        "node": ">=0.10"
      }
    },
    "node_modules/esrecurse": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/esrecurse/-/esrecurse-4.3.0.tgz",
      "integrity": "sha512-KmfKL3b6G+RXvP8N1vr3Tq1kL/oCFgn2NYXEtqP8/L3pKapUA4G8cFVaoF3SU323CD4XypR/ffioHmkti6/Tag==",
      "dev": true,
      "license": "BSD-2-Clause",
      "dependencies": {
        "estraverse": "^5.2.0"
      },
      "engines": {
        "node": ">=4.0"
      }
    },
    "node_modules/estraverse": {
      "version": "5.3.0",
      "resolved": "https://registry.npmjs.org/estraverse/-/estraverse-5.3.0.tgz",
      "integrity": "sha512-MMdARuVEQziNTeJD8DgMqmhwR11BRQ/cBP+pLtYdSTnf3MIO8fFeiINEbX36ZdNlfU/7A9f3gUw49B3oQsvwBA==",
      "dev": true,
      "license": "BSD-2-Clause",
      "engines": {
        "node": ">=4.0"
      }
    },
    "node_modules/esutils": {
      "version": "2.0.3",
      "resolved": "https://registry.npmjs.org/esutils/-/esutils-2.0.3.tgz",
      "integrity": "sha512-kVscqXk4OCp68SZ0dkgEKVi6/8ij300KBWTJq32P/dYeWTSwK41WyTxalN1eRmA5Z9UU/LX9D7FWSmV9SAYx6g==",
      "dev": true,
      "license": "BSD-2-Clause",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/etag": {
      "version": "1.8.1",
      "resolved": "https://registry.npmjs.org/etag/-/etag-1.8.1.tgz",
      "integrity": "sha512-aIL5Fx7mawVa300al2BnEE4iNvo1qETxLrPI/o05L7z6go7fCw1J6EQmbK4FmJ2AS7kgVF/KEZWufBfdClMcPg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/express": {
      "version": "4.21.2",
      "resolved": "https://registry.npmjs.org/express/-/express-4.21.2.tgz",
      "integrity": "sha512-28HqgMZAmih1Czt9ny7qr6ek2qddF4FclbMzwhCREB6OFfH+rXAnuNCwo1/wFvrtbgsQDb4kSbX9de9lFbrXnA==",
      "license": "MIT",
      "dependencies": {
        "accepts": "~1.3.8",
        "array-flatten": "1.1.1",
        "body-parser": "1.20.3",
        "content-disposition": "0.5.4",
        "content-type": "~1.0.4",
        "cookie": "0.7.1",
        "cookie-signature": "1.0.6",
        "debug": "2.6.9",
        "depd": "2.0.0",
        "encodeurl": "~2.0.0",
        "escape-html": "~1.0.3",
        "etag": "~1.8.1",
        "finalhandler": "1.3.1",
        "fresh": "0.5.2",
        "http-errors": "2.0.0",
        "merge-descriptors": "1.0.3",
        "methods": "~1.1.2",
        "on-finished": "2.4.1",
        "parseurl": "~1.3.3",
        "path-to-regexp": "0.1.12",
        "proxy-addr": "~2.0.7",
        "qs": "6.13.0",
        "range-parser": "~1.2.1",
        "safe-buffer": "5.2.1",
        "send": "0.19.0",
        "serve-static": "1.16.2",
        "setprototypeof": "1.2.0",
        "statuses": "2.0.1",
        "type-is": "~1.6.18",
        "utils-merge": "1.0.1",
        "vary": "~1.1.2"
      },
      "engines": {
        "node": ">= 0.10.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/express"
      }
    },
    "node_modules/express-session": {
      "version": "1.18.2",
      "resolved": "https://registry.npmjs.org/express-session/-/express-session-1.18.2.tgz",
      "integrity": "sha512-SZjssGQC7TzTs9rpPDuUrR23GNZ9+2+IkA/+IJWmvQilTr5OSliEHGF+D9scbIpdC6yGtTI0/VhaHoVes2AN/A==",
      "license": "MIT",
      "dependencies": {
        "cookie": "0.7.2",
        "cookie-signature": "1.0.7",
        "debug": "2.6.9",
        "depd": "~2.0.0",
        "on-headers": "~1.1.0",
        "parseurl": "~1.3.3",
        "safe-buffer": "5.2.1",
        "uid-safe": "~2.1.5"
      },
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/express-session/node_modules/cookie": {
      "version": "0.7.2",
      "resolved": "https://registry.npmjs.org/cookie/-/cookie-0.7.2.tgz",
      "integrity": "sha512-yki5XnKuf750l50uGTllt6kKILY4nQ1eNIQatoXEByZ5dWgnKqbnqmTrBE5B4N7lrMJKQ2ytWMiTO2o0v6Ew/w==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/express-session/node_modules/cookie-signature": {
      "version": "1.0.7",
      "resolved": "https://registry.npmjs.org/cookie-signature/-/cookie-signature-1.0.7.tgz",
      "integrity": "sha512-NXdYc3dLr47pBkpUCHtKSwIOQXLVn8dZEuywboCOJY/osA0wFSLlSawr3KN8qXJEyX66FcONTH8EIlVuK0yyFA==",
      "license": "MIT"
    },
    "node_modules/express-session/node_modules/debug": {
      "version": "2.6.9",
      "resolved": "https://registry.npmjs.org/debug/-/debug-2.6.9.tgz",
      "integrity": "sha512-bC7ElrdJaJnPbAP+1EotYvqZsb3ecl5wi6Bfi6BJTUcNowp6cvspg0jXznRTKDjm/E7AdgFBVeAPVMNcKGsHMA==",
      "license": "MIT",
      "dependencies": {
        "ms": "2.0.0"
      }
    },
    "node_modules/express-session/node_modules/ms": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.0.0.tgz",
      "integrity": "sha512-Tpp60P6IUJDTuOq/5Z8cdskzJujfwqfOTkrwIwj7IRISpnkJnT6SyJ4PCPnGMoFjC9ddhal5KVIYtAt97ix05A==",
      "license": "MIT"
    },
    "node_modules/express/node_modules/debug": {
      "version": "2.6.9",
      "resolved": "https://registry.npmjs.org/debug/-/debug-2.6.9.tgz",
      "integrity": "sha512-bC7ElrdJaJnPbAP+1EotYvqZsb3ecl5wi6Bfi6BJTUcNowp6cvspg0jXznRTKDjm/E7AdgFBVeAPVMNcKGsHMA==",
      "license": "MIT",
      "dependencies": {
        "ms": "2.0.0"
      }
    },
    "node_modules/express/node_modules/ms": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.0.0.tgz",
      "integrity": "sha512-Tpp60P6IUJDTuOq/5Z8cdskzJujfwqfOTkrwIwj7IRISpnkJnT6SyJ4PCPnGMoFjC9ddhal5KVIYtAt97ix05A==",
      "license": "MIT"
    },
    "node_modules/fast-deep-equal": {
      "version": "3.1.3",
      "resolved": "https://registry.npmjs.org/fast-deep-equal/-/fast-deep-equal-3.1.3.tgz",
      "integrity": "sha512-f3qQ9oQy9j2AhBe/H9VC91wLmKBCCU/gDOnKNAYG5hswO7BLKj09Hc5HYNz9cGI++xlpDCIgDaitVs03ATR84Q==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/fast-json-stable-stringify": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/fast-json-stable-stringify/-/fast-json-stable-stringify-2.1.0.tgz",
      "integrity": "sha512-lhd/wF+Lk98HZoTCtlVraHtfh5XYijIjalXck7saUtuanSDyLMxnHhSXEDJqHxD7msR8D0uCmqlkwjCV8xvwHw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/fast-levenshtein": {
      "version": "2.0.6",
      "resolved": "https://registry.npmjs.org/fast-levenshtein/-/fast-levenshtein-2.0.6.tgz",
      "integrity": "sha512-DCXu6Ifhqcks7TZKY3Hxp3y6qphY5SJZmrWMDrKcERSOXWQdMhU9Ig/PYrzyw/ul9jOIyh0N4M0tbC5hodg8dw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/fastq": {
      "version": "1.19.1",
      "resolved": "https://registry.npmjs.org/fastq/-/fastq-1.19.1.tgz",
      "integrity": "sha512-GwLTyxkCXjXbxqIhTsMI2Nui8huMPtnxg7krajPJAjnEG/iiOS7i+zCtWGZR9G0NBKbXKh6X9m9UIsYX/N6vvQ==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "reusify": "^1.0.4"
      }
    },
    "node_modules/file-entry-cache": {
      "version": "6.0.1",
      "resolved": "https://registry.npmjs.org/file-entry-cache/-/file-entry-cache-6.0.1.tgz",
      "integrity": "sha512-7Gps/XWymbLk2QLYK4NzpMOrYjMhdIxXuIvy2QBsLE6ljuodKvdkWs/cpyJJ3CVIVpH0Oi1Hvg1ovbMzLdFBBg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "flat-cache": "^3.0.4"
      },
      "engines": {
        "node": "^10.12.0 || >=12.0.0"
      }
    },
    "node_modules/finalhandler": {
      "version": "1.3.1",
      "resolved": "https://registry.npmjs.org/finalhandler/-/finalhandler-1.3.1.tgz",
      "integrity": "sha512-6BN9trH7bp3qvnrRyzsBz+g3lZxTNZTbVO2EV1CS0WIcDbawYVdYvGflME/9QP0h0pYlCDBCTjYa9nZzMDpyxQ==",
      "license": "MIT",
      "dependencies": {
        "debug": "2.6.9",
        "encodeurl": "~2.0.0",
        "escape-html": "~1.0.3",
        "on-finished": "2.4.1",
        "parseurl": "~1.3.3",
        "statuses": "2.0.1",
        "unpipe": "~1.0.0"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/finalhandler/node_modules/debug": {
      "version": "2.6.9",
      "resolved": "https://registry.npmjs.org/debug/-/debug-2.6.9.tgz",
      "integrity": "sha512-bC7ElrdJaJnPbAP+1EotYvqZsb3ecl5wi6Bfi6BJTUcNowp6cvspg0jXznRTKDjm/E7AdgFBVeAPVMNcKGsHMA==",
      "license": "MIT",
      "dependencies": {
        "ms": "2.0.0"
      }
    },
    "node_modules/finalhandler/node_modules/ms": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.0.0.tgz",
      "integrity": "sha512-Tpp60P6IUJDTuOq/5Z8cdskzJujfwqfOTkrwIwj7IRISpnkJnT6SyJ4PCPnGMoFjC9ddhal5KVIYtAt97ix05A==",
      "license": "MIT"
    },
    "node_modules/find-up": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/find-up/-/find-up-5.0.0.tgz",
      "integrity": "sha512-78/PXT1wlLLDgTzDs7sjq9hzz0vXD+zn+7wypEe4fXQxCmdmqfGsEPQxmiCSQI3ajFV91bVSsvNtrJRiW6nGng==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "locate-path": "^6.0.0",
        "path-exists": "^4.0.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/flat-cache": {
      "version": "3.2.0",
      "resolved": "https://registry.npmjs.org/flat-cache/-/flat-cache-3.2.0.tgz",
      "integrity": "sha512-CYcENa+FtcUKLmhhqyctpclsq7QF38pKjZHsGNiSQF5r4FtoKDWabFDl3hzaEQMvT1LHEysw5twgLvpYYb4vbw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "flatted": "^3.2.9",
        "keyv": "^4.5.3",
        "rimraf": "^3.0.2"
      },
      "engines": {
        "node": "^10.12.0 || >=12.0.0"
      }
    },
    "node_modules/flatted": {
      "version": "3.3.3",
      "resolved": "https://registry.npmjs.org/flatted/-/flatted-3.3.3.tgz",
      "integrity": "sha512-GX+ysw4PBCz0PzosHDepZGANEuFCMLrnRTiEy9McGjmkCQYwRq4A/X786G/fjM/+OjsWSU1ZrY5qyARZmO/uwg==",
      "dev": true,
      "license": "ISC"
    },
    "node_modules/follow-redirects": {
      "version": "1.15.9",
      "resolved": "https://registry.npmjs.org/follow-redirects/-/follow-redirects-1.15.9.tgz",
      "integrity": "sha512-gew4GsXizNgdoRyqmyfMHyAmXsZDk6mHkSxZFCzW9gwlbtOW44CDtYavM+y+72qD/Vq2l550kMF52DT8fOLJqQ==",
      "funding": [
        {
          "type": "individual",
          "url": "https://github.com/sponsors/RubenVerborgh"
        }
      ],
      "license": "MIT",
      "engines": {
        "node": ">=4.0"
      },
      "peerDependenciesMeta": {
        "debug": {
          "optional": true
        }
      }
    },
    "node_modules/for-each": {
      "version": "0.3.5",
      "resolved": "https://registry.npmjs.org/for-each/-/for-each-0.3.5.tgz",
      "integrity": "sha512-dKx12eRCVIzqCxFGplyFKJMPvLEWgmNtUrpTiJIR5u97zEhRG8ySrtboPHZXx7daLxQVrl643cTzbab2tkQjxg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "is-callable": "^1.2.7"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/form-data": {
      "version": "4.0.4",
      "resolved": "https://registry.npmjs.org/form-data/-/form-data-4.0.4.tgz",
      "integrity": "sha512-KrGhL9Q4zjj0kiUt5OO4Mr/A/jlI2jDYs5eHBpYHPcBEVSiipAvn2Ko2HnPe20rmcuuvMHNdZFp+4IlGTMF0Ow==",
      "license": "MIT",
      "dependencies": {
        "asynckit": "^0.4.0",
        "combined-stream": "^1.0.8",
        "es-set-tostringtag": "^2.1.0",
        "hasown": "^2.0.2",
        "mime-types": "^2.1.12"
      },
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/forwarded": {
      "version": "0.2.0",
      "resolved": "https://registry.npmjs.org/forwarded/-/forwarded-0.2.0.tgz",
      "integrity": "sha512-buRG0fpBtRHSTCOASe6hD258tEubFoRLb4ZNA6NxMVHNw2gOcwHo9wyablzMzOA5z9xA9L1KNjk/Nt6MT9aYow==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/fresh": {
      "version": "0.5.2",
      "resolved": "https://registry.npmjs.org/fresh/-/fresh-0.5.2.tgz",
      "integrity": "sha512-zJ2mQYM18rEFOudeV4GShTGIQ7RbzA7ozbU9I/XBpm7kqgMywgmylMwXHxZJmkVoYkna9d2pVXVXPdYTP9ej8Q==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/fs.realpath": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/fs.realpath/-/fs.realpath-1.0.0.tgz",
      "integrity": "sha512-OO0pH2lK6a0hZnAdau5ItzHPI6pUlvI7jMVnxUQRtw4owF2wk8lOSabtGDCTP4Ggrg2MbGnWO9X8K1t4+fGMDw==",
      "dev": true,
      "license": "ISC"
    },
    "node_modules/function-bind": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/function-bind/-/function-bind-1.1.2.tgz",
      "integrity": "sha512-7XHNxH7qX9xG5mIwxkhumTox/MIRNcOgDrxWsMt2pAr23WHp6MrRlN7FBSFpCpr+oVO0F744iUgR82nJMfG2SA==",
      "license": "MIT",
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/function.prototype.name": {
      "version": "1.1.8",
      "resolved": "https://registry.npmjs.org/function.prototype.name/-/function.prototype.name-1.1.8.tgz",
      "integrity": "sha512-e5iwyodOHhbMr/yNrc7fDYG4qlbIvI5gajyzPnb5TCwyhjApznQh1BMFou9b30SevY43gCJKXycoCBjMbsuW0Q==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.8",
        "call-bound": "^1.0.3",
        "define-properties": "^1.2.1",
        "functions-have-names": "^1.2.3",
        "hasown": "^2.0.2",
        "is-callable": "^1.2.7"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/functions-have-names": {
      "version": "1.2.3",
      "resolved": "https://registry.npmjs.org/functions-have-names/-/functions-have-names-1.2.3.tgz",
      "integrity": "sha512-xckBUXyTIqT97tq2x2AMb+g163b5JFysYk0x4qxNFwbfQkmNZoiRHb6sPzI9/QV33WeuvVYBUIiD4NzNIyqaRQ==",
      "dev": true,
      "license": "MIT",
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/gensync": {
      "version": "1.0.0-beta.2",
      "resolved": "https://registry.npmjs.org/gensync/-/gensync-1.0.0-beta.2.tgz",
      "integrity": "sha512-3hN7NaskYvMDLQY55gnW3NQ+mesEAepTqlg+VEbj7zzqEMBVNhzcGYYeqFo/TlYz6eQiFcp1HcsCZO+nGgS8zg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/get-intrinsic": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/get-intrinsic/-/get-intrinsic-1.3.0.tgz",
      "integrity": "sha512-9fSjSaos/fRIVIp+xSJlE6lfwhES7LNtKaCBIamHsjr2na1BiABJPo0mOjjz8GJDURarmCPGqaiVg5mfjb98CQ==",
      "license": "MIT",
      "dependencies": {
        "call-bind-apply-helpers": "^1.0.2",
        "es-define-property": "^1.0.1",
        "es-errors": "^1.3.0",
        "es-object-atoms": "^1.1.1",
        "function-bind": "^1.1.2",
        "get-proto": "^1.0.1",
        "gopd": "^1.2.0",
        "has-symbols": "^1.1.0",
        "hasown": "^2.0.2",
        "math-intrinsics": "^1.1.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/get-proto": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/get-proto/-/get-proto-1.0.1.tgz",
      "integrity": "sha512-sTSfBjoXBp89JvIKIefqw7U2CCebsc74kiY6awiGogKtoSGbgjYE/G/+l9sF3MWFPNc9IcoOC4ODfKHfxFmp0g==",
      "license": "MIT",
      "dependencies": {
        "dunder-proto": "^1.0.1",
        "es-object-atoms": "^1.0.0"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/get-symbol-description": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/get-symbol-description/-/get-symbol-description-1.1.0.tgz",
      "integrity": "sha512-w9UMqWwJxHNOvoNzSJ2oPF5wvYcvP7jUvYzhp67yEhTi17ZDBBC1z9pTdGuzjD+EFIqLSYRweZjqfiPzQ06Ebg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.3",
        "es-errors": "^1.3.0",
        "get-intrinsic": "^1.2.6"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/glob": {
      "version": "7.2.3",
      "resolved": "https://registry.npmjs.org/glob/-/glob-7.2.3.tgz",
      "integrity": "sha512-nFR0zLpU2YCaRxwoCJvL6UvCH2JFyFVIvwTLsIf21AuHlMskA1hhTdk+LlYJtOlYt9v6dvszD2BGRqBL+iQK9Q==",
      "deprecated": "Glob versions prior to v9 are no longer supported",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "fs.realpath": "^1.0.0",
        "inflight": "^1.0.4",
        "inherits": "2",
        "minimatch": "^3.1.1",
        "once": "^1.3.0",
        "path-is-absolute": "^1.0.0"
      },
      "engines": {
        "node": "*"
      },
      "funding": {
        "url": "https://github.com/sponsors/isaacs"
      }
    },
    "node_modules/glob-parent": {
      "version": "6.0.2",
      "resolved": "https://registry.npmjs.org/glob-parent/-/glob-parent-6.0.2.tgz",
      "integrity": "sha512-XxwI8EOhVQgWp6iDL+3b0r86f4d6AX6zSU55HfB4ydCEuXLXc5FcYeOu+nnGftS4TEju/11rt4KJPTMgbfmv4A==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "is-glob": "^4.0.3"
      },
      "engines": {
        "node": ">=10.13.0"
      }
    },
    "node_modules/globals": {
      "version": "13.24.0",
      "resolved": "https://registry.npmjs.org/globals/-/globals-13.24.0.tgz",
      "integrity": "sha512-AhO5QUcj8llrbG09iWhPU2B204J1xnPeL8kQmVorSsy+Sjj1sk8gIyh6cUocGmH4L0UuhAJy+hJMRA4mgA4mFQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "type-fest": "^0.20.2"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/globalthis": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/globalthis/-/globalthis-1.0.4.tgz",
      "integrity": "sha512-DpLKbNU4WylpxJykQujfCcwYWiV/Jhm50Goo0wrVILAv5jOr9d+H+UR3PhSCD2rCCEIg0uc+G+muBTwD54JhDQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "define-properties": "^1.2.1",
        "gopd": "^1.0.1"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/gopd": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/gopd/-/gopd-1.2.0.tgz",
      "integrity": "sha512-ZUKRh6/kUFoAiTAtTYPZJ3hw9wNxx+BIBOijnlG9PnrJsCcSjs1wyyD6vJpaYtgnzDrKYRSqf3OO6Rfa93xsRg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/graphemer": {
      "version": "1.4.0",
      "resolved": "https://registry.npmjs.org/graphemer/-/graphemer-1.4.0.tgz",
      "integrity": "sha512-EtKwoO6kxCL9WO5xipiHTZlSzBm7WLT627TqC/uVRd0HKmq8NXyebnNYxDoBi7wt8eTWrUrKXCOVaFq9x1kgag==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/has-bigints": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/has-bigints/-/has-bigints-1.1.0.tgz",
      "integrity": "sha512-R3pbpkcIqv2Pm3dUwgjclDRVmWpTJW2DcMzcIhEXEx1oh/CEMObMm3KLmRJOdvhM7o4uQBnwr8pzRK2sJWIqfg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/has-flag": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-4.0.0.tgz",
      "integrity": "sha512-EykJT/Q1KjTWctppgIAgfSO0tKVuZUjhgMr17kqTumMl6Afv3EISleU7qZUzoXDFTAHTDC4NOoG/ZxU3EvlMPQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/has-property-descriptors": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/has-property-descriptors/-/has-property-descriptors-1.0.2.tgz",
      "integrity": "sha512-55JNKuIW+vq4Ke1BjOTjM2YctQIvCT7GFzHwmfZPGo5wnrgkid0YQtnAleFSqumZm4az3n2BS+erby5ipJdgrg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "es-define-property": "^1.0.0"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/has-proto": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/has-proto/-/has-proto-1.2.0.tgz",
      "integrity": "sha512-KIL7eQPfHQRC8+XluaIw7BHUwwqL19bQn4hzNgdr+1wXoU0KKj6rufu47lhY7KbJR2C6T6+PfyN0Ea7wkSS+qQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "dunder-proto": "^1.0.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/has-symbols": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/has-symbols/-/has-symbols-1.1.0.tgz",
      "integrity": "sha512-1cDNdwJ2Jaohmb3sg4OmKaMBwuC48sYni5HUw2DvsC8LjGTLK9h+eb1X6RyuOHe4hT0ULCW68iomhjUoKUqlPQ==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/has-tostringtag": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/has-tostringtag/-/has-tostringtag-1.0.2.tgz",
      "integrity": "sha512-NqADB8VjPFLM2V0VvHUewwwsw0ZWBaIdgo+ieHtK3hasLz4qeCRjYcqfB6AQrBggRKppKF8L52/VqdVsO47Dlw==",
      "license": "MIT",
      "dependencies": {
        "has-symbols": "^1.0.3"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/hasown": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/hasown/-/hasown-2.0.2.tgz",
      "integrity": "sha512-0hJU9SCPvmMzIBdZFqNPXWa6dqh7WdH0cII9y+CyS8rG3nL48Bclra9HmKhVVUHyPWNH5Y7xDwAB7bfgSjkUMQ==",
      "license": "MIT",
      "dependencies": {
        "function-bind": "^1.1.2"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/http-errors": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/http-errors/-/http-errors-2.0.0.tgz",
      "integrity": "sha512-FtwrG/euBzaEjYeRqOgly7G0qviiXoJWnvEH2Z1plBdXgbyjv34pHTSb9zoeHMyDy33+DWy5Wt9Wo+TURtOYSQ==",
      "license": "MIT",
      "dependencies": {
        "depd": "2.0.0",
        "inherits": "2.0.4",
        "setprototypeof": "1.2.0",
        "statuses": "2.0.1",
        "toidentifier": "1.0.1"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/iconv-lite": {
      "version": "0.4.24",
      "resolved": "https://registry.npmjs.org/iconv-lite/-/iconv-lite-0.4.24.tgz",
      "integrity": "sha512-v3MXnZAcvnywkTUEZomIActle7RXXeedOR31wwl7VlyoXO4Qi9arvSenNQWne1TcRwhCL1HwLI21bEqdpj8/rA==",
      "license": "MIT",
      "dependencies": {
        "safer-buffer": ">= 2.1.2 < 3"
      },
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/ignore": {
      "version": "5.3.2",
      "resolved": "https://registry.npmjs.org/ignore/-/ignore-5.3.2.tgz",
      "integrity": "sha512-hsBTNUqQTDwkWtcdYI2i06Y/nUBEsNEDJKjWdigLvegy8kDuJAS8uRlpkkcQpyEXL0Z/pjDy5HBmMjRCJ2gq+g==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 4"
      }
    },
    "node_modules/import-fresh": {
      "version": "3.3.1",
      "resolved": "https://registry.npmjs.org/import-fresh/-/import-fresh-3.3.1.tgz",
      "integrity": "sha512-TR3KfrTZTYLPB6jUjfx6MF9WcWrHL9su5TObK4ZkYgBdWKPOFoSoQIdEuTuR82pmtxH2spWG9h6etwfr1pLBqQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "parent-module": "^1.0.0",
        "resolve-from": "^4.0.0"
      },
      "engines": {
        "node": ">=6"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/imurmurhash": {
      "version": "0.1.4",
      "resolved": "https://registry.npmjs.org/imurmurhash/-/imurmurhash-0.1.4.tgz",
      "integrity": "sha512-JmXMZ6wuvDmLiHEml9ykzqO6lwFbof0GG4IkcGaENdCRDDmMVnny7s5HsIgHCbaq0w2MyPhDqkhTUgS2LU2PHA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=0.8.19"
      }
    },
    "node_modules/inflight": {
      "version": "1.0.6",
      "resolved": "https://registry.npmjs.org/inflight/-/inflight-1.0.6.tgz",
      "integrity": "sha512-k92I/b08q4wvFscXCLvqfsHCrjrF7yiXsQuIVvVE7N82W3+aqpzuUdBbfhWcy/FZR3/4IgflMgKLOsvPDrGCJA==",
      "deprecated": "This module is not supported, and leaks memory. Do not use it. Check out lru-cache if you want a good and tested way to coalesce async requests by a key value, which is much more comprehensive and powerful.",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "once": "^1.3.0",
        "wrappy": "1"
      }
    },
    "node_modules/inherits": {
      "version": "2.0.4",
      "resolved": "https://registry.npmjs.org/inherits/-/inherits-2.0.4.tgz",
      "integrity": "sha512-k/vGaX4/Yla3WzyMCvTQOXYeIHvqOKtnqBduzTHpzpQZzAskKMhZ2K+EnBiSM9zGSoIFeMpXKxa4dYeZIQqewQ==",
      "license": "ISC"
    },
    "node_modules/internal-slot": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/internal-slot/-/internal-slot-1.1.0.tgz",
      "integrity": "sha512-4gd7VpWNQNB4UKKCFFVcp1AVv+FMOgs9NKzjHKusc8jTMhd5eL1NqQqOpE0KzMds804/yHlglp3uxgluOqAPLw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "es-errors": "^1.3.0",
        "hasown": "^2.0.2",
        "side-channel": "^1.1.0"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/ipaddr.js": {
      "version": "1.9.1",
      "resolved": "https://registry.npmjs.org/ipaddr.js/-/ipaddr.js-1.9.1.tgz",
      "integrity": "sha512-0KI/607xoxSToH7GjN1FfSbLoU0+btTicjsQSWQlh/hZykN8KpmMf7uYwPW3R+akZ6R/w18ZlXSHBYXiYUPO3g==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.10"
      }
    },
    "node_modules/is-array-buffer": {
      "version": "3.0.5",
      "resolved": "https://registry.npmjs.org/is-array-buffer/-/is-array-buffer-3.0.5.tgz",
      "integrity": "sha512-DDfANUiiG2wC1qawP66qlTugJeL5HyzMpfr8lLK+jMQirGzNod0B12cFB/9q838Ru27sBwfw78/rdoU7RERz6A==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.8",
        "call-bound": "^1.0.3",
        "get-intrinsic": "^1.2.6"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-async-function": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/is-async-function/-/is-async-function-2.1.1.tgz",
      "integrity": "sha512-9dgM/cZBnNvjzaMYHVoxxfPj2QXt22Ev7SuuPrs+xav0ukGB0S6d4ydZdEiM48kLx5kDV+QBPrpVnFyefL8kkQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "async-function": "^1.0.0",
        "call-bound": "^1.0.3",
        "get-proto": "^1.0.1",
        "has-tostringtag": "^1.0.2",
        "safe-regex-test": "^1.1.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-bigint": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/is-bigint/-/is-bigint-1.1.0.tgz",
      "integrity": "sha512-n4ZT37wG78iz03xPRKJrHTdZbe3IicyucEtdRsV5yglwc3GyUfbAfpSeD0FJ41NbUNSt5wbhqfp1fS+BgnvDFQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "has-bigints": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-boolean-object": {
      "version": "1.2.2",
      "resolved": "https://registry.npmjs.org/is-boolean-object/-/is-boolean-object-1.2.2.tgz",
      "integrity": "sha512-wa56o2/ElJMYqjCjGkXri7it5FbebW5usLw/nPmCMs5DeZ7eziSYZhSmPRn0txqeW4LnAmQQU7FgqLpsEFKM4A==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.3",
        "has-tostringtag": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-callable": {
      "version": "1.2.7",
      "resolved": "https://registry.npmjs.org/is-callable/-/is-callable-1.2.7.tgz",
      "integrity": "sha512-1BC0BVFhS/p0qtw6enp8e+8OD0UrK0oFLztSjNzhcKA3WDuJxxAPXzPuPtKkjEY9UUoEWlX/8fgKeu2S8i9JTA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-core-module": {
      "version": "2.16.1",
      "resolved": "https://registry.npmjs.org/is-core-module/-/is-core-module-2.16.1.tgz",
      "integrity": "sha512-UfoeMA6fIJ8wTYFEUjelnaGI67v6+N7qXJEvQuIGa99l4xsCruSYOVSQ0uPANn4dAzm8lkYPaKLrrijLq7x23w==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "hasown": "^2.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-data-view": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/is-data-view/-/is-data-view-1.0.2.tgz",
      "integrity": "sha512-RKtWF8pGmS87i2D6gqQu/l7EYRlVdfzemCJN/P3UOs//x1QE7mfhvzHIApBTRf7axvT6DMGwSwBXYCT0nfB9xw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.2",
        "get-intrinsic": "^1.2.6",
        "is-typed-array": "^1.1.13"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-date-object": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/is-date-object/-/is-date-object-1.1.0.tgz",
      "integrity": "sha512-PwwhEakHVKTdRNVOw+/Gyh0+MzlCl4R6qKvkhuvLtPMggI1WAHt9sOwZxQLSGpUaDnrdyDsomoRgNnCfKNSXXg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.2",
        "has-tostringtag": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-extglob": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/is-extglob/-/is-extglob-2.1.1.tgz",
      "integrity": "sha512-SbKbANkN603Vi4jEZv49LeVJMn4yGwsbzZworEoyEiutsN3nJYdbO36zfhGJ6QEDpOZIFkDtnq5JRxmvl3jsoQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/is-finalizationregistry": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/is-finalizationregistry/-/is-finalizationregistry-1.1.1.tgz",
      "integrity": "sha512-1pC6N8qWJbWoPtEjgcL2xyhQOP491EQjeUo3qTKcmV8YSDDJrOepfG8pcC7h/QgnQHYSv0mJ3Z/ZWxmatVrysg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.3"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-generator-function": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/is-generator-function/-/is-generator-function-1.1.0.tgz",
      "integrity": "sha512-nPUB5km40q9e8UfN/Zc24eLlzdSf9OfKByBw9CIdw4H1giPMeA0OIJvbchsCu4npfI2QcMVBsGEBHKZ7wLTWmQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.3",
        "get-proto": "^1.0.0",
        "has-tostringtag": "^1.0.2",
        "safe-regex-test": "^1.1.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-glob": {
      "version": "4.0.3",
      "resolved": "https://registry.npmjs.org/is-glob/-/is-glob-4.0.3.tgz",
      "integrity": "sha512-xelSayHH36ZgE7ZWhli7pW34hNbNl8Ojv5KVmkJD4hBdD3th8Tfk9vYasLM+mXWOZhFkgZfxhLSnrwRr4elSSg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "is-extglob": "^2.1.1"
      },
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/is-map": {
      "version": "2.0.3",
      "resolved": "https://registry.npmjs.org/is-map/-/is-map-2.0.3.tgz",
      "integrity": "sha512-1Qed0/Hr2m+YqxnM09CjA2d/i6YZNfF6R2oRAOj36eUdS6qIV/huPJNSEpKbupewFs+ZsJlxsjjPbc0/afW6Lw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-negative-zero": {
      "version": "2.0.3",
      "resolved": "https://registry.npmjs.org/is-negative-zero/-/is-negative-zero-2.0.3.tgz",
      "integrity": "sha512-5KoIu2Ngpyek75jXodFvnafB6DJgr3u8uuK0LEZJjrU19DrMD3EVERaR8sjz8CCGgpZvxPl9SuE1GMVPFHx1mw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-number-object": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/is-number-object/-/is-number-object-1.1.1.tgz",
      "integrity": "sha512-lZhclumE1G6VYD8VHe35wFaIif+CTy5SJIi5+3y4psDgWu4wPDoBhF8NxUOinEc7pHgiTsT6MaBb92rKhhD+Xw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.3",
        "has-tostringtag": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-path-inside": {
      "version": "3.0.3",
      "resolved": "https://registry.npmjs.org/is-path-inside/-/is-path-inside-3.0.3.tgz",
      "integrity": "sha512-Fd4gABb+ycGAmKou8eMftCupSir5lRxqf4aD/vd0cD2qc4HL07OjCeuHMr8Ro4CoMaeCKDB0/ECBOVWjTwUvPQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/is-regex": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/is-regex/-/is-regex-1.2.1.tgz",
      "integrity": "sha512-MjYsKHO5O7mCsmRGxWcLWheFqN9DJ/2TmngvjKXihe6efViPqc274+Fx/4fYj/r03+ESvBdTXK0V6tA3rgez1g==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.2",
        "gopd": "^1.2.0",
        "has-tostringtag": "^1.0.2",
        "hasown": "^2.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-set": {
      "version": "2.0.3",
      "resolved": "https://registry.npmjs.org/is-set/-/is-set-2.0.3.tgz",
      "integrity": "sha512-iPAjerrse27/ygGLxw+EBR9agv9Y6uLeYVJMu+QNCoouJ1/1ri0mGrcWpfCqFZuzzx3WjtwxG098X+n4OuRkPg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-shared-array-buffer": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/is-shared-array-buffer/-/is-shared-array-buffer-1.0.4.tgz",
      "integrity": "sha512-ISWac8drv4ZGfwKl5slpHG9OwPNty4jOWPRIhBpxOoD+hqITiwuipOQ2bNthAzwA3B4fIjO4Nln74N0S9byq8A==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.3"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-string": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/is-string/-/is-string-1.1.1.tgz",
      "integrity": "sha512-BtEeSsoaQjlSPBemMQIrY1MY0uM6vnS1g5fmufYOtnxLGUZM2178PKbhsk7Ffv58IX+ZtcvoGwccYsh0PglkAA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.3",
        "has-tostringtag": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-symbol": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/is-symbol/-/is-symbol-1.1.1.tgz",
      "integrity": "sha512-9gGx6GTtCQM73BgmHQXfDmLtfjjTUDSyoxTCbp5WtoixAhfgsDirWIcVQ/IHpvI5Vgd5i/J5F7B9cN/WlVbC/w==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.2",
        "has-symbols": "^1.1.0",
        "safe-regex-test": "^1.1.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-typed-array": {
      "version": "1.1.15",
      "resolved": "https://registry.npmjs.org/is-typed-array/-/is-typed-array-1.1.15.tgz",
      "integrity": "sha512-p3EcsicXjit7SaskXHs1hA91QxgTw46Fv6EFKKGS5DRFLD8yKnohjF3hxoju94b/OcMZoQukzpPpBE9uLVKzgQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "which-typed-array": "^1.1.16"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-weakmap": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/is-weakmap/-/is-weakmap-2.0.2.tgz",
      "integrity": "sha512-K5pXYOm9wqY1RgjpL3YTkF39tni1XajUIkawTLUo9EZEVUFga5gSQJF8nNS7ZwJQ02y+1YCNYcMh+HIf1ZqE+w==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-weakref": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/is-weakref/-/is-weakref-1.1.1.tgz",
      "integrity": "sha512-6i9mGWSlqzNMEqpCp93KwRS1uUOodk2OJ6b+sq7ZPDSy2WuI5NFIxp/254TytR8ftefexkWn5xNiHUNpPOfSew==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.3"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-weakset": {
      "version": "2.0.4",
      "resolved": "https://registry.npmjs.org/is-weakset/-/is-weakset-2.0.4.tgz",
      "integrity": "sha512-mfcwb6IzQyOKTs84CQMrOwW4gQcaTOAWJ0zzJCl2WSPDrWk/OzDaImWFH3djXhb24g4eudZfLRozAvPGw4d9hQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.3",
        "get-intrinsic": "^1.2.6"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/isarray": {
      "version": "2.0.5",
      "resolved": "https://registry.npmjs.org/isarray/-/isarray-2.0.5.tgz",
      "integrity": "sha512-xHjhDr3cNBK0BzdUJSPXZntQUx/mwMS5Rw4A7lPJ90XGAO6ISP/ePDNuo0vhqOZU+UD5JoodwCAAoZQd3FeAKw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/isexe": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/isexe/-/isexe-2.0.0.tgz",
      "integrity": "sha512-RHxMLp9lnKHGHRng9QFhRCMbYAcVpn69smSGcq3f36xjgVVWThj4qqLbTLlq7Ssj8B+fIQ1EuCEGI2lKsyQeIw==",
      "dev": true,
      "license": "ISC"
    },
    "node_modules/iterator.prototype": {
      "version": "1.1.5",
      "resolved": "https://registry.npmjs.org/iterator.prototype/-/iterator.prototype-1.1.5.tgz",
      "integrity": "sha512-H0dkQoCa3b2VEeKQBOxFph+JAbcrQdE7KC0UkqwpLmv2EC4P41QXP+rqo9wYodACiG5/WM5s9oDApTU8utwj9g==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "define-data-property": "^1.1.4",
        "es-object-atoms": "^1.0.0",
        "get-intrinsic": "^1.2.6",
        "get-proto": "^1.0.0",
        "has-symbols": "^1.1.0",
        "set-function-name": "^2.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/js-tokens": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/js-tokens/-/js-tokens-4.0.0.tgz",
      "integrity": "sha512-RdJUflcE3cUzKiMqQgsCu06FPu9UdIJO0beYbPhHN4k6apgJtifcoCtT9bcxOpYBtpD2kCM6Sbzg4CausW/PKQ==",
      "license": "MIT"
    },
    "node_modules/js-yaml": {
      "version": "4.1.0",
      "resolved": "https://registry.npmjs.org/js-yaml/-/js-yaml-4.1.0.tgz",
      "integrity": "sha512-wpxZs9NoxZaJESJGIZTyDEaYpl0FKSA+FB9aJiyemKhMwkxQg63h4T1KJgUGHpTqPDNRcmmYLugrRjJlBtWvRA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "argparse": "^2.0.1"
      },
      "bin": {
        "js-yaml": "bin/js-yaml.js"
      }
    },
    "node_modules/jsesc": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/jsesc/-/jsesc-3.1.0.tgz",
      "integrity": "sha512-/sM3dO2FOzXjKQhJuo0Q173wf2KOo8t4I8vHy6lF9poUp7bKT0/NHE8fPX23PwfhnykfqnC2xRxOnVw5XuGIaA==",
      "dev": true,
      "license": "MIT",
      "bin": {
        "jsesc": "bin/jsesc"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/json-buffer": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/json-buffer/-/json-buffer-3.0.1.tgz",
      "integrity": "sha512-4bV5BfR2mqfQTJm+V5tPPdf+ZpuhiIvTuAB5g8kcrXOZpTT/QwwVRWBywX1ozr6lEuPdbHxwaJlm9G6mI2sfSQ==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/json-schema-traverse": {
      "version": "0.4.1",
      "resolved": "https://registry.npmjs.org/json-schema-traverse/-/json-schema-traverse-0.4.1.tgz",
      "integrity": "sha512-xbbCH5dCYU5T8LcEhhuh7HJ88HXuW3qsI3Y0zOZFKfZEHcpWiHU/Jxzk629Brsab/mMiHQti9wMP+845RPe3Vg==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/json-stable-stringify-without-jsonify": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/json-stable-stringify-without-jsonify/-/json-stable-stringify-without-jsonify-1.0.1.tgz",
      "integrity": "sha512-Bdboy+l7tA3OGW6FjyFHWkP5LuByj1Tk33Ljyq0axyzdk9//JSi2u3fP1QSmd1KNwq6VOKYGlAu87CisVir6Pw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/json5": {
      "version": "2.2.3",
      "resolved": "https://registry.npmjs.org/json5/-/json5-2.2.3.tgz",
      "integrity": "sha512-XmOWe7eyHYH14cLdVPoyg+GOH3rYX++KpzrylJwSW98t3Nk+U8XOl8FWKOgwtzdb8lXGf6zYwDUzeHMWfxasyg==",
      "dev": true,
      "license": "MIT",
      "bin": {
        "json5": "lib/cli.js"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/jsx-ast-utils": {
      "version": "3.3.5",
      "resolved": "https://registry.npmjs.org/jsx-ast-utils/-/jsx-ast-utils-3.3.5.tgz",
      "integrity": "sha512-ZZow9HBI5O6EPgSJLUb8n2NKgmVWTwCvHGwFuJlMjvLFqlGG6pjirPhtdsseaLZjSibD8eegzmYpUZwoIlj2cQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "array-includes": "^3.1.6",
        "array.prototype.flat": "^1.3.1",
        "object.assign": "^4.1.4",
        "object.values": "^1.1.6"
      },
      "engines": {
        "node": ">=4.0"
      }
    },
    "node_modules/keyv": {
      "version": "4.5.4",
      "resolved": "https://registry.npmjs.org/keyv/-/keyv-4.5.4.tgz",
      "integrity": "sha512-oxVHkHR/EJf2CNXnWxRLW6mg7JyCCUcG0DtEGmL2ctUo1PNTin1PUil+r/+4r5MpVgC/fn1kjsx7mjSujKqIpw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "json-buffer": "3.0.1"
      }
    },
    "node_modules/levn": {
      "version": "0.4.1",
      "resolved": "https://registry.npmjs.org/levn/-/levn-0.4.1.tgz",
      "integrity": "sha512-+bT2uH4E5LGE7h/n3evcS/sQlJXCpIp6ym8OWJ5eV6+67Dsql/LaaT7qJBAt2rzfoa/5QBGBhxDix1dMt2kQKQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "prelude-ls": "^1.2.1",
        "type-check": "~0.4.0"
      },
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/locate-path": {
      "version": "6.0.0",
      "resolved": "https://registry.npmjs.org/locate-path/-/locate-path-6.0.0.tgz",
      "integrity": "sha512-iPZK6eYjbxRu3uB4/WZ3EsEIMJFMqAoopl3R+zuq0UjcAm/MO6KCweDgPfP3elTztoKP3KtnVHxTn2NHBSDVUw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "p-locate": "^5.0.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/lodash.merge": {
      "version": "4.6.2",
      "resolved": "https://registry.npmjs.org/lodash.merge/-/lodash.merge-4.6.2.tgz",
      "integrity": "sha512-0KpjqXRVvrYyCsX1swR/XTK0va6VQkQM6MNo7PqW77ByjAhoARA8EfrP1N4+KlKj8YS0ZUCtRT/YUuhyYDujIQ==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/loose-envify": {
      "version": "1.4.0",
      "resolved": "https://registry.npmjs.org/loose-envify/-/loose-envify-1.4.0.tgz",
      "integrity": "sha512-lyuxPGr/Wfhrlem2CL/UcnUc1zcqKAImBDzukY7Y5F/yQiNdko6+fRLevlw1HgMySw7f611UIY408EtxRSoK3Q==",
      "license": "MIT",
      "dependencies": {
        "js-tokens": "^3.0.0 || ^4.0.0"
      },
      "bin": {
        "loose-envify": "cli.js"
      }
    },
    "node_modules/lru-cache": {
      "version": "5.1.1",
      "resolved": "https://registry.npmjs.org/lru-cache/-/lru-cache-5.1.1.tgz",
      "integrity": "sha512-KpNARQA3Iwv+jTA0utUVVbrh+Jlrr1Fv0e56GGzAFOXN7dk/FviaDW8LHmK52DlcH4WP2n6gI8vN1aesBFgo9w==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "yallist": "^3.0.2"
      }
    },
    "node_modules/magic-string": {
      "version": "0.27.0",
      "resolved": "https://registry.npmjs.org/magic-string/-/magic-string-0.27.0.tgz",
      "integrity": "sha512-8UnnX2PeRAPZuN12svgR9j7M1uWMovg/CEnIwIG0LFkXSJJe4PdfUGiTGl8V9bsBHFUtfVINcSyYxd7q+kx9fA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@jridgewell/sourcemap-codec": "^1.4.13"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/math-intrinsics": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/math-intrinsics/-/math-intrinsics-1.1.0.tgz",
      "integrity": "sha512-/IXtbwEk5HTPyEwyKX6hGkYXxM9nbj64B+ilVJnC/R6B0pH5G4V3b0pVbL7DBj4tkhBAppbQUlf6F6Xl9LHu1g==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/media-typer": {
      "version": "0.3.0",
      "resolved": "https://registry.npmjs.org/media-typer/-/media-typer-0.3.0.tgz",
      "integrity": "sha512-dq+qelQ9akHpcOl/gUVRTxVIOkAJ1wR3QAvb4RsVjS8oVoFjDGTc679wJYmUmknUF5HwMLOgb5O+a3KxfWapPQ==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/merge-descriptors": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/merge-descriptors/-/merge-descriptors-1.0.3.tgz",
      "integrity": "sha512-gaNvAS7TZ897/rVaZ0nMtAyxNyi/pdbjbAwUpFQpN70GqnVfOiXpeUUMKRBmzXaSQ8DdTX4/0ms62r2K+hE6mQ==",
      "license": "MIT",
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/methods": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/methods/-/methods-1.1.2.tgz",
      "integrity": "sha512-iclAHeNqNm68zFtnZ0e+1L2yUIdvzNoauKU4WBA3VvH/vPFieF7qfRlwUZU+DA9P9bPXIS90ulxoUoCH23sV2w==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/mime": {
      "version": "1.6.0",
      "resolved": "https://registry.npmjs.org/mime/-/mime-1.6.0.tgz",
      "integrity": "sha512-x0Vn8spI+wuJ1O6S7gnbaQg8Pxh4NNHb7KSINmEWKiPE4RKOplvijn+NkmYmmRgP68mc70j2EbeTFRsrswaQeg==",
      "license": "MIT",
      "bin": {
        "mime": "cli.js"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/mime-db": {
      "version": "1.52.0",
      "resolved": "https://registry.npmjs.org/mime-db/-/mime-db-1.52.0.tgz",
      "integrity": "sha512-sPU4uV7dYlvtWJxwwxHD0PuihVNiE7TyAbQ5SWxDCB9mUYvOgroQOwYQQOKPJ8CIbE+1ETVlOoK1UC2nU3gYvg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/mime-types": {
      "version": "2.1.35",
      "resolved": "https://registry.npmjs.org/mime-types/-/mime-types-2.1.35.tgz",
      "integrity": "sha512-ZDY+bPm5zTTF+YpCrAU9nK0UgICYPT0QtT1NZWFv4s++TNkcgVaT0g6+4R2uI4MjQjzysHB1zxuWL50hzaeXiw==",
      "license": "MIT",
      "dependencies": {
        "mime-db": "1.52.0"
      },
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/minimatch": {
      "version": "3.1.2",
      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-3.1.2.tgz",
      "integrity": "sha512-J7p63hRiAjw1NDEww1W7i37+ByIrOWO5XQQAzZ3VOcL0PNybwpfmV/N05zFAzwQ9USyEcX6t3UO+K5aqBQOIHw==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "brace-expansion": "^1.1.7"
      },
      "engines": {
        "node": "*"
      }
    },
    "node_modules/ms": {
      "version": "2.1.3",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
      "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==",
      "license": "MIT"
    },
    "node_modules/nanoid": {
      "version": "3.3.11",
      "resolved": "https://registry.npmjs.org/nanoid/-/nanoid-3.3.11.tgz",
      "integrity": "sha512-N8SpfPUnUp1bK+PMYW8qSWdl9U+wwNWI4QKxOYDy9JAro3WMX7p2OeVRF9v+347pnakNevPmiHhNmZ2HbFA76w==",
      "dev": true,
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "license": "MIT",
      "bin": {
        "nanoid": "bin/nanoid.cjs"
      },
      "engines": {
        "node": "^10 || ^12 || ^13.7 || ^14 || >=15.0.1"
      }
    },
    "node_modules/natural-compare": {
      "version": "1.4.0",
      "resolved": "https://registry.npmjs.org/natural-compare/-/natural-compare-1.4.0.tgz",
      "integrity": "sha512-OWND8ei3VtNC9h7V60qff3SVobHr996CTwgxubgyQYEpg290h9J0buyECNNJexkFm5sOajh5G116RYA1c8ZMSw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/negotiator": {
      "version": "0.6.3",
      "resolved": "https://registry.npmjs.org/negotiator/-/negotiator-0.6.3.tgz",
      "integrity": "sha512-+EUsqGPLsM+j/zdChZjsnX51g4XrHFOIXwfnCVPGlQk/k5giakcKsuxCObBRu6DSm9opw/O6slWbJdghQM4bBg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/node-releases": {
      "version": "2.0.19",
      "resolved": "https://registry.npmjs.org/node-releases/-/node-releases-2.0.19.tgz",
      "integrity": "sha512-xxOWJsBKtzAq7DY0J+DTzuz58K8e7sJbdgwkbMWQe8UYB6ekmsQ45q0M/tJDsGaZmbC+l7n57UV8Hl5tHxO9uw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/object-assign": {
      "version": "4.1.1",
      "resolved": "https://registry.npmjs.org/object-assign/-/object-assign-4.1.1.tgz",
      "integrity": "sha512-rJgTQnkUnH1sFw8yT6VSU3zD3sWmu6sZhIseY8VX+GRu3P6F7Fu+JNDoXfklElbLJSnc3FUQHVe4cU5hj+BcUg==",
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/object-inspect": {
      "version": "1.13.4",
      "resolved": "https://registry.npmjs.org/object-inspect/-/object-inspect-1.13.4.tgz",
      "integrity": "sha512-W67iLl4J2EXEGTbfeHCffrjDfitvLANg0UlX3wFUUSTx92KXRFegMHUVgSqE+wvhAbi4WqjGg9czysTV2Epbew==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/object-keys": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/object-keys/-/object-keys-1.1.1.tgz",
      "integrity": "sha512-NuAESUOUMrlIXOfHKzD6bpPu3tYt3xvjNdRIQ+FeT0lNb4K8WR70CaDxhuNguS2XG+GjkyMwOzsN5ZktImfhLA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/object.assign": {
      "version": "4.1.7",
      "resolved": "https://registry.npmjs.org/object.assign/-/object.assign-4.1.7.tgz",
      "integrity": "sha512-nK28WOo+QIjBkDduTINE4JkF/UJJKyf2EJxvJKfblDpyg0Q+pkOHNTL0Qwy6NP6FhE/EnzV73BxxqcJaXY9anw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.8",
        "call-bound": "^1.0.3",
        "define-properties": "^1.2.1",
        "es-object-atoms": "^1.0.0",
        "has-symbols": "^1.1.0",
        "object-keys": "^1.1.1"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/object.entries": {
      "version": "1.1.9",
      "resolved": "https://registry.npmjs.org/object.entries/-/object.entries-1.1.9.tgz",
      "integrity": "sha512-8u/hfXFRBD1O0hPUjioLhoWFHRmt6tKA4/vZPyckBr18l1KE9uHrFaFaUi8MDRTpi4uak2goyPTSNJLXX2k2Hw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.8",
        "call-bound": "^1.0.4",
        "define-properties": "^1.2.1",
        "es-object-atoms": "^1.1.1"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/object.fromentries": {
      "version": "2.0.8",
      "resolved": "https://registry.npmjs.org/object.fromentries/-/object.fromentries-2.0.8.tgz",
      "integrity": "sha512-k6E21FzySsSK5a21KRADBd/NGneRegFO5pLHfdQLpRDETUNJueLXs3WCzyQ3tFRDYgbq3KHGXfTbi2bs8WQ6rQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.7",
        "define-properties": "^1.2.1",
        "es-abstract": "^1.23.2",
        "es-object-atoms": "^1.0.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/object.values": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/object.values/-/object.values-1.2.1.tgz",
      "integrity": "sha512-gXah6aZrcUxjWg2zR2MwouP2eHlCBzdV4pygudehaKXSGW4v2AsRQUK+lwwXhii6KFZcunEnmSUoYp5CXibxtA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.8",
        "call-bound": "^1.0.3",
        "define-properties": "^1.2.1",
        "es-object-atoms": "^1.0.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/on-finished": {
      "version": "2.4.1",
      "resolved": "https://registry.npmjs.org/on-finished/-/on-finished-2.4.1.tgz",
      "integrity": "sha512-oVlzkg3ENAhCk2zdv7IJwd/QUD4z2RxRwpkcGY8psCVcCYZNq4wYnVWALHM+brtuJjePWiYF/ClmuDr8Ch5+kg==",
      "license": "MIT",
      "dependencies": {
        "ee-first": "1.1.1"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/on-headers": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/on-headers/-/on-headers-1.1.0.tgz",
      "integrity": "sha512-737ZY3yNnXy37FHkQxPzt4UZ2UWPWiCZWLvFZ4fu5cueciegX0zGPnrlY6bwRg4FdQOe9YU8MkmJwGhoMybl8A==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/once": {
      "version": "1.4.0",
      "resolved": "https://registry.npmjs.org/once/-/once-1.4.0.tgz",
      "integrity": "sha512-lNaJgI+2Q5URQBkccEKHTQOPaXdUxnZZElQTZY0MFUAuaEqe1E+Nyvgdz/aIyNi6Z9MzO5dv1H8n58/GELp3+w==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "wrappy": "1"
      }
    },
    "node_modules/optionator": {
      "version": "0.9.4",
      "resolved": "https://registry.npmjs.org/optionator/-/optionator-0.9.4.tgz",
      "integrity": "sha512-6IpQ7mKUxRcZNLIObR0hz7lxsapSSIYNZJwXPGeF0mTVqGKFIXj1DQcMoT22S3ROcLyY/rz0PWaWZ9ayWmad9g==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "deep-is": "^0.1.3",
        "fast-levenshtein": "^2.0.6",
        "levn": "^0.4.1",
        "prelude-ls": "^1.2.1",
        "type-check": "^0.4.0",
        "word-wrap": "^1.2.5"
      },
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/own-keys": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/own-keys/-/own-keys-1.0.1.tgz",
      "integrity": "sha512-qFOyK5PjiWZd+QQIh+1jhdb9LpxTF0qs7Pm8o5QHYZ0M3vKqSqzsZaEB6oWlxZ+q2sJBMI/Ktgd2N5ZwQoRHfg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "get-intrinsic": "^1.2.6",
        "object-keys": "^1.1.1",
        "safe-push-apply": "^1.0.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/p-limit": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/p-limit/-/p-limit-3.1.0.tgz",
      "integrity": "sha512-TYOanM3wGwNGsZN2cVTYPArw454xnXj5qmWF1bEoAc4+cU/ol7GVh7odevjp1FNHduHc3KZMcFduxU5Xc6uJRQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "yocto-queue": "^0.1.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/p-locate": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/p-locate/-/p-locate-5.0.0.tgz",
      "integrity": "sha512-LaNjtRWUBY++zB5nE/NwcaoMylSPk+S+ZHNB1TzdbMJMny6dynpAGt7X/tl/QYq3TIeE6nxHppbo2LGymrG5Pw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "p-limit": "^3.0.2"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/parent-module": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/parent-module/-/parent-module-1.0.1.tgz",
      "integrity": "sha512-GQ2EWRpQV8/o+Aw8YqtfZZPfNRWZYkbidE9k5rpl/hC3vtHHBfGm2Ifi6qWV+coDGkrUKZAxE3Lot5kcsRlh+g==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "callsites": "^3.0.0"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/parseurl": {
      "version": "1.3.3",
      "resolved": "https://registry.npmjs.org/parseurl/-/parseurl-1.3.3.tgz",
      "integrity": "sha512-CiyeOxFT/JZyN5m0z9PfXw4SCBJ6Sygz1Dpl0wqjlhDEGGBP1GnsUVEL0p63hoG1fcj3fHynXi9NYO4nWOL+qQ==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/path-exists": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/path-exists/-/path-exists-4.0.0.tgz",
      "integrity": "sha512-ak9Qy5Q7jYb2Wwcey5Fpvg2KoAc/ZIhLSLOSBmRmygPsGwkVVt0fZa0qrtMz+m6tJTAHfZQ8FnmB4MG4LWy7/w==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/path-is-absolute": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/path-is-absolute/-/path-is-absolute-1.0.1.tgz",
      "integrity": "sha512-AVbw3UJ2e9bq64vSaS9Am0fje1Pa8pbGqTTsmXfaIiMpnr5DlDhfJOuLj9Sf95ZPVDAUerDfEk88MPmPe7UCQg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/path-key": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/path-key/-/path-key-3.1.1.tgz",
      "integrity": "sha512-ojmeN0qd+y0jszEtoY48r0Peq5dwMEkIlCOu6Q5f41lfkswXuKtYrhgoTpLnyIcHm24Uhqx+5Tqm2InSwLhE6Q==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/path-parse": {
      "version": "1.0.7",
      "resolved": "https://registry.npmjs.org/path-parse/-/path-parse-1.0.7.tgz",
      "integrity": "sha512-LDJzPVEEEPR+y48z93A0Ed0yXb8pAByGWo/k5YYdYgpY2/2EsOsksJrq7lOHxryrVOn1ejG6oAp8ahvOIQD8sw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/path-to-regexp": {
      "version": "0.1.12",
      "resolved": "https://registry.npmjs.org/path-to-regexp/-/path-to-regexp-0.1.12.tgz",
      "integrity": "sha512-RA1GjUVMnvYFxuqovrEqZoxxW5NUZqbwKtYz/Tt7nXerk0LbLblQmrsgdeOxV5SFHf0UDggjS/bSeOZwt1pmEQ==",
      "license": "MIT"
    },
    "node_modules/picocolors": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/picocolors/-/picocolors-1.1.1.tgz",
      "integrity": "sha512-xceH2snhtb5M9liqDsmEw56le376mTZkEX/jEb/RxNFyegNul7eNslCXP9FDj/Lcu0X8KEyMceP2ntpaHrDEVA==",
      "dev": true,
      "license": "ISC"
    },
    "node_modules/possible-typed-array-names": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/possible-typed-array-names/-/possible-typed-array-names-1.1.0.tgz",
      "integrity": "sha512-/+5VFTchJDoVj3bhoqi6UeymcD00DAwb1nJwamzPvHEszJ4FpF6SNNbUbOS8yI56qHzdV8eK0qEfOSiodkTdxg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/postcss": {
      "version": "8.5.6",
      "resolved": "https://registry.npmjs.org/postcss/-/postcss-8.5.6.tgz",
      "integrity": "sha512-3Ybi1tAuwAP9s0r1UQ2J4n5Y0G05bJkpUIO0/bI9MhwmD70S5aTWbXGBwxHrelT+XM1k6dM0pk+SwNkpTRN7Pg==",
      "dev": true,
      "funding": [
        {
          "type": "opencollective",
          "url": "https://opencollective.com/postcss/"
        },
        {
          "type": "tidelift",
          "url": "https://tidelift.com/funding/github/npm/postcss"
        },
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "license": "MIT",
      "dependencies": {
        "nanoid": "^3.3.11",
        "picocolors": "^1.1.1",
        "source-map-js": "^1.2.1"
      },
      "engines": {
        "node": "^10 || ^12 || >=14"
      }
    },
    "node_modules/prelude-ls": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/prelude-ls/-/prelude-ls-1.2.1.tgz",
      "integrity": "sha512-vkcDPrRZo1QZLbn5RLGPpg/WmIQ65qoWWhcGKf/b5eplkkarX0m9z8ppCat4mlOqUsWpyNuYgO3VRyrYHSzX5g==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/prop-types": {
      "version": "15.8.1",
      "resolved": "https://registry.npmjs.org/prop-types/-/prop-types-15.8.1.tgz",
      "integrity": "sha512-oj87CgZICdulUohogVAR7AjlC0327U4el4L6eAvOqCeudMDVU0NThNaV+b9Df4dXgSP1gXMTnPdhfe/2qDH5cg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "loose-envify": "^1.4.0",
        "object-assign": "^4.1.1",
        "react-is": "^16.13.1"
      }
    },
    "node_modules/proxy-addr": {
      "version": "2.0.7",
      "resolved": "https://registry.npmjs.org/proxy-addr/-/proxy-addr-2.0.7.tgz",
      "integrity": "sha512-llQsMLSUDUPT44jdrU/O37qlnifitDP+ZwrmmZcoSKyLKvtZxpyV0n2/bD/N4tBAAZ/gJEdZU7KMraoK1+XYAg==",
      "license": "MIT",
      "dependencies": {
        "forwarded": "0.2.0",
        "ipaddr.js": "1.9.1"
      },
      "engines": {
        "node": ">= 0.10"
      }
    },
    "node_modules/proxy-from-env": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/proxy-from-env/-/proxy-from-env-1.1.0.tgz",
      "integrity": "sha512-D+zkORCbA9f1tdWRK0RaCR3GPv50cMxcrz4X8k5LTSUD1Dkw47mKJEZQNunItRTkWwgtaUSo1RVFRIG9ZXiFYg==",
      "license": "MIT"
    },
    "node_modules/punycode": {
      "version": "2.3.1",
      "resolved": "https://registry.npmjs.org/punycode/-/punycode-2.3.1.tgz",
      "integrity": "sha512-vYt7UD1U9Wg6138shLtLOvdAu+8DsC/ilFtEVHcH+wydcSpNE20AfSOduf6MkRFahL5FY7X1oU7nKVZFtfq8Fg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/qs": {
      "version": "6.13.0",
      "resolved": "https://registry.npmjs.org/qs/-/qs-6.13.0.tgz",
      "integrity": "sha512-+38qI9SOr8tfZ4QmJNplMUxqjbe7LKvvZgWdExBOmd+egZTtjLB67Gu0HRX3u/XOq7UU2Nx6nsjvS16Z9uwfpg==",
      "license": "BSD-3-Clause",
      "dependencies": {
        "side-channel": "^1.0.6"
      },
      "engines": {
        "node": ">=0.6"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/queue-microtask": {
      "version": "1.2.3",
      "resolved": "https://registry.npmjs.org/queue-microtask/-/queue-microtask-1.2.3.tgz",
      "integrity": "sha512-NuaNSa6flKT5JaSYQzJok04JzTL1CA6aGhv5rfLW3PgqA+M2ChpZQnAC8h8i4ZFkBS8X5RqkDBHA7r4hej3K9A==",
      "dev": true,
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/feross"
        },
        {
          "type": "patreon",
          "url": "https://www.patreon.com/feross"
        },
        {
          "type": "consulting",
          "url": "https://feross.org/support"
        }
      ],
      "license": "MIT"
    },
    "node_modules/random-bytes": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/random-bytes/-/random-bytes-1.0.0.tgz",
      "integrity": "sha512-iv7LhNVO047HzYR3InF6pUcUsPQiHTM1Qal51DcGSuZFBil1aBBWG5eHPNek7bvILMaYJ/8RU1e8w1AMdHmLQQ==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/range-parser": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/range-parser/-/range-parser-1.2.1.tgz",
      "integrity": "sha512-Hrgsx+orqoygnmhFbKaHE6c296J+HTAQXoxEF6gNupROmmGJRoyzfG3ccAveqCBrwr/2yxQ5BVd/GTl5agOwSg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/raw-body": {
      "version": "2.5.2",
      "resolved": "https://registry.npmjs.org/raw-body/-/raw-body-2.5.2.tgz",
      "integrity": "sha512-8zGqypfENjCIqGhgXToC8aB2r7YrBX+AQAfIPs/Mlk+BtPTztOvTS01NRW/3Eh60J+a48lt8qsCzirQ6loCVfA==",
      "license": "MIT",
      "dependencies": {
        "bytes": "3.1.2",
        "http-errors": "2.0.0",
        "iconv-lite": "0.4.24",
        "unpipe": "1.0.0"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/react": {
      "version": "18.3.1",
      "resolved": "https://registry.npmjs.org/react/-/react-18.3.1.tgz",
      "integrity": "sha512-wS+hAgJShR0KhEvPJArfuPVN1+Hz1t0Y6n5jLrGQbkb4urgPE/0Rve+1kMB1v/oWgHgm4WIcV+i7F2pTVj+2iQ==",
      "license": "MIT",
      "dependencies": {
        "loose-envify": "^1.1.0"
      },
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/react-dom": {
      "version": "18.3.1",
      "resolved": "https://registry.npmjs.org/react-dom/-/react-dom-18.3.1.tgz",
      "integrity": "sha512-5m4nQKp+rZRb09LNH59GM4BxTh9251/ylbKIbpe7TpGxfJ+9kv6BLkLBXIjjspbgbnIBNqlI23tRnTWT0snUIw==",
      "license": "MIT",
      "dependencies": {
        "loose-envify": "^1.1.0",
        "scheduler": "^0.23.2"
      },
      "peerDependencies": {
        "react": "^18.3.1"
      }
    },
    "node_modules/react-is": {
      "version": "16.13.1",
      "resolved": "https://registry.npmjs.org/react-is/-/react-is-16.13.1.tgz",
      "integrity": "sha512-24e6ynE2H+OKt4kqsOvNd8kBpV65zoxbA4BVsEOB3ARVWQki/DHzaUoC5KuON/BiccDaCCTZBuOcfZs70kR8bQ==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/react-refresh": {
      "version": "0.14.2",
      "resolved": "https://registry.npmjs.org/react-refresh/-/react-refresh-0.14.2.tgz",
      "integrity": "sha512-jCvmsr+1IUSMUyzOkRcvnVbX3ZYC6g9TDrDbFuFmRDq7PD4yaGbLKNQL6k2jnArV8hjYxh7hVhAZB6s9HDGpZA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/react-router": {
      "version": "6.30.1",
      "resolved": "https://registry.npmjs.org/react-router/-/react-router-6.30.1.tgz",
      "integrity": "sha512-X1m21aEmxGXqENEPG3T6u0Th7g0aS4ZmoNynhbs+Cn+q+QGTLt+d5IQ2bHAXKzKcxGJjxACpVbnYQSCRcfxHlQ==",
      "license": "MIT",
      "dependencies": {
        "@remix-run/router": "1.23.0"
      },
      "engines": {
        "node": ">=14.0.0"
      },
      "peerDependencies": {
        "react": ">=16.8"
      }
    },
    "node_modules/react-router-dom": {
      "version": "6.30.1",
      "resolved": "https://registry.npmjs.org/react-router-dom/-/react-router-dom-6.30.1.tgz",
      "integrity": "sha512-llKsgOkZdbPU1Eg3zK8lCn+sjD9wMRZZPuzmdWWX5SUs8OFkN5HnFVC0u5KMeMaC9aoancFI/KoLuKPqN+hxHw==",
      "license": "MIT",
      "dependencies": {
        "@remix-run/router": "1.23.0",
        "react-router": "6.30.1"
      },
      "engines": {
        "node": ">=14.0.0"
      },
      "peerDependencies": {
        "react": ">=16.8",
        "react-dom": ">=16.8"
      }
    },
    "node_modules/reflect.getprototypeof": {
      "version": "1.0.10",
      "resolved": "https://registry.npmjs.org/reflect.getprototypeof/-/reflect.getprototypeof-1.0.10.tgz",
      "integrity": "sha512-00o4I+DVrefhv+nX0ulyi3biSHCPDe+yLv5o/p6d/UVlirijB8E16FtfwSAi4g3tcqrQ4lRAqQSoFEZJehYEcw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.8",
        "define-properties": "^1.2.1",
        "es-abstract": "^1.23.9",
        "es-errors": "^1.3.0",
        "es-object-atoms": "^1.0.0",
        "get-intrinsic": "^1.2.7",
        "get-proto": "^1.0.1",
        "which-builtin-type": "^1.2.1"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/regexp.prototype.flags": {
      "version": "1.5.4",
      "resolved": "https://registry.npmjs.org/regexp.prototype.flags/-/regexp.prototype.flags-1.5.4.tgz",
      "integrity": "sha512-dYqgNSZbDwkaJ2ceRd9ojCGjBq+mOm9LmtXnAnEGyHhN/5R7iDW2TRw3h+o/jCFxus3P2LfWIIiwowAjANm7IA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.8",
        "define-properties": "^1.2.1",
        "es-errors": "^1.3.0",
        "get-proto": "^1.0.1",
        "gopd": "^1.2.0",
        "set-function-name": "^2.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/resolve": {
      "version": "2.0.0-next.5",
      "resolved": "https://registry.npmjs.org/resolve/-/resolve-2.0.0-next.5.tgz",
      "integrity": "sha512-U7WjGVG9sH8tvjW5SmGbQuui75FiyjAX72HX15DwBBwF9dNiQZRQAg9nnPhYy+TUnE0+VcrttuvNI8oSxZcocA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "is-core-module": "^2.13.0",
        "path-parse": "^1.0.7",
        "supports-preserve-symlinks-flag": "^1.0.0"
      },
      "bin": {
        "resolve": "bin/resolve"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/resolve-from": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/resolve-from/-/resolve-from-4.0.0.tgz",
      "integrity": "sha512-pb/MYmXstAkysRFx8piNI1tGFNQIFA3vkE3Gq4EuA1dF6gHp/+vgZqsCGJapvy8N3Q+4o7FwvquPJcnZ7RYy4g==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/reusify": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/reusify/-/reusify-1.1.0.tgz",
      "integrity": "sha512-g6QUff04oZpHs0eG5p83rFLhHeV00ug/Yf9nZM6fLeUrPguBTkTQOdpAWWspMh55TZfVQDPaN3NQJfbVRAxdIw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "iojs": ">=1.0.0",
        "node": ">=0.10.0"
      }
    },
    "node_modules/rimraf": {
      "version": "3.0.2",
      "resolved": "https://registry.npmjs.org/rimraf/-/rimraf-3.0.2.tgz",
      "integrity": "sha512-JZkJMZkAGFFPP2YqXZXPbMlMBgsxzE8ILs4lMIX/2o0L9UBw9O/Y3o6wFw/i9YLapcUJWwqbi3kdxIPdC62TIA==",
      "deprecated": "Rimraf versions prior to v4 are no longer supported",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "glob": "^7.1.3"
      },
      "bin": {
        "rimraf": "bin.js"
      },
      "funding": {
        "url": "https://github.com/sponsors/isaacs"
      }
    },
    "node_modules/rollup": {
      "version": "3.29.5",
      "resolved": "https://registry.npmjs.org/rollup/-/rollup-3.29.5.tgz",
      "integrity": "sha512-GVsDdsbJzzy4S/v3dqWPJ7EfvZJfCHiDqe80IyrF59LYuP+e6U1LJoUqeuqRbwAWoMNoXivMNeNAOf5E22VA1w==",
      "dev": true,
      "license": "MIT",
      "bin": {
        "rollup": "dist/bin/rollup"
      },
      "engines": {
        "node": ">=14.18.0",
        "npm": ">=8.0.0"
      },
      "optionalDependencies": {
        "fsevents": "~2.3.2"
      }
    },
    "node_modules/run-parallel": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/run-parallel/-/run-parallel-1.2.0.tgz",
      "integrity": "sha512-5l4VyZR86LZ/lDxZTR6jqL8AFE2S0IFLMP26AbjsLVADxHdhB/c0GUsH+y39UfCi3dzz8OlQuPmnaJOMoDHQBA==",
      "dev": true,
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/feross"
        },
        {
          "type": "patreon",
          "url": "https://www.patreon.com/feross"
        },
        {
          "type": "consulting",
          "url": "https://feross.org/support"
        }
      ],
      "license": "MIT",
      "dependencies": {
        "queue-microtask": "^1.2.2"
      }
    },
    "node_modules/safe-array-concat": {
      "version": "1.1.3",
      "resolved": "https://registry.npmjs.org/safe-array-concat/-/safe-array-concat-1.1.3.tgz",
      "integrity": "sha512-AURm5f0jYEOydBj7VQlVvDrjeFgthDdEF5H1dP+6mNpoXOMo1quQqJ4wvJDyRZ9+pO3kGWoOdmV08cSv2aJV6Q==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.8",
        "call-bound": "^1.0.2",
        "get-intrinsic": "^1.2.6",
        "has-symbols": "^1.1.0",
        "isarray": "^2.0.5"
      },
      "engines": {
        "node": ">=0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/safe-buffer": {
      "version": "5.2.1",
      "resolved": "https://registry.npmjs.org/safe-buffer/-/safe-buffer-5.2.1.tgz",
      "integrity": "sha512-rp3So07KcdmmKbGvgaNxQSJr7bGVSVk5S9Eq1F+ppbRo70+YeaDxkw5Dd8NPN+GD6bjnYm2VuPuCXmpuYvmCXQ==",
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/feross"
        },
        {
          "type": "patreon",
          "url": "https://www.patreon.com/feross"
        },
        {
          "type": "consulting",
          "url": "https://feross.org/support"
        }
      ],
      "license": "MIT"
    },
    "node_modules/safe-push-apply": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/safe-push-apply/-/safe-push-apply-1.0.0.tgz",
      "integrity": "sha512-iKE9w/Z7xCzUMIZqdBsp6pEQvwuEebH4vdpjcDWnyzaI6yl6O9FHvVpmGelvEHNsoY6wGblkxR6Zty/h00WiSA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "es-errors": "^1.3.0",
        "isarray": "^2.0.5"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/safe-regex-test": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/safe-regex-test/-/safe-regex-test-1.1.0.tgz",
      "integrity": "sha512-x/+Cz4YrimQxQccJf5mKEbIa1NzeCRNI5Ecl/ekmlYaampdNLPalVyIcCZNNH3MvmqBugV5TMYZXv0ljslUlaw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.2",
        "es-errors": "^1.3.0",
        "is-regex": "^1.2.1"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/safer-buffer": {
      "version": "2.1.2",
      "resolved": "https://registry.npmjs.org/safer-buffer/-/safer-buffer-2.1.2.tgz",
      "integrity": "sha512-YZo3K82SD7Riyi0E1EQPojLz7kpepnSQI9IyPbHHg1XXXevb5dJI7tpyN2ADxGcQbHG7vcyRHk0cbwqcQriUtg==",
      "license": "MIT"
    },
    "node_modules/scheduler": {
      "version": "0.23.2",
      "resolved": "https://registry.npmjs.org/scheduler/-/scheduler-0.23.2.tgz",
      "integrity": "sha512-UOShsPwz7NrMUqhR6t0hWjFduvOzbtv7toDH1/hIrfRNIDBnnBWd0CwJTGvTpngVlmwGCdP9/Zl/tVrDqcuYzQ==",
      "license": "MIT",
      "dependencies": {
        "loose-envify": "^1.1.0"
      }
    },
    "node_modules/semver": {
      "version": "6.3.1",
      "resolved": "https://registry.npmjs.org/semver/-/semver-6.3.1.tgz",
      "integrity": "sha512-BR7VvDCVHO+q2xBEWskxS6DJE1qRnb7DxzUrogb71CWoSficBxYsiAGd+Kl0mmq/MprG9yArRkyrQxTO6XjMzA==",
      "dev": true,
      "license": "ISC",
      "bin": {
        "semver": "bin/semver.js"
      }
    },
    "node_modules/send": {
      "version": "0.19.0",
      "resolved": "https://registry.npmjs.org/send/-/send-0.19.0.tgz",
      "integrity": "sha512-dW41u5VfLXu8SJh5bwRmyYUbAoSB3c9uQh6L8h/KtsFREPWpbX1lrljJo186Jc4nmci/sGUZ9a0a0J2zgfq2hw==",
      "license": "MIT",
      "dependencies": {
        "debug": "2.6.9",
        "depd": "2.0.0",
        "destroy": "1.2.0",
        "encodeurl": "~1.0.2",
        "escape-html": "~1.0.3",
        "etag": "~1.8.1",
        "fresh": "0.5.2",
        "http-errors": "2.0.0",
        "mime": "1.6.0",
        "ms": "2.1.3",
        "on-finished": "2.4.1",
        "range-parser": "~1.2.1",
        "statuses": "2.0.1"
      },
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/send/node_modules/debug": {
      "version": "2.6.9",
      "resolved": "https://registry.npmjs.org/debug/-/debug-2.6.9.tgz",
      "integrity": "sha512-bC7ElrdJaJnPbAP+1EotYvqZsb3ecl5wi6Bfi6BJTUcNowp6cvspg0jXznRTKDjm/E7AdgFBVeAPVMNcKGsHMA==",
      "license": "MIT",
      "dependencies": {
        "ms": "2.0.0"
      }
    },
    "node_modules/send/node_modules/debug/node_modules/ms": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.0.0.tgz",
      "integrity": "sha512-Tpp60P6IUJDTuOq/5Z8cdskzJujfwqfOTkrwIwj7IRISpnkJnT6SyJ4PCPnGMoFjC9ddhal5KVIYtAt97ix05A==",
      "license": "MIT"
    },
    "node_modules/send/node_modules/encodeurl": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/encodeurl/-/encodeurl-1.0.2.tgz",
      "integrity": "sha512-TPJXq8JqFaVYm2CWmPvnP2Iyo4ZSM7/QKcSmuMLDObfpH5fi7RUGmd/rTDf+rut/saiDiQEeVTNgAmJEdAOx0w==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/serve-static": {
      "version": "1.16.2",
      "resolved": "https://registry.npmjs.org/serve-static/-/serve-static-1.16.2.tgz",
      "integrity": "sha512-VqpjJZKadQB/PEbEwvFdO43Ax5dFBZ2UECszz8bQ7pi7wt//PWe1P6MN7eCnjsatYtBT6EuiClbjSWP2WrIoTw==",
      "license": "MIT",
      "dependencies": {
        "encodeurl": "~2.0.0",
        "escape-html": "~1.0.3",
        "parseurl": "~1.3.3",
        "send": "0.19.0"
      },
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/set-function-length": {
      "version": "1.2.2",
      "resolved": "https://registry.npmjs.org/set-function-length/-/set-function-length-1.2.2.tgz",
      "integrity": "sha512-pgRc4hJ4/sNjWCSS9AmnS40x3bNMDTknHgL5UaMBTMyJnU90EgWh1Rz+MC9eFu4BuN/UwZjKQuY/1v3rM7HMfg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "define-data-property": "^1.1.4",
        "es-errors": "^1.3.0",
        "function-bind": "^1.1.2",
        "get-intrinsic": "^1.2.4",
        "gopd": "^1.0.1",
        "has-property-descriptors": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/set-function-name": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/set-function-name/-/set-function-name-2.0.2.tgz",
      "integrity": "sha512-7PGFlmtwsEADb0WYyvCMa1t+yke6daIG4Wirafur5kcf+MhUnPms1UeR0CKQdTZD81yESwMHbtn+TR+dMviakQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "define-data-property": "^1.1.4",
        "es-errors": "^1.3.0",
        "functions-have-names": "^1.2.3",
        "has-property-descriptors": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/set-proto": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/set-proto/-/set-proto-1.0.0.tgz",
      "integrity": "sha512-RJRdvCo6IAnPdsvP/7m6bsQqNnn1FCBX5ZNtFL98MmFF/4xAIJTIg1YbHW5DC2W5SKZanrC6i4HsJqlajw/dZw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "dunder-proto": "^1.0.1",
        "es-errors": "^1.3.0",
        "es-object-atoms": "^1.0.0"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/setprototypeof": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/setprototypeof/-/setprototypeof-1.2.0.tgz",
      "integrity": "sha512-E5LDX7Wrp85Kil5bhZv46j8jOeboKq5JMmYM3gVGdGH8xFpPWXUMsNrlODCrkoxMEeNi/XZIwuRvY4XNwYMJpw==",
      "license": "ISC"
    },
    "node_modules/shebang-command": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/shebang-command/-/shebang-command-2.0.0.tgz",
      "integrity": "sha512-kHxr2zZpYtdmrN1qDjrrX/Z1rR1kG8Dx+gkpK1G4eXmvXswmcE1hTWBWYUzlraYw1/yZp6YuDY77YtvbN0dmDA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "shebang-regex": "^3.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/shebang-regex": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/shebang-regex/-/shebang-regex-3.0.0.tgz",
      "integrity": "sha512-7++dFhtcx3353uBaq8DDR4NuxBetBzC7ZQOhmTQInHEd6bSrXdiEyzCvG07Z44UYdLShWUyXt5M/yhz8ekcb1A==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/side-channel": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/side-channel/-/side-channel-1.1.0.tgz",
      "integrity": "sha512-ZX99e6tRweoUXqR+VBrslhda51Nh5MTQwou5tnUDgbtyM0dBgmhEDtWGP/xbKn6hqfPRHujUNwz5fy/wbbhnpw==",
      "license": "MIT",
      "dependencies": {
        "es-errors": "^1.3.0",
        "object-inspect": "^1.13.3",
        "side-channel-list": "^1.0.0",
        "side-channel-map": "^1.0.1",
        "side-channel-weakmap": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/side-channel-list": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/side-channel-list/-/side-channel-list-1.0.0.tgz",
      "integrity": "sha512-FCLHtRD/gnpCiCHEiJLOwdmFP+wzCmDEkc9y7NsYxeF4u7Btsn1ZuwgwJGxImImHicJArLP4R0yX4c2KCrMrTA==",
      "license": "MIT",
      "dependencies": {
        "es-errors": "^1.3.0",
        "object-inspect": "^1.13.3"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/side-channel-map": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/side-channel-map/-/side-channel-map-1.0.1.tgz",
      "integrity": "sha512-VCjCNfgMsby3tTdo02nbjtM/ewra6jPHmpThenkTYh8pG9ucZ/1P8So4u4FGBek/BjpOVsDCMoLA/iuBKIFXRA==",
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.2",
        "es-errors": "^1.3.0",
        "get-intrinsic": "^1.2.5",
        "object-inspect": "^1.13.3"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/side-channel-weakmap": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/side-channel-weakmap/-/side-channel-weakmap-1.0.2.tgz",
      "integrity": "sha512-WPS/HvHQTYnHisLo9McqBHOJk2FkHO/tlpvldyrnem4aeQp4hai3gythswg6p01oSoTl58rcpiFAjF2br2Ak2A==",
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.2",
        "es-errors": "^1.3.0",
        "get-intrinsic": "^1.2.5",
        "object-inspect": "^1.13.3",
        "side-channel-map": "^1.0.1"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/source-map-js": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/source-map-js/-/source-map-js-1.2.1.tgz",
      "integrity": "sha512-UXWMKhLOwVKb728IUtQPXxfYU+usdybtUrK/8uGE8CQMvrhOpwvzDBwj0QhSL7MQc7vIsISBG8VQ8+IDQxpfQA==",
      "dev": true,
      "license": "BSD-3-Clause",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/statuses": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/statuses/-/statuses-2.0.1.tgz",
      "integrity": "sha512-RwNA9Z/7PrK06rYLIzFMlaF+l73iwpzsqRIFgbMLbTcLD6cOao82TaWefPXQvB2fOC4AjuYSEndS7N/mTCbkdQ==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/stop-iteration-iterator": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/stop-iteration-iterator/-/stop-iteration-iterator-1.1.0.tgz",
      "integrity": "sha512-eLoXW/DHyl62zxY4SCaIgnRhuMr6ri4juEYARS8E6sCEqzKpOiE521Ucofdx+KnDZl5xmvGYaaKCk5FEOxJCoQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "es-errors": "^1.3.0",
        "internal-slot": "^1.1.0"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/string.prototype.matchall": {
      "version": "4.0.12",
      "resolved": "https://registry.npmjs.org/string.prototype.matchall/-/string.prototype.matchall-4.0.12.tgz",
      "integrity": "sha512-6CC9uyBL+/48dYizRf7H7VAYCMCNTBeM78x/VTUe9bFEaxBepPJDa1Ow99LqI/1yF7kuy7Q3cQsYMrcjGUcskA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.8",
        "call-bound": "^1.0.3",
        "define-properties": "^1.2.1",
        "es-abstract": "^1.23.6",
        "es-errors": "^1.3.0",
        "es-object-atoms": "^1.0.0",
        "get-intrinsic": "^1.2.6",
        "gopd": "^1.2.0",
        "has-symbols": "^1.1.0",
        "internal-slot": "^1.1.0",
        "regexp.prototype.flags": "^1.5.3",
        "set-function-name": "^2.0.2",
        "side-channel": "^1.1.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/string.prototype.repeat": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/string.prototype.repeat/-/string.prototype.repeat-1.0.0.tgz",
      "integrity": "sha512-0u/TldDbKD8bFCQ/4f5+mNRrXwZ8hg2w7ZR8wa16e8z9XpePWl3eGEcUD0OXpEH/VJH/2G3gjUtR3ZOiBe2S/w==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "define-properties": "^1.1.3",
        "es-abstract": "^1.17.5"
      }
    },
    "node_modules/string.prototype.trim": {
      "version": "1.2.10",
      "resolved": "https://registry.npmjs.org/string.prototype.trim/-/string.prototype.trim-1.2.10.tgz",
      "integrity": "sha512-Rs66F0P/1kedk5lyYyH9uBzuiI/kNRmwJAR9quK6VOtIpZ2G+hMZd+HQbbv25MgCA6gEffoMZYxlTod4WcdrKA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.8",
        "call-bound": "^1.0.2",
        "define-data-property": "^1.1.4",
        "define-properties": "^1.2.1",
        "es-abstract": "^1.23.5",
        "es-object-atoms": "^1.0.0",
        "has-property-descriptors": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/string.prototype.trimend": {
      "version": "1.0.9",
      "resolved": "https://registry.npmjs.org/string.prototype.trimend/-/string.prototype.trimend-1.0.9.tgz",
      "integrity": "sha512-G7Ok5C6E/j4SGfyLCloXTrngQIQU3PWtXGst3yM7Bea9FRURf1S42ZHlZZtsNque2FN2PoUhfZXYLNWwEr4dLQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.8",
        "call-bound": "^1.0.2",
        "define-properties": "^1.2.1",
        "es-object-atoms": "^1.0.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/string.prototype.trimstart": {
      "version": "1.0.8",
      "resolved": "https://registry.npmjs.org/string.prototype.trimstart/-/string.prototype.trimstart-1.0.8.tgz",
      "integrity": "sha512-UXSH262CSZY1tfu3G3Secr6uGLCFVPMhIqHjlgCUtCCcgihYc/xKs9djMTMUOb2j1mVSeU8EU6NWc/iQKU6Gfg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.7",
        "define-properties": "^1.2.1",
        "es-object-atoms": "^1.0.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/strip-ansi": {
      "version": "6.0.1",
      "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-6.0.1.tgz",
      "integrity": "sha512-Y38VPSHcqkFrCpFnQ9vuSXmquuv5oXOKpGeT6aGrr3o3Gc9AlVa6JBfUSOCnbxGGZF+/0ooI7KrPuUSztUdU5A==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "ansi-regex": "^5.0.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/strip-json-comments": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/strip-json-comments/-/strip-json-comments-3.1.1.tgz",
      "integrity": "sha512-6fPc+R4ihwqP6N/aIv2f1gMH8lOVtWQHoqC4yK6oSDVVocumAsfCqjkXnqiYMhmMwS/mEHLp7Vehlt3ql6lEig==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/supports-color": {
      "version": "7.2.0",
      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-7.2.0.tgz",
      "integrity": "sha512-qpCAvRl9stuOHveKsn7HncJRvv501qIacKzQlO/+Lwxc9+0q2wLyv4Dfvt80/DPn2pqOBsJdDiogXGR9+OvwRw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "has-flag": "^4.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/supports-preserve-symlinks-flag": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/supports-preserve-symlinks-flag/-/supports-preserve-symlinks-flag-1.0.0.tgz",
      "integrity": "sha512-ot0WnXS9fgdkgIcePe6RHNk1WA8+muPa6cSjeR3V8K27q9BB1rTE3R1p7Hv0z1ZyAc8s6Vvv8DIyWf681MAt0w==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/text-table": {
      "version": "0.2.0",
      "resolved": "https://registry.npmjs.org/text-table/-/text-table-0.2.0.tgz",
      "integrity": "sha512-N+8UisAXDGk8PFXP4HAzVR9nbfmVJ3zYLAWiTIoqC5v5isinhr+r5uaO8+7r3BMfuNIufIsA7RdpVgacC2cSpw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/toidentifier": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/toidentifier/-/toidentifier-1.0.1.tgz",
      "integrity": "sha512-o5sSPKEkg/DIQNmH43V0/uerLrpzVedkUh8tGNvaeXpfpuwjKenlSox/2O/BTlZUtEe+JG7s5YhEz608PlAHRA==",
      "license": "MIT",
      "engines": {
        "node": ">=0.6"
      }
    },
    "node_modules/type-check": {
      "version": "0.4.0",
      "resolved": "https://registry.npmjs.org/type-check/-/type-check-0.4.0.tgz",
      "integrity": "sha512-XleUoc9uwGXqjWwXaUTZAmzMcFZ5858QA2vvx1Ur5xIcixXIP+8LnFDgRplU30us6teqdlskFfu+ae4K79Ooew==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "prelude-ls": "^1.2.1"
      },
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/type-fest": {
      "version": "0.20.2",
      "resolved": "https://registry.npmjs.org/type-fest/-/type-fest-0.20.2.tgz",
      "integrity": "sha512-Ne+eE4r0/iWnpAxD852z3A+N0Bt5RN//NjJwRd2VFHEmrywxf5vsZlh4R6lixl6B+wz/8d+maTSAkN1FIkI3LQ==",
      "dev": true,
      "license": "(MIT OR CC0-1.0)",
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/type-is": {
      "version": "1.6.18",
      "resolved": "https://registry.npmjs.org/type-is/-/type-is-1.6.18.tgz",
      "integrity": "sha512-TkRKr9sUTxEH8MdfuCSP7VizJyzRNMjj2J2do2Jr3Kym598JVdEksuzPQCnlFPW4ky9Q+iA+ma9BGm06XQBy8g==",
      "license": "MIT",
      "dependencies": {
        "media-typer": "0.3.0",
        "mime-types": "~2.1.24"
      },
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/typed-array-buffer": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/typed-array-buffer/-/typed-array-buffer-1.0.3.tgz",
      "integrity": "sha512-nAYYwfY3qnzX30IkA6AQZjVbtK6duGontcQm1WSG1MD94YLqK0515GNApXkoxKOWMusVssAHWLh9SeaoefYFGw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.3",
        "es-errors": "^1.3.0",
        "is-typed-array": "^1.1.14"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/typed-array-byte-length": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/typed-array-byte-length/-/typed-array-byte-length-1.0.3.tgz",
      "integrity": "sha512-BaXgOuIxz8n8pIq3e7Atg/7s+DpiYrxn4vdot3w9KbnBhcRQq6o3xemQdIfynqSeXeDrF32x+WvfzmOjPiY9lg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.8",
        "for-each": "^0.3.3",
        "gopd": "^1.2.0",
        "has-proto": "^1.2.0",
        "is-typed-array": "^1.1.14"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/typed-array-byte-offset": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/typed-array-byte-offset/-/typed-array-byte-offset-1.0.4.tgz",
      "integrity": "sha512-bTlAFB/FBYMcuX81gbL4OcpH5PmlFHqlCCpAl8AlEzMz5k53oNDvN8p1PNOWLEmI2x4orp3raOFB51tv9X+MFQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "available-typed-arrays": "^1.0.7",
        "call-bind": "^1.0.8",
        "for-each": "^0.3.3",
        "gopd": "^1.2.0",
        "has-proto": "^1.2.0",
        "is-typed-array": "^1.1.15",
        "reflect.getprototypeof": "^1.0.9"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/typed-array-length": {
      "version": "1.0.7",
      "resolved": "https://registry.npmjs.org/typed-array-length/-/typed-array-length-1.0.7.tgz",
      "integrity": "sha512-3KS2b+kL7fsuk/eJZ7EQdnEmQoaho/r6KUef7hxvltNA5DR8NAUM+8wJMbJyZ4G9/7i3v5zPBIMN5aybAh2/Jg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.7",
        "for-each": "^0.3.3",
        "gopd": "^1.0.1",
        "is-typed-array": "^1.1.13",
        "possible-typed-array-names": "^1.0.0",
        "reflect.getprototypeof": "^1.0.6"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/uid-safe": {
      "version": "2.1.5",
      "resolved": "https://registry.npmjs.org/uid-safe/-/uid-safe-2.1.5.tgz",
      "integrity": "sha512-KPHm4VL5dDXKz01UuEd88Df+KzynaohSL9fBh096KWAxSKZQDI2uBrVqtvRM4rwrIrRRKsdLNML/lnaaVSRioA==",
      "license": "MIT",
      "dependencies": {
        "random-bytes": "~1.0.0"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/unbox-primitive": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/unbox-primitive/-/unbox-primitive-1.1.0.tgz",
      "integrity": "sha512-nWJ91DjeOkej/TA8pXQ3myruKpKEYgqvpw9lz4OPHj/NWFNluYrjbz9j01CJ8yKQd2g4jFoOkINCTW2I5LEEyw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.3",
        "has-bigints": "^1.0.2",
        "has-symbols": "^1.1.0",
        "which-boxed-primitive": "^1.1.1"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/unpipe": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/unpipe/-/unpipe-1.0.0.tgz",
      "integrity": "sha512-pjy2bYhSsufwWlKwPc+l3cN7+wuJlK6uz0YdJEOlQDbl6jo/YlPi4mb8agUkVC8BF7V8NuzeyPNqRksA3hztKQ==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/update-browserslist-db": {
      "version": "1.1.3",
      "resolved": "https://registry.npmjs.org/update-browserslist-db/-/update-browserslist-db-1.1.3.tgz",
      "integrity": "sha512-UxhIZQ+QInVdunkDAaiazvvT/+fXL5Osr0JZlJulepYu6Jd7qJtDZjlur0emRlT71EN3ScPoE7gvsuIKKNavKw==",
      "dev": true,
      "funding": [
        {
          "type": "opencollective",
          "url": "https://opencollective.com/browserslist"
        },
        {
          "type": "tidelift",
          "url": "https://tidelift.com/funding/github/npm/browserslist"
        },
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "license": "MIT",
      "dependencies": {
        "escalade": "^3.2.0",
        "picocolors": "^1.1.1"
      },
      "bin": {
        "update-browserslist-db": "cli.js"
      },
      "peerDependencies": {
        "browserslist": ">= 4.21.0"
      }
    },
    "node_modules/uri-js": {
      "version": "4.4.1",
      "resolved": "https://registry.npmjs.org/uri-js/-/uri-js-4.4.1.tgz",
      "integrity": "sha512-7rKUyy33Q1yc98pQ1DAmLtwX109F7TIfWlW1Ydo8Wl1ii1SeHieeh0HHfPeL2fMXK6z0s8ecKs9frCuLJvndBg==",
      "dev": true,
      "license": "BSD-2-Clause",
      "dependencies": {
        "punycode": "^2.1.0"
      }
    },
    "node_modules/utils-merge": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/utils-merge/-/utils-merge-1.0.1.tgz",
      "integrity": "sha512-pMZTvIkT1d+TFGvDOqodOclx0QWkkgi6Tdoa8gC8ffGAAqz9pzPTZWAybbsHHoED/ztMtkv/VoYTYyShUn81hA==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4.0"
      }
    },
    "node_modules/vary": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/vary/-/vary-1.1.2.tgz",
      "integrity": "sha512-BNGbWLfd0eUPabhkXUVm0j8uuvREyTh5ovRa/dyow/BqAbZJyC+5fU+IzQOzmAKzYqYRAISoRhdQr3eIZ/PXqg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/vite": {
      "version": "4.5.14",
      "resolved": "https://registry.npmjs.org/vite/-/vite-4.5.14.tgz",
      "integrity": "sha512-+v57oAaoYNnO3hIu5Z/tJRZjq5aHM2zDve9YZ8HngVHbhk66RStobhb1sqPMIPEleV6cNKYK4eGrAbE9Ulbl2g==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "esbuild": "^0.18.10",
        "postcss": "^8.4.27",
        "rollup": "^3.27.1"
      },
      "bin": {
        "vite": "bin/vite.js"
      },
      "engines": {
        "node": "^14.18.0 || >=16.0.0"
      },
      "funding": {
        "url": "https://github.com/vitejs/vite?sponsor=1"
      },
      "optionalDependencies": {
        "fsevents": "~2.3.2"
      },
      "peerDependencies": {
        "@types/node": ">= 14",
        "less": "*",
        "lightningcss": "^1.21.0",
        "sass": "*",
        "stylus": "*",
        "sugarss": "*",
        "terser": "^5.4.0"
      },
      "peerDependenciesMeta": {
        "@types/node": {
          "optional": true
        },
        "less": {
          "optional": true
        },
        "lightningcss": {
          "optional": true
        },
        "sass": {
          "optional": true
        },
        "stylus": {
          "optional": true
        },
        "sugarss": {
          "optional": true
        },
        "terser": {
          "optional": true
        }
      }
    },
    "node_modules/which": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/which/-/which-2.0.2.tgz",
      "integrity": "sha512-BLI3Tl1TW3Pvl70l3yq3Y64i+awpwXqsGBYWkkqMtnbXgrMD+yj7rhW0kuEDxzJaYXGjEW5ogapKNMEKNMjibA==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "isexe": "^2.0.0"
      },
      "bin": {
        "node-which": "bin/node-which"
      },
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/which-boxed-primitive": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/which-boxed-primitive/-/which-boxed-primitive-1.1.1.tgz",
      "integrity": "sha512-TbX3mj8n0odCBFVlY8AxkqcHASw3L60jIuF8jFP78az3C2YhmGvqbHBpAjTRH2/xqYunrJ9g1jSyjCjpoWzIAA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "is-bigint": "^1.1.0",
        "is-boolean-object": "^1.2.1",
        "is-number-object": "^1.1.1",
        "is-string": "^1.1.1",
        "is-symbol": "^1.1.1"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/which-builtin-type": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/which-builtin-type/-/which-builtin-type-1.2.1.tgz",
      "integrity": "sha512-6iBczoX+kDQ7a3+YJBnh3T+KZRxM/iYNPXicqk66/Qfm1b93iu+yOImkg0zHbj5LNOcNv1TEADiZ0xa34B4q6Q==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.2",
        "function.prototype.name": "^1.1.6",
        "has-tostringtag": "^1.0.2",
        "is-async-function": "^2.0.0",
        "is-date-object": "^1.1.0",
        "is-finalizationregistry": "^1.1.0",
        "is-generator-function": "^1.0.10",
        "is-regex": "^1.2.1",
        "is-weakref": "^1.0.2",
        "isarray": "^2.0.5",
        "which-boxed-primitive": "^1.1.0",
        "which-collection": "^1.0.2",
        "which-typed-array": "^1.1.16"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/which-collection": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/which-collection/-/which-collection-1.0.2.tgz",
      "integrity": "sha512-K4jVyjnBdgvc86Y6BkaLZEN933SwYOuBFkdmBu9ZfkcAbdVbpITnDmjvZ/aQjRXQrv5EPkTnD1s39GiiqbngCw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "is-map": "^2.0.3",
        "is-set": "^2.0.3",
        "is-weakmap": "^2.0.2",
        "is-weakset": "^2.0.3"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/which-typed-array": {
      "version": "1.1.19",
      "resolved": "https://registry.npmjs.org/which-typed-array/-/which-typed-array-1.1.19.tgz",
      "integrity": "sha512-rEvr90Bck4WZt9HHFC4DJMsjvu7x+r6bImz0/BrbWb7A2djJ8hnZMrWnHo9F8ssv0OMErasDhftrfROTyqSDrw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "available-typed-arrays": "^1.0.7",
        "call-bind": "^1.0.8",
        "call-bound": "^1.0.4",
        "for-each": "^0.3.5",
        "get-proto": "^1.0.1",
        "gopd": "^1.2.0",
        "has-tostringtag": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/word-wrap": {
      "version": "1.2.5",
      "resolved": "https://registry.npmjs.org/word-wrap/-/word-wrap-1.2.5.tgz",
      "integrity": "sha512-BN22B5eaMMI9UMtjrGd5g5eCYPpCPDUy0FJXbYsaT5zYxjFOckS53SQDE3pWkVoWpHXVb3BrYcEN4Twa55B5cA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/wrappy": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/wrappy/-/wrappy-1.0.2.tgz",
      "integrity": "sha512-l4Sp/DRseor9wL6EvV2+TuQn63dMkPjZ/sp9XkghTEbV9KlPS1xUsZ3u7/IQO4wxtcFB4bgpQPRcR3QCvezPcQ==",
      "dev": true,
      "license": "ISC"
    },
    "node_modules/yallist": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/yallist/-/yallist-3.1.1.tgz",
      "integrity": "sha512-a4UGQaWPH59mOXUYnAG2ewncQS4i4F43Tv3JoAM+s2VDAmS9NsK8GpDMLrCHPksFT7h3K6TOoUNn2pb7RoXx4g==",
      "dev": true,
      "license": "ISC"
    },
    "node_modules/yocto-queue": {
      "version": "0.1.0",
      "resolved": "https://registry.npmjs.org/yocto-queue/-/yocto-queue-0.1.0.tgz",
      "integrity": "sha512-rVksvsnNCdJ/ohGc6xgPwyN8eheCxsiLM8mxuE/t/mOVqJewPuO1miLpTHQiRgTKCLexL4MeAFVagts7HmNZ2Q==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    }
  }
}

==============================

üìÅ File: .\src\styles\components.css
------------------------------
üìÑ N·ªòI DUNG FILE:
==============================

==============================

üìÅ File: .\src\styles\globals.css
------------------------------
üìÑ N·ªòI DUNG FILE:
==============================
/* Global styles for React app */
.loading {
  position: relative;
}

.loading::after {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: rgba(255, 255, 255, 0.8);
  display: flex;
  justify-content: center;
  align-items: center;
  z-index: 1000;
}

.min-vh-100 {
  min-height: 100vh;
}

/* Alert container */
#alert-container {
  position: fixed;
  top: 20px;
  right: 20px;
  z-index: 1055;
  min-width: 300px;
}

/* Table enhancements */
.table-hover tbody tr:hover {
  background-color: rgba(0, 0, 0, 0.075);
}

/* Button groups */
.btn-group .btn {
  margin-right: 2px;
}

.btn-group .btn:last-child {
  margin-right: 0;
}

/* Form enhancements */
.is-invalid {
  border-color: #dc3545;
}

.is-valid {
  border-color: #198754;
}

/* Modal enhancements */
.modal-backdrop {
  backdrop-filter: blur(2px);
}

/* Work history entries */
.work-history-entry {
  background: #f8f9fa;
  border-left: 4px solid #007bff;
}

/* Recruitment table */
.recruitment-row.table-primary {
  background-color: rgba(13, 110, 253, 0.1) !important;
}

/* Loading spinner */
.spinner-border-sm {
  width: 1rem;
  height: 1rem;
}

/* Responsive adjustments */
@media (max-width: 768px) {
  .btn-group {
    flex-direction: column;
  }
  
  .btn-group .btn {
    margin-right: 0;
    margin-bottom: 2px;
  }
  
  .table-responsive {
    font-size: 0.875rem;
  }
}

==============================

3. TH·ªêNG K√ä T·ªîNG QUAN:
----------------------------------------
üìä T·ªïng s·ªë file code: 89
üìä File Python: 0
üìä File JavaScript/TypeScript: 83
üìä File kh√°c: 6
üìä T·ªïng s·ªë d√≤ng code: 41890

================================================================================
B√°o c√°o ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng v·ªõi ƒë·∫ßy ƒë·ªß n·ªôi dung code!
================================================================================
