================================================================================
                   PHÂN TÍCH CẤU TRÚC DỰ ÁN VÀ NỘI DUNG CODE
================================================================================

1. CẤU TRÚC THƯ MỤC:
----------------------------------------
hr-management-system/
├── .dockerignore
├── .env
├── .gitignore
├── cookies.txt
├── Dockerfile
├── Getcode.ipynb
├── index.html
├── package-lock.json
├── package.json
├── project_analysis.txt
├── Readme.md
├── vite.config.js
├── server/
│   ├── server.js
│   ├── config/
│   │   ├── database.js
│   │   └── lark-config.js
│   ├── controllers/
│   │   ├── attendanceController.js
│   │   ├── authController.js
│   │   ├── dashboardController.js
│   │   ├── employeeController.js
│   │   ├── positionController.js
│   │   ├── recruitmentController.js
│   │   └── storeController.js
│   ├── middleware/
│   │   ├── auth.js
│   │   └── validation.js
│   ├── routes/
│   │   ├── attendance.js
│   │   ├── auth.js
│   │   ├── dashboard.js
│   │   ├── employees.js
│   │   ├── masterData.js
│   │   └── recruitment.js
│   └── services/
│       ├── index.js
│       ├── lark-service-manager.js
│       ├── attendance/
│       │   ├── attendance-service.js
│       │   ├── attendance-validator.js
│       │   └── index.js
│       ├── auth/
│       │   ├── auth-service.js
│       │   ├── index.js
│       │   └── session-service.js
│       ├── core/
│       │   ├── base-service.js
│       │   ├── cache-service.js
│       │   ├── index.js
│       │   └── lark-client.js
│       ├── employees/
│       │   ├── employee-service.js
│       │   ├── employee-validator.js
│       │   ├── index.js
│       │   └── work-history-service.js
│       ├── master-data/
│       │   ├── index.js
│       │   ├── master-data-validator.js
│       │   ├── position-service.js
│       │   └── store-service.js
│       ├── recruitment/
│       │   ├── index.js
│       │   ├── recruitment-service.js
│       │   └── recruitment-validator.js
│       └── utils/
│           ├── error-handler.js
│           ├── index.js
│           ├── response-formatter.js
│           └── service-factory.js
└── src/
    ├── App.jsx
    ├── main.jsx
    ├── components/
    │   ├── attendance/
    │   │   ├── AttendanceFilters.jsx
    │   │   ├── AttendanceLogs.jsx
    │   │   ├── EmployeeHours.jsx
    │   │   └── LarkAttendanceEmbed.jsx
    │   ├── auth/
    │   │   ├── LoginForm.jsx
    │   │   └── ProtectedRoute.jsx
    │   ├── common/
    │   │   ├── Alert.jsx
    │   │   ├── Loading.jsx
    │   │   ├── Modal.jsx
    │   │   └── Table.jsx
    │   ├── dashboard/
    │   │   ├── Dashboard.jsx
    │   │   ├── HRDashboard.jsx
    │   │   └── StatsCard.jsx
    │   ├── employee/
    │   │   ├── AddWorkHistoryModal.jsx
    │   │   ├── EmployeeAddForm.jsx
    │   │   ├── EmployeeEditModal.jsx
    │   │   ├── EmployeeForm.jsx
    │   │   ├── EmployeeList.jsx
    │   │   ├── EmployeeTable.jsx
    │   │   ├── RecruitmentModal.jsx
    │   │   └── WorkHistoryModal.jsx
    │   ├── layout/
    │   │   ├── Layout.jsx
    │   │   └── ResponsiveNavigation.jsx
    │   └── masterdata/
    │       ├── PositionManager.jsx
    │       └── StoreManager.jsx
    ├── contexts/
    │   ├── AppContext.jsx
    │   ├── AuthContext.jsx
    │   └── NotificationContext.jsx
    ├── hooks/
    │   ├── useApi.js
    │   ├── useAttendance.js
    │   ├── useAuth.js
    │   ├── useEmployees.js
    │   └── useNotification.js
    ├── pages/
    │   ├── AttendanceLogsPage.jsx
    │   ├── EmployeeManagementPage.jsx
    │   ├── HRDashboardPage.jsx
    │   └── LoginPage.jsx
    ├── services/
    │   ├── api.js
    │   ├── auth.js
    │   └── employee.js
    ├── styles/
    │   ├── components.css
    │   ├── globals.css
    │   └── notifications.css
    └── utils/
        └── dateUtils.js

2. NỘI DUNG CHI TIẾT CÁC FILE:
----------------------------------------


==================== File: .\cookies.txt ====================

# Netscape HTTP Cookie File
# https://curl.se/docs/http-cookies.html
# This file was generated by libcurl! Edit at your own risk.


```


==================== File: .\index.html ====================

<!DOCTYPE html>
<html lang="vi">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>HR Management System - React</title>
</head>
<body>
  <div id="root"></div>
  <div id="alert-container"></div>
  <script type="module" src="/src/main.jsx"></script>
</body>
</html>

```


==================== File: .\package.json ====================

{
  "name": "hr-management-system-react",
  "version": "1.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "preview": "vite preview",
    "server": "node server/server.js"
  },
  "dependencies": {
    "@fortawesome/fontawesome-free": "^6.7.2",
    "axios": "^1.10.0",
    "bootstrap": "^5.3.7",
    "cors": "^2.8.5",
    "dotenv": "^16.6.1",
    "express": "^4.21.2",
    "express-session": "^1.18.2",
    "react": "^18.3.1",
    "react-dom": "^18.3.1",
    "react-router-dom": "^6.30.1"
  },
  "devDependencies": {
    "@types/react": "^18.0.28",
    "@types/react-dom": "^18.0.11",
    "@vitejs/plugin-react": "^3.1.0",
    "eslint": "^8.38.0",
    "eslint-plugin-react": "^7.32.2",
    "eslint-plugin-react-hooks": "^4.6.0",
    "eslint-plugin-react-refresh": "^0.3.4",
    "vite": "^4.5.14"
  }
}

```


==================== File: .\project_analysis.txt ====================


```


==================== File: .\Readme.md ====================

Backend (Node.js/Express)
Kiến trúc khuyến nghị:
Layered Architecture (Service - Controller - Route - Middleware)
Routes: Định nghĩa các endpoint, phân chia rõ theo module (vd: /employees, /attendance).
Controllers: Xử lý request/response, gọi sang service. Không chứa logic nghiệp vụ sâu.
Services: Chứa logic nghiệp vụ (business logic) và thao tác dữ liệu (gọi API, DB, Lark).
Utils & Validators: Kiểm tra, format, handler lỗi, validation input.
Models: (Nếu xài ORM/database thực), mô tả cấu trúc dữ liệu.
(Bạn đã có phân chia khá chuẩn, chỉ cần dọn lại các chỗ còn lẫn lộn, loại bỏ code cũ).
Các điểm cần lưu ý:
Không gọi trực tiếp từ route xuống service, luôn qua controller.
Chỉ để một nơi chịu trách nhiệm chính về validate (thường là middleware hoặc nằm trong services/utils).
Không để controllers vừa thao tác dữ liệu, vừa gọi nhiều tầng - 1 controller = 1 use-case nghiệp vụ.
Frontend (React + Context + Service Layer)
Kiến trúc khuyến nghị:
Component-based (Atomic/Domain)
Pages: Trang tương ứng route (/dashboard, /employee-management...)
Components: Thành phần tái sử dụng (Form, Table, Modal, Cards...)
Hooks: Quản lý logic dùng chung (fetch data, validate, notification...)
Contexts: Chứa state global (Auth, Notification).
Services layer: File JS quản lý toàn bộ gọi API, các hàm CRUD trả ra đúng format.
Styles: Để riêng, tránh style inline nhiều.
Ngoài ra:
Hạn chế để logic xử lý data trực tiếp trong component, hãy đẩy tối đa sang service/hook.
Tách biệt rõ các tầng: Page → Hook → Service → API (và Context nếu cần).
Kiểm tra toàn bộ các API bạn gọi trả đúng structure JSON (success, data, message...), đừng xử lý dữ liệu thẳng từ response chưa kiểm soát.
```


==================== File: .\vite.config.js ====================

// vite.config.js
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'

export default defineConfig({
  plugins: [react()],
  server: {
    host: '0.0.0.0',
    port: 3000,
    proxy: {
      '/api': {
        target: 'http://localhost:8080',
        changeOrigin: true,
      }
    }
  }
})

```


==================== File: .\server\server.js ====================

// server/server.js
import dotenv from 'dotenv';

// Configure dotenv FIRST
dotenv.config();

// Import các modules AFTER đã config dotenv
import express from 'express';
import cors from 'cors';
import session from 'express-session';
import path from 'path';
import { fileURLToPath } from 'url';

// ES6 module equivalent of __dirname
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Import service manager AFTER dotenv config
import larkServiceManager from './services/lark-service-manager.js';

// Import routes
import authRoutes from './routes/auth.js';
import employeeRoutes from './routes/employees.js';
import attendanceRoutes from './routes/attendance.js';
import recruitmentRoutes from './routes/recruitment.js';
import masterDataRoutes from './routes/masterData.js';
import dashboardRoutes from './routes/dashboard.js';

const app = express();
const PORT = process.env.PORT || 8080;

// Middleware
// Trong môi trường container, server và client sẽ cùng một nguồn gốc,
// nhưng cấu hình CORS này vẫn tốt cho môi trường phát triển local.
app.use(cors({
    origin: 'http://localhost:3000',
    credentials: true
}));

app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// Session configuration
app.use(session({
    secret: process.env.SESSION_SECRET || 'your-secret-key',
    resave: false,
    saveUninitialized: false,
    cookie: { secure: false, maxAge: 24 * 60 * 60 * 1000 } // Trong production nên set secure: true nếu dùng HTTPS
}));

// API Routes - Tất cả các route API của bạn vẫn giữ nguyên
app.use('/api/auth', authRoutes);
app.use('/api/employees', employeeRoutes);
app.use('/api/attendance', attendanceRoutes);
app.use('/api/recruitment', recruitmentRoutes);
app.use('/api/master-data', masterDataRoutes);
app.use('/api/dashboard', dashboardRoutes);

// Health check endpoint
app.get('/api/health', (req, res) => {
    res.json({
        status: 'OK',
        timestamp: new Date().toISOString(),
        services: {
            larkServiceManager: larkServiceManager.initialized
        }
    });
});

// ==============================================================================
// --- BẮT ĐẦU PHẦN THÊM MỚI ĐỂ PHỤC VỤ GIAO DIỆN REACT ---
// ==============================================================================

// 1. Phục vụ các file tĩnh (static files) từ thư mục build của React.
//    Dockerfile sẽ tạo thư mục 'dist' ở thư mục gốc của dự án.
const buildPath = path.join(__dirname, '..', 'dist');
app.use(express.static(buildPath));

// 2. Xử lý tất cả các request GET không phải là API.
//    Nó sẽ trả về file index.html của React.
//    Điều này rất quan trọng để React Router có thể xử lý routing ở phía client.
//    Ví dụ: khi bạn truy cập /employee-management, server sẽ trả về index.html,
//    sau đó React Router sẽ đọc URL và hiển thị đúng component.
app.get(/^(?!\/api).*/, (req, res) => {
    res.sendFile(path.join(buildPath, 'index.html'));
});

// Đoạn code này sẽ thay thế cho endpoint app.get('/') cũ của bạn.

// ==============================================================================
// --- KẾT THÚC PHẦN THÊM MỚI ---
// ==============================================================================


// Start server with proper initialization
app.listen(PORT, '::', async () => {
    console.log(`Server running on http://localhost:${PORT}`);
    
    try {
        await larkServiceManager.init();
        console.log('Server fully initialized and ready');
    } catch (error) {
        console.error('Service initialization failed:', error.message);
        console.log('Server running but services unavailable');
    }
});

```


==================== File: .\server\config\database.js ====================

// Demo users data (in production, use real database)
const users = {
    admin: {
        id: 'admin',
        username: 'admin',
        password: 'atino2025',
        role: 'admin',
        fullName: 'System Admin'
    },
    hr: {
        id: 'hr',
        username: 'hr',
        password: 'hr123',
        role: 'hr',
        fullName: 'HR Manager'
    },
    sales: {
        id: 'sales',
        username: 'sales',
        password: 'sales123',
        role: 'sales_manager',
        fullName: 'Sales Manager'
    },
    finance: {
        id: 'finance',
        username: 'finance',
        password: 'finance123',
        role: 'finance_manager',
        fullName: 'Finance Manager'
    },
    director: {
        id: 'director',
        username: 'director',
        password: 'director123',
        role: 'director',
        fullName: 'Director'
    }
};

const roles = {
    admin: 'Admin',
    hr: 'HR',
    sales_manager: 'Trưởng phòng kinh doanh',
    finance_manager: 'Trưởng phòng tài chính kế toán',
    director: 'Tổng giám đốc'
};

export {
    users,
    roles
};

```


==================== File: .\server\config\lark-config.js ====================

// server/config/lark-config.js
export const validateLarkConfig = () => {
    const requiredVars = [
        'LARK_APP_ID',
        'LARK_APP_SECRET', 
        'LARK_BASE_ID',
        'LARK_EMPLOYEE_TABLE_ID',
        'LARK_ATTENDANCE_TABLE_ID',
        'LARK_RECRUITMENT_TABLE_ID',
        'LARK_STORE_TABLE_ID',
        'LARK_POSITION_TABLE_ID',
        'LARK_WORK_HISTORY_TABLE_ID',
        'LARK_HOURS_SUMMARY_TABLE_ID'
    ];

    const missing = requiredVars.filter(key => !process.env[key]);
    
    if (missing.length > 0) {
        throw new Error(`❌ Missing Lark configuration: ${missing.join(', ')}`);
    }
    
    console.log('✅ Lark configuration validated');
};

export const larkConfig = {
    appId: process.env.LARK_APP_ID,
    appSecret: process.env.LARK_APP_SECRET,
    baseId: process.env.LARK_BASE_ID,
    tables: {
        employee: process.env.LARK_EMPLOYEE_TABLE_ID,
        attendance: process.env.LARK_ATTENDANCE_TABLE_ID,
        recruitment: process.env.LARK_RECRUITMENT_TABLE_ID,
        store: process.env.LARK_STORE_TABLE_ID,
        position: process.env.LARK_POSITION_TABLE_ID,
        workHistory: process.env.LARK_WORK_HISTORY_TABLE_ID,
        hoursSummary: process.env.LARK_HOURS_SUMMARY_TABLE_ID
    }
};

```


==================== File: .\server\controllers\attendanceController.js ====================

// server/controllers/attendanceController.js
import larkServiceManager from '../services/lark-service-manager.js';
import { formatResponse } from '../services/utils/response-formatter.js';


/* ======================= REGION: Lấy danh sách bản ghi chấm công ======================= */
/**
 * GET: Lấy danh sách các bản ghi chấm công (attendance logs) dựa trên filter từ query parameters.
 * - Trả về data bản ghi chấm công dạng list.
 * - Xử lý lỗi và gửi error message nếu có vấn đề.
 */
export const getAttendanceLogs = async (req, res) => {
    try {
        const filters = req.query;
        const attendanceService = larkServiceManager.getService('attendance');
        const logs = await attendanceService.getAttendanceLogs(filters);
        
        res.json(formatResponse(true, 'Lấy bản ghi chấm công thành công', logs));
    } catch (error) {
        console.error('❌ Controller: getAttendanceLogs failed:', error);
        res.status(500).json(formatResponse(
            false, 
            `Lỗi khi lấy bản ghi chấm công: ${error.message}`, 
            null, 
            'ATTENDANCE_LOAD_FAILED'
        ));
    }
};



/* ======================= REGION: Thêm bản ghi chấm công mới ======================= */
/**
 * POST: Thêm một bản ghi chấm công mới cho nhân viên.
 * - Nhận attendanceData từ body request (employeeId, type, position).
 * - Validate dữ liệu (đầy đủ, hợp lệ).
 * - Gọi service để lưu bản ghi mới vào hệ thống.
 * - Trả kết quả thành công/thất bại cho client.
 */
export const addAttendanceLog = async (req, res) => {
    try {
        const attendanceData = req.body;
        
        // Validate required fields
        if (!attendanceData.employeeId || !attendanceData.type || !attendanceData.position) {
            return res.status(400).json(formatResponse(
                false, 
                'Thiếu thông tin bắt buộc: employeeId, type (Checkin/Checkout), position', 
                null, 
                'VALIDATION_ERROR'
            ));
        }

        // Validate position values
        const validPositions = ['Nhân viên Bán hàng', 'Nhân viên Thu ngân', 'Nhân viên Tiếp đón', 'Nhân viên Mascot'];
        if (!validPositions.includes(attendanceData.position)) {
            return res.status(400).json(formatResponse(
                false, 
                `Vị trí không hợp lệ. Phải là một trong: ${validPositions.join(', ')}`, 
                null, 
                'INVALID_POSITION'
            ));
        }

        // Validate type values
        if (!['Checkin', 'Checkout'].includes(attendanceData.type)) {
            return res.status(400).json(formatResponse(
                false, 
                'Phân loại phải là "Checkin" hoặc "Checkout"', 
                null, 
                'INVALID_TYPE'
            ));
        }

        const attendanceService = larkServiceManager.getService('attendance');
        const result = await attendanceService.addAttendanceLog(attendanceData);
        
        res.json(formatResponse(true, 'Thêm bản ghi chấm công thành công', result));
    } catch (error) {
        console.error('❌ Controller: addAttendanceLog failed:', error);
        res.status(500).json(formatResponse(
            false, 
            `Lỗi khi thêm bản ghi chấm công: ${error.message}`, 
            null, 
            'ATTENDANCE_ADD_FAILED'
        ));
    }
};


/* ======================= REGION: Tính tổng giờ công tất cả nhân viên ======================= */
/**
 * GET: Lấy tổng hợp giờ công cho tất cả nhân viên (theo từng ngày).
 * - Lấy dữ liệu giờ công từ service.
 * - Gắn thêm thông tin nhân viên (tên, position, ...) vào mỗi record.
 * - Trả về list tổng hợp theo ngày + một số summary.
 */


export const getEmployeeHours = async (req, res) => {
    try {
        console.log('📊 Controller: Getting employee hours...');
        
        const attendanceService = larkServiceManager.getService('attendance');
        const employeeService = larkServiceManager.getService('employee');
        
        // Lấy dữ liệu giờ công từ service
        const employeeHours = await attendanceService.getEmployeeHours();
        
        // Lấy thông tin chi tiết nhân viên để hiển thị tên
        const employees = await employeeService.getAllEmployees();
        const employeeMap = new Map(employees.map(emp => [emp.employeeId, emp]));
        
        // Transform data để phù hợp với frontend
        const transformedData = [];
        
        for (const [employeeId, dailyHours] of Object.entries(employeeHours)) {
            const employee = employeeMap.get(employeeId);
            
            if (!employee) {
                console.warn(`⚠️ Employee not found: ${employeeId}`);
                continue;
            }
            
            // Thêm thông tin nhân viên vào từng ngày
            dailyHours.forEach(dayData => {
                transformedData.push({
                    employeeId: employeeId,
                    fullName: employee.fullName,
                    date: dayData.date,
                    position: dayData.position,
                    totalHours: dayData.totalHours,
                    warnings: dayData.warnings || [],
                    hasError: false
                });
            });
        }
        
        // Sắp xếp theo tên nhân viên và ngày
        transformedData.sort((a, b) => {
            if (a.fullName !== b.fullName) {
                return a.fullName.localeCompare(b.fullName);
            }
            return new Date(b.date) - new Date(a.date); // Ngày mới nhất trước
        });
        
        console.log(`✅ Controller: Processed ${transformedData.length} employee hour records`);
        
        res.json(formatResponse(true, 'Lấy tổng giờ công thành công', {
            employeeHours: transformedData,
            summary: {
                totalEmployees: new Set(transformedData.map(d => d.employeeId)).size,
                totalRecords: transformedData.length,
                recordsWithErrors: transformedData.filter(d => d.hasError).length,
                recordsWithWarnings: transformedData.filter(d => d.warnings.length > 0).length
            }
        }));
        
    } catch (error) {
        console.error('❌ Controller: getEmployeeHours failed:', error);
        res.status(500).json(formatResponse(
            false, 
            `Lỗi khi lấy tổng giờ công: ${error.message}`, 
            null, 
            'EMPLOYEE_HOURS_LOAD_FAILED'
        ));
    }
};


/* ======================= REGION: Thống kê tổng hợp chấm công ======================= */
/**
 * GET: Lấy thống kê tổng hợp chấm công trong khoảng thời gian (ngày bắt đầu/kết thúc).
 * - Tổng số lượt chấm công (totalLogs).
 * - Số nhân viên duy nhất (uniqueEmployees).
 * - Thống kê theo loại (Checkin/Checkout) và theo vị trí.
 */
export const getAttendanceStats = async (req, res) => {
    try {
        const { dateFrom, dateTo } = req.query;
        
        const attendanceService = larkServiceManager.getService('attendance');
        const filters = {};
        
        if (dateFrom) filters.dateFrom = dateFrom;
        if (dateTo) filters.dateTo = dateTo;
        
        const logs = await attendanceService.getAttendanceLogs(filters);
        
        // Tính toán thống kê
        const stats = {
            totalLogs: logs.length,
            uniqueEmployees: new Set(logs.map(log => log.employeeId)).size,
            logsByType: {
                checkin: logs.filter(log => log.type === 'Checkin').length,
                checkout: logs.filter(log => log.type === 'Checkout').length
            },
            logsByPosition: {}
        };
        
        // Đếm theo vị trí
        logs.forEach(log => {
            if (log.position) {
                stats.logsByPosition[log.position] = (stats.logsByPosition[log.position] || 0) + 1;
            }
        });
        
        res.json(formatResponse(true, 'Lấy thống kê chấm công thành công', stats));
        
    } catch (error) {
        console.error('❌ Controller: getAttendanceStats failed:', error);
        res.status(500).json(formatResponse(
            false, 
            `Lỗi khi lấy thống kê chấm công: ${error.message}`, 
            null, 
            'ATTENDANCE_STATS_FAILED'
        ));
    }
};




/* ======================= REGION: Giờ công chi tiết 1 nhân viên ======================= */
/**
 * GET: Lấy chi tiết giờ công của một nhân viên (theo employeeId và khoảng ngày).
 * - list bản ghi raw (logs).
 * - bảng tổng hợp giờ công từng ngày (dailyHours).
 * - tổng kết số ngày và tổng số giờ thực tế.
 */
export const getEmployeeDetailedHours = async (req, res) => {
    try {
        const { employeeId } = req.params;
        const { dateFrom, dateTo } = req.query;
        
        if (!employeeId) {
            return res.status(400).json(formatResponse(
                false, 
                'Employee ID là bắt buộc', 
                null, 
                'MISSING_EMPLOYEE_ID'
            ));
        }
        
        const attendanceService = larkServiceManager.getService('attendance');
        const filters = { employeeId };
        
        if (dateFrom) filters.dateFrom = dateFrom;
        if (dateTo) filters.dateTo = dateTo;
        
        const logs = await attendanceService.getAttendanceLogs(filters);
        const employeeHours = await attendanceService.getEmployeeHours();
        
        const employeeData = employeeHours[employeeId] || [];
        
        res.json(formatResponse(true, 'Lấy giờ công chi tiết thành công', {
            employeeId,
            logs,
            dailyHours: employeeData,
            summary: {
                totalDays: employeeData.length,
                totalHours: employeeData.reduce((sum, day) => {
                    // Extract numeric hours from formatted string like "8 giờ 30 phút"
                    const match = day.totalHours.match(/(\d+)\s*giờ(?:\s*(\d+)\s*phút)?/);
                    if (match) {
                        const hours = parseInt(match[1]) || 0;
                        const minutes = parseInt(match[2]) || 0;
                        return sum + hours + (minutes / 60);
                    }
                    return sum;
                }, 0)
            }
        }));
        
    } catch (error) {
        console.error('❌ Controller: getEmployeeDetailedHours failed:', error);
        res.status(500).json(formatResponse(
            false, 
            `Lỗi khi lấy giờ công chi tiết: ${error.message}`, 
            null, 
            'EMPLOYEE_DETAILED_HOURS_FAILED'
        ));
    }
};

```


==================== File: .\server\controllers\authController.js ====================

// server/controllers/authController.js
import larkServiceManager from '../services/lark-service-manager.js';
import { formatResponse } from '../services/utils/response-formatter.js';

/**
 * Xử lý đăng nhập người dùng.
 * Controller gọi đến AuthService để xác thực.
 * @route POST /api/auth/login
 */
const login = async (req, res) => {
    try {
        const { username, password } = req.body;
        const authService = larkServiceManager.getService('auth');

        // Gọi service để xử lý logic đăng nhập
        const result = await authService.login({ username, password });

        // Nếu service trả về thành công, tạo session
        if (result.success) {
            req.session.user = {
                id: result.user.id,
                username: result.user.username,
                role: result.user.role,
                fullName: result.user.fullName
            };
            
            // Trả về response thành công với thông tin user
            res.json(formatResponse(true, result.message, { user: req.session.user }));
        } else {
            // Trường hợp service xử lý nhưng không thành công (ít xảy ra với logic hiện tại)
             res.status(401).json(formatResponse(false, result.message, null, 'LOGIN_FAILED'));
        }

    } catch (error) {
        // Bắt lỗi do service throw (ví dụ: sai credentials)
        console.error('❌ Controller: login failed:', error.message);
        res.status(401).json(formatResponse(false, 'Tên đăng nhập hoặc mật khẩu không đúng.', null, 'INVALID_CREDENTIALS'));
    }
};

/**
 * Xử lý đăng xuất người dùng.
 * @route POST /api/auth/logout
 */
const logout = (req, res) => {
    req.session.destroy((err) => {
        if (err) {
            console.error('❌ Controller: logout failed:', err);
            return res.status(500).json(formatResponse(false, 'Không thể đăng xuất', null, 'LOGOUT_ERROR'));
        }
        res.clearCookie('connect.sid'); // Xóa cookie session phía client
        res.json(formatResponse(true, 'Đăng xuất thành công'));
    });
};

/**
 * Lấy thông tin profile của user đang đăng nhập.
 * @route GET /api/auth/profile
 */
const getProfile = (req, res) => {
    // req.user được gán từ middleware `authenticateUser`
    if (req.user) {
        res.json(formatResponse(true, 'Lấy thông tin người dùng thành công', { user: req.user }));
    } else {
        res.status(401).json(formatResponse(false, 'Người dùng chưa được xác thực', null, 'UNAUTHENTICATED'));
    }
};

export {
    login,
    logout,
    getProfile
};

```


==================== File: .\server\controllers\dashboardController.js ====================

// server/controllers/dashboardController.js (MỚI)
import larkServiceManager from '../services/lark-service-manager.js';
import { formatResponse } from '../services/utils/response-formatter.js';

export const getDashboardStats = async (req, res) => {
    try {
        console.log('📊 GETTING DASHBOARD STATS...');
        
        const employeeService = larkServiceManager.getService('employee');
        const attendanceService = larkServiceManager.getService('attendance');
        
        // ✅ Tách riêng, handle error độc lập
        let employeeStats = {
            totalEmployees: 0,
            activeEmployees: 0,
            error: null
        };
        
        let attendanceStats = {
            totalAttendanceLogs: 0,
            todayLogs: 0,
            error: null
        };
        
        // Get employee stats
        try {
            const employees = await employeeService.getAllEmployees();
            employeeStats = {
                totalEmployees: employees.length,
                activeEmployees: employees.filter(emp => emp.status === 'active').length,
                error: null
            };
        } catch (error) {
            console.error('❌ Employee stats error:', error);
            employeeStats.error = 'Không thể tải thống kê nhân viên';
        }
        
        // Get attendance stats
        try {
            const logs = await attendanceService.getAttendanceLogs();
            const today = new Date().toISOString().split('T')[0];
            attendanceStats = {
                totalAttendanceLogs: logs.length,
                todayLogs: logs.filter(log => log.date === today).length,
                error: null
            };
        } catch (error) {
            console.error('❌ Attendance stats error:', error);
            attendanceStats.error = 'Không thể tải thống kê chấm công';
        }
        
        const dashboardData = {
            employee: employeeStats,
            attendance: attendanceStats,
            timestamp: new Date().toISOString()
        };
        
        res.json(formatResponse(true, 'Lấy thống kê dashboard thành công', dashboardData));
        
    } catch (error) {
        console.error('❌ Dashboard stats error:', error);
        res.status(500).json(formatResponse(
            false, 
            `Lỗi hệ thống: ${error.message}`, 
            null, 
            'DASHBOARD_STATS_ERROR'
        ));
    }
};

```


==================== File: .\server\controllers\employeeController.js ====================

// server/controllers/employeeController.js
import larkServiceManager from '../services/lark-service-manager.js';
import { formatResponse } from '../services/utils/response-formatter.js';
import CacheService from '../services/core/cache-service.js';
class EmployeeController {


    /* ======================= REGION: Quản lý danh sách nhân viên ======================= */
    /**
     * GET: Lấy danh sách tất cả nhân viên trong hệ thống.
     * - Trả về array chứa thông tin cơ bản của tất cả nhân viên.
     * - Không có filter, pagination (lấy tất cả).
     * @route GET /api/employees
     */
    async getAllEmployees(req, res) {
        try {
            console.log('CONTROLLER: Yêu cầu lấy danh sách nhân viên...');
            const employeeService = larkServiceManager.getService('employee');
            const employees = await employeeService.getAllEmployees();

            res.json(formatResponse(true, 'Lấy danh sách nhân viên thành công', employees));
        } catch (error) {
            console.error('❌ CONTROLLER: Lỗi khi lấy danh sách nhân viên:', error);
            res.status(500).json(formatResponse(
                false, 
                `Không thể tải danh sách nhân viên: ${error.message}`, 
                null, 
                'EMPLOYEE_LOAD_FAILED'
            ));
        }
    }

    /* ======================= REGION: Thêm nhân viên mới ======================= */
    /**
     * POST: Thêm nhân viên mới kèm theo work history.
     * - Tự động generate employeeId từ tên + SĐT.
     * - Validate duplicate employeeId trước khi tạo.
     * - Validate work history data (ngày tháng, overlap, đề xuất tuyển dụng).
     * - Rollback toàn bộ nếu có lỗi trong quá trình tạo.
     * - Transaction-like behavior: tạo employee trước, sau đó tạo work histories.
     * @route POST /api/employees
     */

    async addEmployee(req, res) {
        let createdEmployee = null;
        let createdWorkHistories = [];
        
        try {
            const { fullName, phoneNumber, gender, bankAccount, bankName, workHistoryData } = req.body;
            const employeeId = larkServiceManager.getService('employee').generateEmployeeId(fullName, phoneNumber);
            
            // ✅ STEP 1: Kiểm tra duplicate trước khi tạo bất kỳ record nào
            const isDuplicate = await larkServiceManager.getService('employee').checkEmployeeIdExists(employeeId);
            if (isDuplicate) {
                return res.status(409).json(formatResponse(
                    false, 
                    'Mã nhân viên đã tồn tại trong hệ thống', 
                    null, 
                    'DUPLICATE_EMPLOYEE_ID'
                ));
            }

            // ✅ STEP 2: Validate work history TRƯỚC KHI tạo employee
            const recruitmentService = larkServiceManager.getService('recruitment');
            const workHistoryService = larkServiceManager.getService('workHistory');
            
            for (const historyEntry of workHistoryData) {
                // Validate work history trước
                const recruitmentDetails = await recruitmentService.getRequestByNo(historyEntry.requestNo);
                if (!recruitmentDetails) {
                    throw new Error(`Không tìm thấy đề xuất tuyển dụng với mã: ${historyEntry.requestNo}`);
                }
                
                // Validate ngày tháng
                workHistoryService.validateWorkHistoryFields({
                    fromDate: historyEntry.fromDate,
                    toDate: historyEntry.toDate,
                    hourlyRate: historyEntry.hourlyRate
                }, recruitmentDetails);
                
                // Validate date overlap
                await workHistoryService.validateWorkHistoryDateOverlap(
                    employeeId, 
                    historyEntry.requestNo, 
                    recruitmentService
                );
            }

            // ✅ STEP 3: Nếu validation pass, mới tạo employee
            const employeeData = {
                employeeId,
                fullName,
                phoneNumber,
                gender,
                bankAccount,
                bankName,
                recruitmentLink: workHistoryData.map(item => item.requestNo).join(', '),
                status: 'active',
                createdAt: new Date().toISOString()
            };

            console.log('✅ All validations passed, creating employee...');
            createdEmployee = await larkServiceManager.addEmployee(employeeData);
            
            // ✅ STEP 4: Tạo work history
            console.log('✅ Employee created, creating work histories...');
            const workHistoryResults = [];
            
            for (const historyEntry of workHistoryData) {
                try {
                    const workHistory = await larkServiceManager.addWorkHistory({
                        employeeId,
                        requestNo: historyEntry.requestNo,
                        fromDate: historyEntry.fromDate,
                        toDate: historyEntry.toDate,
                        hourlyRate: historyEntry.hourlyRate
                    });
                    workHistoryResults.push(workHistory);
                    createdWorkHistories.push(workHistory); // Track for rollback
                } catch (workHistoryError) {
                    console.error('❌ Work history creation failed:', workHistoryError);
                    
                    // ✅ ROLLBACK: Xóa employee và work histories đã tạo
                    await this.rollbackEmployeeCreation(createdEmployee.employee, createdWorkHistories);
                    
                    throw new Error(`Lỗi khi tạo work history: ${workHistoryError.message}`);
                }
            }

            console.log('✅ All work histories created successfully');

            res.json(formatResponse(true, 'Thêm nhân viên thành công', {
                employee: createdEmployee,
                workHistory: workHistoryResults
            }));
            
        } catch (error) {
            console.error('❌ Employee creation failed:', error);
            
            // ✅ ROLLBACK nếu có lỗi
            if (createdEmployee) {
                await this.rollbackEmployeeCreation(createdEmployee.employee, createdWorkHistories);
            }
            
            // Trả về lỗi cụ thể cho frontend
            res.status(500).json(formatResponse(
                false, 
                error.message || 'Lỗi hệ thống khi thêm nhân viên', 
                null, 
                'EMPLOYEE_ADD_FAILED'
            ));
        }
    }



    /**
     * UTILITY: Rollback khi tạo nhân viên thất bại.
     * - Xóa các work history records đã tạo thành công.
     * - Xóa employee record nếu đã tạo.
     * - Đảm bảo data consistency khi có lỗi xảy ra.
     */
    async rollbackEmployeeCreation(employee, createdWorkHistories) {
        console.log('🔄 ROLLBACK: Starting cleanup...');
        
        try {
            // Xóa work histories đã tạo
            for (const workHistory of createdWorkHistories) {
                if (workHistory && workHistory.larkResponse && workHistory.larkResponse.data) {
                    try {
                        await larkServiceManager.getService('workHistory').deleteWorkHistory(
                            workHistory.larkResponse.data.record.record_id
                        );
                        console.log('✅ ROLLBACK: Deleted work history', workHistory.larkResponse.data.record.record_id);
                    } catch (whDeleteError) {
                        console.error('❌ ROLLBACK: Failed to delete work history', whDeleteError);
                    }
                }
            }
            
            // Xóa employee
            if (employee && employee.larkResponse && employee.larkResponse.data) {
                try {
                    await larkServiceManager.getService('employee').deleteEmployee(
                        employee.larkResponse.data.record_id
                    );
                    console.log('✅ ROLLBACK: Deleted employee', employee.larkResponse.data.record_id);
                } catch (empDeleteError) {
                    console.error('❌ ROLLBACK: Failed to delete employee', empDeleteError);
                }
            }
            
            console.log('✅ ROLLBACK: Cleanup completed');
        } catch (rollbackError) {
            console.error('❌ ROLLBACK: Critical error during cleanup:', rollbackError);
        }
    }




    /* ======================= REGION: Cập nhật thông tin nhân viên ======================= */
    /**
     * PUT: Cập nhật thông tin nhân viên.
     * - Tự động tạo lại employeeId nếu tên/SĐT thay đổi.
     * - Nếu employeeId thay đổi, tự động cập nhật tất cả work history liên quan.
     * - Validate employee tồn tại trước khi update.
     * @route PUT /api/employees/:id
     */

    async updateEmployee(req, res) {
        try {
            const { id } = req.params;
            const { fullName, phoneNumber, gender, bankAccount, bankName, recruitmentLink, status } = req.body;
            
            // ✅ STEP 1: Lấy thông tin employee cũ trước khi update
            console.log('📋 Getting old employee data for comparison...');
            const oldEmployee = await larkServiceManager.getService('employee').getEmployeeById(id);
            if (!oldEmployee) {
                return res.status(404).json(formatResponse(
                    false, 
                    'Không tìm thấy nhân viên cần cập nhật', 
                    null, 
                    'EMPLOYEE_NOT_FOUND'
                ));
            }
            
            const oldEmployeeId = oldEmployee.employeeId;
            
            // ✅ STEP 2: Tạo mã nhân viên mới
            const newEmployeeId = larkServiceManager.getService('employee').generateEmployeeId(fullName, phoneNumber);
            
            console.log('🔍 Comparing employee IDs:', {
                old: oldEmployeeId,
                new: newEmployeeId,
                changed: oldEmployeeId !== newEmployeeId
            });
            
            // ✅ STEP 3: Update employee data
            const updatedData = {
                employeeId: newEmployeeId,
                fullName,
                phoneNumber,
                gender,
                bankAccount,
                bankName,
                recruitmentLink: recruitmentLink || '',
                status,
                updatedAt: new Date().toISOString()
            };
            
            const employee = await larkServiceManager.updateEmployee(id, updatedData);
            
            // ✅ STEP 4: Nếu mã nhân viên thay đổi, cập nhật work history
            if (oldEmployeeId !== newEmployeeId) {
                console.log('🔄 Employee ID changed, updating work history records...');
                await this.updateWorkHistoryEmployeeId(oldEmployeeId, newEmployeeId);
            }
            
            console.log('✅ Employee updated successfully, clearing cache...');
            
            res.json(formatResponse(true, 'Cập nhật nhân viên thành công', { employee }));
            
        } catch (error) {
            console.error('❌ Controller: updateEmployee failed:', error);
            res.status(500).json(formatResponse(
                false, 
                `Lỗi khi cập nhật nhân viên: ${error.message}`, 
                null, 
                'EMPLOYEE_UPDATE_FAILED'
            ));
        }
    }



    /**
     * UTILITY: Cập nhật employeeId trong các work history records.
     * - Được gọi khi employeeId thay đổi sau khi update employee.
     * - Tìm tất cả work history của employee cũ và cập nhật sang ID mới.
     * - Log kết quả nhưng không fail nếu một số records update lỗi.
     */

    async updateWorkHistoryEmployeeId(oldEmployeeId, newEmployeeId) {
        try {
            console.log(`🔄 Updating work history: ${oldEmployeeId} -> ${newEmployeeId}`);
            
            const workHistoryService = larkServiceManager.getService('workHistory');
            
            // Lấy tất cả work history của employee cũ
            const workHistories = await workHistoryService.getWorkHistoryByEmployee(oldEmployeeId);
            
            if (workHistories.length === 0) {
                console.log('ℹ️ No work history records to update');
                return;
            }
            
            console.log(`📋 Found ${workHistories.length} work history records to update`);
            
            // Cập nhật từng record
            const updatePromises = workHistories.map(async (workHistory) => {
                try {
                    await workHistoryService.updateWorkHistory(workHistory.id, {
                        employeeId: newEmployeeId,
                        requestNo: workHistory.requestNo,
                        fromDate: workHistory.fromDate,
                        toDate: workHistory.toDate,
                        hourlyRate: workHistory.hourlyRate
                    });
                    
                    console.log(`✅ Updated work history record: ${workHistory.id}`);
                    return { success: true, id: workHistory.id };
                } catch (updateError) {
                    console.error(`❌ Failed to update work history ${workHistory.id}:`, updateError);
                    return { success: false, id: workHistory.id, error: updateError.message };
                }
            });
            
            const results = await Promise.all(updatePromises);
            
            const successCount = results.filter(r => r.success).length;
            const failedCount = results.length - successCount;
            
            console.log(`📊 Work history update results: ${successCount} success, ${failedCount} failed`);
            
            if (failedCount > 0) {
                const failedIds = results.filter(r => !r.success).map(r => r.id);
                console.warn('⚠️ Some work history records failed to update:', failedIds);
                // Có thể log warning nhưng không throw error để không làm fail employee update
            }
            
        } catch (error) {
            console.error('❌ Critical error updating work history employee IDs:', error);
            // Log error nhưng không throw để không làm fail employee update
        }
    }


    /* ======================= REGION: Xóa nhân viên ======================= */
    /**
     * DELETE: Xóa nhân viên và tất cả work history liên quan.
     * - Validate employee tồn tại trước khi xóa.
     * - Xóa tất cả work history records trước.
     * - Chỉ xóa employee sau khi đã xóa hết work history thành công.
     * - Fail nếu không thể xóa hết work history (để đảm bảo data consistency).
     * @route DELETE /api/employees/:id
     */

    async deleteEmployee(req, res) {
        try {
            const { id } = req.params;
            
            // STEP 1: Lấy thông tin employee trước khi xóa
            console.log(`🔍 Getting employee info before deletion: ${id}`);
            const employee = await larkServiceManager.getService('employee').getEmployeeById(id);
            
            if (!employee) {
                return res.status(404).json(formatResponse(
                    false, 
                    'Không tìm thấy nhân viên cần xóa', 
                    null, 
                    'EMPLOYEE_NOT_FOUND'
                ));
            }
            
            const employeeId = employee.employeeId;
            console.log(`👤 Employee to delete: ${employee.fullName} (${employeeId})`);
            
            // STEP 2: Lấy danh sách work history cần xóa
            const workHistoryService = larkServiceManager.getService('workHistory');
            const workHistories = await workHistoryService.getWorkHistoryByEmployee(employeeId);
            
            console.log(`📋 Found ${workHistories.length} work history records to delete`);
            
            // STEP 3: Xóa tất cả work history trước
            const deleteWorkHistoryPromises = workHistories.map(async (wh) => {
                try {
                    await workHistoryService.deleteWorkHistory(wh.id);
                    console.log(`✅ Deleted work history: ${wh.id} (${wh.requestNo})`);
                    return { success: true, id: wh.id };
                } catch (error) {
                    console.error(`❌ Failed to delete work history ${wh.id}:`, error);
                    return { success: false, id: wh.id, error: error.message };
                }
            });
            
            const workHistoryResults = await Promise.all(deleteWorkHistoryPromises);
            const failedDeletions = workHistoryResults.filter(r => !r.success);
            
            if (failedDeletions.length > 0) {
                console.error(`❌ Failed to delete ${failedDeletions.length} work history records`);
                return res.status(500).json(formatResponse(
                    false,
                    `Không thể xóa hoàn toàn dữ liệu. ${failedDeletions.length} work history records failed to delete.`,
                    { failedDeletions },
                    'WORK_HISTORY_DELETE_FAILED'
                ));
            }
            
            // STEP 4: Xóa employee sau khi đã xóa hết work history
            console.log(`🗑️ All work histories deleted successfully. Now deleting employee...`);
            await larkServiceManager.deleteEmployee(id);
            
            console.log(`✅ Successfully deleted employee ${employee.fullName} and ${workHistories.length} work history records`);
            
            res.json(formatResponse(
                true, 
                `Xóa nhân viên "${employee.fullName}" và ${workHistories.length} bản ghi lịch sử công việc thành công`,
                {
                    deletedEmployee: employee.fullName,
                    deletedWorkHistories: workHistories.length
                }
            ));
            
        } catch (error) {
            console.error('❌ Controller: deleteEmployee failed:', error);
            res.status(500).json(formatResponse(
                false, 
                `Lỗi khi xóa nhân viên: ${error.message}`, 
                null, 
                'EMPLOYEE_DELETE_FAILED'
            ));
        }
    }



    /**
     * Search employees
     * @route GET /api/employees/search
     */
    async searchEmployees(req, res) {
        try {
            const { q } = req.query;
            const employees = await larkServiceManager.searchEmployees(q);
            res.json(formatResponse(true, 'Tìm kiếm thành công', employees));
        } catch (error) {
            console.error('❌ Controller: searchEmployees failed:', error);
            res.status(500).json(formatResponse(
                false, 
                `Lỗi khi tìm kiếm nhân viên: ${error.message}`, 
                null, 
                'EMPLOYEE_SEARCH_FAILED'
            ));
        }
    }

    /**
     * Get employee work history
     * @route GET /api/employees/:employeeId/work-history
     */
    async getEmployeeWorkHistory(req, res) {
        try {
            const { employeeId } = req.params;
            const workHistory = await larkServiceManager.getWorkHistoryByEmployee(employeeId);
            res.json(formatResponse(true, 'Lấy lịch sử làm việc thành công', workHistory));
        } catch (error) {
            console.error('❌ Controller: getEmployeeWorkHistory failed:', error);
            res.status(500).json(formatResponse(
                false, 
                `Lỗi khi lấy lịch sử làm việc: ${error.message}`, 
                null, 
                'WORK_HISTORY_LOAD_FAILED'
            ));
        }
    }

    /**
     * Add work history for employee
     * @route POST /api/employees/work-history
     */
    async addWorkHistory(req, res) {
        try {
            
            // ✅ CẬP NHẬT: Nhận thêm các trường mới từ request body
            const { employeeId, requestNo, fromDate, toDate, hourlyRate } = req.body;

            CacheService.clear();

            if (!employeeId || !requestNo) {
                return res.status(400).json(formatResponse(
                    false, 
                    'Thiếu thông tin bắt buộc: employeeId và requestNo', 
                    null, 
                    'VALIDATION_ERROR'
                ));
            }
            
            // ✅ CẬP NHẬT: Truyền tất cả các trường vào addWorkHistory
            const workHistory = await larkServiceManager.addWorkHistory({
                employeeId,
                requestNo,
                fromDate,      // ✅ THÊM
                toDate,        // ✅ THÊM
                hourlyRate     // ✅ THÊM
            });
            
            res.json(formatResponse(true, 'Thêm work history thành công', { workHistory }));
            
        } catch (error) {
            console.error('❌ Controller: addWorkHistory failed:', error);

            // ✅ CẬP NHẬT: Xử lý các loại lỗi cụ thể từ validation mới
            if (error.message.includes('bị trùng với lịch sử làm việc cũ')) {
                return res.status(409).json(formatResponse(
                    false,
                    error.message,
                    null,
                    'DATE_OVERLAP_CONFLICT'
                ));
            }

            if (error.message.includes('phải nằm trong khoảng ngày của đề xuất tuyển dụng')) {
                return res.status(400).json(formatResponse(
                    false,
                    error.message,
                    null,
                    'INVALID_DATE_RANGE'
                ));
            }

            if (error.message.includes('Từ ngày và Đến ngày là bắt buộc') || 
                error.message.includes('Đến ngày phải lớn hơn hoặc bằng Từ ngày')) {
                return res.status(400).json(formatResponse(
                    false,
                    error.message,
                    null,
                    'VALIDATION_ERROR'
                ));
            }

            res.status(500).json(formatResponse(
                false, 
                `Lỗi khi thêm work history: ${error.message}`, 
                null, 
                'WORK_HISTORY_ADD_FAILED'
            ));
        }
    }

    // ✅ THÊM MỚI: Update work history
    /**
     * Update work history entry
     * @route PUT /api/employees/work-history/:id
     */
    async updateWorkHistory(req, res) {
        try {
            const { id } = req.params;
            const { employeeId, requestNo, fromDate, toDate, hourlyRate } = req.body;
            
            if (!employeeId || !requestNo) {
                return res.status(400).json(formatResponse(
                    false, 
                    'Thiếu thông tin bắt buộc: employeeId và requestNo', 
                    null, 
                    'VALIDATION_ERROR'
                ));
            }
            
            console.log(`📝 CONTROLLER: Updating work history ID: ${id}...`);
            
            const workHistoryService = larkServiceManager.getService('workHistory');
            const updatedWorkHistory = await workHistoryService.updateWorkHistory(id, {
                employeeId,
                requestNo,
                fromDate,
                toDate,
                hourlyRate
            });
            
            console.log('✅ CONTROLLER: Work history updated successfully');
            
            res.json(formatResponse(true, 'Cập nhật lịch sử công việc thành công', { workHistory: updatedWorkHistory }));
            
        } catch (error) {
            console.error('❌ Controller: updateWorkHistory failed:', error);

            // Xử lý các loại lỗi cụ thể
            if (error.message.includes('bị trùng với lịch sử làm việc cũ')) {
                return res.status(409).json(formatResponse(
                    false,
                    error.message,
                    null,
                    'DATE_OVERLAP_CONFLICT'
                ));
            }

            if (error.message.includes('phải nằm trong khoảng ngày của đề xuất tuyển dụng')) {
                return res.status(400).json(formatResponse(
                    false,
                    error.message,
                    null,
                    'INVALID_DATE_RANGE'
                ));
            }

            if (error.message.includes('Từ ngày và Đến ngày là bắt buộc') || 
                error.message.includes('Đến ngày phải lớn hơn hoặc bằng Từ ngày')) {
                return res.status(400).json(formatResponse(
                    false,
                    error.message,
                    null,
                    'VALIDATION_ERROR'
                ));
            }

            res.status(500).json(formatResponse(
                false, 
                `Lỗi khi cập nhật work history: ${error.message}`, 
                null, 
                'WORK_HISTORY_UPDATE_FAILED'
            ));
        }
    }

    // ✅ THÊM MỚI: Delete work history
    /**
     * Delete work history entry
     * @route DELETE /api/employees/work-history/:id
     */
    async deleteWorkHistory(req, res) {
        try {
            const { id } = req.params;
            
            console.log(`🗑️ CONTROLLER: Deleting work history ID: ${id}...`);
            
            const workHistoryService = larkServiceManager.getService('workHistory');
            await workHistoryService.deleteWorkHistory(id);
            
            console.log('✅ CONTROLLER: Work history deleted successfully');
            
            res.json(formatResponse(true, 'Xóa lịch sử công việc thành công'));
            
        } catch (error) {
            console.error('❌ Controller: deleteWorkHistory failed:', error);
            res.status(500).json(formatResponse(
                false, 
                `Lỗi khi xóa work history: ${error.message}`, 
                null, 
                'WORK_HISTORY_DELETE_FAILED'
            ));
        }
    }
}

// Export instance methods
const employeeController = new EmployeeController();

export const getAllEmployees = employeeController.getAllEmployees.bind(employeeController);
export const addEmployee = employeeController.addEmployee.bind(employeeController);
export const updateEmployee = employeeController.updateEmployee.bind(employeeController);
export const deleteEmployee = employeeController.deleteEmployee.bind(employeeController);
export const searchEmployees = employeeController.searchEmployees.bind(employeeController);
export const getEmployeeWorkHistory = employeeController.getEmployeeWorkHistory.bind(employeeController);
export const addWorkHistory = employeeController.addWorkHistory.bind(employeeController);
// ✅ THÊM MỚI: Export 2 methods mới
export const updateWorkHistory = employeeController.updateWorkHistory.bind(employeeController);
export const deleteWorkHistory = employeeController.deleteWorkHistory.bind(employeeController);

```


==================== File: .\server\controllers\positionController.js ====================

// server/controllers/positionController.js
import larkServiceManager from '../services/lark-service-manager.js';
import { formatResponse } from '../services/utils/response-formatter.js';

// ==================== POSITION MANAGEMENT ====================
export const getPositions = async (req, res) => {
    try {
        const positions = await larkServiceManager.getAllPositions();
        res.json(formatResponse(true, 'Lấy danh sách vị trí thành công', positions));
    } catch (error) {
        console.error('❌ Controller: getPositions failed:', error);
        res.status(500).json(formatResponse(false, `Lỗi khi tải danh sách vị trí: ${error.message}`, null, 'POSITION_LOAD_FAILED'));
    }
};

export const addPosition = async (req, res) => {
    try {
        const { positionName, description } = req.body;
        // (Validation sẽ được thêm vào ở bước sau)
        const position = {
            positionName,
            description: description || '',
            status: 'active',
            createdAt: new Date().toISOString()
        };
        const result = await larkServiceManager.addPosition(position);
        res.json(formatResponse(true, 'Thêm vị trí thành công', { position: result }));
    } catch (error) {
        console.error('❌ Controller: addPosition failed:', error);
        res.status(500).json(formatResponse(false, `Lỗi khi thêm vị trí: ${error.message}`, null, 'POSITION_ADD_FAILED'));
    }
};

export const updatePosition = async (req, res) => {
    try {
        const { id } = req.params;
        const updatedData = { ...req.body, updatedAt: new Date().toISOString() };
        const result = await larkServiceManager.updatePosition(id, updatedData);
        res.json(formatResponse(true, 'Cập nhật vị trí thành công', { position: result }));
    } catch (error) {
        console.error('❌ Controller: updatePosition failed:', error);
        res.status(500).json(formatResponse(false, `Lỗi khi cập nhật vị trí: ${error.message}`, null, 'POSITION_UPDATE_FAILED'));
    }
};

export const deletePosition = async (req, res) => {
    try {
        const { id } = req.params;
        await larkServiceManager.deletePosition(id);
        res.json(formatResponse(true, 'Xóa vị trí thành công'));
    } catch (error) {
        console.error('❌ Controller: deletePosition failed:', error);
        res.status(500).json(formatResponse(false, `Lỗi khi xóa vị trí: ${error.message}`, null, 'POSITION_DELETE_FAILED'));
    }
};

```


==================== File: .\server\controllers\recruitmentController.js ====================

import larkServiceManager from '../services/lark-service-manager.js';
import { formatResponse } from '../services/utils/response-formatter.js';
import CacheService from '../services/core/cache-service.js';


export const getRecruitmentRequests = async (req, res) => {
    try {
        const filters = req.query;
        const recruitmentService = larkServiceManager.getService('recruitment');
        const requests = await recruitmentService.getRecruitmentRequests(filters);

        res.json(formatResponse(true, 'Lấy danh sách đề xuất thành công', requests));
    } catch (error) {
        console.error('❌ Controller: getRecruitmentRequests failed:', error);
        res.status(500).json(formatResponse(
            false, 
            `Lỗi khi lấy danh sách đề xuất: ${error.message}`, 
            null, 
            'RECRUITMENT_LOAD_FAILED'
        ));
    }
};

export const getRecruitmentHoursSummary = async (req, res) => {
    try {
        console.log('📊 Controller: Getting recruitment hours summary...');
        
        // ✅ SỬA: Luôn clear cache để đảm bảo realtime data
        console.log('🧹 Clearing cache for realtime data...');
        CacheService.delete('hours_summary_table_data');
        CacheService.delete('work_history_all');
        CacheService.delete('recruitment_requests_{}'); // Clear recruitment cache nếu có
        
        const recruitmentService = larkServiceManager.getService('recruitment');
        const hoursSummary = await recruitmentService.getRecruitmentHoursSummary();

        // ✅ THÊM: Log để debug
        console.log(`✅ Controller: Retrieved ${hoursSummary.length} recruitment hour summaries`);

        res.json(formatResponse(true, 'Lấy tổng hợp giờ công theo tuyển dụng thành công', {
            summary: hoursSummary,
            totalRequests: hoursSummary.length,
            totalEmployees: hoursSummary.reduce((sum, req) => sum + req.totalEmployees, 0),
            totalHours: hoursSummary.reduce((sum, req) => sum + req.totalHoursNumeric, 0),
            timestamp: new Date().toISOString() // ✅ THÊM: Timestamp để track khi nào data được load
        }));
    } catch (error) {
        console.error('❌ Controller: getRecruitmentHoursSummary failed:', error);
        res.status(500).json(formatResponse(
            false, 
            `Lỗi khi lấy tổng hợp giờ công: ${error.message}`, 
            null, 
            'RECRUITMENT_HOURS_LOAD_FAILED'
        ));
    }
};



export const getDetailedHoursForRequest = async (req, res) => {
    try {
        const { requestNo } = req.params;
        
        console.log(`📊 Getting detailed hours for request: ${requestNo}`);
        
        const recruitmentService = larkServiceManager.getService('recruitment');
        
        // ✅ THÊM: Lấy cả thông tin lương
        const detailedRecords = await recruitmentService.getDetailedHoursForRequest(requestNo);
        
        // ✅ THÊM: Lấy thông tin lương từ salary map
        const mapsResult = await recruitmentService.getEmployeeHoursFromSummaryTable();
        const employeeSalaryMap = mapsResult.salaryMap;
        const employeeHourlyRateMap = mapsResult.hourlyRateMap;
        
        // ✅ THÊM: Enriched data với thông tin lương
        const enrichedRecords = detailedRecords.map(record => ({
            ...record,
            hourlyRate: employeeHourlyRateMap.get(record.employeeId) || 0,
            totalSalary: (record.totalHours || 0) * (employeeHourlyRateMap.get(record.employeeId) || 0)
        }));
        
        res.json(formatResponse(true, 'Lấy chi tiết giờ công thành công', {
            requestNo,
            records: enrichedRecords, // ✅ SỬA: Trả về enriched data
            totalRecords: enrichedRecords.length
        }));
        
    } catch (error) {
        console.error('❌ Controller: getDetailedHoursForRequest failed:', error);
        res.status(500).json(formatResponse(
            false, 
            `Lỗi khi lấy chi tiết giờ công: ${error.message}`, 
            null, 
            'DETAILED_HOURS_LOAD_FAILED'
        ));
    }
};


```


==================== File: .\server\controllers\storeController.js ====================

// server/controllers/storeController.js
import larkServiceManager from '../services/lark-service-manager.js';
import { formatResponse } from '../services/utils/response-formatter.js';

// ==================== STORE MANAGEMENT ====================
export const getStores = async (req, res) => {
    try {
        const stores = await larkServiceManager.getAllStores();
        res.json(formatResponse(true, 'Lấy danh sách cửa hàng thành công', stores));
    } catch (error) {
        console.error('❌ Controller: getStores failed:', error);
        res.status(500).json(formatResponse(false, `Lỗi khi tải danh sách cửa hàng: ${error.message}`, null, 'STORE_LOAD_FAILED'));
    }
};

export const addStore = async (req, res) => {
    try {
        const { storeName, address } = req.body;
        // (Validation sẽ được thêm vào ở bước sau)
        const store = {
            storeName,
            address,
            status: 'active',
            createdAt: new Date().toISOString()
        };
        const result = await larkServiceManager.addStore(store);
        res.json(formatResponse(true, 'Thêm cửa hàng thành công', { store: result }));
    } catch (error) {
        console.error('❌ Controller: addStore failed:', error);
        res.status(500).json(formatResponse(false, `Lỗi khi thêm cửa hàng: ${error.message}`, null, 'STORE_ADD_FAILED'));
    }
};

export const updateStore = async (req, res) => {
    try {
        const { id } = req.params;
        const updatedData = { ...req.body, updatedAt: new Date().toISOString() };
        const result = await larkServiceManager.updateStore(id, updatedData);
        res.json(formatResponse(true, 'Cập nhật cửa hàng thành công', { store: result }));
    } catch (error) {
        console.error('❌ Controller: updateStore failed:', error);
        res.status(500).json(formatResponse(false, `Lỗi khi cập nhật cửa hàng: ${error.message}`, null, 'STORE_UPDATE_FAILED'));
    }
};

export const deleteStore = async (req, res) => {
    try {
        const { id } = req.params;
        await larkServiceManager.deleteStore(id);
        res.json(formatResponse(true, 'Xóa cửa hàng thành công'));
    } catch (error) {
        console.error('❌ Controller: deleteStore failed:', error);
        res.status(500).json(formatResponse(false, `Lỗi khi xóa cửa hàng: ${error.message}`, null, 'STORE_DELETE_FAILED'));
    }
};

```


==================== File: .\server\middleware\auth.js ====================

const authenticateUser = (req, res, next) => {
    if (!req.session || !req.session.user) {
        return res.status(401).json({ error: 'Unauthorized' });
    }
    req.user = req.session.user;
    next();
};

const authorizeRoles = (...roles) => {
    return (req, res, next) => {
        if (!req.user || !roles.includes(req.user.role)) {
            return res.status(403).json({ error: 'Forbidden' });
        }
        next();
    };
};

export {
    authenticateUser,
    authorizeRoles
};

```


==================== File: .\server\middleware\validation.js ====================

// server/middleware/validation.js
import { formatResponse } from '../services/utils/response-formatter.js';
import { EmployeeValidator } from '../services/employees/index.js';
import { MasterDataValidator } from '../services/master-data/index.js';

class ValidationMiddleware {
    // Middleware để validate dữ liệu nhân viên mới
    static validateAddEmployee(req, res, next) {
    // ✅ Tạo employeeData giống logic trong controller
    const { fullName, phoneNumber, gender, bankAccount, bankName, workHistoryData } = req.body;
    const hourlyRate = (workHistoryData && workHistoryData[0]?.hourlyRate) || 0;
    
    const employeeDataForValidation = {
        fullName,
        phoneNumber, 
        gender,
        hourlyRate: parseFloat(hourlyRate),
        bankAccount,
        bankName
    };

    // Validate employee data với data đã xử lý
    const employeeErrors = EmployeeValidator.validateEmployeeData(employeeDataForValidation);
    if (employeeErrors.length > 0) {
        return res.status(400).json(formatResponse(false, employeeErrors.join(', '), null, 'VALIDATION_ERROR'));
    }

    // Validate work history
    const workHistoryErrors = EmployeeValidator.validateWorkHistoryData(req.body.workHistoryData || []);
    if (workHistoryErrors.length > 0) {
        return res.status(400).json(formatResponse(false, workHistoryErrors.join(', '), null, 'VALIDATION_ERROR'));
    }
    
    next();
    }


    // Middleware để validate dữ liệu khi cập nhật nhân viên (có thể khác với khi thêm mới)
    static validateUpdateEmployee(req, res, next) {
        const errors = EmployeeValidator.validateEmployeeData(req.body);
        if (errors.length > 0) {
            return res.status(400).json(formatResponse(false, errors.join(', '), null, 'VALIDATION_ERROR'));
        }
        next();
    }
    
    // Middleware để validate dữ liệu cửa hàng
    static validateStore(req, res, next) {
        const errors = MasterDataValidator.validateStoreData(req.body);
         if (errors.length > 0) {
            return res.status(400).json(formatResponse(false, errors.join(', '), null, 'VALIDATION_ERROR'));
        }
        next();
    }
    
    // Middleware để validate dữ liệu vị trí
    static validatePosition(req, res, next) {
        const errors = MasterDataValidator.validatePositionData(req.body);
         if (errors.length > 0) {
            return res.status(400).json(formatResponse(false, errors.join(', '), null, 'VALIDATION_ERROR'));
        }
        next();
    }
}

export default ValidationMiddleware;

```


==================== File: .\server\routes\attendance.js ====================

// server/routes/attendance.js
import express from 'express';
import { 
    getAttendanceLogs,
    addAttendanceLog,
    getEmployeeHours,
    getAttendanceStats,
    getEmployeeDetailedHours
} from '../controllers/attendanceController.js';
import { authenticateUser } from '../middleware/auth.js';

const router = express.Router();

// ✅ CÁC ENDPOINT HIỆN TẠI
router.get('/logs', authenticateUser, getAttendanceLogs);
router.post('/logs', authenticateUser, addAttendanceLog);
router.get('/employee-hours', authenticateUser, getEmployeeHours);

// ✅ CÁC ENDPOINT MỚI
router.get('/stats', authenticateUser, getAttendanceStats);
router.get('/employee/:employeeId/detailed', authenticateUser, getEmployeeDetailedHours);

export default router;

```


==================== File: .\server\routes\auth.js ====================

import express from 'express';
import { login, logout, getProfile } from '../controllers/authController.js';
import { authenticateUser } from '../middleware/auth.js';

const router = express.Router();

router.post('/login', login);
router.post('/logout', logout);
router.get('/profile', authenticateUser, getProfile);

export default router;

```


==================== File: .\server\routes\dashboard.js ====================

import express from 'express';
import { getDashboardStats } from '../controllers/dashboardController.js';
import { authenticateUser } from '../middleware/auth.js';

const router = express.Router();

router.get('/stats', authenticateUser, getDashboardStats);

export default router;

```


==================== File: .\server\routes\employees.js ====================

// server/routes/employees.js
import express from 'express';
import { 
    getAllEmployees, 
    addEmployee, 
    updateEmployee, 
    deleteEmployee, 
    searchEmployees, 
    getEmployeeWorkHistory, 
    addWorkHistory,
    updateWorkHistory,
    deleteWorkHistory
} from '../controllers/employeeController.js';
import { authenticateUser, authorizeRoles } from '../middleware/auth.js';
import ValidationMiddleware from '../middleware/validation.js';

const router = express.Router();

// ==================== EMPLOYEE ROUTES ====================
// GET routes should come before parameterized routes
router.get('/search', authenticateUser, searchEmployees);
router.get('/', authenticateUser, getAllEmployees);

// Employee CRUD operations
router.post('/', authenticateUser, authorizeRoles('hr', 'admin'), ValidationMiddleware.validateAddEmployee, addEmployee);
router.put('/:id', authenticateUser, authorizeRoles('hr', 'admin'), ValidationMiddleware.validateUpdateEmployee, updateEmployee);
router.delete('/:id', authenticateUser, authorizeRoles('hr', 'admin'), deleteEmployee);

// ==================== WORK HISTORY ROUTES ====================
// Work history routes - SỬA ĐỂ TƯƠNG THÍCH VỚI CLIENT
router.get('/:employeeId/work-history', authenticateUser, getEmployeeWorkHistory);
router.post('/work-history', authenticateUser, authorizeRoles('hr', 'admin'), addWorkHistory);

// ✅ THÊM MỚI: Routes cho sửa và xóa work history
router.put('/work-history/:id', authenticateUser, authorizeRoles('hr', 'admin'), updateWorkHistory);
router.delete('/work-history/:id', authenticateUser, authorizeRoles('hr', 'admin'), deleteWorkHistory);

// ==================== ERROR HANDLING ====================
// Handle 404 for unmatched routes
router.use('*', (req, res) => {
    res.status(404).json({
        success: false,
        error: 'Route not found',
        path: req.originalUrl
    });
});

export default router;

```


==================== File: .\server\routes\masterData.js ====================

// server/routes/masterData.js
import express from 'express';
import { authenticateUser, authorizeRoles } from '../middleware/auth.js';
import { getStores, addStore, updateStore, deleteStore } from '../controllers/storeController.js';
import { getPositions, addPosition, updatePosition, deletePosition } from '../controllers/positionController.js';
import ValidationMiddleware from '../middleware/validation.js';

const router = express.Router();

// ==================== STORE ROUTES ====================
router.get('/stores', authenticateUser, getStores);
router.post('/stores', authenticateUser, authorizeRoles('hr', 'admin'), ValidationMiddleware.validateStore, addStore);
router.put('/stores/:id', authenticateUser, authorizeRoles('hr', 'admin'), ValidationMiddleware.validateStore, updateStore);
router.delete('/stores/:id', authenticateUser, authorizeRoles('hr', 'admin'), deleteStore);

// ==================== POSITION ROUTES ====================
router.get('/positions', authenticateUser, getPositions);
router.post('/positions', authenticateUser, authorizeRoles('hr', 'admin'), ValidationMiddleware.validatePosition, addPosition);
router.put('/positions/:id', authenticateUser, authorizeRoles('hr', 'admin'), ValidationMiddleware.validatePosition, updatePosition);
router.delete('/positions/:id', authenticateUser, authorizeRoles('hr', 'admin'), deletePosition);

export default router;

```


==================== File: .\server\routes\recruitment.js ====================

// server/routes/recruitment.js
import express from 'express';
import { 
    getRecruitmentRequests,
    getRecruitmentHoursSummary,
    getDetailedHoursForRequest  
} from '../controllers/recruitmentController.js';
import { authenticateUser } from '../middleware/auth.js';

const router = express.Router();

router.get('/', authenticateUser, getRecruitmentRequests);
router.get('/hours-summary', authenticateUser, getRecruitmentHoursSummary);
router.get('/detailed-hours/:requestNo', authenticateUser, getDetailedHoursForRequest);

export default router;

```


==================== File: .\server\services\index.js ====================

// Main services export file
export * from './core/index.js';
export * from './auth/index.js';
export * from './employee/index.js';
export * from './attendance/index.js';
export * from './recruitment/index.js';
export * from './master-data/index.js';
export * from './utils/index.js';

// Export service factory for easy access
export { default as ServiceFactory } from './utils/service-factory.js';

```


==================== File: .\server\services\lark-service-manager.js ====================

// server/services/lark-service-manager.js
import { EmployeeService, WorkHistoryService } from './employees/index.js';
import { AttendanceService } from './attendance/index.js';
import { RecruitmentService } from './recruitment/index.js';
import { StoreService, PositionService } from './master-data/index.js';
import { AuthService, SessionService } from './auth/index.js';
import { validateLarkConfig } from '../config/lark-config.js';

class LarkServiceManager {
    constructor() {
        this.services = {};
        this.initialized = false;
    }

    async init() {
        if (this.initialized) return;

        try {
            console.log('🚀 Initializing Lark Service Manager...');
            
            // Validate configuration first
            validateLarkConfig();
            
            // Initialize all services
            this.services.employee = new EmployeeService();
            this.services.workHistory = new WorkHistoryService();
            this.services.attendance = new AttendanceService();
            this.services.recruitment = new RecruitmentService();
            this.services.store = new StoreService();
            this.services.position = new PositionService();
            this.services.auth = new AuthService();
            this.services.session = new SessionService();

            // Initialize each service
            await Promise.all([
                this.services.employee.init(),
                this.services.workHistory.init(),
                this.services.attendance.init(),
                this.services.recruitment.init(),
                this.services.store.init(),
                this.services.position.init(),
                this.services.auth.init(),
                this.services.session.init()
            ]);

            this.initialized = true;
            console.log('✅ All Lark services initialized successfully');
            
        } catch (error) {
            console.error('❌ Lark Service Manager initialization failed:', error);
            throw new Error(`Service Manager initialization failed: ${error.message}`);
        }
    }

    async ensureInitialized() {
        if (!this.initialized) {
            await this.init();
        }
    }

    // Get specific service for advanced operations
    getService(serviceName) {
        if (!this.services[serviceName]) {
            throw new Error(`Service '${serviceName}' not found. Available services: ${Object.keys(this.services).join(', ')}`);
        }
        return this.services[serviceName];
    }

    // ==================== EMPLOYEE METHODS ====================
    async getAllEmployees() {
        await this.ensureInitialized();
        return await this.services.employee.getAllEmployees();
    }

    async addEmployee(employeeData) {
        await this.ensureInitialized();
        return await this.services.employee.addEmployee(employeeData);
    }

    async updateEmployee(id, employeeData) {
        await this.ensureInitialized();
        return await this.services.employee.updateEmployee(id, employeeData);
    }

    async deleteEmployee(id) {
        await this.ensureInitialized();
        return await this.services.employee.deleteEmployee(id);
    }

    //async checkEmployeeIdExists(employeeId) {
    //    await this.ensureInitialized();
    //    return await this.services.employee.checkEmployeeIdExists(employeeId);
    //}

    async searchEmployees(query) {
        await this.ensureInitialized();
        return await this.services.employee.searchEmployees(query);
    }

    // ==================== WORK HISTORY METHODS ====================
    async getWorkHistoryByEmployee(employeeId) {
        await this.ensureInitialized();
        return await this.services.workHistory.getWorkHistoryByEmployee(employeeId);
    }

    // async addWorkHistory(workHistoryData) {
    //     await this.ensureInitialized();
    //     return await this.services.workHistory.addWorkHistory(workHistoryData);
    // }

    async addWorkHistory(workHistoryData) {
        await this.ensureInitialized();
        // Lấy instance của recruitment service
        const recruitmentService = this.getService('recruitment');
        // Truyền nó vào hàm của workHistory service
        return await this.services.workHistory.addWorkHistory(workHistoryData, recruitmentService);
    }

    async checkWorkHistoryExists(employeeId, requestNo) {
        await this.ensureInitialized();
        return await this.services.workHistory.checkWorkHistoryExists(employeeId, requestNo);
    }

    async checkWorkHistoryExists(employeeId, requestNo) {
        await this.ensureInitialized();
        return await this.services.workHistory.checkWorkHistoryExists(employeeId, requestNo);
    }
    
    // ==================== ATTENDANCE METHODS ====================
    async getAttendanceLogs(filters = {}) {
        await this.ensureInitialized();
        return await this.services.attendance.getAttendanceLogs(filters);
    }

    async addAttendanceLog(attendanceData) {
        await this.ensureInitialized();
        return await this.services.attendance.addAttendanceLog(attendanceData);
    }

    async getEmployeeHours() {
        await this.ensureInitialized();
        return await this.services.attendance.getEmployeeHours();
    }

    // ==================== STORE METHODS ====================
    async getAllStores() {
        await this.ensureInitialized();
        return await this.services.store.getAllStores();
    }

    async addStore(storeData) {
        await this.ensureInitialized();
        return await this.services.store.addStore(storeData);
    }

    async updateStore(id, storeData) {
        await this.ensureInitialized();
        return await this.services.store.updateStore(id, storeData);
    }

    async deleteStore(id) {
        await this.ensureInitialized();
        return await this.services.store.deleteStore(id);
    }

    // ==================== POSITION METHODS ====================
    async getAllPositions() {
        await this.ensureInitialized();
        return await this.services.position.getAllPositions();
    }

    async addPosition(positionData) {
        await this.ensureInitialized();
        return await this.services.position.addPosition(positionData);
    }

    async updatePosition(id, positionData) {
        await this.ensureInitialized();
        return await this.services.position.updatePosition(id, positionData);
    }

    async deletePosition(id) {
        await this.ensureInitialized();
        return await this.services.position.deletePosition(id);
    }
}

export default new LarkServiceManager();

```


==================== File: .\server\services\attendance\attendance-service.js ====================

// server/services/attendance/attendance-service.js
import BaseService from '../core/base-service.js';
import LarkClient from '../core/lark-client.js';
import CacheService from '../core/cache-service.js';

class AttendanceService extends BaseService {
    constructor() {
        super();
        this.baseId = process.env.LARK_BASE_ID;
        this.tableId = process.env.LARK_ATTENDANCE_TABLE_ID;
    }

    async initializeService() {
        console.log('Initializing Attendance Service...');
    }

    async getAttendanceLogs(filters = {}) {
        const cacheKey = `attendance_logs_${JSON.stringify(filters)}`;
        let logs = CacheService.get(cacheKey);
        
        if (logs) {
            console.log(`✅ ATTENDANCE: Loaded ${logs.length} records from cache.`);
            return logs;
        }

        try {
            console.log('📡 ATTENDANCE: Fetching all attendance logs from Lark...');
            
            // Xây dựng các tham số cho API
            const params = {};
            if (filters.employeeId) {
                // Lark filter syntax: CurrentValue.[Tên cột] = "Giá trị"
                params.filter = `CurrentValue.[Mã nhân viên] = "${filters.employeeId}"`;
            }
            
            // Gọi phương thức mới để lấy tất cả các trang dữ liệu
            const response = await LarkClient.getAllRecords(
                `/bitable/v1/apps/${this.baseId}/tables/${this.tableId}/records`,
                params
            );

            logs = this.transformAttendanceData(response.data?.items || []);
            console.log(`✅ ATTENDANCE: Transformed ${logs.length} total records from Lark.`);
            
            // Lọc theo ngày (sau khi đã lấy hết dữ liệu)
            if (filters.dateFrom || filters.dateTo) {
                logs = this.filterByDateRange(logs, filters.dateFrom, filters.dateTo);
                console.log(`✅ ATTENDANCE: Filtered by date range, resulting in ${logs.length} records.`);
            }
            
            CacheService.set(cacheKey, logs, 300000); // Cache trong 5 phút
            console.log(`✅ ATTENDANCE: Cached ${logs.length} records.`);

        } catch (error) {
            console.error('❌ Error fetching attendance logs:', error);
            logs = []; // Trả về mảng rỗng nếu có lỗi
        }
        
        return logs;
    }

    async addAttendanceLog(attendanceData) {
        try {
            const transformedData = this.transformAttendanceForLark(attendanceData);
            
            const response = await LarkClient.post(`/bitable/v1/apps/${this.baseId}/tables/${this.tableId}/records`, {
                fields: transformedData
            });

            // Clear cache
            CacheService.clear();
            
            return this.transformAttendanceData([response.data])[0];
        } catch (error) {
            await this.handleError(error, 'addAttendanceLog');
            throw error;
        }
    }

    // ✅ CẬP NHẬT: getEmployeeHours để hiển thị tất cả nhân viên
    async getEmployeeHours() {
        const logs = await this.getAttendanceLogs();
        console.log('🔍 Total attendance logs:', logs.length);

        const employeeHours = {};

        // Group logs by employee and date
        const groupedLogs = this.groupLogsByEmployeeAndDate(logs);

        // Lấy tất cả employeeId thực tế có phát sinh log
        const allEmployeeIds = [...new Set(logs.map(log => log.employeeId))].filter(id => id);
        console.log('🔍 All employee IDs found in logs:', allEmployeeIds);

        // Chỉ tổng hợp các ngày nhân viên có chấm công
        for (const employeeId of allEmployeeIds) {
            if (!employeeId) continue;
            employeeHours[employeeId] = [];
            const employeeDateGroups = groupedLogs[employeeId] || {};

            // Chỉ lặp qua các ngày có log
            for (const date in employeeDateGroups) {
                const dayLogs = employeeDateGroups[date];
                const dailyResult = this.calculateDailyHours(employeeId, date, dayLogs);
                employeeHours[employeeId].push({
                    date,
                    ...dailyResult
                });
            }
        }

        return employeeHours;
    }


    // ✅ CẬP NHẬT: Thêm more detailed debugging
    groupLogsByEmployeeAndDate(logs) {
        console.log('🔍 DEBUG: Raw logs for grouping:', logs.map(log => ({
            employeeId: log.employeeId,
            date: log.date,
            type: log.type,
            timestamp: log.timestamp
        })));
        
        const grouped = {};
        
        logs.forEach(log => {
            if (!log.employeeId || !log.date) {
                console.warn('⚠️ Invalid log record:', log);
                return;
            }
            
            if (!grouped[log.employeeId]) {
                grouped[log.employeeId] = {};
            }
            
            if (!grouped[log.employeeId][log.date]) {
                grouped[log.employeeId][log.date] = [];
            }
            
            grouped[log.employeeId][log.date].push(log);
        });
        
        console.log('🔍 DEBUG: Grouped logs:', Object.keys(grouped).map(empId => ({
            employeeId: empId,
            dates: Object.keys(grouped[empId]),
            totalRecords: Object.values(grouped[empId]).flat().length
        })));
        
        return grouped;
    }

    // ✅ TÍNH GIỜ CÔNG THEO NGÀY VÀ CHỨC VỤ
    calculateDailyHours(employeeId, date, dayLogs) {
        if (dayLogs.length === 0) {
            return {
                totalHours: '0 giờ 0 phút',
                warnings: ['Không có dữ liệu chấm công'],
                position: 'N/A'
            };
        }

        return this.calculateSimpleHours(dayLogs)
    }

    // ✅ THÊM: Logic đơn giản cho tất cả nhân viên
    calculateSimpleHours(dayLogs) {
        const checkinLogs = dayLogs.filter(log => log.type === 'Checkin');
        const checkoutLogs = dayLogs.filter(log => log.type === 'Checkout');
        
        const warnings = [];
        
        if (checkinLogs.length === 0) {
            warnings.push('Thiếu check in');
        }
        
        if (checkoutLogs.length === 0) {
            warnings.push('Thiếu check out');
        }
        
        if (checkinLogs.length === 0 || checkoutLogs.length === 0) {
            return {
                totalHours: '0 giờ 0 phút',
                warnings,
                position: dayLogs[0]?.position || 'N/A'
            };
        }
        
        // ✅ LẤY CHECK IN SỚM NHẤT VÀ CHECK OUT MUỘN NHẤT
        const earliestCheckin = checkinLogs.reduce((earliest, current) => 
            new Date(current.timestamp) < new Date(earliest.timestamp) ? current : earliest
        );
        
        const latestCheckout = checkoutLogs.reduce((latest, current) => 
            new Date(current.timestamp) > new Date(latest.timestamp) ? current : latest
        );
        
        const checkinTime = new Date(earliestCheckin.timestamp);
        const checkoutTime = new Date(latestCheckout.timestamp);
        const diffHours = (checkoutTime - checkinTime) / (1000 * 60 * 60);
        
        // ✅ THÊM CẢNH BÁO NẾU CÓ NHIỀU LOGS
        if (dayLogs.length > 2) {
            warnings.push(`Có ${dayLogs.length} lần chấm công trong ngày`);
        }
        
        return {
            totalHours: this.formatHoursDisplay(Math.max(0, diffHours)),
            warnings,
            position: dayLogs[0]?.position || 'N/A'
        };
    }

    // ✅ TÍNH GIỜ CHO MASCOT (4 lần chấm công/ngày)
    calculateMascotHours(dayLogs) {
        // Kiểm tra số lần chấm công
        if (dayLogs.length !== 4) {
            return {
                totalHours: '0 giờ 0 phút',
                morningHours: '0 giờ 0 phút',
                afternoonHours: '0 giờ 0 phút',
                warnings: [`Mascot phải chấm công đúng 4 lần/ngày. Hiện tại: ${dayLogs.length} lần`],
                position: 'Nhân viên Mascot',
                error: true
            };
        }

        // Chia ca theo 13:00
        const morningLogs = dayLogs.filter(log => {
            const hour = new Date(log.timestamp).getHours();
            return hour < 13;
        });

        const afternoonLogs = dayLogs.filter(log => {
            const hour = new Date(log.timestamp).getHours();
            return hour >= 13;
        });

        const morningResult = this.calculateShiftHours(morningLogs);
        const afternoonResult = this.calculateShiftHours(afternoonLogs);

        const totalHours = morningResult.hours + afternoonResult.hours;

        return {
            morningHours: this.formatHoursDisplay(morningResult.hours),
            afternoonHours: this.formatHoursDisplay(afternoonResult.hours),
            totalHours: this.formatHoursDisplay(totalHours),
            warnings: [...morningResult.warnings, ...afternoonResult.warnings],
            position: 'Nhân viên Mascot'
        };
    }

    // ✅ TÍNH GIỜ CHO NHÂN VIÊN THỜI VỤ (2 lần chấm công/ngày)
    calculateRegularHours(dayLogs) {
        const checkinLog = dayLogs.find(log => log.type === 'Checkin');
        const checkoutLog = dayLogs.find(log => log.type === 'Checkout');

        if (!checkinLog || !checkoutLog) {
            return {
                totalHours: '0 giờ 0 phút',
                warnings: [
                    !checkinLog ? 'Thiếu check in' : '',
                    !checkoutLog ? 'Thiếu check out' : ''
                ].filter(Boolean),
                position: dayLogs[0]?.position || 'N/A'
            };
        }

        const checkinTime = new Date(checkinLog.timestamp);
        const checkoutTime = new Date(checkoutLog.timestamp);
        const diffHours = (checkoutTime - checkinTime) / (1000 * 60 * 60);

        return {
            totalHours: this.formatHoursDisplay(Math.max(0, diffHours)),
            warnings: [],
            position: dayLogs[0]?.position || 'N/A'
        };
    }

    // ✅ TÍNH GIỜ CHO 1 CA (DÙNG CHO MASCOT)
    calculateShiftHours(shiftLogs) {
        const checkin = shiftLogs.find(log => log.type === 'Checkin');
        const checkout = shiftLogs.find(log => log.type === 'Checkout');

        if (!checkin || !checkout) {
            return {
                hours: 0,
                warnings: [
                    !checkin ? 'Thiếu check in ca này' : '',
                    !checkout ? 'Thiếu check out ca này' : ''
                ].filter(Boolean)
            };
        }

        const diffHours = (new Date(checkout.timestamp) - new Date(checkin.timestamp)) / (1000 * 60 * 60);
        return {
            hours: Math.max(0, diffHours),
            warnings: []
        };
    }

    // ✅ FORMAT HIỂN THỊ GIỜ: "8 giờ 30 phút"
    formatHoursDisplay(totalHours) {
        if (!totalHours || totalHours === 0) return '0 giờ 0 phút';
        
        const hours = Math.floor(totalHours);
        const minutes = Math.round((totalHours - hours) * 60);
        
        if (minutes === 0) {
            return `${hours} giờ`;
        } else if (hours === 0) {
            return `${minutes} phút`;
        } else {
            return `${hours} giờ ${minutes} phút`;
        }
    }

    // ✅ FILTER THEO KHOẢNG NGÀY
    filterByDateRange(logs, dateFrom, dateTo) {
        return logs.filter(log => {
            const logDate = new Date(log.date);
            const fromDate = dateFrom ? new Date(dateFrom) : null;
            const toDate = dateTo ? new Date(dateTo) : null;
            
            if (fromDate && logDate < fromDate) return false;
            if (toDate && logDate > toDate) return false;
            
            return true;
        });
    }

    // ✅ SỬA: HELPER FUNCTIONS với timestamp conversion đúng
    convertUnixToDateTime(unixTimestamp) {
        if (!unixTimestamp) return '';
        
        console.log('🔍 Raw timestamp:', unixTimestamp, typeof unixTimestamp);
        
        // Nếu timestamp đã là ISO string
        if (typeof unixTimestamp === 'string' && unixTimestamp.includes('T')) {
            const date = new Date(unixTimestamp);
            if (date.getFullYear() > 2000 && date.getFullYear() < 2100) {
                return unixTimestamp;
            }
        }
        
        // ✅ QUAN TRỌNG: Timestamp từ Lark đã là milliseconds, không nhân 1000
        if (typeof unixTimestamp === 'number') {
            return new Date(unixTimestamp).toISOString();
        }
        
        console.warn('⚠️ Invalid timestamp format:', unixTimestamp);
        return new Date().toISOString();
    }

    // ✅ SỬA: Sử dụng trực tiếp timestamp từ convertUnixToDateTime
    transformAttendanceData(larkData) {
        
        return larkData.map(record => {
            let employeeId = '';
            const employeeIdField = record.fields['Mã nhân viên'];
            
            if (Array.isArray(employeeIdField) && employeeIdField.length > 0) {
                employeeId = employeeIdField[0]?.text || '';
                console.log('🔍 EXTRACTED EMPLOYEE ID:', employeeId);
            } else if (typeof employeeIdField === 'string') {
                employeeId = employeeIdField;
            }

            // ✅ SỬA: Sử dụng timestamp đã convert để extract date và time
            const convertedTimestamp = this.convertUnixToDateTime(record.fields['Thời gian chấm công']);
            const dateObj = new Date(convertedTimestamp);
            
            
            return {
                id: record.record_id,
                employeeId: employeeId,
                type: record.fields['Phân loại'] || '',
                position: record.fields['Vị trí'] || '',
                timestamp: convertedTimestamp,
                date: dateObj.toISOString().split('T')[0],
                time: dateObj.toTimeString().slice(0, 5),
                notes: record.fields['Ghi chú'] || '',
                createdAt: record.fields['Created At'] || new Date().toISOString()
            };
        });
    }

    // ✅ TRANSFORM DỮ LIỆU ĐỂ GỬI VỀ LARKBASE
    transformAttendanceForLark(attendanceData) {
        return {
            'Mã nhân viên': attendanceData.employeeId,
            'Phân loại': attendanceData.type,
            'Vị trí': attendanceData.position,
            'Thời gian chấm công': Math.floor(new Date(attendanceData.timestamp).getTime() / 1000),
            'Ghi chú': attendanceData.notes || '',
            'Created At': new Date().toISOString()
        };
    }

    // ✅ THÊM: Helper method để extract employeeId từ Lark field
    extractEmployeeId(employeeIdField) {
        if (!employeeIdField) return '';
        
        // Nếu là array (linked record từ Lark)
        if (Array.isArray(employeeIdField) && employeeIdField.length > 0) {
            const firstRecord = employeeIdField[0];
            return firstRecord?.text || firstRecord?.name || '';
        }
        
        // Nếu là string đơn giản
        if (typeof employeeIdField === 'string') {
            return employeeIdField;
        }
        
        // Nếu là object
        if (typeof employeeIdField === 'object' && employeeIdField.text) {
            return employeeIdField.text;
        }
        
        console.warn('⚠️ Unknown employeeId format:', employeeIdField);
        return '';
    }
}

export default AttendanceService;

```


==================== File: .\server\services\attendance\attendance-validator.js ====================

// Attendance validation service
class AttendanceValidator {
    static validateAttendanceData(attendanceData) {
        const errors = [];

        // Required fields validation
        if (!attendanceData.employeeId) {
            errors.push('Employee ID là bắt buộc');
        }

        if (!attendanceData.date) {
            errors.push('Ngày là bắt buộc');
        } else if (!this.isValidDate(attendanceData.date)) {
            errors.push('Ngày không hợp lệ');
        }

        if (!attendanceData.timeIn) {
            errors.push('Thời gian vào là bắt buộc');
        } else if (!this.isValidTime(attendanceData.timeIn)) {
            errors.push('Thời gian vào không hợp lệ');
        }

        if (!attendanceData.timeOut) {
            errors.push('Thời gian ra là bắt buộc');
        } else if (!this.isValidTime(attendanceData.timeOut)) {
            errors.push('Thời gian ra không hợp lệ');
        }

        // Check if time out is after time in
        if (attendanceData.timeIn && attendanceData.timeOut) {
            if (!this.isTimeOutAfterTimeIn(attendanceData.timeIn, attendanceData.timeOut)) {
                errors.push('Thời gian ra phải sau thời gian vào');
            }
        }

        return errors;
    }

    static isValidDate(dateString) {
        const date = new Date(dateString);
        return date instanceof Date && !isNaN(date);
    }

    static isValidTime(timeString) {
        const timeRegex = /^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$/;
        return timeRegex.test(timeString);
    }

    static isTimeOutAfterTimeIn(timeIn, timeOut) {
        const inTime = new Date(`1970-01-01T${timeIn}`);
        const outTime = new Date(`1970-01-01T${timeOut}`);
        return outTime > inTime;
    }
}

export default AttendanceValidator;

```


==================== File: .\server\services\attendance\index.js ====================

// Attendance services exports
export { default as AttendanceService } from './attendance-service.js';
export { default as AttendanceValidator } from './attendance-validator.js';

```


==================== File: .\server\services\auth\auth-service.js ====================

// Authentication service
import BaseService from '../core/base-service.js';
import { users } from '../../config/database.js';

class AuthService extends BaseService {
    constructor() {
        super();
        this.activeSessions = new Map();
    }

    async validateCredentials(username, password) {
        const user = users[username];
        if (!user || user.password !== password) {
            throw new Error('Invalid credentials');
        }
        return user;
    }

    createSession(user) {
        const sessionData = {
            id: user.id,
            username: user.username,
            role: user.role,
            fullName: user.fullName,
            loginTime: new Date().toISOString()
        };
        
        this.activeSessions.set(user.id, sessionData);
        return sessionData;
    }

    validateSession(sessionId) {
        return this.activeSessions.get(sessionId);
    }

    destroySession(sessionId) {
        return this.activeSessions.delete(sessionId);
    }

    async login(credentials) {
        const { username, password } = credentials;
        
        const user = await this.validateCredentials(username, password);
        const sessionData = this.createSession(user);
        
        return {
            success: true,
            user: sessionData,
            message: 'Login successful'
        };
    }

    async logout(sessionId) {
        const destroyed = this.destroySession(sessionId);
        return {
            success: destroyed,
            message: destroyed ? 'Logout successful' : 'Session not found'
        };
    }

    getActiveUsers() {
        return Array.from(this.activeSessions.values());
    }
}

export default AuthService;

```


==================== File: .\server\services\auth\index.js ====================

// Auth services exports
export { default as AuthService } from './auth-service.js';
export { default as SessionService } from './session-service.js';

```


==================== File: .\server\services\auth\session-service.js ====================

// Session management service
import BaseService from '../core/base-service.js';

class SessionService extends BaseService {
    constructor() {
        super();
        this.sessions = new Map();
        this.sessionTimeout = 24 * 60 * 60 * 1000; // 24 hours
    }

    createSession(user, req) {
        const sessionId = this.generateId('sess_');
        const sessionData = {
            id: sessionId,
            userId: user.id,
            user: user,
            createdAt: new Date().toISOString(),
            lastAccessed: new Date().toISOString(),
            ipAddress: req.ip || req.connection.remoteAddress,
            userAgent: req.get('User-Agent')
        };

        this.sessions.set(sessionId, sessionData);
        return sessionData;
    }

    getSession(sessionId) {
        const session = this.sessions.get(sessionId);
        if (!session) return null;

        // Check if session is expired
        const now = Date.now();
        const lastAccessed = new Date(session.lastAccessed).getTime();
        if (now - lastAccessed > this.sessionTimeout) {
            this.destroySession(sessionId);
            return null;
        }

        // Update last accessed
        session.lastAccessed = new Date().toISOString();
        this.sessions.set(sessionId, session);
        
        return session;
    }

    destroySession(sessionId) {
        return this.sessions.delete(sessionId);
    }

    cleanupExpiredSessions() {
        const now = Date.now();
        for (const [sessionId, session] of this.sessions.entries()) {
            const lastAccessed = new Date(session.lastAccessed).getTime();
            if (now - lastAccessed > this.sessionTimeout) {
                this.destroySession(sessionId);
            }
        }
    }

    getActiveSessions() {
        return Array.from(this.sessions.values());
    }

    getUserSessions(userId) {
        return Array.from(this.sessions.values()).filter(session => session.userId === userId);
    }
}

export default SessionService;

```


==================== File: .\server\services\core\base-service.js ====================

// Abstract base class for all services
import { formatResponse } from '../utils/response-formatter.js';

export default class BaseService {
    constructor() {
        this.initialized = false;
        this.cache = new Map();
    }

    async init() {
        if (!this.initialized) {
            await this.initializeService();
            this.initialized = true;
        }
    }

    async initializeService() {
        // Override in subclasses
    }

    formatResponse(success, message, data = null, errorCode = null) {
        return formatResponse(success, message, data, errorCode);
    }

    validateRequired(data, fields) {
        const errors = [];
        fields.forEach(field => {
            if (!data[field]) {
                errors.push(`${field} là bắt buộc`);
            }
        });
        return errors;
    }

    generateId(prefix = '') {
        return `${prefix}${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
    }

    async handleError(error, operation) {
        console.error(`Error in ${operation}:`, error);
        throw error;
    }
}

```


==================== File: .\server\services\core\cache-service.js ====================

// server/services/core/cache-service.js
class CacheService {
    constructor() {
        this.cache = new Map();
        this.ttl = new Map();
    }

    set(key, value, ttlMs = 300000) { // 5 minutes default
        this.cache.set(key, value);
        this.ttl.set(key, Date.now() + ttlMs);
    }

    get(key) {
        const expiry = this.ttl.get(key);
        if (expiry && Date.now() > expiry) {
            this.delete(key);
            return null;
        }
        return this.cache.get(key);
    }

    delete(key) {
        this.cache.delete(key);
        this.ttl.delete(key);
    }

    clear() {
        this.cache.clear();
        this.ttl.clear();
    }

    has(key) {
        const expiry = this.ttl.get(key);
        if (expiry && Date.now() > expiry) {
            this.delete(key);
            return false;
        }
        return this.cache.has(key);
    }

    size() {
        return this.cache.size;
    }

    cleanup() {
        const now = Date.now();
        for (const [key, expiry] of this.ttl.entries()) {
            if (now > expiry) {
                this.delete(key);
            }
        }
    }
}

export default new CacheService();

```


==================== File: .\server\services\core\index.js ====================

// Core services exports
export { default as BaseService } from './base-service.js';
export { default as LarkClient } from './lark-client.js';
export { default as CacheService } from './cache-service.js';

```


==================== File: .\server\services\core\lark-client.js ====================

// server/services/core/lark-client.js
import axios from 'axios';

class LarkClient {
    constructor() {
        // Không load env vars tại constructor
        this.baseURL = 'https://open.larksuite.com/open-apis';
        this.tenantAccessToken = null;
        this.tokenExpiry = null;
    }

    // Getter methods để load env vars khi cần
    get appId() {
        return process.env.LARK_APP_ID;
    }

    get appSecret() {
        return process.env.LARK_APP_SECRET;
    }

    async getTenantAccessToken() {
        console.log('🔑 Getting tenant access token...');
        
        if (!this.appId || !this.appSecret) {
            throw new Error('Lark credentials not configured properly');
        }
        
        if (this.tenantAccessToken && this.tokenExpiry > Date.now()) {
            console.log('✅ Using cached access token');
            return this.tenantAccessToken;
        }

        try {
            console.log('📡 Requesting new access token from Lark...');
            const payload = {
                app_id: this.appId,
                app_secret: this.appSecret
            };
            
            console.log('🚀 Sending request to:', `${this.baseURL}/auth/v3/tenant_access_token/internal`);
            console.log('📦 Payload keys:', Object.keys(payload));
            
            const response = await axios.post(`${this.baseURL}/auth/v3/tenant_access_token/internal`, payload);
            
            console.log('📨 Lark auth response:', {
                status: response.status,
                code: response.data.code,
                msg: response.data.msg
            });

            if (response.data.code === 0) {
                this.tenantAccessToken = response.data.tenant_access_token;
                this.tokenExpiry = Date.now() + (response.data.expire - 300) * 1000;
                console.log('✅ Access token obtained successfully');
                console.log('Token expires in:', Math.floor((this.tokenExpiry - Date.now()) / 1000), 'seconds');
                return this.tenantAccessToken;
            } else {
                console.error('❌ Lark auth error:', response.data);
                throw new Error(`Lark Auth Error: ${response.data.msg}`);
            }
        } catch (error) {
            console.error('❌ Error getting tenant access token:', {
                message: error.message,
                response: error.response?.data,
                status: error.response?.status
            });
            throw error;
        }
    }

    async request(endpoint, options = {}) {
        console.log(`📞 Making Lark API request: ${options.method || 'GET'} ${endpoint}`);
        
        const token = await this.getTenantAccessToken();
        
        const config = {
            ...options,
            headers: {
                'Authorization': `Bearer ${token}`,
                'Content-Type': 'application/json',
                ...options.headers
            }
        };

        try {
            console.log('🔄 Sending request to:', `${this.baseURL}${endpoint}`);
            const response = await axios(`${this.baseURL}${endpoint}`, config);
            
            console.log('✅ Lark API response:', {
                status: response.status,
                dataLength: response.data ? JSON.stringify(response.data).length : 0
            });
            
            return response.data;
        } catch (error) {
            console.error('❌ Lark API Error:', {
                endpoint,
                status: error.response?.status,
                data: error.response?.data,
                message: error.message
            });
            throw error;
        }
    }
    
    async get(endpoint, params = {}) {
        console.log('📥 GET request:', endpoint, params);
        
        // ✅ SỬA: Đổi tên biến để tránh conflict
        const queryParams = params;
        
        return this.request(endpoint, { 
            method: 'GET', 
            params: queryParams 
        });
    }

    // ✅ ================================================================
    // ✅ PHƯƠNG THỨC MỚI ĐỂ LẤY TOÀN BỘ DỮ LIỆU (CÓ PAGINATION)
    // ✅ ================================================================
    async getAllRecords(endpoint, pageSize = 100, filterParams = {}) {
        console.log(`📚 Getting ALL records from: ${endpoint}`);
        
        let allRecords = [];
        let hasMore = true;
        let pageToken = null;
        let pageCount = 0;
        
        while (hasMore) {
            pageCount++;
            console.log(`📄 Fetching page ${pageCount}...`);
            
            const params = {
                page_size: pageSize
            };
            
            // ✅ SỬA: Thêm filter params nếu có
            if (filterParams && Object.keys(filterParams).length > 0) {
                Object.assign(requestParams, filterParams);
            }


            if (pageToken) {
                params.page_token = pageToken;
            }
            
            // Sử dụng method 'get' đã có sẵn của class
            const response = await this.get(endpoint, params);
            
            if (response.data?.items) {
                allRecords = [...allRecords, ...response.data.items];
                console.log(`✅ Page ${pageCount}: ${response.data.items.length} records (Total: ${allRecords.length})`);
            }
            
            // Kiểm tra có trang tiếp theo không
            hasMore = response.data?.has_more || false;
            pageToken = response.data?.page_token || null;
            
            // Safety break để tránh infinite loop
            if (pageCount > 200) { // Giới hạn 200 trang (tối đa 20000 records)
                console.warn('⚠️ Reached maximum page limit (200 pages)');
                break;
            }
        }
        
        console.log(`🎉 COMPLETED: Retrieved ${allRecords.length} total records in ${pageCount} pages`);
        
        // Trả về dữ liệu theo cấu trúc chuẩn {data: {items, total}}
        return {
            data: {
                items: allRecords,
                total: allRecords.length
            }
        };
    }

    async post(endpoint, data = {}) {
        console.log('📤 POST request:', endpoint, { dataKeys: Object.keys(data) });
        return this.request(endpoint, { method: 'POST', data });
    }

    async put(endpoint, data = {}) {
        console.log('📝 PUT request:', endpoint, { dataKeys: Object.keys(data) });
        return this.request(endpoint, { method: 'PUT', data });
    }

    async delete(endpoint) {
        console.log('🗑️ DELETE request:', endpoint);
        return this.request(endpoint, { method: 'DELETE' });
    }
}

export default new LarkClient();

```


==================== File: .\server\services\employees\employee-service.js ====================

// Employee management service
import BaseService from '../core/base-service.js';
import LarkClient from '../core/lark-client.js';
import CacheService from '../core/cache-service.js';
import WorkHistoryService from './work-history-service.js';

class EmployeeService extends BaseService {
    constructor() {
        super();
        this.tableName = 'employees';
        this.baseId = process.env.LARK_BASE_ID;
        this.tableId = process.env.LARK_EMPLOYEE_TABLE_ID;
        this.workHistoryService = new WorkHistoryService();
    }

    async initializeService() {
        // Initialize Lark Base connection
        console.log('Initializing Employee Service...');
        await this.workHistoryService.initializeService();
    }



    async getEmployeeById(id) {
        try {
            console.log(`🔍 Getting employee by ID: ${id}`);
            
            const response = await LarkClient.get(
                `/bitable/v1/apps/${this.baseId}/tables/${this.tableId}/records/${id}`
            );
            
            if (response.data && response.data.record) {
                const transformedEmployee = this.transformEmployeeData([response.data.record])[0];
                console.log('✅ Employee found:', transformedEmployee.employeeId);
                return transformedEmployee;
            }
            
            console.log('❌ Employee not found');
            return null;
            
        } catch (error) {
            console.error('❌ Error getting employee by ID:', error);
            throw error;
        }
    }


    async getAllEmployees() {
        try {
            console.log('📡 EMPLOYEE: Fetching all employees from Lark API (Cache is disabled)...');

            const response = await LarkClient.getAllRecords(
                `/bitable/v1/apps/${this.baseId}/tables/${this.tableId}/records`
            );

            let employees = this.transformEmployeeData(response.data?.items || []);
            console.log(`✅ EMPLOYEE: Transformed ${employees.length} employees from employee table.`);

            console.log(`✅ EMPLOYEE: Completed supplementing data for ${employees.length} employees.`);
            return employees;
        } catch (error) {
            console.error('❌ EMPLOYEE: Error fetching employees from Lark:', error.message);
            throw error;
        }
    }

    generateEmployeeId(fullName, phoneNumber) {
        return `${fullName} - ${phoneNumber}`;
    }

    async addEmployee(employeeData) {
        try {
            const transformedData = this.transformEmployeeForLark(employeeData);

            const response = await LarkClient.post(`/bitable/v1/apps/${this.baseId}/tables/${this.tableId}/records`, {
                fields: transformedData
            });

            // Clear cache
            CacheService.delete('employees_all');
            
            return {
                success: true,
                employeeId: employeeData.employeeId,
                larkResponse: response 
            };
            
        } catch (error) {

            await this.handleError(error, 'addEmployee');
            throw error;
        }
    }

    async updateEmployee(id, employeeData) {
        try {
            const transformedData = this.transformEmployeeForLark(employeeData);

            const response = await LarkClient.put(`/bitable/v1/apps/${this.baseId}/tables/${this.tableId}/records/${id}`, {
                fields: transformedData
            });

            // Clear cache
            CacheService.delete('employees_all');

            return this.transformEmployeeData([response.data.record])[0];
        } catch (error) {
            await this.handleError(error, 'updateEmployee');
            throw error;
        }
    }

    async deleteEmployee(id) {
        try {
            await LarkClient.delete(`/bitable/v1/apps/${this.baseId}/tables/${this.tableId}/records/${id}`);

            // Clear cache
            CacheService.delete('employees_all');

            return true;
        } catch (error) {
            await this.handleError(error, 'deleteEmployee');
            throw error;
        }
    }

    async checkEmployeeIdExists(employeeId) {
        try {
            console.log(`🔍 EMPLOYEE: Checking for duplicate ID: ${employeeId}`);

            // ✅ Sử dụng getAllRecords để đảm bảo kiểm tra trên toàn bộ nhân viên
            const response = await LarkClient.getAllRecords(
                `/bitable/v1/apps/${this.baseId}/tables/${this.tableId}/records`
            );
            const allEmployees = this.transformEmployeeData(response.data?.items || []);

            const exists = allEmployees.some(emp => emp.employeeId === employeeId);
            console.log(`✅ EMPLOYEE: Duplicate check result: ${exists ? 'EXISTS' : 'NOT_EXISTS'}`);

            return exists;
        } catch (error) {
            console.error('❌ EMPLOYEE: Error checking for duplicate employee ID:', error);
            // An toàn nhất là trả về false để không chặn việc thêm nhân viên nếu API lỗi
            return false;
        }
    }

    async searchEmployees(query) {
        const employees = await this.getAllEmployees();

        if (!query) return employees;

        const searchTerm = query.toLowerCase();
        return employees.filter(emp =>
            emp.fullName.toLowerCase().includes(searchTerm) ||
            emp.employeeId.toLowerCase().includes(searchTerm) ||
            emp.phoneNumber.includes(searchTerm)
        );
    }

    transformEmployeeData(larkData) {

        if (!Array.isArray(larkData)) {
            console.warn('⚠️ SERVICE: larkData is not an array:', typeof larkData);
            return [];
        }

        const transformed = larkData.map((record, index) => {
            const result = {
                id: record.record_id,
                employeeId: record.fields['Mã nhân viên'] || '',
                fullName: record.fields['Họ tên'] || '',
                phoneNumber: record.fields['Số điện thoại'] || '',
                gender: record.fields['Giới tính'] || '',
                position: record.fields['Vị trí'] || '',
                bankAccount: record.fields['Số tài khoản'] || '',
                bankName: record.fields['Ngân hàng'] || '',
                recruitmentLink: record.fields['Link đề xuất tuyển dụng'] || '',
                status: record.fields['Trạng thái'] || 'active',
                createdAt: record.fields['Created At'] || new Date().toISOString(),
                updatedAt: record.fields['Updated At'] || new Date().toISOString()
            };

            return result;
        });

        return transformed;
    }

    transformEmployeeForLark(employeeData) {
        return {
            'Mã nhân viên': employeeData.employeeId,
            'Họ tên': employeeData.fullName,
            'Số điện thoại': employeeData.phoneNumber,
            'Giới tính': employeeData.gender,
            'Vị trí': employeeData.position || '',
            'Số tài khoản': employeeData.bankAccount,
            'Ngân hàng': employeeData.bankName,
            'Link đề xuất tuyển dụng': employeeData.recruitmentLink || '',
            'Trạng thái': employeeData.status || 'active'
        };
    }
}

export default EmployeeService;

```


==================== File: .\server\services\employees\employee-validator.js ====================

// Employee validation service
class EmployeeValidator {
    static validateEmployeeData(employeeData) {
        const errors = [];

        // Required fields validation
        if (!employeeData.fullName || employeeData.fullName.trim().length < 2) {
            errors.push('Họ tên phải có ít nhất 2 ký tự');
        }

        if (!employeeData.phoneNumber || !this.isValidPhoneNumber(employeeData.phoneNumber)) {
            errors.push('Số điện thoại không hợp lệ');
        }

        if (!employeeData.gender || !['Nam', 'Nữ'].includes(employeeData.gender)) {
            errors.push('Giới tính phải là Nam hoặc Nữ');
        }

        if (!employeeData.bankAccount || employeeData.bankAccount.trim().length < 6) {
            errors.push('Số tài khoản phải có ít nhất 6 ký tự');
        }

        if (!employeeData.bankName || employeeData.bankName.trim().length < 2) {
            errors.push('Tên ngân hàng là bắt buộc');
        }

        return errors;
    }

    static isValidPhoneNumber(phoneNumber) {
        const phoneRegex = /^[0-9]{10,11}$/;
        return phoneRegex.test(phoneNumber);
    }

    static validateWorkHistoryData(workHistoryData) {
        const errors = [];

        if (!Array.isArray(workHistoryData) || workHistoryData.length === 0) {
            errors.push('Phải có ít nhất một work history entry');
        }

        const requestNos = workHistoryData.map(item => item.requestNo);
        const uniqueRequestNos = [...new Set(requestNos)];
        
        if (requestNos.length !== uniqueRequestNos.length) {
            errors.push('Không được trùng lặp Request No');
        }

        workHistoryData.forEach((item, index) => {
            if (!item.requestNo || item.requestNo.trim().length === 0) {
                errors.push(`Work history entry ${index + 1}: Request No là bắt buộc`);
            }
        });

        return errors;
    }
}

export default EmployeeValidator;

```


==================== File: .\server\services\employees\index.js ====================

// Employee services exports
export { default as EmployeeService } from './employee-service.js';
export { default as WorkHistoryService } from './work-history-service.js';
export { default as EmployeeValidator } from './employee-validator.js';

```


==================== File: .\server\services\employees\work-history-service.js ====================

// server/services/employees/work-history-service.js
import BaseService from '../core/base-service.js';
import LarkClient from '../core/lark-client.js';
import CacheService from '../core/cache-service.js';


// **HÀM TIỆN ÍCH ĐỊNH DẠNG NGÀY**
const formatDate = (dateValue) => {
    if (!dateValue) return 'N/A';
    const date = new Date(dateValue);
    if (isNaN(date.getTime())) return 'Ngày không hợp lệ';
    
    const day = String(date.getDate()).padStart(2, '0');
    const month = String(date.getMonth() + 1).padStart(2, '0');
    const year = date.getFullYear();
    return `${day}/${month}/${year}`;
};


// Hàm tiện ích để kiểm tra hai khoảng ngày có chồng chéo không
const dateRangesOverlap = (start1, end1, start2, end2) => {
    const s1 = new Date(start1);
    const e1 = new Date(end1);
    const s2 = new Date(start2);
    const e2 = new Date(end2);
    return s1 <= e2 && e1 >= s2;
};


class WorkHistoryService extends BaseService {
    constructor() {
        super();
        this.baseId = process.env.LARK_BASE_ID;
        this.tableId = process.env.LARK_WORK_HISTORY_TABLE_ID;
        this.salaryTableId = process.env.LARK_SALARY_TABLE_ID || 'tblLdJp61bLeK3MG';
    }


    async initializeService() {
        console.log('Initializing Work History Service...');
    }


    async getSalaryData() {
        const cacheKey = 'salary_data_all';
        let salaryData = CacheService.get(cacheKey);


        if (salaryData) {
            console.log(`✅ SALARY: Loaded ${salaryData.length} records from cache.`);
            return salaryData;
        }


        try {
            console.log('📡 SALARY: Fetching salary data from Lark...');
            const response = await LarkClient.getAllRecords(
                `/bitable/v1/apps/${this.baseId}/tables/${this.salaryTableId}/records`
            );


            salaryData = this.transformSalaryData(response.data?.items || []);
            console.log(`✅ SALARY: Transformed ${salaryData.length} total records.`);


            CacheService.set(cacheKey, salaryData, 300000); // Cache 5 phút
            return salaryData;
        } catch (error) {
            console.error('❌ Error getting salary data:', error);
            return [];
        }
    }


    transformSalaryData(larkData) {
        return larkData.map(record => ({
            id: record.record_id,
            employeeId: this.extractEmployeeId(record.fields['Mã nhân viên']),
            hourlyRate: record.fields['Mức lương/giờ'] || null,
        }));
    }


    extractEmployeeId(employeeIdField) {
        if (!employeeIdField) return '';
        
        if (Array.isArray(employeeIdField) && employeeIdField.length > 0) {
            const firstRecord = employeeIdField[0];
            return firstRecord?.text || firstRecord?.name || '';
        }
        
        if (typeof employeeIdField === 'string') {
            return employeeIdField;
        }
        
        if (typeof employeeIdField === 'object' && employeeIdField.text) {
            return employeeIdField.text;
        }
        
        return '';
    }


    async getWorkHistoryByEmployee(employeeId) {
        try {
            console.log(`🔍 Getting work history for employee: ${employeeId}`);
            
            const response = await LarkClient.get(`/bitable/v1/apps/${this.baseId}/tables/${this.tableId}/records`, {
                filter: `AND(CurrentValue.[Mã nhân viên] = "${employeeId}")`
            });

            const workHistoryData = response.data?.items || [];
            console.log(`📋 Found ${workHistoryData.length} work history records`);

            const salaryData = await this.getSalaryData();
            console.log(`💰 Found ${salaryData.length} salary records`);

            return this.transformWorkHistoryDataWithSalary(workHistoryData, salaryData);
        } catch (error) {
            console.error('Error fetching work history:', error);
            return [];
        }
    }


    transformWorkHistoryDataWithSalary(workHistoryData, salaryData) {
        const salaryMap = new Map();
        salaryData.forEach(salary => {
            if (salary.employeeId) {
                salaryMap.set(salary.employeeId, salary.hourlyRate);
            }
        });

        console.log(`🗺️ Created salary map with ${salaryMap.size} entries`);
        console.log(`🔍 Salary map keys:`, Array.from(salaryMap.keys()));

        return workHistoryData.map(record => {
            const employeeId = record.fields['Mã nhân viên'] || '';
            const hourlyRateFromSalary = salaryMap.get(employeeId);
            
            console.log(`💡 Employee ${employeeId}: Work history hourlyRate = ${record.fields['Mức lương/giờ']}, Salary table hourlyRate = ${hourlyRateFromSalary}`);

            return {
                id: record.record_id,
                employeeId: employeeId,
                requestNo: record.fields['Request No.'] || '',
                fromDate: record.fields['Từ ngày'] || null,
                toDate: record.fields['Đến ngày'] || null,
                hourlyRate: record.fields['Mức lương/giờ'] || hourlyRateFromSalary || null,
                // SỬA: Lấy giá trị thực từ Lark, không tự tạo mới
                createdAt: record.fields['Created At'] || null, 
                updatedAt: record.fields['Updated At'] || null
            };
        });
    }


    async checkWorkHistoryExists(employeeId, requestNo) {
        try {
            console.log(`🔍 WORK HISTORY: Checking duplicate (${employeeId}, ${requestNo})`);
            
            const response = await LarkClient.get(`/bitable/v1/apps/${this.baseId}/tables/${this.tableId}/records`);
            
            const records = response.data?.items || [];
            console.log(`📋 WORK HISTORY: Found ${records.length} total records`);
            
            const exists = records.some(record => {
                const fields = record.fields || {};
                const recordEmployeeId = fields['Mã nhân viên'];
                const recordRequestNo = fields['Request No.'];
                
                const isMatch = recordEmployeeId === employeeId && recordRequestNo === requestNo;
                
                if (isMatch) {
                    console.log(`❌ WORK HISTORY: Found duplicate - ${recordEmployeeId} / ${recordRequestNo}`);
                }
                
                return isMatch;
            });
            
            console.log(`✅ WORK HISTORY: Duplicate check result: ${exists ? 'EXISTS' : 'NOT_EXISTS'}`);
            return exists;
            
        } catch (error) {
            console.error('❌ Error checking work history exists:', error);
            return false;
        }
    }


    // async validateWorkHistoryDateOverlap(employeeId, newRequestNo, recruitmentService) {
    //     console.log(`🔍 VALIDATING DATE OVERLAP: Employee ${employeeId}, Request ${newRequestNo}`);

    //     const newRequestDetails = await recruitmentService.getRequestByNo(newRequestNo);
    //     if (!newRequestDetails.fromDate || !newRequestDetails.toDate) {
    //         console.warn(`⚠️ Không tìm thấy ngày cho Request No. ${newRequestNo}, bỏ qua kiểm tra trùng lặp.`);
    //         return;
    //     }
    //     const newStartDate = newRequestDetails.fromDate;
    //     const newEndDate = newRequestDetails.toDate;

    //     const existingHistories = await this.getWorkHistoryByEmployee(employeeId);
    //     if (existingHistories.length === 0) {
    //         console.log('✅ Không có lịch sử cũ, không cần kiểm tra.');
    //         return;
    //     }

    //     for (const oldHistory of existingHistories) {
    //         const oldRequestDetails = await recruitmentService.getRequestByNo(oldHistory.requestNo);
    //         if (!oldRequestDetails || !oldRequestDetails.fromDate || !oldRequestDetails.toDate) {
    //             continue;
    //         }

    //         const oldStartDate = oldRequestDetails.fromDate;
    //         const oldEndDate = oldRequestDetails.toDate;

    //         if (dateRangesOverlap(newStartDate, newEndDate, oldStartDate, oldEndDate)) {
    //             const formattedNewStart = formatDate(newStartDate);
    //             const formattedNewEnd = formatDate(newEndDate);
    //             const formattedOldStart = formatDate(oldStartDate);
    //             const formattedOldEnd = formatDate(oldEndDate);

    //             const errorMessage = `Khoảng thời gian từ ${formattedNewStart} đến ${formattedNewEnd} bị trùng với lịch sử làm việc cũ (từ ${formattedOldStart} đến ${formattedOldEnd}, mã đề xuất ${oldHistory.requestNo}).`;
    //             console.error(`❌ DATE OVERLAP DETECTED: ${errorMessage}`);
    //             throw new Error(errorMessage);
    //         }
    //     }
        
    //     console.log('✅ Kiểm tra trùng lặp ngày thành công, không có chồng chéo.');
    // }


    async validateWorkHistoryDateOverlap(employeeId, workHistoryData, recruitmentService) {
        console.log(`🔍 VALIDATING DATE OVERLAP: Employee ${employeeId}, New work period: ${workHistoryData.fromDate} - ${workHistoryData.toDate}`);

        // ✅ BƯỚC 1: Validate khoảng ngày có nằm trong đề xuất tuyển dụng không
        const recruitmentDetails = await recruitmentService.getRequestByNo(workHistoryData.requestNo);
        if (recruitmentDetails && recruitmentDetails.fromDate && recruitmentDetails.toDate) {
            const workStart = new Date(workHistoryData.fromDate);
            const workEnd = new Date(workHistoryData.toDate);
            const recruitmentStart = new Date(recruitmentDetails.fromDate);
            const recruitmentEnd = new Date(recruitmentDetails.toDate);

            // Normalize về đầu ngày để tránh lỗi precision
            workStart.setHours(0, 0, 0, 0);
            workEnd.setHours(23, 59, 59, 999);
            recruitmentStart.setHours(0, 0, 0, 0);
            recruitmentEnd.setHours(23, 59, 59, 999);

            if (workStart < recruitmentStart || workEnd > recruitmentEnd) {
                throw new Error(
                    `Khoảng ngày làm việc (${formatDate(workHistoryData.fromDate)} - ${formatDate(workHistoryData.toDate)}) phải nằm trong khoảng ngày của đề xuất tuyển dụng (${formatDate(recruitmentDetails.fromDate)} - ${formatDate(recruitmentDetails.toDate)}).`
                );
            }
        }

        // ✅ BƯỚC 2: Kiểm tra trùng lặp với work history cũ (ngày thực tế làm việc)
        const existingHistories = await this.getWorkHistoryByEmployee(employeeId);
        if (existingHistories.length === 0) {
            console.log('✅ Không có lịch sử cũ, không cần kiểm tra overlap.');
            return;
        }

        const newWorkStart = new Date(workHistoryData.fromDate);
        const newWorkEnd = new Date(workHistoryData.toDate);

        for (const oldHistory of existingHistories) {
            // ⚠️ QUAN TRỌNG: So sánh với ngày thực tế làm việc, không phải ngày đề xuất
            if (!oldHistory.fromDate || !oldHistory.toDate) {
                continue; // Skip nếu không có thông tin ngày
            }

            const oldWorkStart = new Date(oldHistory.fromDate);
            const oldWorkEnd = new Date(oldHistory.toDate);

            // Kiểm tra overlap giữa 2 khoảng ngày thực tế làm việc
            if (dateRangesOverlap(newWorkStart, newWorkEnd, oldWorkStart, oldWorkEnd)) {
                const formattedNewStart = formatDate(workHistoryData.fromDate);
                const formattedNewEnd = formatDate(workHistoryData.toDate);
                const formattedOldStart = formatDate(oldHistory.fromDate);
                const formattedOldEnd = formatDate(oldHistory.toDate);

                throw new Error(`Khoảng thời gian làm việc từ ${formattedNewStart} đến ${formattedNewEnd} bị trùng với lịch sử làm việc cũ (từ ${formattedOldStart} đến ${formattedOldEnd}, mã đề xuất ${oldHistory.requestNo}).`);
            }
        }
        
        console.log('✅ Kiểm tra trùng lặp ngày thành công, không có chồng chéo.');
    }




    // validateWorkHistoryFields(workHistoryData, recruitmentDetails) {
    //     const { fromDate, toDate, hourlyRate } = workHistoryData;
        
    //     if (!fromDate || !toDate) {
    //         throw new Error('Từ ngày và Đến ngày là bắt buộc.');
    //     }

    //     const fromDateObj = new Date(fromDate);
    //     const toDateObj = new Date(toDate);
        
    //     if (isNaN(fromDateObj.getTime()) || isNaN(toDateObj.getTime())) {
    //         throw new Error('Định dạng ngày không hợp lệ.');
    //     }

    //     if (toDateObj < fromDateObj) {
    //         throw new Error('Đến ngày phải lớn hơn hoặc bằng Từ ngày.');
    //     }

    //     if (recruitmentDetails && recruitmentDetails.fromDate && recruitmentDetails.toDate) {
    //         const recruitmentStart = new Date(recruitmentDetails.fromDate);
    //         const recruitmentEnd = new Date(recruitmentDetails.toDate);

    //         if (fromDateObj < recruitmentStart || toDateObj > recruitmentEnd) {
    //             throw new Error(
    //                 `Khoảng ngày làm việc (${formatDate(fromDate)} - ${formatDate(toDate)}) phải nằm trong khoảng ngày của đề xuất tuyển dụng (${formatDate(recruitmentDetails.fromDate)} - ${formatDate(recruitmentDetails.toDate)}).`
    //             );
    //         }
    //     }

    //     if (hourlyRate !== undefined && (isNaN(hourlyRate) || hourlyRate < 0)) {
    //         throw new Error('Mức lương/giờ phải là số và không được âm.');
    //     }
    // }

    validateWorkHistoryFields(workHistoryData, recruitmentDetails) {
        const { fromDate, toDate, hourlyRate } = workHistoryData;
        
        if (!fromDate || !toDate) {
            throw new Error('Từ ngày và Đến ngày là bắt buộc.');
        }

        const fromDateObj = new Date(fromDate);
        const toDateObj = new Date(toDate);
        
        if (isNaN(fromDateObj.getTime()) || isNaN(toDateObj.getTime())) {
            throw new Error('Định dạng ngày không hợp lệ.');
        }

        if (toDateObj < fromDateObj) {
            throw new Error('Đến ngày phải lớn hơn hoặc bằng Từ ngày.');
        }

        if (recruitmentDetails && recruitmentDetails.fromDate && recruitmentDetails.toDate) {
            const recruitmentStart = new Date(recruitmentDetails.fromDate);
            const recruitmentEnd = new Date(recruitmentDetails.toDate);

            // ✅ SỬA: Normalize về đầu ngày để tránh lỗi precision
            fromDateObj.setHours(0, 0, 0, 0);
            toDateObj.setHours(23, 59, 59, 999);  // Cuối ngày để inclusive
            recruitmentStart.setHours(0, 0, 0, 0);
            recruitmentEnd.setHours(23, 59, 59, 999);

            if (fromDateObj < recruitmentStart || toDateObj > recruitmentEnd) {
                throw new Error(
                    `Khoảng ngày làm việc (${formatDate(fromDate)} - ${formatDate(toDate)}) phải nằm trong khoảng ngày của đề xuất tuyển dụng (${formatDate(recruitmentDetails.fromDate)} - ${formatDate(recruitmentDetails.toDate)}).`
                );
            }
        }

        if (hourlyRate !== undefined && (isNaN(hourlyRate) || hourlyRate < 0)) {
            throw new Error('Mức lương/giờ phải là số và không được âm.');
        }
    }




    async addWorkHistory(workHistoryData, recruitmentService) {
        try {
            const { employeeId, requestNo, fromDate, toDate, hourlyRate } = workHistoryData;

            console.log('📥 WORK HISTORY SERVICE: Processing new work history:', { employeeId, requestNo, fromDate, toDate, hourlyRate });

            const recruitmentDetails = await recruitmentService.getRequestByNo(requestNo);

            if (!recruitmentDetails) {
                throw new Error(`Không tìm thấy đề xuất tuyển dụng với mã: ${requestNo}`);
            }

            this.validateWorkHistoryFields(workHistoryData, recruitmentDetails);
            //await this.validateWorkHistoryDateOverlap(employeeId, requestNo, recruitmentService);
            await this.validateWorkHistoryDateOverlap(employeeId, workHistoryData, recruitmentService);
            const transformedData = this.transformWorkHistoryForLark(workHistoryData);
            
            console.log('📤 WORK HISTORY SERVICE: Sending data to Lark:', transformedData);
            
            const response = await LarkClient.post(`/bitable/v1/apps/${this.baseId}/tables/${this.tableId}/records`, {
                fields: transformedData
            });

            console.log('📥 WORK HISTORY SERVICE: Raw Lark response:', response);

            // THÊM: Kiểm tra mã lỗi từ Lark API
            if (response.code !== 0) {
                throw new Error(`Lỗi từ Lark API khi thêm: ${response.msg} (code: ${response.code})`);
            }

            CacheService.delete('work_history_all');
            CacheService.delete('salary_data_all');

            return {
                success: true,
                ...workHistoryData,
                larkResponse: response
            };
            
        } catch (error) {
            console.error('❌ WORK HISTORY SERVICE: Full error:', error);
            await this.handleError(error, 'addWorkHistory');
            throw error;
        }
    }


    async updateWorkHistory(id, workHistoryData) {
        try {
            const { employeeId, requestNo, fromDate, toDate, hourlyRate } = workHistoryData;

            console.log('📝 WORK HISTORY SERVICE: Updating work history:', { id, ...workHistoryData });

            const currentWorkHistory = await this.getWorkHistoryById(id);
            if (!currentWorkHistory) {
                throw new Error(`Không tìm thấy lịch sử công việc với ID: ${id}`);
            }

            if (!employeeId || !requestNo) {
                throw new Error('Mã nhân viên và Request No. là bắt buộc');
            }

            // SỬA: Loại bỏ hoàn toàn việc ghi đè vào các trường hệ thống
            const transformedData = this.transformWorkHistoryForLark(workHistoryData);
            
            console.log('📤 WORK HISTORY SERVICE: Updating data in Lark:', transformedData);
            
            const response = await LarkClient.put(`/bitable/v1/apps/${this.baseId}/tables/${this.tableId}/records/${id}`, {
                fields: transformedData
            });

            console.log('📥 WORK HISTORY SERVICE: Update response:', response);

            // THÊM: Kiểm tra mã lỗi từ Lark API
            if (response.code !== 0) {
                throw new Error(`Lỗi từ Lark API khi cập nhật: ${response.msg} (code: ${response.code})`);
            }

            // Xóa cache để đảm bảo dữ liệu được làm mới
            CacheService.delete('work_history_all');
            CacheService.delete('salary_data_all');
            CacheService.clear(); // Xóa toàn bộ cache để an toàn

            return {
                success: true,
                id: id,
                ...workHistoryData,
                larkResponse: response
            };
            
        } catch (error) {
            console.error('❌ WORK HISTORY SERVICE: Update error:', error);
            await this.handleError(error, 'updateWorkHistory');
            throw error;
        }
    }


    async deleteWorkHistory(id) {
        try {
            console.log('🗑️ WORK HISTORY SERVICE: Deleting work history:', id);

            const currentWorkHistory = await this.getWorkHistoryById(id);
            if (!currentWorkHistory) {
                throw new Error(`Không tìm thấy lịch sử công việc với ID: ${id}`);
            }

            const response = await LarkClient.delete(`/bitable/v1/apps/${this.baseId}/tables/${this.tableId}/records/${id}`);
            
            // THÊM: Kiểm tra mã lỗi từ Lark API
            if (response.code !== 0) {
                throw new Error(`Lỗi từ Lark API khi xóa: ${response.msg} (code: ${response.code})`);
            }

            console.log('✅ WORK HISTORY SERVICE: Work history deleted successfully');

            CacheService.delete('work_history_all');
            CacheService.delete('salary_data_all');
            CacheService.clear();
            
            return {
                success: true,
                message: 'Xóa lịch sử công việc thành công'
            };
            
        } catch (error) {
            console.error('❌ WORK HISTORY SERVICE: Delete error:', error);
            await this.handleError(error, 'deleteWorkHistory');
            throw error;
        }
    }

    // ✅ THÊM MỚI: Method để xóa tất cả work history của một employee
    async deleteAllWorkHistoryByEmployee(employeeId) {
        try {
            console.log(`🗑️ Deleting all work history for employee: ${employeeId}`);
            
            // Lấy tất cả work history của employee
            const workHistories = await this.getWorkHistoryByEmployee(employeeId);
            
            if (workHistories.length === 0) {
                console.log('ℹ️ No work history to delete for this employee');
                return { success: true, deletedCount: 0 };
            }
            
            // Xóa từng record
            const deletePromises = workHistories.map(wh => 
                this.deleteWorkHistory(wh.id)
            );
            
            const results = await Promise.allSettled(deletePromises);
            
            const successful = results.filter(r => r.status === 'fulfilled').length;
            const failed = results.filter(r => r.status === 'rejected').length;
            
            if (failed > 0) {
                throw new Error(`Failed to delete ${failed} out of ${workHistories.length} work history records`);
            }
            
            console.log(`✅ Successfully deleted ${successful} work history records`);
            
            return {
                success: true,
                deletedCount: successful,
                originalCount: workHistories.length
            };
            
        } catch (error) {
            console.error('❌ Error deleting work history by employee:', error);
            throw error;
        }
    }




    async getWorkHistoryById(id) {
        try {
            console.log('🔍 WORK HISTORY SERVICE: Getting work history by ID:', id);
            
            const response = await LarkClient.get(`/bitable/v1/apps/${this.baseId}/tables/${this.tableId}/records/${id}`);
            
            if (response.data && response.data.record) {
                const salaryData = await this.getSalaryData();
                return this.transformWorkHistoryDataWithSalary([response.data.record], salaryData)[0];
            }
            
            return null;
            
        } catch (error) {
            console.error('❌ Error getting work history by ID:', error);
            return null;
        }
    }


    async getAllWorkHistory() {
        const cacheKey = 'work_history_all';
        let history = CacheService.get(cacheKey);

        if (history) {
            console.log(`✅ WORK HISTORY: Loaded ${history.length} records from cache.`);
            return history;
        }

        try {
            console.log('📡 WORK HISTORY: Fetching all work history from Lark...');
            const response = await LarkClient.getAllRecords(
                `/bitable/v1/apps/${this.baseId}/tables/${this.tableId}/records`
            );

            const salaryData = await this.getSalaryData();
            history = this.transformWorkHistoryDataWithSalary(response.data?.items || [], salaryData);
            console.log(`✅ WORK HISTORY: Transformed ${history.length} total records.`);

            CacheService.set(cacheKey, history, 300000);
            return history;
        } catch (error) {
            console.error('❌ Error getting all work history:', error);
            return [];
        }
    }


    transformWorkHistoryData(larkData) {
        return larkData.map(record => ({
            id: record.record_id,
            employeeId: record.fields['Mã nhân viên'] || '',
            requestNo: record.fields['Request No.'] || '',
            fromDate: record.fields['Từ ngày'] || null,
            toDate: record.fields['Đến ngày'] || null,
            hourlyRate: record.fields['Mức lương/giờ'] || null,
            // SỬA: Lấy giá trị thực từ Lark, không tự tạo mới
            createdAt: record.fields['Created At'] || null,
            updatedAt: record.fields['Updated At'] || null
        }));
    }


    // transformWorkHistoryForLark(workHistoryData) {
    //     const larkData = {
    //         'Mã nhân viên': workHistoryData.employeeId,
    //         'Request No.': workHistoryData.requestNo
    //     };

    //     if (workHistoryData.fromDate) {
    //         larkData['Từ ngày'] = workHistoryData.fromDate;
    //     }

    //     if (workHistoryData.toDate) {
    //         larkData['Đến ngày'] = workHistoryData.toDate;
    //     }

    //     if (workHistoryData.hourlyRate !== undefined && workHistoryData.hourlyRate !== null) {
    //         larkData['Mức lương/giờ'] = parseFloat(workHistoryData.hourlyRate);
    //     }

    //     return larkData;
    // }

    transformWorkHistoryForLark(workHistoryData) {
        const larkData = {
            'Mã nhân viên': workHistoryData.employeeId,
            'Request No.': workHistoryData.requestNo
        };

        // ✅ Convert string date to timestamp
        if (workHistoryData.fromDate) {
            const fromDate = new Date(workHistoryData.fromDate);
            larkData['Từ ngày'] = fromDate.getTime(); // Convert to timestamp
        }

        if (workHistoryData.toDate) {
            const toDate = new Date(workHistoryData.toDate);
            larkData['Đến ngày'] = toDate.getTime(); // Convert to timestamp
        }

        if (workHistoryData.hourlyRate !== undefined && workHistoryData.hourlyRate !== null) {
            larkData['Mức lương/giờ'] = parseFloat(workHistoryData.hourlyRate);
        }

        return larkData;
    }



}


export default WorkHistoryService;

```


==================== File: .\server\services\master-data\index.js ====================

// Master data services exports
export { default as StoreService } from './store-service.js';
export { default as PositionService } from './position-service.js';
export { default as MasterDataValidator } from './master-data-validator.js';

```


==================== File: .\server\services\master-data\master-data-validator.js ====================

// Master data validation service
class MasterDataValidator {
    static validateStoreData(storeData) {
        const errors = [];

        // Required fields validation
        if (!storeData.storeName || storeData.storeName.trim().length < 2) {
            errors.push('Tên cửa hàng phải có ít nhất 2 ký tự');
        }

        if (!storeData.address || storeData.address.trim().length < 5) {
            errors.push('Địa chỉ phải có ít nhất 5 ký tự');
        }

        // Status validation
        if (storeData.status && !['active', 'inactive'].includes(storeData.status)) {
            errors.push('Trạng thái phải là active hoặc inactive');
        }

        return errors;
    }

    static validatePositionData(positionData) {
        const errors = [];

        // Required fields validation
        if (!positionData.positionName || positionData.positionName.trim().length < 2) {
            errors.push('Tên vị trí phải có ít nhất 2 ký tự');
        }

        // Description validation (optional but if provided must be reasonable)
        if (positionData.description && positionData.description.trim().length < 3) {
            errors.push('Mô tả phải có ít nhất 3 ký tự nếu được cung cấp');
        }

        // Status validation
        if (positionData.status && !['active', 'inactive'].includes(positionData.status)) {
            errors.push('Trạng thái phải là active hoặc inactive');
        }

        return errors;
    }

    static validateMasterDataBatch(dataArray, type) {
        const errors = [];
        const names = [];

        dataArray.forEach((item, index) => {
            // Validate individual item
            let itemErrors = [];
            if (type === 'store') {
                itemErrors = this.validateStoreData(item);
            } else if (type === 'position') {
                itemErrors = this.validatePositionData(item);
            }

            if (itemErrors.length > 0) {
                errors.push(`Item ${index + 1}: ${itemErrors.join(', ')}`);
            }

            // Check for duplicate names
            const nameField = type === 'store' ? 'storeName' : 'positionName';
            if (item[nameField] && names.includes(item[nameField])) {
                errors.push(`Item ${index + 1}: Tên đã bị trùng lặp trong batch`);
            } else if (item[nameField]) {
                names.push(item[nameField]);
            }
        });

        return errors;
    }

    static sanitizeStoreData(storeData) {
        return {
            storeName: storeData.storeName?.trim() || '',
            address: storeData.address?.trim() || '',
            status: storeData.status || 'active',
            createdAt: storeData.createdAt || new Date().toISOString(),
            updatedAt: new Date().toISOString()
        };
    }

    static sanitizePositionData(positionData) {
        return {
            positionName: positionData.positionName?.trim() || '',
            description: positionData.description?.trim() || '',
            status: positionData.status || 'active',
            createdAt: positionData.createdAt || new Date().toISOString(),
            updatedAt: new Date().toISOString()
        };
    }
}

export default MasterDataValidator;

```


==================== File: .\server\services\master-data\position-service.js ====================

// Position management service
import BaseService from '../core/base-service.js';
import LarkClient from '../core/lark-client.js';
import CacheService from '../core/cache-service.js';

class PositionService extends BaseService {
    constructor() {
        super();
        this.baseId = process.env.LARK_BASE_ID;
        this.tableId = process.env.LARK_POSITION_TABLE_ID;
    }

    async initializeService() {
        console.log('Initializing Position Service...');
    }

    async getAllPositions() {
        const cacheKey = 'positions_all';
        let positions = CacheService.get(cacheKey);
        
        if (!positions) {
            try {
                const response = await LarkClient.get(`/bitable/v1/apps/${this.baseId}/tables/${this.tableId}/records`);
                positions = this.transformPositionData(response.data?.items || []);
                CacheService.set(cacheKey, positions, 300000); // 5 minutes
            } catch (error) {
                console.error('Error fetching positions from Lark:', error);
                positions = this.getMockPositions();
            }
        }
        
        return positions;
    }

    async addPosition(positionData) {
        try {
            const transformedData = this.transformPositionForLark(positionData);
            
            const response = await LarkClient.post(`/bitable/v1/apps/${this.baseId}/tables/${this.tableId}/records`, {
                fields: transformedData
            });

            // Clear cache
            CacheService.delete('positions_all');
            
            return this.transformPositionData([response.data])[0];
        } catch (error) {
            await this.handleError(error, 'addPosition');
            throw error;
        }
    }

    async updatePosition(id, positionData) {
        try {
            const transformedData = this.transformPositionForLark(positionData);
            
            const response = await LarkClient.put(`/bitable/v1/apps/${this.baseId}/tables/${this.tableId}/records/${id}`, {
                fields: transformedData
            });

            // Clear cache
            CacheService.delete('positions_all');
            
            return this.transformPositionData([response.data])[0];
        } catch (error) {
            await this.handleError(error, 'updatePosition');
            throw error;
        }
    }

    async deletePosition(id) {
        try {
            await LarkClient.delete(`/bitable/v1/apps/${this.baseId}/tables/${this.tableId}/records/${id}`);
            
            // Clear cache
            CacheService.delete('positions_all');
            
            return true;
        } catch (error) {
            await this.handleError(error, 'deletePosition');
            throw error;
        }
    }

    async getActivePositions() {
        const positions = await this.getAllPositions();
        return positions.filter(position => position.status === 'active');
    }

    async searchPositions(query) {
        const positions = await this.getAllPositions();
        
        if (!query) return positions;
        
        const searchTerm = query.toLowerCase();
        return positions.filter(position => 
            position.positionName.toLowerCase().includes(searchTerm) ||
            (position.description && position.description.toLowerCase().includes(searchTerm))
        );
    }

    transformPositionData(larkData) {
        return larkData.map(record => ({
            id: record.record_id,
            positionName: record.fields['Position Name'] || '',
            description: record.fields['Description'] || '',
            status: record.fields['Status'] || 'active',
            createdAt: record.fields['Created At'] || new Date().toISOString(),
            updatedAt: record.fields['Updated At'] || new Date().toISOString()
        }));
    }

    transformPositionForLark(positionData) {
        return {
            'Position Name': positionData.positionName,
            'Description': positionData.description || '',
            'Status': positionData.status || 'active',
            'Created At': positionData.createdAt || new Date().toISOString(),
            'Updated At': positionData.updatedAt || new Date().toISOString()
        };
    }

    getMockPositions() {
        return [
            {
                id: 'pos_001',
                positionName: 'Nhân viên bán hàng',
                description: 'Nhân viên bán hàng tại cửa hàng',
                status: 'active',
                createdAt: new Date().toISOString(),
                updatedAt: new Date().toISOString()
            },
            {
                id: 'pos_002',
                positionName: 'Nhân viên kho',
                description: 'Nhân viên quản lý kho hàng',
                status: 'active',
                createdAt: new Date().toISOString(),
                updatedAt: new Date().toISOString()
            },
            {
                id: 'pos_003',
                positionName: 'Trưởng ca',
                description: 'Trưởng ca quản lý nhân viên',
                status: 'active',
                createdAt: new Date().toISOString(),
                updatedAt: new Date().toISOString()
            }
        ];
    }
}

export default PositionService;

```


==================== File: .\server\services\master-data\store-service.js ====================

// Store management service
import BaseService from '../core/base-service.js';
import LarkClient from '../core/lark-client.js';
import CacheService from '../core/cache-service.js';

class StoreService extends BaseService {
    constructor() {
        super();
        this.baseId = process.env.LARK_BASE_ID;
        this.tableId = process.env.LARK_STORE_TABLE_ID;
    }

    async initializeService() {
        console.log('Initializing Store Service...');
    }

    async getAllStores() {
        const cacheKey = 'stores_all';
        let stores = CacheService.get(cacheKey);
        
        if (!stores) {
            try {
                const response = await LarkClient.get(`/bitable/v1/apps/${this.baseId}/tables/${this.tableId}/records`);
                stores = this.transformStoreData(response.data?.items || []);
                CacheService.set(cacheKey, stores, 300000); // 5 minutes
            } catch (error) {
                console.error('Error fetching stores from Lark:', error);
                stores = this.getMockStores();
            }
        }
        
        return stores;
    }

    async addStore(storeData) {
        try {
            const transformedData = this.transformStoreForLark(storeData);
            
            const response = await LarkClient.post(`/bitable/v1/apps/${this.baseId}/tables/${this.tableId}/records`, {
                fields: transformedData
            });

            // Clear cache
            CacheService.delete('stores_all');
            
            return this.transformStoreData([response.data])[0];
        } catch (error) {
            await this.handleError(error, 'addStore');
            throw error;
        }
    }

    async updateStore(id, storeData) {
        try {
            const transformedData = this.transformStoreForLark(storeData);
            
            const response = await LarkClient.put(`/bitable/v1/apps/${this.baseId}/tables/${this.tableId}/records/${id}`, {
                fields: transformedData
            });

            // Clear cache
            CacheService.delete('stores_all');
            
            return this.transformStoreData([response.data])[0];
        } catch (error) {
            await this.handleError(error, 'updateStore');
            throw error;
        }
    }

    async deleteStore(id) {
        try {
            await LarkClient.delete(`/bitable/v1/apps/${this.baseId}/tables/${this.tableId}/records/${id}`);
            
            // Clear cache
            CacheService.delete('stores_all');
            
            return true;
        } catch (error) {
            await this.handleError(error, 'deleteStore');
            throw error;
        }
    }

    async getActiveStores() {
        const stores = await this.getAllStores();
        return stores.filter(store => store.status === 'active');
    }

    async searchStores(query) {
        const stores = await this.getAllStores();
        
        if (!query) return stores;
        
        const searchTerm = query.toLowerCase();
        return stores.filter(store => 
            store.storeName.toLowerCase().includes(searchTerm) ||
            store.address.toLowerCase().includes(searchTerm)
        );
    }

    transformStoreData(larkData) {
        return larkData.map(record => ({
            id: record.record_id,
            storeName: record.fields['Store Name'] || '',
            address: record.fields['Address'] || '',
            status: record.fields['Status'] || 'active',
            createdAt: record.fields['Created At'] || new Date().toISOString(),
            updatedAt: record.fields['Updated At'] || new Date().toISOString()
        }));
    }

    transformStoreForLark(storeData) {
        return {
            'Store Name': storeData.storeName,
            'Address': storeData.address,
            'Status': storeData.status || 'active',
            'Created At': storeData.createdAt || new Date().toISOString(),
            'Updated At': storeData.updatedAt || new Date().toISOString()
        };
    }

    getMockStores() {
        return [
            {
                id: 'store_001',
                storeName: '116 Cầu Giấy',
                address: '116 Cầu Giấy, Hà Nội',
                status: 'active',
                createdAt: new Date().toISOString(),
                updatedAt: new Date().toISOString()
            },
            {
                id: 'store_002',
                storeName: 'Trâm Trỗi',
                address: 'Trâm Trỗi, Hà Nội',
                status: 'active',
                createdAt: new Date().toISOString(),
                updatedAt: new Date().toISOString()
            }
        ];
    }
}

export default StoreService;

```


==================== File: .\server\services\recruitment\index.js ====================

// Recruitment services exports
export { default as RecruitmentService } from './recruitment-service.js';
export { default as RecruitmentValidator } from './recruitment-validator.js';

```


==================== File: .\server\services\recruitment\recruitment-service.js ====================

//hr-management-system\server\services\recruitment\recruitment-service.js

// Recruitment service
import BaseService from '../core/base-service.js';
import LarkClient from '../core/lark-client.js';
import CacheService from '../core/cache-service.js';
import larkServiceManager from '../lark-service-manager.js';
import { larkConfig } from '../../config/lark-config.js';

// **HÀM TIỆN ÍCH ĐỊNH DẠNG NGÀY**
const formatDate = (dateValue) => {
    if (!dateValue) return null;
    const date = new Date(dateValue);
    if (isNaN(date.getTime())) return null;

    const day = String(date.getDate()).padStart(2, '0');
    const month = String(date.getMonth() + 1).padStart(2, '0');
    const year = date.getFullYear();
    return `${day}/${month}/${year}`;
};

class RecruitmentService extends BaseService {
    constructor() {
        super();
        this.baseId = process.env.LARK_BASE_ID;
        this.tableId = process.env.LARK_RECRUITMENT_TABLE_ID;
        this.hoursSummaryTableId = process.env.LARK_HOURS_SUMMARY_TABLE_ID;
    }

    async initializeService() {
        console.log('Initializing Recruitment Service...');
    }


    async getRecruitmentRequests(filters = {}) {
        try {
            console.log('📡 RECRUITMENT: Fetching ALL recruitment requests from Lark...');
            
            const response = await LarkClient.getAllRecords(
                `/bitable/v1/apps/${this.baseId}/tables/${this.tableId}/records`
            );

            let requests = this.transformRecruitmentData(response.data?.items || []);
            console.log(`✅ RECRUITMENT: Retrieved ${requests.length} total records from Lark`);
            
            // ✅ SỬA: Filter ở application level - chỉ lấy chính xác "Approved" và "Under Review"
            if (filters.status) {
                const statusArray = Array.isArray(filters.status) 
                    ? filters.status 
                    : filters.status.split(',').map(s => s.trim());
                
                console.log('🔍 RECRUITMENT: Filtering by status:', statusArray);
                
                requests = requests.filter(request => {
                    const requestStatus = request.status;
                    console.log(`📝 Checking: ${request.requestNo} - Status: "${requestStatus}"`);
                    
                    // ✅ ĐƠN GIẢN: Chỉ kiểm tra exact match
                    return statusArray.includes(requestStatus);
                });
            }

            console.log(`✅ RECRUITMENT: After filtering: ${requests.length} records`);
            return requests;
            
        } catch (error) {
            console.error('❌ Error fetching recruitment requests:', error);
            throw error;
        }
    }



    async addRecruitmentRequest(requestData) {
        // Giữ nguyên logic
    }

    async updateRecruitmentRequest(id, requestData) {
        // Giữ nguyên logic
    }


    async getRequestByNo(requestNo) {
        console.log('🔍 RECRUITMENT: Searching for request number:', requestNo);

        const allRequests = await this.getRecruitmentRequests();
        
        if (!allRequests || allRequests.length === 0) {
            console.log('⚠️ RECRUITMENT: No requests found to search in.');
            return null;
        }

        // ✅ THAY ĐỔI: Tìm TẤT CẢ records có cùng requestNo
        const matchingRecords = allRequests.filter(record => {
            const requestValue = record.requestNo;
            return String(requestValue || '').trim() === String(requestNo).trim();
        });

        if (matchingRecords.length === 0) {
            console.log('🔍 RECRUITMENT: Search result: NOT_FOUND');
            return null;
        }

        // ✅ THÊM: Logic merge giống Frontend
        if (matchingRecords.length === 1) {
            return matchingRecords[0];
        }

        // Merge multiple records
        const allFromDates = matchingRecords
            .map(r => r.fromDate)
            .filter(date => date && typeof date === 'number')
            .sort((a, b) => a - b);
            
        const allToDates = matchingRecords
            .map(r => r.toDate)
            .filter(date => date && typeof date === 'number') 
            .sort((a, b) => a - b);

        const minFromDate = allFromDates[0];
        const maxToDate = allToDates[allToDates.length - 1];

        // ✅ TRẢ VỀ: Record đã merge
        const mergedRecord = {
            ...matchingRecords[0], // Base record
            fromDate: minFromDate,
            toDate: maxToDate,
            fromDateFormatted: this.formatDate(minFromDate),
            toDateFormatted: this.formatDate(maxToDate),
            originalRecordCount: matchingRecords.length
        };

        console.log('✅ RECRUITMENT: Merged record:', {
            requestNo,
            fromDate: mergedRecord.fromDateFormatted,
            toDate: mergedRecord.toDateFormatted,
            recordCount: matchingRecords.length
        });

        return mergedRecord;
    }

    // ✅ THÊM: Helper method format ngày
    formatDate(timestamp) {
        if (!timestamp || typeof timestamp !== 'number') return null;
        
        try {
            const date = new Date(timestamp);
            if (isNaN(date.getTime())) return null;
            
            const day = String(date.getDate()).padStart(2, '0');
            const month = String(date.getMonth() + 1).padStart(2, '0');
            const year = date.getFullYear();
            return `${day}/${month}/${year}`;
        } catch (error) {
            console.error('Error formatting date:', error);
            return null;
        }
    }


    // ✅ THAY ĐỔI LOGIC CỐT LÕI TẠI ĐÂY
    async getRecruitmentHoursSummary() {
        try {
            console.log('📊 Getting recruitment hours summary with NEW logic...');

            // 1. Lấy tất cả recruitment requests
            const recruitmentRequests = await this.getRecruitmentRequests();
            console.log('📋 RECRUITMENT REQUESTS:', recruitmentRequests.length, 'requests found');

            // 2. Lấy services cần thiết
            const employeeService = larkServiceManager.getService('employee');

            // 3. Lấy dữ liệu cần thiết để mapping
            const allWorkHistory = await this.getAllWorkHistory();
            const allEmployees = await employeeService.getAllEmployees();
            console.log('📚 WORK HISTORY:', allWorkHistory.length, 'records');
            console.log('👥 EMPLOYEES:', allEmployees.length, 'employees');

            // ✅ CẬP NHẬT: Lấy cả hours và salary maps
            const mapsResult = await this.getEmployeeHoursFromSummaryTable();
            const employeeHoursMap = mapsResult.hoursMap;
            const employeeSalaryMap = mapsResult.salaryMap;
            console.log('⏰ EMPLOYEE HOURS MAP:', employeeHoursMap.size, 'entries');
            console.log('💰 EMPLOYEE SALARY MAP:', employeeSalaryMap.size, 'entries');

            // 4. Tạo map để lookup nhanh
            const employeeMap = new Map(allEmployees.map(emp => [emp.employeeId, emp]));
            console.log('👤 EMPLOYEE MAP:', employeeMap.size, 'entries');

            // ✅ THÊM: Group requests by requestNo để merge
            const groupedRequests = new Map();
            recruitmentRequests.forEach(request => {
                if (!groupedRequests.has(request.requestNo)) {
                    groupedRequests.set(request.requestNo, []);
                }
                groupedRequests.get(request.requestNo).push(request);
            });

            // 5. Xử lý từng grouped recruitment request
            const hoursSummary = [];
            let totalCalculatedHours = 0;
            let totalCalculatedSalary = 0; // ✅ THÊM: Tracking tổng lương

            // ✅ CẬP NHẬT: Process theo grouped requests
            for (const [requestNo, requestGroup] of groupedRequests.entries()) {
                console.log(`\n🔄 Processing merged request: ${requestNo} (${requestGroup.length} records)`);
                
                // ✅ MERGE: Lấy thông tin từ record đầu tiên, merge ngày tháng
                const baseRequest = requestGroup[0];
                const allFromDates = requestGroup
                    .map(r => r.fromDate)
                    .filter(date => date && typeof date === 'number')
                    .sort((a, b) => a - b);
                    
                const allToDates = requestGroup
                    .map(r => r.toDate)
                    .filter(date => date && typeof date === 'number')
                    .sort((a, b) => a - b);

                const minFromDate = allFromDates[0];
                const maxToDate = allToDates[allToDates.length - 1];

                const mergedRequest = {
                    ...baseRequest,
                    fromDate: minFromDate,
                    toDate: maxToDate,
                    fromDateFormatted: this.formatDate(minFromDate),
                    toDateFormatted: this.formatDate(maxToDate)
                };

                const requestSummary = await this.calculateRequestHours(
                    mergedRequest,
                    allWorkHistory,
                    employeeMap,
                    employeeHoursMap,
                    employeeSalaryMap // ✅ THÊM: Pass salary map
                );

                console.log(`📊 Request ${requestNo} summary:`, {
                    totalEmployees: requestSummary.totalEmployees,
                    totalHoursNumeric: requestSummary.totalHoursNumeric,
                    totalSalaryNumeric: requestSummary.totalSalaryNumeric // ✅ THÊM
                });

                totalCalculatedHours += requestSummary.totalHoursNumeric;
                totalCalculatedSalary += requestSummary.totalSalaryNumeric; // ✅ THÊM

                if (requestSummary.employees.length > 0) {
                    hoursSummary.push(requestSummary);
                }
            }

            console.log(`\n📊 FINAL CALCULATION RESULT:`);
            console.log(`- Total requests: ${hoursSummary.length}`);
            console.log(`- Total hours: ${totalCalculatedHours}`);
            console.log(`- Total salary: ${totalCalculatedSalary}`); // ✅ THÊM

            return hoursSummary;

        } catch (error) {
            console.error('❌ Error getting recruitment hours summary:', error);
            throw error;
        }
    }


    // ✅ HÀM MỚI: Lấy dữ liệu từ bảng tổng hợp giờ công
    async getEmployeeHoursFromSummaryTable() {
        console.log('📡 Fetching data from hours summary table...');
        const cacheKey = 'hours_summary_table_data';
        let cachedData = CacheService.get(cacheKey);
        if (cachedData) {
            console.log('✅ Loaded hours summary from cache.');
            console.log('🗂️ CACHED HOURS MAP:', Array.from(cachedData.hoursMap.entries()));
            console.log('💰 CACHED SALARY MAP:', Array.from(cachedData.salaryMap.entries()));
            return cachedData;
        }

        try {
            const response = await LarkClient.getAllRecords(
                `/bitable/v1/apps/${this.baseId}/tables/${this.hoursSummaryTableId}/records`
            );
            const records = response.data?.items || [];
            console.log('📄 RAW HOURS SUMMARY RECORDS:', records.length, 'records');

            const employeeHoursMap = new Map();
            const employeeSalaryMap = new Map();
            const employeeHourlyRateMap = new Map();

            records.forEach((record, index) => {
                const fields = record.fields;
                console.log(`\n📝 Record #${index + 1} FULL FIELDS:`, fields);
                
                const employeeIdField = fields['Mã nhân viên'];
                console.log(`Record #${index + 1} - Mã nhân viên:`, employeeIdField, '| Type:', typeof employeeIdField);
                
                let employeeId = '';
                if (Array.isArray(employeeIdField) && employeeIdField.length > 0) {
                    employeeId = employeeIdField[0]?.text;
                } else if (typeof employeeIdField === 'string') {
                    employeeId = employeeIdField;
                }

                const totalHours = fields['Tổng số giờ làm'] || 0;
                // ✅ THÊM: Lấy cột lương với nhiều tên có thể
                const salary = fields['Lương'] || 0;
                const hourlyRate = fields['Mức lương/giờ'] || 0;
                console.log(`📊 Record #${index + 1} - Employee: "${employeeId}", Hours: ${totalHours}, Salary: ${salary}`);

                if (employeeId) {
                    // ✅ CỘNG DỒN GIỜ CÔNG
                    const currentHours = employeeHoursMap.get(employeeId) || 0;
                    const newTotalHours = currentHours + totalHours;
                    employeeHoursMap.set(employeeId, newTotalHours);
                    
                    // ✅ THÊM: CỘNG DỒN LƯƠNG
                    const currentSalary = employeeSalaryMap.get(employeeId) || 0;
                    const newTotalSalary = currentSalary + salary;
                    employeeSalaryMap.set(employeeId, newTotalSalary);
                    
                    // ✅ THÊM: Lưu hourly rate nếu có
                    if (hourlyRate > 0) {
                        employeeHourlyRateMap.set(employeeId, hourlyRate);
                    }

                    console.log(`✅ Updated: "${employeeId}" -> Hours: ${currentHours} + ${totalHours} = ${newTotalHours}, Salary: ${currentSalary} + ${salary} = ${newTotalSalary}`);
                } else {
                    console.log(`⚠️ Skipped record #${index + 1} - No valid employeeId`);
                }
            });

            console.log(`\n🗺️ FINAL EMPLOYEE HOURS MAP:`, Array.from(employeeHoursMap.entries()));
            console.log(`💰 FINAL EMPLOYEE SALARY MAP:`, Array.from(employeeSalaryMap.entries()));
            
            // ✅ THAY ĐỔI: Trả về object chứa cả hours và salary maps
            const result = {
                hoursMap: employeeHoursMap,
                salaryMap: employeeSalaryMap,
                hourlyRateMap: employeeHourlyRateMap
                
            };
            
            CacheService.set(cacheKey, result, 300000);
            console.log(`✅ Created maps - Hours: ${employeeHoursMap.size}, Salary: ${employeeSalaryMap.size} entries.`);
            return result;
        } catch (error) {
            console.error('❌ Error fetching from hours summary table:', error);
            return {
                hoursMap: new Map(),
                salaryMap: new Map(),
                hourlyRateMap: new Map()
            };
        }
    }



    // ✅ HÀM ĐƯỢC CẬP NHẬT: Thay đổi logic tính toán
    async calculateRequestHours(request, allWorkHistory, employeeMap, employeeHoursMap, employeeSalaryMap) {
        console.log(`\n🔍 CALCULATING for REQUEST: ${request.requestNo}`);
        
        const requestEmployees = allWorkHistory.filter(wh => wh.requestNo === request.requestNo);
        
        // ✅ THÊM: Đếm unique employees
        const uniqueEmployeeIds = [...new Set(requestEmployees.map(re => re.employeeId))];
        console.log(`👥 Found ${uniqueEmployeeIds.length} UNIQUE employees for request ${request.requestNo}`);

        const employeeDetails = [];
        let totalRequestHours = 0;
        let totalRequestSalary = 0; // ✅ THÊM

        for (const employeeId of uniqueEmployeeIds) {
            const employee = employeeMap.get(employeeId);
            if (!employee) {
                console.log(`❌ Employee not found: ${employeeId}`);
                continue;
            }

            const totalHoursNumeric = employeeHoursMap.get(employeeId) || 0;
            const totalSalaryNumeric = employeeSalaryMap.get(employeeId) || 0; // ✅ THÊM

            totalRequestHours += totalHoursNumeric;
            totalRequestSalary += totalSalaryNumeric; // ✅ THÊM

            employeeDetails.push({
                employeeId: employeeId,
                fullName: employee.fullName,
                totalHours: this.formatHoursDisplay(totalHoursNumeric),
                totalHoursNumeric: totalHoursNumeric,
                totalSalary: this.formatCurrency(totalSalaryNumeric), // ✅ THÊM
                totalSalaryNumeric: totalSalaryNumeric // ✅ THÊM
            });
        }

        return {
            requestNo: request.requestNo,
            department: request.department,
            status: request.status,
            fromDate: request.fromDateFormatted,
            toDate: request.toDateFormatted,
            totalEmployees: uniqueEmployeeIds.length, // ✅ SỬA: Dùng unique count
            totalHours: this.formatHoursDisplay(totalRequestHours),
            totalHoursNumeric: totalRequestHours,
            totalSalary: this.formatCurrency(totalRequestSalary), // ✅ THÊM
            totalSalaryNumeric: totalRequestSalary, // ✅ THÊM
            employees: employeeDetails
        };
    }


    async getDetailedHoursForRequest(requestNo) {
        try {
            console.log(`📊 Getting detailed hours for request: ${requestNo}`);
            
            // Lấy chi tiết từ bảng Hours Summary (tblV2dGhT2O7w30b)
            const response = await LarkClient.getAllRecords(
                `/bitable/v1/apps/${this.baseId}/tables/${this.hoursSummaryTableId}/records`
            );
            
            const allRecords = response.data?.items || [];
            console.log(`📄 Found ${allRecords.length} total records in hours summary table`);
        

            // Lấy danh sách nhân viên thuộc request này từ Work History
            const workHistoryService = larkServiceManager.getService('workHistory');
            const workHistoryRecords = await workHistoryService.getAllWorkHistory(); // Cần thêm method này
            
            const employeesInRequest = workHistoryRecords
                .filter(wh => wh.requestNo === requestNo)
                .map(wh => wh.employeeId);
                
            console.log(`👥 Employees in request ${requestNo}:`, employeesInRequest);
            
            // Lọc và transform dữ liệu
            const detailedRecords = [];
            
            allRecords.forEach(record => {
                const fields = record.fields;
                
                // Lấy mã nhân viên
                const employeeIdField = fields['Mã nhân viên'];
                let employeeId = '';
                if (Array.isArray(employeeIdField) && employeeIdField.length > 0) {
                    employeeId = employeeIdField[0]?.text;
                } else if (typeof employeeIdField === 'string') {
                    employeeId = employeeIdField;
                }
                
                // Chỉ lấy bản ghi của nhân viên thuộc request này
                if (employeesInRequest.includes(employeeId)) {
                    detailedRecords.push({
                        employeeId: employeeId,
                        workDate: this.formatLarkDate(fields['Ngày chấm công']),
                        //checkInTime: this.formatLarkTime(fields['Thời gian chấm công vào']),
                        checkInTime: fields['Thời gian chấm công vào'],
                        //checkOutTime: this.formatLarkTime(fields['Thời gian chấm công ra']),
                        checkOutTime: fields['Thời gian chấm công ra'],
                        totalHours: fields['Tổng số giờ làm'] || 0,
                        requestNo: requestNo
                    });
                }
            });
            
            console.log(`✅ Retrieved ${detailedRecords.length} detailed records for request ${requestNo}`);
            return detailedRecords;
            
        } catch (error) {
            console.error('❌ Error getting detailed hours for request:', error);
            throw error;
        }
    }

    // ✅ THÊM: Method format tiền tệ VNĐ
    formatCurrency(amount) {
        if (!amount || amount === 0) return '0 ₫';
        try {
            return new Intl.NumberFormat('vi-VN', { 
                style: 'currency', 
                currency: 'VND',
                minimumFractionDigits: 0,
                maximumFractionDigits: 0
            }).format(amount);
        } catch (error) {
            console.error('Error formatting currency:', error);
            return `${amount.toLocaleString('vi-VN')} ₫`;
        }
    }

    formatLarkDate(dateValue) {
        if (!dateValue) return '';
        
        try {
            let date;
            
            // Nếu là timestamp (number)
            if (typeof dateValue === 'number') {
                date = new Date(dateValue);
            } 
            // Nếu là string ISO
            else if (typeof dateValue === 'string') {
                date = new Date(dateValue);
            }
            // Nếu đã là Date object
            else if (dateValue instanceof Date) {
                date = dateValue;
            }
            else {
                return 'Invalid Date';
            }
            
            // Kiểm tra tính hợp lệ của date
            if (isNaN(date.getTime())) {
                return 'Invalid Date';
            }
            
            // Format thành DD/MM/YYYY
            const day = String(date.getDate()).padStart(2, '0');
            const month = String(date.getMonth() + 1).padStart(2, '0');
            const year = date.getFullYear();
            
            return `${day}/${month}/${year}`;
        } catch (error) {
            console.error('Error formatting Lark date:', error);
            return 'Format Error';
        }
    }

    formatLarkTime(timeValue) {
        if (!timeValue) return '';
        
        try {
            let date;
            
            // Nếu là timestamp (number)
            if (typeof timeValue === 'number') {
                date = new Date(timeValue);
            }
            // Nếu là string ISO
            else if (typeof timeValue === 'string') {
                date = new Date(timeValue);
            }
            // Nếu đã là Date object
            else if (timeValue instanceof Date) {
                date = timeValue;
            }
            else {
                return 'Invalid Time';
            }
            
            // Kiểm tra tính hợp lệ của date
            if (isNaN(date.getTime())) {
                return 'Invalid Time';
            }
            
            // Format thành HH:MM
            const hours = String(date.getHours()).padStart(2, '0');
            const minutes = String(date.getMinutes()).padStart(2, '0');
            
            return `${hours}:${minutes}`;
        } catch (error) {
            console.error('Error formatting Lark time:', error);
            return 'Format Error';
        }
    }


    async getAllWorkHistory() {
        const cacheKey = 'work_history_all';
        let history = CacheService.get(cacheKey);

        if (history) {
            console.log(`✅ WORK HISTORY: Loaded ${history.length} records from cache.`);
            return history;
        }

        try {
            console.log('📡 WORK HISTORY: Fetching all work history from Lark...');
            const response = await LarkClient.getAllRecords(
                `/bitable/v1/apps/${process.env.LARK_BASE_ID}/tables/${process.env.LARK_WORK_HISTORY_TABLE_ID}/records`
            );

            history = this.transformWorkHistoryData(response.data?.items || []);
            console.log(`✅ WORK HISTORY: Transformed ${history.length} total records.`);

            CacheService.set(cacheKey, history, 300000);
            return history;
        } catch (error) {
            console.error('❌ Error getting all work history:', error);
            return [];
        }
    }

    transformWorkHistoryData(larkData) {
        return larkData.map(record => ({
            id: record.record_id,
            employeeId: record.fields['Mã nhân viên'] || '',
            requestNo: record.fields['Request No.'] || ''
        }));
    }

    transformRecruitmentData(larkData) {
        return larkData.map(record => ({
            id: record.record_id,
            requestNo: this.extractRequestNo(record.fields['Request No.']),
            requester: this.extractRequesterName(record.fields['Requester']),
            status: record.fields['Status'] || '',
            department: record.fields['Details_Phòng ban'] || record.fields['Department'] || '',
            quantity: record.fields['Details_Số lượng cần tuyển'] || record.fields['Quantity'] || '',
            gender: record.fields['Details_Giới tính'] || record.fields['Gender'] || '',
            fromDate: record.fields['Details_Từ ngày'] || record.fields['From Date'] || '',
            toDate: record.fields['Details_Đến ngày'] || record.fields['To Date'] || '',
            fromDateFormatted: formatDate(record.fields['Details_Từ ngày'] || record.fields['From Date'] || ''),
            toDateFormatted: formatDate(record.fields['Details_Đến ngày'] || record.fields['To Date'] || ''),
            position: record.fields['Details_Vị trí'] || record.fields['Position'] || '',
            approvalStatus: record.fields['Status'] || ''
        }));
    }

    extractRequestNo(requestNoData) {
        if (!requestNoData) return '';
        if (typeof requestNoData === 'object' && requestNoData.text) {
            return requestNoData.text;
        }
        if (typeof requestNoData === 'string') {
            return requestNoData;
        }
        return requestNoData.toString();
    }

    extractRequesterName(requesterData) {
        if (!requesterData) return '';
        if (Array.isArray(requesterData)) {
            return requesterData.map(user => user.name || user.en_name || user.id || 'Unknown').join(', ');
        }
        if (typeof requesterData === 'object') {
            return requesterData.name || requesterData.en_name || requesterData.id || 'Unknown';
        }
        return requesterData.toString();
    }

    transformRecruitmentForLark(requestData) {
        return {
            'Request No': requestData.requestNo,
            'Requester': requestData.requester,
            'Status': requestData.status,
            'Department': requestData.department,
            'Quantity': requestData.quantity,
            'Gender': requestData.gender,
            'From Date': requestData.fromDate,
            'To Date': requestData.toDate,
            'Approval Status': requestData.approvalStatus || 'pending',
            'Created At': requestData.createdAt || new Date().toISOString()
        };
    }

    formatHoursDisplay(totalHours) {
        if (!totalHours || totalHours === 0) return '0 giờ';

        const hours = Math.floor(totalHours);
        const minutes = Math.round((totalHours - hours) * 60);

        if (minutes === 0) {
            return `${hours} giờ`;
        } else if (hours === 0) {
            return `${minutes} phút`;
        } else {
            return `${hours} giờ ${minutes} phút`;
        }
    }
}

export default RecruitmentService;

```


==================== File: .\server\services\recruitment\recruitment-validator.js ====================

// Recruitment validation service
class RecruitmentValidator {
    static validateRecruitmentData(requestData) {
        const errors = [];

        // Required fields validation
        if (!requestData.requestNo) {
            errors.push('Request No là bắt buộc');
        }

        if (!requestData.requester) {
            errors.push('Requester là bắt buộc');
        }

        if (!requestData.department) {
            errors.push('Department là bắt buộc');
        }

        if (!requestData.quantity || requestData.quantity <= 0) {
            errors.push('Quantity phải lớn hơn 0');
        }

        if (!requestData.gender) {
            errors.push('Gender là bắt buộc');
        }

        if (!requestData.fromDate) {
            errors.push('From Date là bắt buộc');
        } else if (!this.isValidDate(requestData.fromDate)) {
            errors.push('From Date không hợp lệ');
        }

        if (!requestData.toDate) {
            errors.push('To Date là bắt buộc');
        } else if (!this.isValidDate(requestData.toDate)) {
            errors.push('To Date không hợp lệ');
        }

        // Check if toDate is after fromDate
        if (requestData.fromDate && requestData.toDate) {
            if (!this.isToDateAfterFromDate(requestData.fromDate, requestData.toDate)) {
                errors.push('To Date phải sau From Date');
            }
        }

        return errors;
    }

    static isValidDate(dateString) {
        const date = new Date(dateString);
        return date instanceof Date && !isNaN(date);
    }

    static isToDateAfterFromDate(fromDate, toDate) {
        const from = new Date(fromDate);
        const to = new Date(toDate);
        return to >= from;
    }
}

export default RecruitmentValidator;

```


==================== File: .\server\services\utils\error-handler.js ====================

// Centralized error handling utilities
import ResponseFormatter from './response-formatter.js';

class ErrorHandler {
    static handleLarkError(error) {
        if (error.response?.data?.code) {
            const larkCode = error.response.data.code;
            const larkMessage = error.response.data.msg || 'Lark API Error';
            
            switch (larkCode) {
                case 99991663:
                    return ResponseFormatter.formatError('App access token invalid', 'LARK_AUTH_ERROR');
                case 99991664:
                    return ResponseFormatter.formatError('Tenant access token invalid', 'LARK_AUTH_ERROR');
                case 99991665:
                    return ResponseFormatter.formatError('User access token invalid', 'LARK_AUTH_ERROR');
                case 230002:
                    return ResponseFormatter.formatError('Base not found', 'LARK_BASE_NOT_FOUND');
                case 230003:
                    return ResponseFormatter.formatError('Table not found', 'LARK_TABLE_NOT_FOUND');
                case 230004:
                    return ResponseFormatter.formatError('Record not found', 'LARK_RECORD_NOT_FOUND');
                case 1254006:
                    return ResponseFormatter.formatError('Rate limit exceeded', 'LARK_RATE_LIMIT');
                default:
                    return ResponseFormatter.formatError(`Lark API Error: ${larkMessage}`, 'LARK_API_ERROR');
            }
        }
        
        return ResponseFormatter.formatError('Unknown Lark API error', 'LARK_UNKNOWN_ERROR');
    }

    static handleValidationError(errors) {
        const message = Array.isArray(errors) ? errors.join(', ') : errors;
        return ResponseFormatter.formatError(message, 'VALIDATION_ERROR');
    }

    static handleDatabaseError(error) {
        console.error('Database error:', error);
        
        if (error.code === 'ECONNREFUSED') {
            return ResponseFormatter.formatError('Database connection failed', 'DATABASE_CONNECTION_ERROR');
        }
        
        if (error.code === 'ER_DUP_ENTRY') {
            return ResponseFormatter.formatError('Duplicate entry', 'DUPLICATE_ENTRY');
        }
        
        return ResponseFormatter.formatError('Database operation failed', 'DATABASE_ERROR');
    }

    static handleNetworkError(error) {
        console.error('Network error:', error);
        
        if (error.code === 'ENOTFOUND') {
            return ResponseFormatter.formatError('Service not found', 'SERVICE_NOT_FOUND');
        }
        
        if (error.code === 'ECONNRESET') {
            return ResponseFormatter.formatError('Connection reset', 'CONNECTION_RESET');
        }
        
        if (error.code === 'ETIMEDOUT') {
            return ResponseFormatter.formatError('Request timeout', 'REQUEST_TIMEOUT');
        }
        
        return ResponseFormatter.formatError('Network error', 'NETWORK_ERROR');
    }

    static handleGenericError(error, operation = 'operation') {
        console.error(`Error in ${operation}:`, error);
        
        // Check for specific error types
        if (error.isAxiosError) {
            if (error.response?.status === 401) {
                return ResponseFormatter.formatUnauthorized('Authentication required');
            }
            
            if (error.response?.status === 403) {
                return ResponseFormatter.formatForbidden('Access forbidden');
            }
            
            if (error.response?.status === 404) {
                return ResponseFormatter.formatNotFound('Resource');
            }
            
            if (error.response?.status >= 500) {
                return ResponseFormatter.formatServerError('External service error');
            }
            
            return this.handleLarkError(error);
        }
        
        // Check for validation errors
        if (error.name === 'ValidationError') {
            return this.handleValidationError(error.message);
        }
        
        // Check for database errors
        if (error.code && error.code.startsWith('ER_')) {
            return this.handleDatabaseError(error);
        }
        
        // Check for network errors
        if (error.code && ['ENOTFOUND', 'ECONNRESET', 'ETIMEDOUT'].includes(error.code)) {
            return this.handleNetworkError(error);
        }
        
        // Default generic error
        return ResponseFormatter.formatServerError(`Error in ${operation}: ${error.message}`);
    }

    static async wrapAsync(fn, operation = 'operation') {
        try {
            return await fn();
        } catch (error) {
            throw this.handleGenericError(error, operation);
        }
    }

    static logError(error, context = {}) {
        const errorInfo = {
            message: error.message,
            stack: error.stack,
            context,
            timestamp: new Date().toISOString()
        };
        
        console.error('Error logged:', JSON.stringify(errorInfo, null, 2));
        
        // In production, you might want to send this to a logging service
        // like Winston, Sentry, or CloudWatch
    }
}

export default ErrorHandler;

```


==================== File: .\server\services\utils\index.js ====================

// Utilities services exports
export { default as ResponseFormatter, formatResponse } from './response-formatter.js';
export { default as ServiceFactory } from './service-factory.js';
export { default as ErrorHandler } from './error-handler.js';

// Re-export commonly used functions
export {
    getEmployeeService,
    getWorkHistoryService,
    getAttendanceService,
    getRecruitmentService,
    getStoreService,
    getPositionService,
    getAuthService,
    getSessionService
} from './service-factory.js';

```


==================== File: .\server\services\utils\response-formatter.js ====================

// Response formatting utilities
class ResponseFormatter {
    static formatResponse(success, message, data = null, errorCode = null) {
        const response = {
            success,
            message,
            timestamp: new Date().toISOString()
        };

        if (success && data) {
            response.data = data;
        }

        if (!success && errorCode) {
            response.errorCode = errorCode;
        }

        return response;
    }

    static formatSuccess(message, data = null) {
        return this.formatResponse(true, message, data);
    }

    static formatError(message, errorCode = null) {
        return this.formatResponse(false, message, null, errorCode);
    }

    static formatValidationError(errors) {
        return this.formatResponse(false, 'Validation failed', null, 'VALIDATION_ERROR');
    }

    static formatNotFound(resource) {
        return this.formatResponse(false, `${resource} not found`, null, 'NOT_FOUND');
    }

    static formatUnauthorized(message = 'Unauthorized access') {
        return this.formatResponse(false, message, null, 'UNAUTHORIZED');
    }

    static formatForbidden(message = 'Forbidden access') {
        return this.formatResponse(false, message, null, 'FORBIDDEN');
    }

    static formatServerError(message = 'Internal server error') {
        return this.formatResponse(false, message, null, 'SERVER_ERROR');
    }

    static formatPaginatedResponse(data, pagination) {
        return this.formatResponse(true, 'Success', {
            items: data,
            pagination: {
                page: pagination.page || 1,
                limit: pagination.limit || 10,
                total: pagination.total || 0,
                pages: Math.ceil((pagination.total || 0) / (pagination.limit || 10))
            }
        });
    }

    static formatBatchResponse(results) {
        const successCount = results.filter(r => r.success).length;
        const failureCount = results.length - successCount;

        return this.formatResponse(
            failureCount === 0,
            `Batch operation completed: ${successCount} successful, ${failureCount} failed`,
            {
                results,
                summary: {
                    total: results.length,
                    successful: successCount,
                    failed: failureCount
                }
            }
        );
    }
}

// Legacy function for backward compatibility
export function formatResponse(success, message, data = null, errorCode = null) {
    return ResponseFormatter.formatResponse(success, message, data, errorCode);
}

export default ResponseFormatter;

```


==================== File: .\server\services\utils\service-factory.js ====================

// Service factory for dependency injection
import { EmployeeService } from '../employee/index.js';
import { WorkHistoryService } from '../employee/index.js';
import { AttendanceService } from '../attendance/index.js';
import { RecruitmentService } from '../recruitment/index.js';
import { StoreService, PositionService } from '../master-data/index.js';
import { AuthService, SessionService } from '../auth/index.js';

class ServiceFactory {
    constructor() {
        this.services = new Map();
        this.singletons = new Map();
    }

    // Register a service class
    register(name, ServiceClass, singleton = true) {
        this.services.set(name, { ServiceClass, singleton });
    }

    // Get service instance
    get(name) {
        const serviceConfig = this.services.get(name);
        if (!serviceConfig) {
            throw new Error(`Service '${name}' not found`);
        }

        const { ServiceClass, singleton } = serviceConfig;

        if (singleton) {
            if (!this.singletons.has(name)) {
                this.singletons.set(name, new ServiceClass());
            }
            return this.singletons.get(name);
        }

        return new ServiceClass();
    }

    // Initialize all services
    async initialize() {
        for (const [name, config] of this.services.entries()) {
            const service = this.get(name);
            if (service.init && typeof service.init === 'function') {
                await service.init();
            }
        }
    }

    // Clear all singleton instances
    clear() {
        this.singletons.clear();
    }

    // Get all service names
    getServiceNames() {
        return Array.from(this.services.keys());
    }

    // Check if service exists
    has(name) {
        return this.services.has(name);
    }
}

// Create and configure the global service factory
const serviceFactory = new ServiceFactory();

// Register core services
serviceFactory.register('employee', EmployeeService, true);
serviceFactory.register('workHistory', WorkHistoryService, true);
serviceFactory.register('attendance', AttendanceService, true);
serviceFactory.register('recruitment', RecruitmentService, true);
serviceFactory.register('store', StoreService, true);
serviceFactory.register('position', PositionService, true);
serviceFactory.register('auth', AuthService, true);
serviceFactory.register('session', SessionService, true);

// Helper functions for common service access
export const getEmployeeService = () => serviceFactory.get('employee');
export const getWorkHistoryService = () => serviceFactory.get('workHistory');
export const getAttendanceService = () => serviceFactory.get('attendance');
export const getRecruitmentService = () => serviceFactory.get('recruitment');
export const getStoreService = () => serviceFactory.get('store');
export const getPositionService = () => serviceFactory.get('position');
export const getAuthService = () => serviceFactory.get('auth');
export const getSessionService = () => serviceFactory.get('session');

export default serviceFactory;

```


==================== File: .\src\App.jsx ====================

import React, { useEffect, useState } from 'react';
import { Routes, Route, Navigate, useLocation } from 'react-router-dom';
import { useAuth } from './hooks/useAuth';
import { useNotification } from './hooks/useNotification';

// Components - Thành phần giao diện
import Layout from './components/layout/Layout';
import Loading from './components/common/Loading';
import ProtectedRoute from './components/auth/ProtectedRoute';

// Pages - Các trang chính
import LoginPage from './pages/LoginPage';
import EmployeeManagementPage from './pages/EmployeeManagementPage';
import AttendanceLogsPage from './pages/AttendanceLogsPage';
import HRDashboardPage from './pages/HRDashboardPage';

// Global styles - Styles toàn cục
import './styles/globals.css';

const App = () => {
  const [loading, setLoading] = useState(true);
  const [initialized, setInitialized] = useState(false);
  const { user, checkAuth, loading: authLoading } = useAuth();
  const { showNotification } = useNotification();
  const location = useLocation();

  useEffect(() => {
    const initializeApp = async () => {
      try {
        console.log('🚀 Bắt đầu khởi tạo ứng dụng React...');
        
        initializeGlobalUtilities();
        
        if (isProtectedPage()) {
          console.log('🔐 Đang kiểm tra xác thực...');
          const authUser = await checkAuth();
          if (!authUser && !isPublicPage()) {
            console.log('❌ Xác thực thất bại cho trang được bảo vệ');
            return;
          }
          console.log('✅ Hoàn thành kiểm tra xác thực');
        }
        
        setInitialized(true);
        console.log('✅ Khởi tạo ứng dụng React thành công');
        
      } catch (error) {
        console.error('❌ Lỗi khởi tạo ứng dụng:', error);
        
        if (error.name === 'TypeError') {
          showNotification('Lỗi tải module. Vui lòng refresh trang.', 'error');
        } else if (error.message.includes('fetch')) {
          showNotification('Lỗi kết nối server. Vui lòng kiểm tra mạng.', 'error');
        } else {
          showNotification('Lỗi khởi tạo ứng dụng. Vui lòng refresh trang.', 'error');
        }
      } finally {
        setLoading(false);
      }
    };

    initializeApp();
  }, []);

  const initializeGlobalUtilities = () => {
    try {
      if (typeof window.bootstrap !== 'undefined') {
        const tooltipTriggerList = [].slice.call(
          document.querySelectorAll('[data-bs-toggle="tooltip"]')
        );
        tooltipTriggerList.map(tooltipTriggerEl => {
          return new window.bootstrap.Tooltip(tooltipTriggerEl);
        });
      }
    } catch (error) {
      console.warn('Lỗi khởi tạo tooltips:', error);
    }
  };

  const isProtectedPage = () => {
    const publicPaths = ['/', '/login'];
    return !publicPaths.includes(location.pathname);
  };

  const isPublicPage = () => {
    const publicPaths = ['/', '/login'];
    return publicPaths.includes(location.pathname);
  };

  // Helper function để redirect theo role
  const getDefaultRedirectPath = (userRole) => {
    if (userRole === 'sales') {
      return '/attendance-logs';
    } else {
      return '/employee-management';
    }
  };

  if (loading || authLoading) {
    return (
      <div className="d-flex justify-content-center align-items-center min-vh-100">
        <Loading />
      </div>
    );
  }

  if (!initialized) {
    return (
      <div className="container mt-5">
        <div className="alert alert-danger">
          <h4>Lỗi khởi tạo ứng dụng</h4>
          <p>Không thể khởi tạo ứng dụng. Vui lòng:</p>
          <ul>
            <li>Refresh lại trang (F5)</li>
            <li>Kiểm tra kết nối mạng</li>
            <li>Liên hệ IT support nếu vấn đề vẫn tiếp tục</li>
          </ul>
          <button 
            className="btn btn-primary" 
            onClick={() => window.location.reload()}
          >
            Refresh Trang
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className="App">
      {/* ✅ BƯỚC 1: Thêm container cho thông báo tại đây */}
      <div id="alert-container" style={{
        position: 'fixed',
        top: '20px',
        right: '20px',
        zIndex: 1055,
        minWidth: '300px'
      }}></div>

      <Routes>
        {/* Các route công khai */}
        <Route 
          path="/login" 
          element={
            // ✅ SỬA: Không tự động redirect, để LoginPage tự handle
            user ? (
              <Navigate to={getDefaultRedirectPath(user.role)} replace />
            ) : (
              <LoginPage />
            )
          } 
        />
        
        {/* Các route được bảo vệ với Layout */}
        <Route 
          path="/" 
          element={
            <ProtectedRoute>
              <Layout />
            </ProtectedRoute>
          }
        >
          {/* ✅ SỬA: Redirect mặc định theo role */}
          <Route 
            index 
            element={
              <Navigate 
                to={user ? getDefaultRedirectPath(user.role) : '/login'} 
                replace 
              />
            } 
          />
          
          <Route path="dashboard" element={<HRDashboardPage />} />
          
          {/* Route quản lý nhân viên */}
          <Route 
            path="employee-management" 
            element={
              <ProtectedRoute requiredRoles={['hr', 'admin']}>
                <EmployeeManagementPage />
              </ProtectedRoute>
            } 
          />
          
          {/* Route nhật ký chấm công */}
          <Route path="attendance-logs" element={<AttendanceLogsPage />} />
        </Route>

        {/* ✅ SỬA: Route bắt tất cả cũng theo role */}
        <Route 
          path="*" 
          element={
            user ? (
              <Navigate to={getDefaultRedirectPath(user.role)} replace />
            ) : (
              <Navigate to="/login" replace />
            )
          } 
        />
      </Routes>
    </div>
  );
};

export default App;

```


==================== File: .\src\main.jsx ====================

import React from 'react';
import ReactDOM from 'react-dom/client';
import { BrowserRouter } from 'react-router-dom';
import App from './App.jsx';
import { AuthProvider } from './contexts/AuthContext.jsx';
import { NotificationProvider } from './contexts/NotificationContext.jsx';

// Import Bootstrap CSS và FontAwesome
import 'bootstrap/dist/css/bootstrap.min.css';
import 'bootstrap/dist/js/bootstrap.bundle.min.js';
import '@fortawesome/fontawesome-free/css/all.min.css';
import './styles/globals.css';

// Global error handler
window.addEventListener('error', (e) => {
  console.error('Global error:', e.error);
  console.error('Error details:', {
    message: e.message,
    filename: e.filename,
    lineno: e.lineno,
    colno: e.colno
  });
});

// Global unhandled promise rejection handler
window.addEventListener('unhandledrejection', (e) => {
  console.error('Unhandled promise rejection:', e.reason);
  console.error('Promise:', e.promise);
});

// Initialize tooltips when DOM is ready
document.addEventListener('DOMContentLoaded', () => {
  if (typeof window.bootstrap !== 'undefined') {
    const tooltipTriggerList = [].slice.call(
      document.querySelectorAll('[data-bs-toggle="tooltip"]')
    );
    tooltipTriggerList.map(tooltipTriggerEl => {
      return new window.bootstrap.Tooltip(tooltipTriggerEl);
    });
  }
});

ReactDOM.createRoot(document.getElementById('root')).render(
  <React.StrictMode>
    <BrowserRouter>
      <AuthProvider>
        <NotificationProvider>
          <App />
        </NotificationProvider>
      </AuthProvider>
    </BrowserRouter>
  </React.StrictMode>
);

```


==================== File: .\src\components\attendance\AttendanceFilters.jsx ====================

import React from 'react';

const AttendanceFilters = ({ 
  employees, 
  filters, 
  onFilterChange, 
  onClearFilters 
}) => {
  const handleFilterSubmit = (e) => {
    e.preventDefault();
    const formData = new FormData(e.target);
    const newFilters = {
      employeeId: formData.get('employeeId'),
      dateFrom: formData.get('dateFrom'),
      dateTo: formData.get('dateTo')
    };
    
    // Remove empty filters
    Object.keys(newFilters).forEach(key => {
      if (!newFilters[key]) delete newFilters[key];
    });
    
    onFilterChange(newFilters);
  };

  return (
    <form onSubmit={handleFilterSubmit} id="filterForm">
      <div className="row">
        <div className="col-md-4">
          <label className="form-label">Nhân viên</label>
          <select 
            className="form-select" 
            name="employeeId"
            defaultValue={filters.employeeId || ''}
          >
            <option value="">Tất cả nhân viên</option>
            {employees.map(employee => (
              <option key={employee.id} value={employee.employeeId}>
                {employee.employeeId} - {employee.fullName}
              </option>
            ))}
          </select>
        </div>
        
        <div className="col-md-3">
          <label className="form-label">Từ ngày</label>
          <input 
            type="date" 
            className="form-control" 
            name="dateFrom"
            defaultValue={filters.dateFrom || ''}
          />
        </div>
        
        <div className="col-md-3">
          <label className="form-label">Đến ngày</label>
          <input 
            type="date" 
            className="form-control" 
            name="dateTo"
            defaultValue={filters.dateTo || ''}
          />
        </div>
        
        <div className="col-md-2">
          <label className="form-label">&nbsp;</label>
          <div className="d-grid gap-2">
            <button type="submit" className="btn btn-primary">
              <i className="fas fa-search me-2"></i>
              Lọc
            </button>
            <button 
              type="button" 
              className="btn btn-outline-secondary"
              onClick={onClearFilters}
            >
              <i className="fas fa-times me-2"></i>
              Xóa
            </button>
          </div>
        </div>
      </div>
    </form>
  );
};

export default AttendanceFilters;

```


==================== File: .\src\components\attendance\AttendanceLogs.jsx ====================

// src/components/attendance/AttendanceLogs.jsx
import React, { useState } from 'react';

const AttendanceLogs = ({ logs, employees }) => {
  const [sortField, setSortField] = useState('timestamp');
  const [sortDirection, setSortDirection] = useState('desc');
  const [positionFilter, setPositionFilter] = useState('');

  // ✅ THÊM: Hàm sắp xếp logs
  const sortedLogs = [...logs].sort((a, b) => {
    let aValue = a[sortField];
    let bValue = b[sortField];
    
    if (sortField === 'timestamp') {
      aValue = new Date(aValue);
      bValue = new Date(bValue);
    }
    
    if (sortDirection === 'asc') {
      return aValue > bValue ? 1 : -1;
    } else {
      return aValue < bValue ? 1 : -1;
    }
  });

  // ✅ THÊM: Lọc theo vị trí
  const filteredLogs = positionFilter 
    ? sortedLogs.filter(log => log.position === positionFilter)
    : sortedLogs;

  // ✅ THÊM: Lấy danh sách vị trí unique
  const positions = [...new Set(logs.map(log => log.position))].filter(Boolean);

  // ✅ THÊM: Hàm lấy tên nhân viên từ mã
  const getEmployeeName = (employeeId) => {
    const employee = employees?.find(emp => emp.employeeId === employeeId);
    return employee?.fullName || employeeId;
  };

  // ✅ THÊM: Hàm format timestamp Unix
  const formatTimestamp = (timestamp) => {
    if (!timestamp) return 'N/A';
    const date = new Date(timestamp);
    return date.toLocaleString('vi-VN');
  };

  // ✅ THÊM: Hàm lấy icon cho loại chấm công
  const getTypeIcon = (type) => {
    return type === 'Checkin' 
      ? <i className="fas fa-sign-in-alt text-success"></i>
      : <i className="fas fa-sign-out-alt text-danger"></i>;
  };

  // ✅ THÊM: Hàm lấy badge color cho vị trí
  const getPositionBadgeClass = (position) => {
    switch (position) {
      case 'Nhân viên Mascot': return 'bg-info text-dark';
      case 'Nhân viên Bán hàng': return 'bg-success';
      case 'Nhân viên Thu ngân': return 'bg-primary';
      case 'Nhân viên Tiếp đón': return 'bg-secondary';
      default: return 'bg-light text-dark';
    }
  };

  const handleSort = (field) => {
    if (sortField === field) {
      setSortDirection(sortDirection === 'asc' ? 'desc' : 'asc');
    } else {
      setSortField(field);
      setSortDirection('desc');
    }
  };

  if (!logs || logs.length === 0) {
    return (
      <div className="text-center py-5">
        <i className="fas fa-calendar-times fa-3x text-muted mb-3"></i>
        <h5 className="text-muted">Không có bản ghi chấm công nào</h5>
        <p className="text-muted">Dữ liệu chấm công sẽ hiển thị ở đây khi có nhân viên thực hiện chấm công.</p>
      </div>
    );
  }

  return (
    <div className="attendance-logs">
      {/* ✅ THÊM: Bộ lọc và controls */}
      <div className="row mb-3">
        <div className="col-md-4">
          <select
            className="form-select form-select-sm"
            value={positionFilter}
            onChange={(e) => setPositionFilter(e.target.value)}
          >
            <option value="">Tất cả vị trí</option>
            {positions.map(position => (
              <option key={position} value={position}>
                {position}
              </option>
            ))}
          </select>
        </div>
        <div className="col-md-8 text-end">
          <small className="text-muted">
            Hiển thị {filteredLogs.length} / {logs.length} bản ghi
          </small>
        </div>
      </div>

      {/* ✅ CẬP NHẬT: Bảng với cấu trúc mới */}
      <div className="table-responsive">
        <table className="table table-striped table-hover align-middle">
          <thead className="table-dark">
            <tr>
              <th 
                style={{ cursor: 'pointer' }}
                onClick={() => handleSort('employeeId')}
              >
                Mã NV
                {sortField === 'employeeId' && (
                  <i className={`fas fa-sort-${sortDirection === 'asc' ? 'up' : 'down'} ms-1`}></i>
                )}
              </th>
              <th>Họ tên</th>
              <th 
                style={{ cursor: 'pointer' }}
                onClick={() => handleSort('type')}
              >
                Loại
                {sortField === 'type' && (
                  <i className={`fas fa-sort-${sortDirection === 'asc' ? 'up' : 'down'} ms-1`}></i>
                )}
              </th>
              <th 
                style={{ cursor: 'pointer' }}
                onClick={() => handleSort('position')}
              >
                Vị trí
                {sortField === 'position' && (
                  <i className={`fas fa-sort-${sortDirection === 'asc' ? 'up' : 'down'} ms-1`}></i>
                )}
              </th>
              <th 
                style={{ cursor: 'pointer' }}
                onClick={() => handleSort('timestamp')}
              >
                Thời gian chấm công
                {sortField === 'timestamp' && (
                  <i className={`fas fa-sort-${sortDirection === 'asc' ? 'up' : 'down'} ms-1`}></i>
                )}
              </th>
              <th>Ghi chú</th>
            </tr>
          </thead>
          <tbody>
            {filteredLogs.map((log, index) => (
              <tr key={log.id || index}>
                <td>
                  <span className="fw-bold text-primary">{log.employeeId}</span>
                </td>
                <td>
                  <div className="fw-semibold">{getEmployeeName(log.employeeId)}</div>
                </td>
                <td>
                  <div className="d-flex align-items-center">
                    {getTypeIcon(log.type)}
                    <span className="ms-2">{log.type}</span>
                  </div>
                </td>
                <td>
                  <span className={`badge ${getPositionBadgeClass(log.position)}`}>
                    {log.position || 'N/A'}
                  </span>
                </td>
                <td>
                  <div className="text-nowrap">
                    <div className="fw-semibold">{formatTimestamp(log.timestamp).split(' ')[1]}</div>
                    <small className="text-muted">{formatTimestamp(log.timestamp).split(' ')[0]}</small>
                  </div>
                </td>
                <td>
                  <span className="text-muted">{log.notes || '-'}</span>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>

      {/* ✅ THÊM: Thống kê nhanh */}
      <div className="row mt-4">
        <div className="col-12">
          <div className="card bg-light">
            <div className="card-body">
              <h6 className="card-title">📊 Thống kê nhanh</h6>
              <div className="row text-center">
                <div className="col-md-3">
                  <div className="h5 text-success mb-0">
                    {filteredLogs.filter(log => log.type === 'Checkin').length}
                  </div>
                  <small className="text-muted">Check-in</small>
                </div>
                <div className="col-md-3">
                  <div className="h5 text-danger mb-0">
                    {filteredLogs.filter(log => log.type === 'Checkout').length}
                  </div>
                  <small className="text-muted">Check-out</small>
                </div>
                <div className="col-md-3">
                  <div className="h5 text-primary mb-0">
                    {new Set(filteredLogs.map(log => log.employeeId)).size}
                  </div>
                  <small className="text-muted">Nhân viên</small>
                </div>
                <div className="col-md-3">
                  <div className="h5 text-info mb-0">
                    {new Set(filteredLogs.map(log => log.date)).size}
                  </div>
                  <small className="text-muted">Ngày</small>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default AttendanceLogs;

```


==================== File: .\src\components\attendance\EmployeeHours.jsx ====================

// import React, { useState, useEffect } from 'react';
// import { useAttendance } from '../../hooks/useAttendance';
// import { useNotification } from '../../hooks/useNotification';
// import Loading from '../common/Loading';
// import Alert from '../common/Alert';

// function EmployeeHours() {
//     const [employeeHours, setEmployeeHours] = useState([]);
//     const [filteredData, setFilteredData] = useState([]);
//     const [loading, setLoading] = useState(true);
//     const [error, setError] = useState(null);
//     const [stats, setStats] = useState(null);

//     // Bộ lọc đơn giản, không có "Lỗi" hay "Cảnh báo"
//     const [filters, setFilters] = useState({
//         employeeId: '',
//         position: '',
//         dateFrom: '',
//         dateTo: ''
//     });

//     const { getEmployeeHours } = useAttendance();
//     const { showNotification } = useNotification();

//     useEffect(() => {
//         loadEmployeeHours();
//     }, []);

//     useEffect(() => {
//         applyFilters();
//     }, [employeeHours, filters]);

//     const loadEmployeeHours = async () => {
//         try {
//             setLoading(true);
//             setError(null);
//             const response = await getEmployeeHours();

//             if (response.success) {
//                 setEmployeeHours(response.data.employeeHours || []);
//                 setStats(response.data.summary || null);
//             } else {
//                 throw new Error(response.message || 'Failed to load employee hours');
//             }
//         } catch (err) {
//             setError(err.message);
//             showNotification('Lỗi khi tải dữ liệu giờ công: ' + err.message, 'error');
//         } finally {
//             setLoading(false);
//         }
//     };

//     const applyFilters = () => {
//         let filtered = [...employeeHours];

//         // Tìm kiếm theo mã NV hoặc tên
//         if (filters.employeeId.trim()) {
//             const searchTerm = filters.employeeId.toLowerCase();
//             filtered = filtered.filter(item =>
//                 item.employeeId.toLowerCase().includes(searchTerm) ||
//                 item.fullName.toLowerCase().includes(searchTerm)
//             );
//         }

//         // Theo chức vụ
//         if (filters.position) {
//             filtered = filtered.filter(item => item.position === filters.position);
//         }

//         // Theo khoảng ngày
//         if (filters.dateFrom) {
//             filtered = filtered.filter(item =>
//                 new Date(item.date) >= new Date(filters.dateFrom)
//             );
//         }
//         if (filters.dateTo) {
//             filtered = filtered.filter(item =>
//                 new Date(item.date) <= new Date(filters.dateTo)
//             );
//         }

//         setFilteredData(filtered);
//     };

//     const handleFilterChange = (key, value) => {
//         setFilters(prev => ({
//             ...prev,
//             [key]: value
//         }));
//     };

//     const clearFilters = () => {
//         setFilters({
//             employeeId: '',
//             position: '',
//             dateFrom: '',
//             dateTo: ''
//         });
//     };

//     const exportToCSV = () => {
//         if (filteredData.length === 0) {
//             showNotification('Không có dữ liệu để xuất', 'warning');
//             return;
//         }

//         const headers = [
//             'Mã NV',
//             'Họ tên',
//             'Ngày',
//             'Chức vụ',
//             'Tổng giờ',
//             'Cảnh báo'
//         ];

//         const csvContent = [
//             headers.join(','),
//             ...filteredData.map(item => [
//                 item.employeeId,
//                 `"${item.fullName}"`,
//                 item.date,
//                 `"${item.position}"`,
//                 `"${item.totalHours}"`,
//                 `"${(item.warnings || []).join('; ')}"`
//             ].join(','))
//         ].join('\n');

//         const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
//         const link = document.createElement('a');
//         link.href = URL.createObjectURL(blob);
//         link.download = `employee_hours_${new Date().toISOString().split('T')[0]}.csv`;
//         link.click();

//         showNotification('Xuất file CSV thành công', 'success');
//     };

//     const getPositionOptions = () => {
//         const positions = [...new Set(employeeHours.map(item => item.position))];
//         return positions.filter(Boolean).sort();
//     };

//     const formatDate = (dateString) => {
//         if (!dateString) return '';
//         const date = new Date(dateString);
//         return date.toLocaleDateString('vi-VN');
//     };

//     // Màu dòng nếu có cảnh báo
//     const getRowClassName = (item) => {
//         if (item.warnings && item.warnings.length > 0) return 'table-warning';
//         return '';
//     };

//     if (loading) {
//         return (
//             <div className="container-fluid py-4">
//                 <div className="row">
//                     <div className="col-12">
//                         <div className="card">
//                             <div className="card-header">
//                                 <h5 className="mb-0">📊 Tổng Giờ Công Nhân Viên</h5>
//                             </div>
//                             <div className="card-body">
//                                 <Loading message="Đang tải dữ liệu giờ công..." />
//                             </div>
//                         </div>
//                     </div>
//                 </div>
//             </div>
//         );
//     }

//     if (error) {
//         return (
//             <div className="container-fluid py-4">
//                 <div className="row">
//                     <div className="col-12">
//                         <Alert
//                             type="danger"
//                             message={`Lỗi tải dữ liệu: ${error}`}
//                             onRetry={loadEmployeeHours}
//                         />
//                     </div>
//                 </div>
//             </div>
//         );
//     }

//     return (
//         <div className="container-fluid py-4">
//             <div className="row">
//                 <div className="col-12">
//                     <div className="card">
//                         <div className="card-header d-flex justify-content-between align-items-center">
//                             <h5 className="mb-0">
//                                 📊 Tổng Giờ Công Nhân Viên
//                                 <small className="text-muted ms-2">
//                                     ({filteredData.length} / {employeeHours.length} bản ghi)
//                                 </small>
//                             </h5>
//                             <div className="d-flex gap-2">
//                                 <button
//                                     className="btn btn-outline-success btn-sm"
//                                     onClick={exportToCSV}
//                                     disabled={filteredData.length === 0}
//                                 >
//                                     <i className="fas fa-download me-1"></i>
//                                     Xuất CSV
//                                 </button>
//                                 <button
//                                     className="btn btn-outline-primary btn-sm"
//                                     onClick={loadEmployeeHours}
//                                 >
//                                     <i className="fas fa-sync-alt me-1"></i>
//                                     Làm mới
//                                 </button>
//                             </div>
//                         </div>

//                         {/* Filters Section (KHÔNG còn Lỗi/Cảnh Báo) */}
//                         <div className="card-body border-bottom">
//                             <div className="row g-3">
//                                 <div className="col-md-3">
//                                     <label className="form-label">Tìm nhân viên</label>
//                                     <input
//                                         type="text"
//                                         className="form-control form-control-sm"
//                                         placeholder="Mã NV hoặc tên..."
//                                         value={filters.employeeId}
//                                         onChange={(e) => handleFilterChange('employeeId', e.target.value)}
//                                     />
//                                 </div>
//                                 <div className="col-md-2">
//                                     <label className="form-label">Chức vụ</label>
//                                     <select
//                                         className="form-select form-select-sm"
//                                         value={filters.position}
//                                         onChange={(e) => handleFilterChange('position', e.target.value)}
//                                     >
//                                         <option value="">Tất cả chức vụ</option>
//                                         {getPositionOptions().map(position => (
//                                             <option key={position} value={position}>
//                                                 {position}
//                                             </option>
//                                         ))}
//                                     </select>
//                                 </div>
//                                 <div className="col-md-2">
//                                     <label className="form-label">Từ ngày</label>
//                                     <input
//                                         type="date"
//                                         className="form-control form-control-sm"
//                                         value={filters.dateFrom}
//                                         onChange={(e) => handleFilterChange('dateFrom', e.target.value)}
//                                     />
//                                 </div>
//                                 <div className="col-md-2">
//                                     <label className="form-label">Đến ngày</label>
//                                     <input
//                                         type="date"
//                                         className="form-control form-control-sm"
//                                         value={filters.dateTo}
//                                         onChange={(e) => handleFilterChange('dateTo', e.target.value)}
//                                     />
//                                 </div>
//                                 <div className="col-md-3 d-flex align-items-end">
//                                     <button
//                                         className="btn btn-outline-secondary btn-sm ms-auto"
//                                         onClick={clearFilters}
//                                         title="Xóa bộ lọc"
//                                     >
//                                         <i className="fas fa-times"></i> Xóa lọc
//                                     </button>
//                                 </div>
//                             </div>
//                         </div>

//                         {/* Table Section */}
//                         <div className="card-body p-0">
//                             <div className="table-responsive">
//                                 <table className="table table-hover mb-0">
//                                     <thead className="table-light">
//                                         <tr>
//                                             <th>Mã NV</th>
//                                             <th>Họ tên</th>
//                                             <th>Ngày</th>
//                                             <th>Chức vụ</th>
//                                             <th className="text-center">Tổng giờ</th>
//                                             <th>Cảnh báo</th>
//                                         </tr>
//                                     </thead>
//                                     <tbody>
//                                         {filteredData.length === 0 ? (
//                                             <tr>
//                                                 <td colSpan="6" className="text-center py-4 text-muted">
//                                                     <i className="fas fa-calendar-times fa-2x mb-2"></i>
//                                                     <div>Không có dữ liệu giờ công</div>
//                                                     <small>Hãy kiểm tra bộ lọc hoặc thêm dữ liệu chấm công</small>
//                                                 </td>
//                                             </tr>
//                                         ) : (
//                                             filteredData.map((item, index) => (
//                                                 <tr key={`${item.employeeId}-${item.date}-${index}`}
//                                                     className={getRowClassName(item)}>
//                                                     <td>
//                                                         <div className="fw-bold">{item.employeeId}</div>
//                                                     </td>
//                                                     <td>
//                                                         <div className="fw-semibold">{item.fullName}</div>
//                                                     </td>
//                                                     <td>
//                                                         <div className="text-nowrap">{formatDate(item.date)}</div>
//                                                     </td>
//                                                     <td>
//                                                         <span className={`badge ${getPositionBadgeClass(item.position)}`}>
//                                                             {item.position}
//                                                         </span>
//                                                     </td>
//                                                     <td className="text-center">
//                                                         <span className="badge bg-primary">
//                                                             {item.totalHours}
//                                                         </span>
//                                                     </td>
//                                                     <td>
//                                                         {(item.warnings && item.warnings.length > 0) ? (
//                                                             <div>
//                                                                 {item.warnings.map((warning, idx) => (
//                                                                     <small key={idx} className="text-warning d-block">
//                                                                         <i className="fas fa-exclamation-triangle me-1"></i>
//                                                                         {warning}
//                                                                     </small>
//                                                                 ))}
//                                                             </div>
//                                                         ) : (
//                                                             <span className="text-success">OK</span>
//                                                         )}
//                                                     </td>
//                                                 </tr>
//                                             ))
//                                         )}
//                                     </tbody>
//                                 </table>
//                             </div>
//                         </div>
//                     </div>
//                 </div>
//             </div>
//         </div>
//     );
// }

// // Helper function màu badge chức vụ
// function getPositionBadgeClass(position) {
//     switch (position) {
//         case 'Nhân viên Mascot':
//             return 'bg-info text-dark';
//         case 'Nhân viên Bán hàng':
//             return 'bg-success';
//         case 'Nhân viên Thu ngân':
//             return 'bg-primary';
//         case 'Nhân viên Tiếp đón':
//             return 'bg-secondary';
//         default:
//             return 'bg-light text-dark';
//     }
// }

// export default EmployeeHours;

```


==================== File: .\src\components\attendance\LarkAttendanceEmbed.jsx ====================

import React from 'react';

// URL của Lark Base view bạn muốn nhúng
const LARK_EMBED_URL = "https://atino-vietnam.sg.larksuite.com/base/Ey3EbVD9vacAHvs8cVvlHxkKg2r?table=tblU9YY1t4TwxXLh&view=vewpWpbNQv";

const LarkAttendanceEmbed = () => {
  return (
    // Container đảm bảo iframe chiếm hết không gian được cấp và có chiều cao tối thiểu
    <div 
      className="h-full w-full" 
      style={{ minHeight: 'calc(100vh - 250px)' }} // Điều chỉnh chiều cao để phù hợp layout
    >
      <iframe
        src={LARK_EMBED_URL}
        title="Bảng Chấm Công từ Lark Base"
        style={{
          width: '100%',
          height: '100%',
          border: 'none',
          borderRadius: '8px' // Bo góc cho iframe
        }}
        loading="lazy"
        allow="fullscreen"
      >
        Trình duyệt của bạn không hỗ trợ iframe.
      </iframe>
    </div>
  );
};

export default LarkAttendanceEmbed;

```


==================== File: .\src\components\auth\LoginForm.jsx ====================


```


==================== File: .\src\components\auth\ProtectedRoute.jsx ====================

import React from 'react';
import { Navigate, useLocation } from 'react-router-dom';
import { useAuth } from '../../hooks/useAuth';
import Loading from '../common/Loading';

const ProtectedRoute = ({ children, requiredRoles = [] }) => {
  const { user, loading } = useAuth();
  const location = useLocation();

  if (loading) {
    return <Loading fullScreen text="Đang kiểm tra quyền truy cập..." />;
  }

  if (!user) {
    return <Navigate to="/login" state={{ from: location }} replace />;
  }

  // Check role-based access
  if (requiredRoles.length > 0 && !requiredRoles.includes(user.role)) {
    return (
      <div className="container mt-5">
        <div className="alert alert-danger">
          <h4>Không có quyền truy cập</h4>
          <p>Bạn không có quyền truy cập vào trang này.</p>
          <button 
            className="btn btn-primary" 
            onClick={() => window.history.back()}
          >
            Quay lại
          </button>
        </div>
      </div>
    );
  }

  return children;
};

export default ProtectedRoute;

```


==================== File: .\src\components\common\Alert.jsx ====================

import React, { useState, useEffect } from 'react';

// Hàm helper để lấy icon dựa trên loại thông báo
const getIconByType = (type) => {
    switch (type) {
        case 'success': return 'fa-check-circle';
        case 'error': return 'fa-times-circle';
        case 'warning': return 'fa-exclamation-triangle';
        case 'info': return 'fa-info-circle';
        default: return 'fa-info-circle';
    }
};

const Alert = ({ notification, onClose }) => {
    // ✅ THÊM: Guard clause để tránh lỗi destructuring khi notification = undefined
    if (!notification) {
        console.warn('Alert component received undefined notification');
        return null;
    }

    // ✅ SỬA: Thêm default values để tránh crash
    const { 
        id = 'unknown', 
        message = 'Thông báo không xác định', 
        type = 'info',
        duration 
    } = notification;

    const [isExiting, setIsExiting] = useState(false);

    useEffect(() => {
        // Tự động đóng sau một khoảng thời gian nếu có
        if (duration) {
            const timer = setTimeout(() => {
                handleClose();
            }, duration);
            return () => clearTimeout(timer);
        }
    }, [duration]); // ✅ SỬA: Sử dụng duration đã destructured

    const handleClose = () => {
        setIsExiting(true);
        // Đợi animation fade-out hoàn thành rồi mới gỡ component khỏi state
        setTimeout(() => {
            // ✅ THÊM: Kiểm tra onClose tồn tại trước khi gọi
            if (onClose) {
                onClose(id);
            }
        }, 400); // Phải khớp với thời gian transition trong CSS
    };

    return (
        <div className={`alert-toast ${type} ${isExiting ? '' : 'show'}`}>
            <i className={`fas ${getIconByType(type)} alert-toast-icon`}></i>
            <div className="alert-toast-content">
                <div className="alert-toast-message">{message}</div>
            </div>
            <button className="alert-toast-close" onClick={handleClose}>
                &times;
            </button>
        </div>
    );
};

export default Alert;

```


==================== File: .\src\components\common\Loading.jsx ====================

import React from 'react';

const Loading = ({ 
  size = 'medium', 
  text = 'Đang tải...', 
  overlay = false,
  fullScreen = false 
}) => {
  const getSizeClass = () => {
    switch (size) {
      case 'small': return 'spinner-border-sm';
      case 'large': return 'spinner-border spinner-border-lg';
      default: return 'spinner-border';
    }
  };

  const LoadingSpinner = () => (
    <div className="d-flex flex-column align-items-center justify-content-center p-3">
      <div className={`${getSizeClass()} text-primary`} role="status">
        <span className="visually-hidden">Loading...</span>
      </div>
      {text && (
        <div className="mt-2 text-muted small">
          {text}
        </div>
      )}
    </div>
  );

  if (fullScreen) {
    return (
      <div 
        className="position-fixed top-0 start-0 w-100 h-100 d-flex align-items-center justify-content-center"
        style={{ 
          backgroundColor: 'rgba(255, 255, 255, 0.9)', 
          zIndex: 9999 
        }}
      >
        <div className="text-center">
          <div className="spinner-border spinner-border-lg text-primary" role="status">
            <span className="visually-hidden">Loading...</span>
          </div>
          <div className="mt-3 h5 text-muted">{text}</div>
        </div>
      </div>
    );
  }

  if (overlay) {
    return (
      <div 
        className="position-absolute top-0 start-0 w-100 h-100 d-flex align-items-center justify-content-center"
        style={{ 
          backgroundColor: 'rgba(255, 255, 255, 0.8)', 
          zIndex: 1000 
        }}
      >
        <LoadingSpinner />
      </div>
    );
  }

  return <LoadingSpinner />;
};

// Loading wrapper component for conditional loading states
export const LoadingWrapper = ({ loading, children, ...loadingProps }) => {
  if (loading) {
    return <Loading {...loadingProps} />;
  }
  return children;
};

// Inline loading component for buttons
export const ButtonLoading = ({ loading, children, disabled, ...props }) => {
  return (
    <button 
      {...props} 
      disabled={disabled || loading}
      className={`${props.className || ''} ${loading ? 'position-relative' : ''}`}
    >
      {loading && (
        <span className="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
      )}
      {children}
    </button>
  );
};

export default Loading;

```


==================== File: .\src\components\common\Modal.jsx ====================

// src/components/common/Modal.jsx
import React from 'react';

const Modal = ({ isOpen, onClose, title, children, size = 'md' }) => {
  if (!isOpen) return null;

  const handleBackdropClick = (e) => {
    if (e.target === e.currentTarget) {
      onClose();
    }
  };

  return (
    <div 
      className="modal fade show d-block" 
      style={{ backgroundColor: 'rgba(0,0,0,0.5)' }}
      onClick={handleBackdropClick}
    >
      <div className={`modal-dialog modal-${size} modal-dialog-centered`}>
        <div className="modal-content">
          <div className="modal-header">
            <h5 className="modal-title">{title}</h5>
            <button 
              type="button" 
              className="btn-close" 
              onClick={onClose}
            ></button>
          </div>
          <div className="modal-body">
            {children}
          </div>
        </div>
      </div>
    </div>
  );
};

export default Modal;

```


==================== File: .\src\components\common\Table.jsx ====================


```


==================== File: .\src\components\dashboard\Dashboard.jsx ====================

// // src/components/dashboard/Dashboard.jsx
// import React, { useState, useEffect } from 'react';
// import { useAuth } from '../../hooks/useAuth';
// import { ApiClient } from '../../services/api';
// import Loading from '../common/Loading';
// import { useNotification } from '../../hooks/useNotification';

// const Dashboard = () => {
//   const [stats, setStats] = useState({});
//   const [loading, setLoading] = useState(true);
//   const { user } = useAuth();
//   const { showNotification } = useNotification();

//   useEffect(() => {
//     loadStats();
    
//     // Auto refresh every 5 minutes
//     const interval = setInterval(loadStats, 5 * 60 * 1000);
//     return () => clearInterval(interval);
//   }, []);

//   const loadStats = async () => {
//     try {
//       console.log('🔍 Dashboard: Loading stats...');
//       const response = await ApiClient.get('/api/employees/stats');
      
//       console.log('📨 Dashboard: Raw response:', response);
//       console.log('✅ Dashboard: Response success:', response.success);
//       console.log('📊 Dashboard: Response data:', response.data);
      
//       // ✅ FIX: Sử dụng response.data thay vì response
//       if (response.success && response.data) {
//         console.log('✅ Dashboard: Setting stats to:', response.data);
//         setStats(response.data);
//       } else {
//         console.warn('⚠️ Dashboard: API returned success: false');
//         showNotification('Không thể tải dữ liệu thống kê', 'warning');
//       }
      
//     } catch (error) {
//       console.error('❌ Dashboard: Error loading stats:', error);
//       showNotification('Lỗi khi tải thống kê dashboard', 'error');
//     } finally {
//       setLoading(false);
//     }
//   };

//   const handleRefresh = async () => {
//     setLoading(true);
//     await loadStats();
//     showNotification('Đã cập nhật dữ liệu dashboard', 'success');
//   };

//   // ✅ DEBUG: Log current stats state
//   console.log('🎯 Dashboard render - Current stats:', stats);
//   console.log('🎯 Dashboard render - Loading:', loading);

//   if (loading) {
//     return <Loading fullScreen text="Đang tải dashboard..." />;
//   }

//   return (
//     <div className="dashboard-page">
//       {/* ✅ DEBUG INFO - Remove this after fixing */}
//       <div style={{ 
//         background: '#f8f9fa', 
//         border: '1px solid #dee2e6', 
//         borderRadius: '0.25rem', 
//         padding: '1rem', 
//         marginBottom: '1rem' 
//       }}>
//         <h6 className="text-muted mb-2">🐛 DEBUG INFO:</h6>
//         <small className="d-block">Raw stats: {JSON.stringify(stats)}</small>
//         <small className="d-block">Total Employees: {stats.totalEmployees}</small>
//         <small className="d-block">Active Employees: {stats.activeEmployees}</small>
//         <small className="d-block">Inactive Employees: {stats.inactiveEmployees}</small>
//       </div>

//       {/* Header */}
//       <div className="d-flex justify-content-between align-items-center mb-4">
//         <div>
//           <h1>Dashboard</h1>
//           <p className="text-muted mb-0">Chào mừng trở lại, {user?.fullName}!</p>
//         </div>
//         <button 
//           className="btn btn-outline-primary"
//           onClick={handleRefresh}
//           disabled={loading}
//         >
//           <i className={`fas fa-sync-alt me-2 ${loading ? 'fa-spin' : ''}`}></i>
//           Làm mới
//         </button>
//       </div>

//       {/* Stats Cards */}
//       <div className="row mb-4">
//         <div className="col-md-4 mb-3">
//           <div className="card text-center bg-primary text-white h-100">
//             <div className="card-body">
//               <i className="fas fa-users fa-3x mb-3"></i>
//               <h2 className="card-title" id="totalEmployees">
//                 {stats.totalEmployees || 0}
//               </h2>
//               <p className="card-text">Tổng nhân viên</p>
//             </div>
//           </div>
//         </div>

//         <div className="col-md-4 mb-3">
//           <div className="card text-center bg-success text-white h-100">
//             <div className="card-body">
//               <i className="fas fa-user-check fa-3x mb-3"></i>
//               <h2 className="card-title" id="activeEmployees">
//                 {stats.activeEmployees || 0}
//               </h2>
//               <p className="card-text">Nhân viên hoạt động</p>
//             </div>
//           </div>
//         </div>

//         <div className="col-md-4 mb-3">
//           <div className="card text-center bg-info text-white h-100">
//             <div className="card-body">
//               <i className="fas fa-user-times fa-3x mb-3"></i>
//               <h2 className="card-title" id="inactiveEmployees">
//                 {stats.inactiveEmployees || 0}
//               </h2>
//               <p className="card-text">Nhân viên không hoạt động</p>
//             </div>
//           </div>
//         </div>
//       </div>

//       {/* Quick Actions */}
//       <div className="row">
//         <div className="col-12">
//           <div className="card">
//             <div className="card-header">
//               <h5 className="card-title mb-0">Truy cập nhanh</h5>
//             </div>
//             <div className="card-body">
//               <div className="row">
//                 <div className="col-md-4 mb-3">
//                   <a href="/attendance-logs" className="btn btn-outline-info w-100 h-100 d-flex flex-column justify-content-center">
//                     <i className="fas fa-clock fa-2x mb-2"></i>
//                     <span>Xem chấm công</span>
//                   </a>
//                 </div>

//                 {(user?.role === 'hr' || user?.role === 'admin') && (
//                   <>
//                     <div className="col-md-4 mb-3">
//                       <a href="/employee-management" className="btn btn-outline-primary w-100 h-100 d-flex flex-column justify-content-center">
//                         <i className="fas fa-users-cog fa-2x mb-2"></i>
//                         <span>Quản lý nhân viên</span>
//                       </a>
//                     </div>
                    
//                     <div className="col-md-4 mb-3">
//                       <a href="/hr-dashboard" className="btn btn-outline-success w-100 h-100 d-flex flex-column justify-content-center">
//                         <i className="fas fa-chart-bar fa-2x mb-2"></i>
//                         <span>HR Dashboard</span>
//                       </a>
//                     </div>
//                   </>
//                 )}
//               </div>
//             </div>
//           </div>
//         </div>
//       </div>

//       {/* HR Functions */}
//       {(user?.role === 'hr' || user?.role === 'admin') && (
//         <div className="row mt-4">
//           <div className="col-12">
//             <div className="card">
//               <div className="card-body text-center">
//                 <h5>Chức năng HR</h5>
//                 <p className="text-muted">Truy cập các công cụ dành cho HR</p>
//                 <a 
//                   href="https://forms.google.com/your-form-url" 
//                   target="_blank"
//                   rel="noopener noreferrer"
//                   className="btn btn-outline-success me-2"
//                 >
//                   <i className="fas fa-external-link-alt me-2"></i>
//                   Mở Google Form tuyển dụng
//                 </a>
//                 <a 
//                   href="/hr-dashboard" 
//                   className="btn btn-primary"
//                 >
//                   <i className="fas fa-chart-line me-2"></i>
//                   Xem báo cáo HR
//                 </a>
//               </div>
//             </div>
//           </div>
//         </div>
//       )}
//     </div>
//   );
// };

// export default Dashboard;

```


==================== File: .\src\components\dashboard\HRDashboard.jsx ====================


```


==================== File: .\src\components\dashboard\StatsCard.jsx ====================


```


==================== File: .\src\components\employee\AddWorkHistoryModal.jsx ====================

import React, { useState } from 'react';

// Import các thành phần và services cần thiết
import Modal from '../common/Modal.jsx';
import RecruitmentModal from './RecruitmentModal.jsx';
import { ButtonLoading } from '../common/Loading.jsx';
import { useNotification } from '../../hooks/useNotification';
import { addWorkHistory } from '../../services/employee.js';

/**
 * Modal để thêm một bản ghi Lịch sử công việc cho nhân viên.
 * Nó cho phép người dùng chọn một "Đề xuất tuyển dụng" đã có sẵn.
 * Logic được điều chỉnh để luôn làm việc với một mảng các đề xuất,
 * nhưng RecruitmentModal được cấu hình để chỉ cho phép chọn một.
 *
 * @param {object} props
 * @param {boolean} props.isOpen - Cờ để điều khiển việc hiển thị modal.
 * @param {Function} props.onClose - Hàm để đóng modal.
 * @param {object} props.employee - Đối tượng nhân viên đang được thêm lịch sử.
 * @param {Function} props.onSave - Hàm callback được gọi sau khi lưu thành công.
 */
const AddWorkHistoryModal = ({ isOpen, onClose, employee, onSave }) => {
  // Nếu không có thông tin nhân viên, không render gì cả để tránh lỗi.
  if (!employee) return null;

  // State quản lý đề xuất dưới dạng MẢNG để đồng nhất logic.
  const [selectedRecruitments, setSelectedRecruitments] = useState([]);
  const [isRecruitmentModalOpen, setIsRecruitmentModalOpen] = useState(false);
  const [isLoading, setIsLoading] = useState(false);
  
  // ✅ THÊM: State cho các trường mới
  const [workHistoryData, setWorkHistoryData] = useState({
    fromDate: '',
    toDate: '',
    hourlyRate: ''
  });
  
  const { showNotification } = useNotification();

  /**
   * Xử lý khi người dùng chọn một đề xuất từ RecruitmentModal.
   * Dù RecruitmentModal có singleSelect=true, nó vẫn được thiết kế để trả về một mảng.
   * @param {Array<object>} recruitmentObject - Mảng chứa đề xuất đã chọn.
   */
  const handleRecruitmentSelect = (recruitmentObject) => {
    // Luôn nhận về một mảng, kể cả khi chỉ có một lựa chọn.
    setSelectedRecruitments(recruitmentObject ? [recruitmentObject] : []);
    setIsRecruitmentModalOpen(false);
  };

  // ✅ THÊM: Xử lý thay đổi dữ liệu form
  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setWorkHistoryData(prev => ({
      ...prev,
      [name]: value
    }));
  };

  // ✅ THÊM: Validation các trường mới
  const validateForm = () => {
    const errors = [];

    // Kiểm tra đã chọn đề xuất
    if (selectedRecruitments.length === 0) {
      errors.push('Vui lòng chọn một đề xuất tuyển dụng.');
    }

    // Kiểm tra các trường bắt buộc
    if (!workHistoryData.fromDate) {
      errors.push('Từ ngày là bắt buộc.');
    }

    if (!workHistoryData.toDate) {
      errors.push('Đến ngày là bắt buộc.');
    }

    // Kiểm tra logic ngày
    if (workHistoryData.fromDate && workHistoryData.toDate) {
      const fromDate = new Date(workHistoryData.fromDate);
      const toDate = new Date(workHistoryData.toDate);
      
      if (toDate < fromDate) {
        errors.push('Đến ngày phải lớn hơn hoặc bằng Từ ngày.');
      }
    }

    // Kiểm tra mức lương
    if (workHistoryData.hourlyRate && (isNaN(workHistoryData.hourlyRate) || parseFloat(workHistoryData.hourlyRate) < 0)) {
      errors.push('Mức lương/giờ phải là số và không được âm.');
    }

    return errors;
  };

  /**
   * Xử lý khi người dùng nhấn nút "Lưu" để gửi form.
   */
  const handleSubmit = async (e) => {
    e.preventDefault();

    // ✅ CẬP NHẬT: Sử dụng validation mới
    const validationErrors = validateForm();
    if (validationErrors.length > 0) {
      showNotification(validationErrors.join(' '), 'warning');
      return;
    }

    if (isLoading) return;
    setIsLoading(true);

    try {
      // ✅ CẬP NHẬT: API payload với các trường mới
      const workHistoryPayload = {
        employeeId: employee.employeeId,
        requestNo: selectedRecruitments[0].requestNo,
        fromDate: workHistoryData.fromDate,
        toDate: workHistoryData.toDate,
        hourlyRate: workHistoryData.hourlyRate ? parseFloat(workHistoryData.hourlyRate) : undefined,
      };

      console.log('📤 Sending work history payload:', workHistoryPayload);

      const response = await addWorkHistory(workHistoryPayload);

      if (response.success) {
        showNotification('Thêm lịch sử công việc thành công!', 'success');
        if (onSave) {
          onSave(); // Gọi callback để đóng modal và refresh dữ liệu bên ngoài.
        }
      } else {
        showNotification(response.message || 'Thêm lịch sử công việc thất bại.', 'error');
      }
    } catch (error) {
      console.error('Lỗi khi thêm lịch sử công việc:', error);
      showNotification(error.message || 'Lỗi hệ thống, vui lòng thử lại.', 'error');
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <>
      {/* Modal chính để thêm Work History */}
      <Modal
        isOpen={isOpen}
        onClose={onClose}
        title={`Thêm Lịch sử cho: ${employee.fullName}`}
        size="lg"
      >
        <form onSubmit={handleSubmit}>
          {/* Trường hiển thị mã nhân viên (không cho sửa) */}
          <div className="mb-3">
            <label htmlFor="employeeIdDisplay" className="form-label">Mã nhân viên</label>
            <input
              id="employeeIdDisplay"
              type="text"
              className="form-control"
              value={employee.employeeId}
              disabled
            />
          </div>

          {/* Khu vực chọn Đề xuất tuyển dụng */}
          <div className="mb-4">
            <label className="form-label d-block">Đề xuất tuyển dụng <span className="text-danger">*</span></label>
            
            {/* Hiển thị thông tin đề xuất nếu đã chọn */}
            {selectedRecruitments.length > 0 ? (
              <div className="card mt-2 border-success bg-light">
                <div className="card-body p-2">
                  <div className="d-flex justify-content-between align-items-center">
                    <div>
                      <strong className="d-block">Mã ĐX: {selectedRecruitments[0].requestNo}</strong>
                      <small className="text-muted">
                        Vị trí: {selectedRecruitments[0].position} • Phòng ban: {selectedRecruitments[0].department}
                      </small>
                      <small className="d-block text-info">
                        Thời gian ĐX: {selectedRecruitments[0].fromDateFormatted} - {selectedRecruitments[0].toDateFormatted}
                      </small>
                    </div>
                    <div className="d-flex align-items-center gap-1">
                      <button
                        type="button"
                        className="btn btn-sm btn-outline-primary border-0"
                        title="Thay đổi lựa chọn"
                        onClick={() => setIsRecruitmentModalOpen(true)}
                      >
                        <i className="bi bi-pencil-square"></i>
                      </button>
                      <button
                        type="button"
                        className="btn btn-sm btn-outline-danger border-0"
                        title="Bỏ chọn"
                        onClick={() => setSelectedRecruitments([])} // Reset mảng về rỗng
                      >
                        <i className="bi bi-x-lg"></i>
                      </button>
                    </div>
                  </div>
                </div>
              </div>
            ) : (
              // Hiển thị nút chọn nếu chưa có đề xuất nào
              <div className="d-flex align-items-center gap-2 mt-2">
                <button
                  type="button"
                  className="btn btn-outline-primary"
                  onClick={() => setIsRecruitmentModalOpen(true)}
                >
                  <i className="bi bi-search me-2"></i>
                  Chọn đề xuất
                </button>
              </div>
            )}
          </div>

          {/* ✅ THÊM: Các trường mới */}
          <div className="row mb-3">
            <div className="col-md-6">
              <label htmlFor="fromDate" className="form-label">
                Từ ngày <span className="text-danger">*</span>
              </label>
              <input
                type="date"
                className="form-control"
                id="fromDate"
                name="fromDate"
                value={workHistoryData.fromDate}
                onChange={handleInputChange}
                disabled={isLoading}
              />
              <small className="form-text text-muted">
                Ngày bắt đầu làm việc
              </small>
            </div>
            <div className="col-md-6">
              <label htmlFor="toDate" className="form-label">
                Đến ngày <span className="text-danger">*</span>
              </label>
              <input
                type="date"
                className="form-control"
                id="toDate"
                name="toDate"
                value={workHistoryData.toDate}
                onChange={handleInputChange}
                disabled={isLoading}
              />
              <small className="form-text text-muted">
                Ngày kết thúc làm việc
              </small>
            </div>
          </div>

          <div className="mb-3">
            <label htmlFor="hourlyRate" className="form-label">
              Mức lương/giờ (VNĐ)
            </label>
            <input
              type="number"
              className="form-control"
              id="hourlyRate"
              name="hourlyRate"
              value={workHistoryData.hourlyRate}
              onChange={handleInputChange}
              min="0"
              step="1000"
              placeholder="Ví dụ: 50000"
              disabled={isLoading}
            />
            <small className="form-text text-muted">
              Để trống nếu sử dụng mức lương mặc định. Nhập số để áp dụng mức lương đặc biệt (ngày lễ, OT...)
            </small>
          </div>

          {/* ✅ THÊM: Cảnh báo validation */}
          {selectedRecruitments.length > 0 && (workHistoryData.fromDate || workHistoryData.toDate) && (
            <div className="alert alert-info small">
              <i className="fas fa-info-circle me-2"></i>
              <strong>Lưu ý:</strong> Khoảng thời gian làm việc phải nằm trong khoảng thời gian của đề xuất tuyển dụng ({selectedRecruitments[0].fromDateFormatted} - {selectedRecruitments[0].toDateFormatted}).
            </div>
          )}

          {/* Các nút hành động ở chân modal */}
          <div className="modal-footer px-0 pb-0 border-0">
            <button type="button" className="btn btn-secondary" onClick={onClose} disabled={isLoading}>
              Hủy
            </button>
            <ButtonLoading
              type="submit"
              className="btn btn-primary"
              loading={isLoading}
              // Nút Lưu bị vô hiệu hóa khi đang tải hoặc chưa đủ thông tin
              disabled={isLoading || selectedRecruitments.length === 0 || !workHistoryData.fromDate || !workHistoryData.toDate}
            >
              Thêm Lịch sử
            </ButtonLoading>
          </div>
        </form>
      </Modal>

      {/* Modal phụ để chọn Đề xuất tuyển dụng, chỉ hiện khi cần */}
      {isRecruitmentModalOpen && (
        <RecruitmentModal
          isOpen={isRecruitmentModalOpen}
          onClose={() => setIsRecruitmentModalOpen(false)}
          onRecruitmentSelected={handleRecruitmentSelect}
          // Truyền mảng đã chọn vào để modal biết lựa chọn hiện tại
          selectedRecruitments={selectedRecruitments}
          // Luôn giữ singleSelect=true để đảm bảo người dùng chỉ chọn 1
          singleSelect={true}
        />
      )}
    </>
  );
};

export default AddWorkHistoryModal;

```


==================== File: .\src\components\employee\EmployeeAddForm.jsx ====================

// src/components/employee/EmployeeAddForm.jsx

import React, { useState, useRef, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { useNotification } from '../../hooks/useNotification';
import RecruitmentModal from './RecruitmentModal';

const EmployeeAddForm = ({ onSave, isLoading: externalLoading }) => {
  const navigate = useNavigate();
  const { showNotification } = useNotification();
  const fullNameInputRef = useRef(null);

  const [isSubmitting, setIsSubmitting] = useState(false);
  const [selectedRecruitment, setSelectedRecruitment] = useState(null);
  const [isModalOpen, setIsModalOpen] = useState(false);

  const initialFormData = {
    fullName: '',
    phoneNumber: '',
    gender: 'Nam',
    bankAccount: '',
    bankName: '',
  };

  const initialWorkHistoryData = {
    fromDate: '',
    toDate: '',
    hourlyRate: ''
  };

  const [formData, setFormData] = useState(initialFormData);
  const [workHistoryData, setWorkHistoryData] = useState(initialWorkHistoryData);

  const handleChange = e => {
    const { name, value } = e.target;
    setFormData(prev => ({ ...prev, [name]: value }));
  };

  const handleWorkHistoryChange = e => {
    const { name, value } = e.target;
    setWorkHistoryData(prev => ({ ...prev, [name]: value }));
  };

  const resetForm = () => {
    setFormData(initialFormData);
    setWorkHistoryData(initialWorkHistoryData);
    setSelectedRecruitment(null);
    fullNameInputRef.current?.focus();
  };

  const handleSelectRecruitment = request => {
    setSelectedRecruitment(request);
    setIsModalOpen(false);
  };

  const handleRemoveRecruitment = () => {
    setSelectedRecruitment(null);
    setWorkHistoryData(initialWorkHistoryData);
  };

  const validateWorkHistory = () => {
    const errors = [];
    if (!workHistoryData.fromDate) errors.push('Từ ngày là bắt buộc');
    if (!workHistoryData.toDate) errors.push('Đến ngày là bắt buộc');

    if (workHistoryData.fromDate && workHistoryData.toDate) {

      const from = new Date(workHistoryData.fromDate);
      from.setHours(0, 0, 0, 0);
      const to = new Date(workHistoryData.toDate);
      to.setHours(0, 0, 0, 0);

      if (to < from) errors.push('Đến ngày phải lớn hơn hoặc bằng Từ ngày');
      // ✅ VALIDATION  - Kiểm tra khoảng ngày
      if (selectedRecruitment) {
        const start = new Date(selectedRecruitment.fromDate);
        const end = new Date(selectedRecruitment.toDate);

        if (from < start || to > end) {
          errors.push(`Khoảng thời gian phải nằm trong (${selectedRecruitment.fromDateFormatted} - ${selectedRecruitment.toDateFormatted})`);
        }
      }
    }
    // Validation mức lương/giờ
    if (workHistoryData.hourlyRate && (isNaN(workHistoryData.hourlyRate) || parseFloat(workHistoryData.hourlyRate) < 0)) {
      errors.push('Mức lương/giờ phải là số và không âm');
    }
    return errors;
  };

  const handleSubmit = async e => {
    e.preventDefault();
    if (!selectedRecruitment) {
      showNotification('Vui lòng chọn một đề xuất tuyển dụng.', 'warning');
      return;
    }
    const errors = validateWorkHistory();
    if (errors.length) {
      showNotification(errors.join('. '), 'warning');
      return;
    }
    if (isSubmitting) return;
    setIsSubmitting(true);

    const payload = {
      ...formData,
      workHistoryData: [{
        requestNo: selectedRecruitment.requestNo,
        fromDate: workHistoryData.fromDate,
        toDate: workHistoryData.toDate,
        hourlyRate: workHistoryData.hourlyRate
          ? parseFloat(workHistoryData.hourlyRate)
          : undefined
      }]
    };

    try {
      const success = await onSave(payload);
      if (success) {
        showNotification('Thêm nhân viên thành công!', 'success');
        resetForm();
      } else {
        showNotification('Thêm nhân viên thất bại.', 'error');
      }
    } catch (err) {
      showNotification(err.response?.data?.message || 'Lỗi hệ thống', 'error');
      console.error(err);
    } finally {
      setIsSubmitting(false);
    }
  };

  useEffect(() => {
    fullNameInputRef.current?.focus();
  }, []);

  const loading = externalLoading || isSubmitting;

  return (
    <div className="card">
      <div className="card-header">
        <h4 className="card-title mb-0">Thêm Nhân viên Mới</h4>
      </div>
      <div className="card-body">
        <form onSubmit={handleSubmit}>
          {/* Thông tin Cá nhân */}
          <h5 className="mb-3">Thông tin Cá nhân</h5>
          <div className="row">
            <div className="col-md-6 mb-3">
              <label htmlFor="fullName" className="form-label">
                Họ tên <span className="text-danger">*</span>
              </label>
              <input
                type="text"
                id="fullName"
                name="fullName"
                className="form-control"
                placeholder="Nhập họ tên"
                value={formData.fullName}
                onChange={handleChange}
                required
                disabled={loading}
                ref={fullNameInputRef}
              />
            </div>
            <div className="col-md-6 mb-3">
              <label htmlFor="phoneNumber" className="form-label">
                Số điện thoại <span className="text-danger">*</span>
              </label>
              <input
                type="tel"
                id="phoneNumber"
                name="phoneNumber"
                className="form-control"
                placeholder="Ví dụ: 0123456789"
                value={formData.phoneNumber}
                onChange={handleChange}
                required
                disabled={loading}
              />
            </div>
          </div>
          <div className="row">
            <div className="col-md-6 mb-3">
              <label htmlFor="gender" className="form-label">
                Giới tính <span className="text-danger">*</span>
              </label>
              <select
                id="gender"
                name="gender"
                className="form-select"
                value={formData.gender}
                onChange={handleChange}
                required
                disabled={loading}
              >
                <option value="Nam">Nam</option>
                <option value="Nữ">Nữ</option>
              </select>
            </div>
            {/* Phần Mức lương/giờ mặc định đã được loại bỏ */}
          </div>

          {/* Thông tin Ngân hàng */}
          <h5 className="mb-3 mt-4">Thông tin Ngân hàng</h5>
          <div className="row">
            <div className="col-md-6 mb-3">
              <label htmlFor="bankAccount" className="form-label">
                Số tài khoản <span className="text-danger">*</span>
              </label>
              <input
                type="text"
                id="bankAccount"
                name="bankAccount"
                className="form-control"
                placeholder="Nhập số tài khoản"
                value={formData.bankAccount}
                onChange={handleChange}
                required
                disabled={loading}
              />
            </div>
            <div className="col-md-6 mb-3">
              <label htmlFor="bankName" className="form-label">
                Tên ngân hàng <span className="text-danger">*</span>
              </label>
              <input
                type="text"
                id="bankName"
                name="bankName"
                className="form-control"
                placeholder="Ví dụ: Vietcombank"
                value={formData.bankName}
                onChange={handleChange}
                required
                disabled={loading}
              />
            </div>
          </div>

          <hr className="my-4" />

          {/* Thông tin Tuyển dụng */}
          <h5 className="mb-3">Thông tin Tuyển dụng</h5>
          {selectedRecruitment ? (
            <div className="alert alert-info d-flex justify-content-between align-items-center">
              <div>
                <strong>Đề xuất:</strong> {selectedRecruitment.requestNo}<br/>
                <small className="text-muted">
                  {selectedRecruitment.department} – {selectedRecruitment.position}
                </small><br/>
                <small className="text-info">
                  {selectedRecruitment.fromDateFormatted} – {selectedRecruitment.toDateFormatted}
                </small>
              </div>
              <button
                type="button"
                className="btn-close"
                onClick={handleRemoveRecruitment}
                disabled={loading}
              />
            </div>
          ) : (
            <div className="alert alert-warning">
              <i className="fas fa-exclamation-triangle me-2"></i>
              Chưa chọn đề xuất tuyển dụng.
            </div>
          )}

          <button
            type="button"
            className={`btn ${selectedRecruitment ? 'btn-secondary' : 'btn-primary'} mb-4`}
            onClick={() => setIsModalOpen(true)}
            disabled={!!selectedRecruitment || loading}
          >
            <i className="fas fa-search me-2"></i>
            {selectedRecruitment ? 'Thay đổi Đề xuất' : 'Chọn Đề xuất Tuyển dụng'}
          </button>

          {/* Chi tiết Thời gian & Lương */}
          {selectedRecruitment && (
            <>
              <h6 className="mb-3">Chi tiết Thời gian &amp; Lương</h6>
              <div className="row mb-3">
                <div className="col-md-6">
                  <label htmlFor="fromDate" className="form-label">
                    Từ ngày <span className="text-danger">*</span>
                  </label>
                  <input
                    type="date"
                    id="fromDate"
                    name="fromDate"
                    className="form-control"
                    value={workHistoryData.fromDate}
                    onChange={handleWorkHistoryChange}
                    required
                    disabled={loading}
                  />
                </div>
                <div className="col-md-6">
                  <label htmlFor="toDate" className="form-label">
                    Đến ngày <span className="text-danger">*</span>
                  </label>
                  <input
                    type="date"
                    id="toDate"
                    name="toDate"
                    className="form-control"
                    value={workHistoryData.toDate}
                    onChange={handleWorkHistoryChange}
                    required
                    disabled={loading}
                  />
                </div>
              </div>

              <div className="mb-3">
                <label htmlFor="workHistoryHourlyRate" className="form-label">
                  Mức lương/giờ (VNĐ)
                </label>
                <input
                  type="number"
                  id="workHistoryHourlyRate"
                  name="hourlyRate"
                  className="form-control"
                  placeholder="Ví dụ: 30000"
                  min="0"
                  step="1000"
                  value={workHistoryData.hourlyRate}
                  onChange={handleWorkHistoryChange}
                  disabled={loading}
                />
                <small className="form-text text-muted">
                  Để trống nếu dùng mức lương mặc định, nhập số để ghi đè.
                </small>
              </div>

              { (workHistoryData.fromDate || workHistoryData.toDate) && (
                <div className="alert alert-info small">
                  <i className="fas fa-info-circle me-2"></i>
                  Khoảng thời gian phải nằm trong ({selectedRecruitment.fromDateFormatted} – {selectedRecruitment.toDateFormatted}).
                </div>
              )}
            </>
          )}

          {/* Nút hành động cuối */}
          <div className="mt-4 d-flex justify-content-end gap-2">
            <button
              type="button"
              className="btn btn-outline-secondary"
              onClick={resetForm}
              disabled={loading}
            >
              <i className="fas fa-sync-alt me-2"></i>Làm mới Form
            </button>
            <button
              type="submit"
              className="btn btn-primary"
              disabled={loading || !selectedRecruitment || !workHistoryData.fromDate || !workHistoryData.toDate}
            >
              {loading ? (
                <>
                  <span className="spinner-border spinner-border-sm me-2" role="status"></span>
                  Đang lưu...
                </>
              ) : (
                <>
                  <i className="fas fa-save me-2"></i>
                  Lưu Nhân viên
                </>
              )}
            </button>
          </div>
        </form>
      </div>

      {/* Modal chọn Đề xuất Tuyển dụng */}
      <RecruitmentModal
        isOpen={isModalOpen}
        onClose={() => setIsModalOpen(false)}
        onRecruitmentSelected={handleSelectRecruitment}
      />
    </div>
  );
};

export default EmployeeAddForm;

```


==================== File: .\src\components\employee\EmployeeEditModal.jsx ====================

import React, { useState, useEffect } from 'react';
import { useNotification } from '../../hooks/useNotification';
import Modal from '../common/Modal.jsx';
import { ButtonLoading } from '../common/Loading.jsx';

const EmployeeEditModal = ({ isOpen, onClose, onSave, employee }) => {
    const [formData, setFormData] = useState({
    fullName: '',
    phoneNumber: '',
    gender: 'Nam',
    bankAccount: '',
    bankName: '',
    status: 'active',
  });
  //const [formData, setFormData] = useState({});
  const [loading, setLoading] = useState(false);
  const { showNotification } = useNotification();

  // Khi modal mở hoặc nhân viên được chọn thay đổi, cập nhật state của form
  useEffect(() => {
    if (employee) {
      setFormData({
        fullName: employee.fullName || '',
        phoneNumber: employee.phoneNumber || '',
        gender: employee.gender || 'Nam',
        bankAccount: employee.bankAccount || '',
        bankName: employee.bankName || '',
        status: employee.status || 'active',
      });
    }
  }, [employee]);

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData((prev) => ({ ...prev, [name]: value }));
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    try {
      // Gọi hàm onSave được truyền từ EmployeeManagementPage. Hàm này sẽ gọi hook useEmployees để thực sự cập nhật dữ liệu.
      const success = await onSave(formData);
      // if (success) {
      //   // Component cha (EmployeeManagementPage) sẽ tự xử lý việc đóng modal.
      // } else {
      //   // Nếu onSave trả về false, hiển thị thông báo lỗi chung.
      //   showNotification('Cập nhật thất bại. Vui lòng thử lại.', 'error');
      // }
    } catch (error) {
      console.error('Lỗi khi submit form sửa nhân viên:', error);
      showNotification(error.message || 'Lỗi hệ thống khi cập nhật.', 'error');
    } finally {
      setLoading(false);
    }
  };

  if (!isOpen || !employee) return null;

  return (
    <Modal
      isOpen={isOpen}
      onClose={onClose}
      title={`Chỉnh sửa: ${employee.fullName}`}
    >
      <form onSubmit={handleSubmit}>
        <div className="row">
          <div className="col-md-6 mb-3">
            <label className="form-label">Họ tên</label>
            <input name="fullName" value={formData.fullName} onChange={handleChange} className="form-control" required />
          </div>
          <div className="col-md-6 mb-3">
            <label className="form-label">Số điện thoại</label>
            <input name="phoneNumber" value={formData.phoneNumber} onChange={handleChange} className="form-control" required />
          </div>
        </div>
        <div className="row">
          <div className="col-md-6 mb-3">
            <label className="form-label">Giới tính</label>
            <select name="gender" value={formData.gender} onChange={handleChange} className="form-select">
              <option value="Nam">Nam</option>
              <option value="Nữ">Nữ</option>
            </select>
          </div>
          {/* <div className="col-md-6 mb-3">
            <label className="form-label">Lương/giờ</label>
            <input type="number" name="hourlyRate" value={formData.hourlyRate} onChange={handleChange} className="form-control" required min="0"/>
          </div> */}
        </div>
        <div className="row">
          <div className="col-md-6 mb-3">
            <label className="form-label">Số tài khoản</label>
            <input name="bankAccount" value={formData.bankAccount} onChange={handleChange} className="form-control" />
          </div>
          <div className="col-md-6 mb-3">
            <label className="form-label">Ngân hàng</label>
            <input name="bankName" value={formData.bankName} onChange={handleChange} className="form-control" />
          </div>
        </div>
        <div className="mb-3">
          <label className="form-label">Trạng thái</label>
          <select name="status" value={formData.status} onChange={handleChange} className="form-select">
            <option value="active">Hoạt động</option>
            <option value="inactive">Ngưng hoạt động</option>
          </select>
        </div>
        <div className="modal-footer border-0 px-0 pb-0">
          <button type="button" className="btn btn-secondary" onClick={onClose} disabled={loading}>
            Hủy
          </button>
          <ButtonLoading type="submit" className="btn btn-primary" loading={loading}>
            Lưu thay đổi
          </ButtonLoading>
        </div>
      </form>
    </Modal>
  );
};

export default EmployeeEditModal;

```


==================== File: .\src\components\employee\EmployeeForm.jsx ====================

// src/components/employee/EmployeeForm.jsx

import React, { useState, useEffect } from 'react';

const EmployeeForm = ({ initialData, onSubmit, onCancel, isLoading }) => {
  const [formData, setFormData] = useState(initialData);

  useEffect(() => {
    setFormData(initialData);
  }, [initialData]);

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData((prev) => ({ ...prev, [name]: value }));
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    onSubmit(formData);
  };

  return (
    <form onSubmit={handleSubmit}>
      <div className="row">
        <div className="col-md-6 mb-3">
          <label className="form-label">Họ tên</label>
          <input name="fullName" value={formData.fullName} onChange={handleChange} className="form-control" required />
        </div>
        <div className="col-md-6 mb-3">
          <label className="form-label">Số điện thoại</label>
          <input name="phoneNumber" value={formData.phoneNumber} onChange={handleChange} className="form-control" required />
        </div>
      </div>
      <div className="row">
        <div className="col-md-6 mb-3">
          <label className="form-label">Giới tính</label>
          <select name="gender" value={formData.gender} onChange={handleChange} className="form-select">
            <option value="Nam">Nam</option>
            <option value="Nữ">Nữ</option>
          </select>
        </div>
        <div className="col-md-6 mb-3">
          <label className="form-label">Lương/giờ</label>
          <input type="number" name="hourlyRate" value={formData.hourlyRate} onChange={handleChange} className="form-control" required />
        </div>
      </div>
      <div className="row">
        <div className="col-md-6 mb-3">
          <label className="form-label">Số tài khoản</label>
          <input name="bankAccount" value={formData.bankAccount} onChange={handleChange} className="form-control" />
        </div>
        <div className="col-md-6 mb-3">
          <label className="form-label">Ngân hàng</label>
          <input name="bankName" value={formData.bankName} onChange={handleChange} className="form-control" />
        </div>
      </div>
      <div className="mb-3">
        <label className="form-label">Trạng thái</label>
        <select name="status" value={formData.status} onChange={handleChange} className="form-select">
          <option value="active">Hoạt động</option>
          <option value="inactive">Ngưng hoạt động</option>
        </select>
      </div>
      <div className="modal-footer">
        <button type="button" className="btn btn-secondary" onClick={onCancel} disabled={isLoading}>Hủy</button>
        <button type="submit" className="btn btn-primary" disabled={isLoading}>
          {isLoading ? 'Đang lưu...' : 'Lưu'}
        </button>
      </div>
    </form>
  );
};

export default EmployeeForm;

```


==================== File: .\src\components\employee\EmployeeList.jsx ====================

import React from 'react';
import EmployeeTable from './EmployeeTable';

const EmployeeList = ({ 
  employees, 
  onEdit, 
  onDelete, 
  onAddWorkHistory, 
  onManageWorkHistory // ✅ THAY ĐỔI: Đổi tên từ onViewWorkHistory thành onManageWorkHistory
}) => {
  return (
    <div className="employee-list">
      <div className="mb-3">
        <small className="text-muted">
          Hiển thị {employees.length} kết quả
        </small>
      </div>
      <EmployeeTable
        employees={employees}
        onEdit={onEdit}
        onDelete={onDelete}
        onAddWorkHistory={onAddWorkHistory}
        onManageWorkHistory={onManageWorkHistory} // ✅ THAY ĐỔI: Truyền prop mới xuống EmployeeTable
      />
    </div>
  );
};

export default EmployeeList;

```


==================== File: .\src\components\employee\EmployeeTable.jsx ====================

import React from 'react';

const EmployeeTable = ({ 
  employees, 
  onEdit, 
  onDelete, 
  onAddWorkHistory, 
  onManageWorkHistory
}) => {

  // ✅ Giữ lại phần hiển thị thông báo thân thiện khi không có dữ liệu từ code của bạn.
  if (!employees || employees.length === 0) {
    return (
      <div className="text-center py-5">
        <p className="text-muted">Không có dữ liệu nhân viên để hiển thị.</p>
        <p className="text-muted small">Hãy thử thay đổi bộ lọc hoặc thêm nhân viên mới.</p>
      </div>
    );
  }

  return (
    <div className="table-responsive">
      <table className="table table-hover table-striped align-middle">
        <thead className="table-dark">
          <tr>
            <th>Mã NV</th>
            <th>Họ tên</th>
            <th>Số ĐT</th>
            <th>Giới tính</th>
            <th>Tài khoản</th>
            <th>Ngân hàng</th>
            <th>Trạng thái</th>
            <th className="text-center" style={{ minWidth: '180px' }}>Thao tác</th> {/* ✅ TĂNG chiều rộng cho thêm nút */}
          </tr>
        </thead>
        <tbody>
          {employees.map((employee) => (
            <tr key={employee.id}>
              <td>{employee.employeeId || 'N/A'}</td>
              <td>{employee.fullName || 'N/A'}</td>
              <td>{employee.phoneNumber || 'N/A'}</td>
              <td>{employee.gender || 'N/A'}</td>
              <td>{employee.bankAccount || 'N/A'}</td>
              <td>{employee.bankName || 'N/A'}</td>
              <td>
                <span className={`badge ${employee.status === 'active' ? 'bg-success' : 'bg-secondary'}`}>
                  {employee.status === 'active' ? 'Hoạt động' : 'Ngưng'}
                </span>
              </td>
              <td className="text-center">
                <div className="btn-group" role="group">
                  {/* ✅ GIỮ LẠI: Nút Thêm Work History */}
                  {onAddWorkHistory && (
                    <button
                      className="btn btn-sm btn-success"
                      title="Thêm Lịch sử công việc"
                      onClick={() => onAddWorkHistory(employee)}
                    >
                      <i className="fas fa-plus-circle"></i>
                    </button>
                  )}
                  
                  {/* ✅ THAY ĐỔI: Nút Quản lý Work History (thay thế nút Xem) */}
                  {onManageWorkHistory && (
                    <button
                      className="btn btn-sm btn-primary" // ✅ THAY ĐỔI: Đổi màu từ info sang primary
                      title="Quản lý Lịch sử công việc" // ✅ THAY ĐỔI: Đổi tooltip
                      onClick={() => onManageWorkHistory(employee)}
                    >
                      <i className="fas fa-cogs"></i> {/* ✅ THAY ĐỔI: Đổi icon từ history sang cogs */}
                    </button>
                  )}
                  
                  {/* ✅ GIỮ LẠI: Nút Sửa */}
                  {onEdit && (
                     <button
                      className="btn btn-sm btn-warning" // ✅ THAY ĐỔI: Đổi màu từ primary sang warning để phân biệt
                      title="Sửa thông tin"
                      onClick={() => onEdit(employee)}
                    >
                      <i className="fas fa-pencil-alt"></i>
                    </button>
                  )}
                  
                  {/* ✅ GIỮ LẠI: Nút Xóa */}
                  {onDelete && (
                    <button
                      className="btn btn-sm btn-danger"
                      title="Xóa nhân viên"
                      onClick={() => {
                        if (window.confirm(`Bạn có chắc muốn xóa nhân viên "${employee.fullName}"?`)) {
                          onDelete(employee.id);
                        }
                      }}
                    >
                      <i className="fas fa-trash"></i>
                    </button>
                  )}
                </div>
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
};

export default EmployeeTable;

```


==================== File: .\src\components\employee\RecruitmentModal.jsx ====================

import React, { useState, useEffect } from 'react';
// SỬA ĐOẠN NÀY: Import đúng hàm getApprovedRecruitmentRequests từ services
import { getApprovedRecruitmentRequests } from '../../services/employee.js';
import { useNotification } from '../../hooks/useNotification';
import Loading from '../common/Loading';

const RecruitmentModal = ({ isOpen, onClose, onRecruitmentSelected, selectedRecruitment = null }) => {
  const [recruitmentRequests, setRecruitmentRequests] = useState([]);
  const [loading, setLoading] = useState(false);
  const [selectedItem, setSelectedItem] = useState(null);
  const [searchTerm, setSearchTerm] = useState('');
  const { showNotification } = useNotification();

  useEffect(() => {
    if (isOpen) {
      loadRecruitmentRequests();
      setSelectedItem(selectedRecruitment);
    }
  }, [isOpen, selectedRecruitment]);

  const loadRecruitmentRequests = async () => {
    try {
      setLoading(true);
      // SỬA: Gọi API đúng hàm mới
      const data = await getApprovedRecruitmentRequests();
      setRecruitmentRequests(data || []);
    } catch (err) {
      showNotification('Lỗi khi tải dữ liệu tuyển dụng.', 'warning');
      setRecruitmentRequests(getMockData());
    } finally {
      setLoading(false);
    }
  };

  const getMockData = () => [
    {
      id: '1',
      requestNo: '202507140017',
      requester: '236LH.Nguyễn Huy Thành',
      status: 'Đang tuyển dụng',
      department: '116 Cầu Giấy',
      quantity: '2',
      gender: 'Nam/Nữ',
      fromDate: '2025-07-14',
      toDate: '2025-08-14',
      position: 'Nhân viên bán hàng'
    },
    {
      id: '2',
      requestNo: '202507140018',
      requester: '225VVN.Nguyễn Trọng Hoàng An',
      status: 'Đang tuyển dụng',
      department: 'Trâm Trỗi',
      quantity: '1',
      gender: 'Nữ',
      fromDate: '2025-07-14',
      toDate: '2025-08-14',
      position: 'Thu ngân'
    }
  ];

  const filteredData = recruitmentRequests.filter(item =>
    item.requestNo?.toLowerCase().includes(searchTerm.toLowerCase()) ||
    item.department?.toLowerCase().includes(searchTerm.toLowerCase()) ||
    item.requester?.toLowerCase().includes(searchTerm.toLowerCase()) ||
    item.position?.toLowerCase().includes(searchTerm.toLowerCase())
  );

  //const handleItemSelect = item => {
  //  setSelectedItem(selectedItem?.requestNo === item.requestNo ? null : item);
  //};

  // Trong hàm handleItemSelect, thêm logic xử lý min/max

  const handleItemSelect = item => {
    console.log('🔍 User clicked item:', item);
    
    const relatedItems = filteredData.filter(dataItem => 
      dataItem.requestNo === item.requestNo
    );
    
    console.log(`📋 Found ${relatedItems.length} related items for ${item.requestNo}`);
    
    if (relatedItems.length === 1) {
      setSelectedItem(selectedItem?.requestNo === item.requestNo ? null : item);
      return;
    }
    
    const allFromDates = relatedItems
      .map(r => r.fromDate)
      .filter(date => date && typeof date === 'number') // Chỉ lấy timestamp numbers
      .sort((a, b) => a - b); // Sort timestamp ascending
      
    const allToDates = relatedItems
      .map(r => r.toDate)
      .filter(date => date && typeof date === 'number') // Chỉ lấy timestamp numbers
      .sort((a, b) => a - b); // Sort timestamp ascending
    
    console.log('🔍 DEBUG: Filtered timestamps:', { allFromDates, allToDates });
    
    const minFromDate = allFromDates[0]; // Earliest timestamp
    const maxToDate = allToDates[allToDates.length - 1]; // Latest timestamp
    
    console.log('🔍 DEBUG: Min/max timestamps:', { minFromDate, maxToDate });
    
    const formatTimestamp = (timestamp) => {
      if (!timestamp || typeof timestamp !== 'number') return null;
      
      try {
        const date = new Date(timestamp);
        if (isNaN(date.getTime())) return null;
        
        const day = String(date.getDate()).padStart(2, '0');
        const month = String(date.getMonth() + 1).padStart(2, '0');
        const year = date.getFullYear();
        return `${day}/${month}/${year}`;
      } catch (error) {
        console.error('Error formatting timestamp:', error);
        return null;
      }
    };
    
    // ✅ Tạo merged item với timestamps đã xử lý
    const mergedItem = {
      ...item,
      fromDate: minFromDate,
      toDate: maxToDate,
      fromDateFormatted: formatTimestamp(minFromDate),
      toDateFormatted: formatTimestamp(maxToDate),
      originalRowCount: relatedItems.length,
      debugInfo: {
        allFromDates: allFromDates,
        allToDates: allToDates
      }
    };
    
    console.log('✅ Final merged item:', mergedItem);
    console.log(`📅 Date range: ${mergedItem.fromDateFormatted} - ${mergedItem.toDateFormatted}`);
    
    setSelectedItem(selectedItem?.requestNo === item.requestNo ? null : mergedItem);
  };





  const handleConfirm = () => {
    if (!selectedItem) {
      showNotification('Vui lòng chọn một đề xuất tuyển dụng', 'warning');
      return;
    }
    onRecruitmentSelected(selectedItem);
    onClose();
  };

  const handleCancel = () => {
    setSelectedItem(selectedRecruitment);
    setSearchTerm('');
    onClose();
  };

  if (!isOpen) return null;

  return (
    <div className="modal fade show" style={{ display: 'block' }} tabIndex="-1">
      <div className="modal-dialog modal-xl">
        <div className="modal-content">
          <div className="modal-header">
            <h5 className="modal-title">
              <i className="fas fa-clipboard-list me-2"></i>
              Chọn đề xuất tuyển dụng
            </h5>
            <button type="button" className="btn-close" onClick={handleCancel}></button>
          </div>
          <div className="modal-body">
            {/* Ô tìm kiếm */}
            <div className="row mb-3">
              <div className="col-12">
                <div className="input-group">
                  <span className="input-group-text">
                    <i className="fas fa-search"></i>
                  </span>
                  <input
                    type="text"
                    className="form-control"
                    placeholder="Tìm kiếm theo Request No, Phòng ban, Người yêu cầu, Vị trí..."
                    value={searchTerm}
                    onChange={e => setSearchTerm(e.target.value)}
                  />
                  {searchTerm && (
                    <button
                      className="btn btn-outline-secondary"
                      type="button"
                      onClick={() => setSearchTerm('')}
                    >
                      <i className="fas fa-times"></i>
                    </button>
                  )}
                </div>
              </div>
            </div>

            {/* Selected Info */}
            {selectedItem && (
              <div className="alert alert-info">
                <i className="fas fa-info-circle me-2"></i>
                Đã chọn: <strong>{selectedItem.requestNo}</strong> - {selectedItem.position} ({selectedItem.department})
              </div>
            )}

            {loading ? (
              <Loading text="Đang tải danh sách đề xuất..." />
            ) : (
              <div className="table-responsive" style={{ maxHeight: '400px', overflowY: 'auto' }}>
                <table className="table table-striped table-hover">
                  <thead className="table-dark sticky-top">
                    <tr>
                      <th width="50"><i className="fas fa-check"></i></th>
                      <th>Request No.</th>
                      <th>Vị trí tuyển dụng</th>
                      <th>Người yêu cầu</th>
                      <th>Phòng ban</th>
                      <th>Số lượng</th>
                      <th>Giới tính</th>
                      <th>Thời gian</th>
                      <th>Trạng thái</th>
                    </tr>
                  </thead>
                  <tbody>
                    {filteredData.map(item => {
                      const isSelected = selectedItem?.requestNo === item.requestNo;
                      return (
                        <tr
                          key={item.id || item.requestNo}
                          className={isSelected ? 'table-primary' : ''}
                          style={{ cursor: 'pointer' }}
                          onClick={() => handleItemSelect(item)}
                        >
                          <td>
                            <input
                              type="radio"
                              className="form-check-input"
                              checked={isSelected}
                              onChange={() => handleItemSelect(item)}
                            />
                          </td>
                          <td><strong className="text-primary">{item.requestNo}</strong></td>
                          <td><span className="badge bg-info">{item.position || 'N/A'}</span></td>
                          <td>{item.requester}</td>
                          <td><span className="badge bg-secondary">{item.department}</span></td>
                          <td className="text-center"><span className="badge bg-warning text-dark">{item.quantity}</span></td>
                          <td><span className="badge bg-light text-dark">{item.gender}</span></td>
                          <td>
                            <small>
                              {item.fromDateFormatted}<br />
                              đến {item.toDateFormatted}
                            </small>
                          </td>
                          <td>
                            <span className={`badge ${item.status === 'Đang tuyển dụng' ? 'bg-success' : 'bg-warning'}`}>
                              {item.status}
                            </span>
                          </td>
                        </tr>
                      );
                    })}
                  </tbody>
                </table>
                {filteredData.length === 0 && (
                  <div className="text-center py-4">
                    <i className="fas fa-search fa-3x text-muted mb-3"></i>
                    <p className="text-muted">
                      {searchTerm ? 'Không tìm thấy đề xuất phù hợp' : 'Chưa có đề xuất tuyển dụng nào'}
                    </p>
                  </div>
                )}
              </div>
            )}
          </div>
          <div className="modal-footer">
            <button type="button" className="btn btn-secondary" onClick={handleCancel}>
              <i className="fas fa-times me-2"></i>Hủy
            </button>
            <button
              type="button"
              className="btn btn-primary"
              onClick={handleConfirm}
              disabled={!selectedItem || loading}
            >
              <i className="fas fa-check me-2"></i>
              Xác nhận{selectedItem ? ` (${selectedItem.requestNo})` : ''}
            </button>
          </div>
        </div>
      </div>
    </div>
  );
};

export default RecruitmentModal;

```


==================== File: .\src\components\employee\WorkHistoryModal.jsx ====================

import React, { useState, useEffect } from 'react';
import { getWorkHistory, addWorkHistory, updateWorkHistory, deleteWorkHistory } from '../../services/employee.js';
import { useNotification } from '../../hooks/useNotification';
import Modal from '../common/Modal.jsx';
import Loading from '../common/Loading.jsx';
import RecruitmentModal from './RecruitmentModal.jsx';
import { ButtonLoading } from '../common/Loading.jsx';

const WorkHistoryModal = ({ isOpen, onClose, employeeId, employeeName, workHistory,onDataChanged  }) => {
  // ===== STATE MANAGEMENT =====
  const [workHistoryData, setWorkHistoryData] = useState([]);
  const [loading, setLoading] = useState(false);
  const [mode, setMode] = useState('view'); // 'view' | 'add' | 'edit'
  const [selectedWorkHistory, setSelectedWorkHistory] = useState(null);
  const [isRecruitmentModalOpen, setIsRecruitmentModalOpen] = useState(false);
  const [selectedRecruitment, setSelectedRecruitment] = useState(null);
  const [saving, setSaving] = useState(false);
  
  // Form data cho add/edit
  const [formData, setFormData] = useState({
    fromDate: '',
    toDate: '',
    hourlyRate: ''
  });

  const { showNotification } = useNotification();

  // ===== EFFECTS =====
  useEffect(() => {
    if (isOpen && employeeId && !workHistory) {
      fetchWorkHistory();
    } else if (workHistory) {
      setWorkHistoryData(workHistory);
    }
    // Reset về view mode khi mở modal
    setMode('view');
    resetForm();
  }, [isOpen, employeeId, workHistory]);

  // ===== DATA FETCHING =====
  const fetchWorkHistory = async () => {
    setLoading(true);
    try {
      const response = await getWorkHistory(employeeId);
      setWorkHistoryData(response || []);
    } catch (error) {
      console.error('Lỗi khi tải lịch sử công việc:', error);
      showNotification(error.message || 'Lỗi kết nối đến server', 'error');
    } finally {
      setLoading(false);
    }
  };

  // ===== FORM HANDLING =====
  const resetForm = () => {
    setFormData({
      fromDate: '',
      toDate: '',
      hourlyRate: ''
    });
    setSelectedRecruitment(null);
    setSelectedWorkHistory(null);
  };

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
  };

  // ===== MODE SWITCHING =====
  const handleAddNew = () => {
    resetForm();
    setMode('add');
  };

  const handleEdit = (item) => {
    setSelectedWorkHistory(item);
    setFormData({
      fromDate: item.fromDate || '',
      toDate: item.toDate || '',
      hourlyRate: item.hourlyRate || ''
    });
    // Tạo mock recruitment object từ requestNo
    setSelectedRecruitment({
      requestNo: item.requestNo,
      position: 'N/A',
      department: 'N/A'
    });
    setMode('edit');
  };

  const handleCancel = () => {
    resetForm();
    setMode('view');
  };

  // ===== RECRUITMENT SELECTION =====
  const handleRecruitmentSelect = (recruitment) => {
    setSelectedRecruitment(recruitment);
    setIsRecruitmentModalOpen(false);
  };

  // ===== VALIDATION =====
  const validateForm = () => {
    const errors = [];

    if (mode === 'add' && !selectedRecruitment) {
      errors.push('Vui lòng chọn một đề xuất tuyển dụng.');
    }

    if (!formData.fromDate) {
      errors.push('Từ ngày là bắt buộc.');
    }

    if (!formData.toDate) {
      errors.push('Đến ngày là bắt buộc.');
    }

    if (formData.fromDate && formData.toDate) {
      const fromDate = new Date(formData.fromDate);
      const toDate = new Date(formData.toDate);
      
      if (toDate < fromDate) {
        errors.push('Đến ngày phải lớn hơn hoặc bằng Từ ngày.');
      }
    }

    if (formData.hourlyRate && (isNaN(formData.hourlyRate) || parseFloat(formData.hourlyRate) < 0)) {
      errors.push('Mức lương/giờ phải là số và không được âm.');
    }

    return errors;
  };

  // ===== CRUD OPERATIONS =====
  const handleSave = async () => {
    const validationErrors = validateForm();
    if (validationErrors.length > 0) {
      showNotification(validationErrors.join(' '), 'warning');
      return;
    }

    setSaving(true);
    try {
      const payload = {
        employeeId: employeeId,
        requestNo: selectedRecruitment?.requestNo || selectedWorkHistory?.requestNo,
        fromDate: formData.fromDate,
        toDate: formData.toDate,
        hourlyRate: formData.hourlyRate ? parseFloat(formData.hourlyRate) : undefined,
      };

      let response;
      if (mode === 'add') {
        response = await addWorkHistory(payload);
      } else if (mode === 'edit') {
        response = await updateWorkHistory(selectedWorkHistory.id, payload);
      }

      if (response.success) {
        showNotification(
          mode === 'add' ? 'Thêm lịch sử công việc thành công!' : 'Cập nhật lịch sử công việc thành công!', 
          'success'
        );
        await fetchWorkHistory(); // Refresh data
        if (onDataChanged) {
          onDataChanged();
        }
        setMode('view');
        resetForm();
      } else {
        showNotification(response.message || 'Có lỗi xảy ra', 'error');
      }
    } catch (error) {
      console.error('Lỗi khi lưu:', error);
      showNotification(error.message || 'Lỗi hệ thống', 'error');
    } finally {
      setSaving(false);
    }
  };

  const handleDelete = async (item) => {
    if (!window.confirm(`Bạn có chắc muốn xóa lịch sử công việc "${safeRenderRequestNo(item.requestNo)}"?`)) {
      return;
    }

    setSaving(true);
    try {
      const response = await deleteWorkHistory(item.id);
      if (response.success) {
        showNotification('Xóa lịch sử công việc thành công!', 'success');
        await fetchWorkHistory(); // Refresh data
        if (onDataChanged) {
          onDataChanged();
        }
      } else {
        showNotification(response.message || 'Có lỗi xảy ra khi xóa', 'error');
      }
    } catch (error) {
      console.error('Lỗi khi xóa:', error);
      showNotification(error.message || 'Lỗi hệ thống', 'error');
    } finally {
      setSaving(false);
    }
  };

  // ===== HELPER FUNCTIONS =====
  const safeRender = (value, fallback = 'N/A') => {
    if (value === null || value === undefined) return fallback;
    
    if (typeof value === 'object') {
      if (value.text) return value.text;
      if (value.link) return value.link;
      if (Array.isArray(value) && value.length > 0) {
        return safeRender(value[0]);
      }
      return JSON.stringify(value);
    }
    
    return String(value);
  };

  // ✅ SỬA: Hàm riêng để xử lý requestNo (ưu tiên text)
  const safeRenderRequestNo = (requestNo) => {
    if (!requestNo) return 'N/A';
    
    if (typeof requestNo === 'object') {
      // Ưu tiên text trước, sau đó mới đến link
      if (requestNo.text) return requestNo.text;
      if (requestNo.link) return requestNo.link;
      if (Array.isArray(requestNo) && requestNo.length > 0) {
        return safeRenderRequestNo(requestNo[0]);
      }
      return JSON.stringify(requestNo);
    }
    
    return String(requestNo);
  };

  // ✅ SỬA: Hàm format ngày để xử lý array timestamp
  const formatDate = (dateValue) => {
    if (!dateValue) return 'N/A';
    
    try {
      let timestamp = dateValue;
      
      // ✅ SỬA: Xử lý array chứa timestamp
      if (Array.isArray(dateValue) && dateValue.length > 0) {
        timestamp = dateValue[0];
      }
      
      // Chuyển đổi timestamp thành Date object
      const date = new Date(timestamp);
      
      if (isNaN(date.getTime())) return 'N/A';
      
      const day = String(date.getDate()).padStart(2, '0');
      const month = String(date.getMonth() + 1).padStart(2, '0');
      const year = date.getFullYear();
      return `${day}/${month}/${year}`;
    } catch (error) {
      console.error('Error formatting date:', error);
      return 'N/A';
    }
  };

  const formatCurrency = (amount) => {
    if (!amount || amount === 0) return 'N/A';
    try {
      return new Intl.NumberFormat('vi-VN', { 
        style: 'currency', 
        currency: 'VND' 
      }).format(amount);
    } catch (error) {
      return `${amount} VNĐ`;
    }
  };

  // ===== RENDER FUNCTIONS =====
  const renderViewMode = () => (
    <div>
      {/* Header Actions */}
      <div className="d-flex justify-content-between align-items-center mb-3">
        <h6 className="mb-0">Danh sách lịch sử công việc</h6>
        <div className="btn-group">
          <button 
            className="btn btn-primary btn-sm" 
            onClick={handleAddNew}
            disabled={loading || saving}
          >
            <i className="fas fa-plus me-2"></i>
            Thêm mới
          </button>
          <button 
            className="btn btn-outline-secondary btn-sm" 
            onClick={fetchWorkHistory}
            disabled={loading || saving}
          >
            <i className={`fas fa-sync-alt me-2 ${loading ? 'fa-spin' : ''}`}></i>
            Làm mới
          </button>
        </div>
      </div>

      {workHistoryData.length === 0 ? (
        <div className="text-center py-4">
          <i className="fas fa-history fa-3x text-muted mb-3"></i>
          <p className="text-muted">Nhân viên này chưa có lịch sử làm việc.</p>
          <button className="btn btn-primary" onClick={handleAddNew}>
            <i className="fas fa-plus me-2"></i>
            Thêm lịch sử đầu tiên
          </button>
        </div>
      ) : (
        <>
          <div className="table-responsive">
            <table className="table table-striped table-hover">
              <thead className="table-dark">
                <tr>
                  <th>Request No.</th>
                  <th>Từ ngày</th>
                  <th>Đến ngày</th>
                  <th>Mức lương/giờ</th>
                  {/* ✅ BỎ: Cột "Thời gian tạo" */}
                  <th className="text-center">Thao tác</th>
                </tr>
              </thead>
              <tbody>
                {workHistoryData.map((item, index) => (
                  <tr key={item.id || index}>
                    <td>
                      <span className="badge bg-primary fs-6">
                        {safeRenderRequestNo(item.requestNo)}
                      </span>
                    </td>
                    <td>
                      <span className="text-info">
                        {formatDate(item.fromDate)}
                      </span>
                    </td>
                    <td>
                      <span className="text-info">
                        {formatDate(item.toDate)}
                      </span>
                    </td>
                    <td>
                      {item.hourlyRate ? (
                        <span className="badge bg-success">
                          {formatCurrency(item.hourlyRate)}
                        </span>
                      ) : (
                        <span className="text-muted">Mặc định</span>
                      )}
                    </td>
                    {/* ✅ BỎ: Cột "Thời gian tạo" */}
                    <td className="text-center">
                      <div className="btn-group" role="group">
                        <button
                          className="btn btn-sm btn-warning"
                          title="Sửa"
                          onClick={() => handleEdit(item)}
                          disabled={saving}
                        >
                          <i className="fas fa-edit"></i>
                        </button>
                        <button
                          className="btn btn-sm btn-danger"
                          title="Xóa"
                          onClick={() => handleDelete(item)}
                          disabled={saving}
                        >
                          <i className="fas fa-trash"></i>
                        </button>
                      </div>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>

          {/* ✅ BỎ: Phần thống kê tổng quan */}
        </>
      )}
    </div>
  );

  const renderFormMode = () => (
    <div>
      {/* Header */}
      <div className="d-flex justify-content-between align-items-center mb-3">
        <h6 className="mb-0">
          {mode === 'add' ? 'Thêm lịch sử công việc mới' : 'Chỉnh sửa lịch sử công việc'}
        </h6>
        <button 
          className="btn btn-outline-secondary btn-sm" 
          onClick={handleCancel}
          disabled={saving}
        >
          <i className="fas fa-arrow-left me-2"></i>
          Quay lại
        </button>
      </div>

      <form onSubmit={(e) => { e.preventDefault(); handleSave(); }}>
        {/* Employee ID (read-only) */}
        <div className="mb-3">
          <label className="form-label">Mã nhân viên</label>
          <input
            type="text"
            className="form-control"
            value={employeeId}
            disabled
          />
        </div>

        {/* Recruitment Selection - chỉ hiện khi add */}
        {mode === 'add' && (
          <div className="mb-4">
            <label className="form-label d-block">
              Đề xuất tuyển dụng <span className="text-danger">*</span>
            </label>
            
            {selectedRecruitment ? (
              <div className="card mt-2 border-success bg-light">
                <div className="card-body p-2">
                  <div className="d-flex justify-content-between align-items-center">
                    <div>
                      <strong className="d-block">Mã ĐX: {selectedRecruitment.requestNo}</strong>
                      <small className="text-muted">
                        Vị trí: {selectedRecruitment.position} • Phòng ban: {selectedRecruitment.department}
                      </small>
                    </div>
                    <div className="d-flex align-items-center gap-1">
                      <button
                        type="button"
                        className="btn btn-sm btn-outline-primary border-0"
                        title="Thay đổi lựa chọn"
                        onClick={() => setIsRecruitmentModalOpen(true)}
                        disabled={saving}
                      >
                        <i className="fas fa-pencil-alt"></i>
                      </button>
                      <button
                        type="button"
                        className="btn btn-sm btn-outline-danger border-0"
                        title="Bỏ chọn"
                        onClick={() => setSelectedRecruitment(null)}
                        disabled={saving}
                      >
                        <i className="fas fa-times"></i>
                      </button>
                    </div>
                  </div>
                </div>
              </div>
            ) : (
              <div className="d-flex align-items-center gap-2 mt-2">
                <button
                  type="button"
                  className="btn btn-outline-primary"
                  onClick={() => setIsRecruitmentModalOpen(true)}
                  disabled={saving}
                >
                  <i className="fas fa-search me-2"></i>
                  Chọn đề xuất
                </button>
              </div>
            )}
          </div>
        )}

        {/* Request No - chỉ hiển thị khi edit */}
        {mode === 'edit' && (
          <div className="mb-3">
            <label className="form-label">Request No.</label>
            <input
              type="text"
              className="form-control"
              value={safeRenderRequestNo(selectedWorkHistory?.requestNo) || ''}
              disabled
            />
          </div>
        )}

        {/* Date Range */}
        <div className="row mb-3">
          <div className="col-md-6">
            <label className="form-label">
              Từ ngày <span className="text-danger">*</span>
            </label>
            <input
              type="date"
              className="form-control"
              name="fromDate"
              value={formData.fromDate}
              onChange={handleInputChange}
              disabled={saving}
            />
          </div>
          <div className="col-md-6">
            <label className="form-label">
              Đến ngày <span className="text-danger">*</span>
            </label>
            <input
              type="date"
              className="form-control"
              name="toDate"
              value={formData.toDate}
              onChange={handleInputChange}
              disabled={saving}
            />
          </div>
        </div>

        {/* Hourly Rate */}
        <div className="mb-3">
          <label className="form-label">
            Mức lương/giờ (VNĐ)
          </label>
          <input
            type="number"
            className="form-control"
            name="hourlyRate"
            value={formData.hourlyRate}
            onChange={handleInputChange}
            min="0"
            step="1000"
            placeholder="Ví dụ: 50000"
            disabled={saving}
          />
          <small className="form-text text-muted">
            Để trống nếu sử dụng mức lương mặc định
          </small>
        </div>

        {/* Form Actions */}
        <div className="d-flex justify-content-end gap-2">
          <button 
            type="button"
            className="btn btn-secondary" 
            onClick={handleCancel}
            disabled={saving}
          >
            Hủy
          </button>
          <ButtonLoading
            type="submit"
            className="btn btn-primary"
            loading={saving}
            disabled={saving || (mode === 'add' && !selectedRecruitment)}
          >
            {mode === 'add' ? 'Thêm mới' : 'Cập nhật'}
          </ButtonLoading>
        </div>
      </form>
    </div>
  );

  if (!isOpen) return null;

  return (
    <>
      <Modal 
        isOpen={isOpen} 
        onClose={onClose}
        title={`Quản lý lịch sử làm việc - ${employeeName || employeeId}`}
        size="xl"
      >
        {loading ? (
          <Loading text="Đang tải lịch sử..." />
        ) : (
          <>
            {mode === 'view' ? renderViewMode() : renderFormMode()}
            
            {/* Footer - chỉ hiện khi ở view mode */}
            {mode === 'view' && (
              <div className="modal-footer border-0 px-0 pb-0 mt-3">
                <button type="button" className="btn btn-secondary" onClick={onClose}>
                  Đóng
                </button>
              </div>
            )}
          </>
        )}
      </Modal>

      {/* Recruitment Selection Modal */}
      {isRecruitmentModalOpen && (
        <RecruitmentModal
          isOpen={isRecruitmentModalOpen}
          onClose={() => setIsRecruitmentModalOpen(false)}
          onRecruitmentSelected={handleRecruitmentSelect}
          selectedRecruitment={selectedRecruitment}
          singleSelect={true}
        />
      )}
    </>
  );
};

export default WorkHistoryModal;

```


==================== File: .\src\components\layout\Layout.jsx ====================

import React, { useEffect } from 'react';
import { Outlet, useLocation } from 'react-router-dom';
import { useAuth } from '../../hooks/useAuth';
import ResponsiveNavigation from './ResponsiveNavigation';

const Layout = () => {
  const { user } = useAuth();
  const location = useLocation();

  useEffect(() => {
    // Initialize tooltips when location changes
    if (typeof window !== 'undefined' && window.bootstrap) {
      const tooltipTriggerList = [].slice.call(
        document.querySelectorAll('[data-bs-toggle="tooltip"]')
      );
      tooltipTriggerList.map(tooltipTriggerEl => {
        return new window.bootstrap.Tooltip(tooltipTriggerEl);
      });
    }
  }, [location]);

  if (!user) {
    return (
      <div className="d-flex justify-content-center align-items-center min-vh-100">
        <div className="spinner-border" role="status">
          <span className="visually-hidden">Loading...</span>
        </div>
      </div>
    );
  }

  return (
    <div className="d-flex">
      <ResponsiveNavigation />
      
      {/* Main content */}
      <div className="flex-grow-1">
        <main className="container-fluid py-4">
          <Outlet />
        </main>
      </div>

      {/* ✅ BƯỚC 2: Xóa bỏ Alert Container khỏi đây */}
      {/* Div đã được di chuyển ra App.jsx */}
    </div>
  );
};

export default Layout;

```


==================== File: .\src\components\layout\ResponsiveNavigation.jsx ====================

import React, { useState, useEffect } from 'react';
import { useLocation, Link } from 'react-router-dom'; // ✅ THÊM Link
import { useAuth } from '../../hooks/useAuth';
import { useNotification } from '../../hooks/useNotification';

const ResponsiveNavigation = () => {
  const [isMobile, setIsMobile] = useState(false);
  const [sidebarOpen, setSidebarOpen] = useState(false);
  const [dropdownOpen, setDropdownOpen] = useState(false);
  
  const { user, logout } = useAuth();
  const { showNotification } = useNotification();
  const location = useLocation();

  // Detect mobile screen
  useEffect(() => {
    const checkScreenSize = () => {
      setIsMobile(window.innerWidth < 768);
    };
    
    checkScreenSize();
    window.addEventListener('resize', checkScreenSize);
    return () => window.removeEventListener('resize', checkScreenSize);
  }, []);

  // ✅ SỬA: Menu items configuration - THÊM 'sales' vào attendance-logs
  const menuItems = [
    {
      path: '/employee-management',
      icon: 'fas fa-users-cog',
      label: 'Quản lý nhân viên',
      roles: ['admin', 'hr']
    },
    {
      path: '/hr-dashboard',
      icon: 'fas fa-chart-bar',
      label: 'HR Dashboard',
      roles: ['admin', 'hr']
    },
    {
      path: '/attendance-logs',
      icon: 'fas fa-clock',
      label: 'Bản ghi chấm công',
      roles: ['admin', 'hr', 'sales', 'sales_manager', 'finance_manager', 'director'] // ✅ THÊM 'sales'
    }
  ];

  const filteredMenuItems = menuItems.filter(item => 
    item.roles.includes(user?.role)
  );

  const isActiveRoute = (path) => {
    return location.pathname === path || location.pathname.startsWith(path + '/');
  };

  const handleLogout = async () => {
    try {
      await logout();
      showNotification('Đăng xuất thành công!', 'success');
    } catch (error) {
      console.error('Logout error:', error);
      showNotification('Lỗi khi đăng xuất', 'error');
    }
  };

  // Desktop Navigation (Always visible sidebar)
  const DesktopNavigation = () => (
    <div className="d-none d-md-flex">
      {/* Desktop Sidebar */}
      <div className="bg-light border-end" style={{ width: '280px', minHeight: '100vh' }}>
        {/* Brand Header */}
        <div className="p-3 border-bottom">
          <div className="d-flex align-items-center">
            <div className="rounded-circle bg-primary d-flex align-items-center justify-content-center me-2" 
                 style={{ width: '40px', height: '40px' }}>
              <i className="fas fa-user text-white"></i>
            </div>
            <div>
              <div className="fw-semibold">{user?.fullName}</div>
              <small className="text-muted">{getRoleDisplayName(user?.role)}</small>
            </div>
          </div>
        </div>

        {/* Navigation Menu */}
        <nav className="flex-grow-1 p-2">
          {filteredMenuItems.map((item, index) => (
            <Link // ✅ SỬA: Dùng Link thay vì <a href>
              key={index}
              to={item.path}
              className={`nav-link d-flex align-items-center rounded mb-1 p-3 text-decoration-none ${
                isActiveRoute(item.path) ? 'active bg-primary text-white' : 'text-dark'
              }`}
            >
              <i className={`${item.icon} me-2`}></i>
              <span>{item.label}</span>
            </Link>
          ))}
        </nav>

        {/* User Actions */}
        <div className="border-top p-3">
          <button 
            className="btn btn-outline-danger w-100"
            onClick={handleLogout}
          >
            <i className="fas fa-sign-out-alt me-2"></i>
            Đăng xuất
          </button>
        </div>
      </div>
    </div>
  );

  // Mobile Navigation (Top navbar + collapsible menu)
  const MobileNavigation = () => (
    <div className="d-md-none">
      {/* Mobile Top Bar */}
      <nav className="navbar navbar-dark bg-dark">
        <div className="container-fluid">
          <Link className="navbar-brand" to="/dashboard"> {/* ✅ SỬA: Link thay vì <a> */}
            <i className="fas fa-users me-2"></i>
            HR Management
          </Link>
          
          <button
            className="navbar-toggler"
            type="button"
            onClick={() => setSidebarOpen(!sidebarOpen)}
          >
            <span className="navbar-toggler-icon"></span>
          </button>
        </div>
      </nav>

      {/* Mobile Sidebar Overlay */}
      {sidebarOpen && (
        <>
          {/* Backdrop */}
          <div 
            className="position-fixed top-0 start-0 w-100 h-100 bg-dark bg-opacity-50"
            style={{ zIndex: 1040 }}
            onClick={() => setSidebarOpen(false)}
          ></div>
          
          {/* Mobile Sidebar */}
          <div 
            className="position-fixed top-0 start-0 bg-light h-100"
            style={{ width: '280px', zIndex: 1050 }}
          >
            {/* Mobile Header */}
            <div className="p-3 border-bottom d-flex justify-content-between align-items-center">
              <div className="d-flex align-items-center">
                <div className="rounded-circle bg-primary d-flex align-items-center justify-content-center me-2" 
                     style={{ width: '32px', height: '32px' }}>
                  <i className="fas fa-user text-white"></i>
                </div>
                <div>
                  <div className="fw-semibold small">{user?.fullName}</div>
                  <small className="text-muted">{getRoleDisplayName(user?.role)}</small>
                </div>
              </div>
              <button 
                className="btn btn-sm btn-outline-secondary"
                onClick={() => setSidebarOpen(false)}
              >
                <i className="fas fa-times"></i>
              </button>
            </div>

            {/* Mobile Menu */}
            <nav className="p-2">
              {filteredMenuItems.map((item, index) => (
                <Link // ✅ SỬA: Link thay vì <a href>
                  key={index}
                  to={item.path}
                  className={`nav-link d-flex align-items-center rounded mb-1 p-3 text-decoration-none ${
                    isActiveRoute(item.path) ? 'active bg-primary text-white' : 'text-dark'
                  }`}
                  onClick={() => setSidebarOpen(false)}
                >
                  <i className={`${item.icon} me-2`}></i>
                  <span>{item.label}</span>
                </Link>
              ))}
            </nav>

            {/* Mobile User Actions */}
            <div className="position-absolute bottom-0 w-100 border-top p-3">
              <button 
                className="btn btn-outline-danger w-100"
                onClick={handleLogout}
              >
                <i className="fas fa-sign-out-alt me-2"></i>
                Đăng xuất
              </button>
            </div>
          </div>
        </>
      )}
    </div>
  );

  const getRoleDisplayName = (role) => {
    const roleMap = {
      'admin': 'Administrator',
      'hr': 'HR Manager',
      'sales': 'Sales', // ✅ THÊM mapping cho role 'sales'
      'sales_manager': 'Sales Manager',
      'finance_manager': 'Finance Manager',
      'director': 'Director'
    };
    return roleMap[role] || 'Nhân viên';
  };

  if (!user) return null;

  return (
    <>
      <DesktopNavigation />
      <MobileNavigation />
    </>
  );
};

export default ResponsiveNavigation;

```


==================== File: .\src\components\masterdata\PositionManager.jsx ====================

import React, { useState, useEffect } from 'react';
import { ApiClient } from '../../services/api';
import { useNotification } from '../../hooks/useNotification';
import Loading from '../common/Loading';

const PositionManager = () => {
  const [positions, setPositions] = useState([]);
  const [loading, setLoading] = useState(true);
  const [formData, setFormData] = useState({
    positionName: '',
    description: ''
  });
  const [editingPosition, setEditingPosition] = useState(null);
  const { showNotification } = useNotification();

  useEffect(() => {
    loadPositions();
  }, []);

  const loadPositions = async () => {
    try {
      setLoading(true);
      const data = await ApiClient.get('/api/employees/positions');
      setPositions(data);
    } catch (error) {
      console.error('Error loading positions:', error);
      showNotification('Lỗi khi tải danh sách vị trí', 'error');
    } finally {
      setLoading(false);
    }
  };

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    
    if (!formData.positionName.trim()) {
      showNotification('Vui lòng nhập tên vị trí!', 'error');
      return;
    }

    try {
      if (editingPosition) {
        await ApiClient.put(`/api/employees/positions/${editingPosition.id}`, formData);
        showNotification('Cập nhật vị trí thành công', 'success');
      } else {
        await ApiClient.post('/api/employees/positions', formData);
        showNotification('Thêm vị trí thành công', 'success');
      }
      
      setFormData({ positionName: '', description: '' });
      setEditingPosition(null);
      await loadPositions();
    } catch (error) {
      console.error('Error saving position:', error);
      showNotification('Lỗi khi lưu vị trí', 'error');
    }
  };

  const handleEdit = (position) => {
    setEditingPosition(position);
    setFormData({
      positionName: position.positionName,
      description: position.description || ''
    });
  };

  const handleDelete = async (position) => {
    const confirmed = window.confirm(`Bạn có chắc chắn muốn xóa vị trí "${position.positionName}"?`);
    if (!confirmed) return;

    try {
      await ApiClient.delete(`/api/employees/positions/${position.id}`);
      showNotification('Xóa vị trí thành công', 'success');
      await loadPositions();
    } catch (error) {
      console.error('Error deleting position:', error);
      showNotification('Lỗi khi xóa vị trí', 'error');
    }
  };

  const handleCancel = () => {
    setEditingPosition(null);
    setFormData({ positionName: '', description: '' });
  };

  if (loading) {
    return <Loading text="Đang tải danh sách vị trí..." />;
  }

  return (
    <div className="position-manager">
      <div className="row">
        <div className="col-md-4">
          <div className="card">
            <div className="card-header">
              <h5>{editingPosition ? 'Chỉnh sửa' : 'Thêm'} vị trí</h5>
            </div>
            <div className="card-body">
              <form onSubmit={handleSubmit}>
                <div className="mb-3">
                  <label className="form-label">
                    Tên vị trí <span className="text-danger">*</span>
                  </label>
                  <input
                    type="text"
                    className="form-control"
                    name="positionName"
                    value={formData.positionName}
                    onChange={handleInputChange}
                    required
                  />
                </div>
                
                <div className="mb-3">
                  <label className="form-label">Mô tả</label>
                  <textarea
                    className="form-control"
                    name="description"
                    value={formData.description}
                    onChange={handleInputChange}
                    rows="3"
                    placeholder="Mô tả về vị trí công việc..."
                  />
                </div>
                
                <div className="d-grid gap-2">
                  <button type="submit" className="btn btn-primary">
                    {editingPosition ? 'Cập nhật' : 'Thêm'} vị trí
                  </button>
                  {editingPosition && (
                    <button 
                      type="button" 
                      className="btn btn-secondary"
                      onClick={handleCancel}
                    >
                      Hủy
                    </button>
                  )}
                </div>
              </form>
            </div>
          </div>
        </div>
        
        <div className="col-md-8">
          <div className="card">
            <div className="card-header">
              <h5>Danh sách vị trí</h5>
            </div>
            <div className="card-body">
              {positions.length === 0 ? (
                <div className="text-center py-4">
                  <i className="fas fa-briefcase fa-3x text-muted mb-3"></i>
                  <p className="text-muted">Chưa có vị trí nào</p>
                </div>
              ) : (
                <div className="table-responsive">
                  <table className="table table-striped table-hover">
                    <thead className="table-dark">
                      <tr>
                        <th>Tên vị trí</th>
                        <th>Mô tả</th>
                        <th>Trạng thái</th>
                        <th>Thao tác</th>
                      </tr>
                    </thead>
                    <tbody>
                      {positions.map(position => (
                        <tr key={position.id}>
                          <td>
                            <strong>{position.positionName}</strong>
                          </td>
                          <td>
                            <span className="text-muted">
                              {position.description || 'Không có mô tả'}
                            </span>
                          </td>
                          <td>
                            <span className={`badge ${
                              position.status === 'active' 
                                ? 'bg-success' 
                                : 'bg-secondary'
                            }`}>
                              {position.status === 'active' 
                                ? 'Hoạt động' 
                                : 'Ngưng hoạt động'
                              }
                            </span>
                          </td>
                          <td>
                            <div className="btn-group" role="group">
                              <button
                                className="btn btn-sm btn-primary"
                                onClick={() => handleEdit(position)}
                                title="Chỉnh sửa"
                              >
                                <i className="fas fa-edit"></i>
                              </button>
                              <button
                                className="btn btn-sm btn-danger"
                                onClick={() => handleDelete(position)}
                                title="Xóa"
                              >
                                <i className="fas fa-trash"></i>
                              </button>
                            </div>
                          </td>
                        </tr>
                      ))}
                    </tbody>
                  </table>
                </div>
              )}
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default PositionManager;

```


==================== File: .\src\components\masterdata\StoreManager.jsx ====================

import React, { useState, useEffect } from 'react';
import { ApiClient } from '../../services/api';
import { useNotification } from '../../hooks/useNotification';
import Loading from '../common/Loading';

const StoreManager = () => {
  const [stores, setStores] = useState([]);
  const [loading, setLoading] = useState(true);
  const [formData, setFormData] = useState({
    storeName: '',
    address: ''
  });
  const [editingStore, setEditingStore] = useState(null);
  const { showNotification } = useNotification();

  useEffect(() => {
    loadStores();
  }, []);

  const loadStores = async () => {
    try {
      setLoading(true);
      const data = await ApiClient.get('/api/employees/stores');
      setStores(data);
    } catch (error) {
      console.error('Error loading stores:', error);
      showNotification('Lỗi khi tải danh sách cửa hàng', 'error');
    } finally {
      setLoading(false);
    }
  };

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    
    if (!formData.storeName.trim() || !formData.address.trim()) {
      showNotification('Vui lòng điền đầy đủ thông tin!', 'error');
      return;
    }

    try {
      if (editingStore) {
        await ApiClient.put(`/api/employees/stores/${editingStore.id}`, formData);
        showNotification('Cập nhật cửa hàng thành công', 'success');
      } else {
        await ApiClient.post('/api/employees/stores', formData);
        showNotification('Thêm cửa hàng thành công', 'success');
      }
      
      setFormData({ storeName: '', address: '' });
      setEditingStore(null);
      await loadStores();
    } catch (error) {
      console.error('Error saving store:', error);
      showNotification('Lỗi khi lưu cửa hàng', 'error');
    }
  };

  const handleEdit = (store) => {
    setEditingStore(store);
    setFormData({
      storeName: store.storeName,
      address: store.address
    });
  };

  const handleDelete = async (store) => {
    const confirmed = window.confirm(`Bạn có chắc chắn muốn xóa cửa hàng "${store.storeName}"?`);
    if (!confirmed) return;

    try {
      await ApiClient.delete(`/api/employees/stores/${store.id}`);
      showNotification('Xóa cửa hàng thành công', 'success');
      await loadStores();
    } catch (error) {
      console.error('Error deleting store:', error);
      showNotification('Lỗi khi xóa cửa hàng', 'error');
    }
  };

  const handleCancel = () => {
    setEditingStore(null);
    setFormData({ storeName: '', address: '' });
  };

  if (loading) {
    return <Loading text="Đang tải danh sách cửa hàng..." />;
  }

  return (
    <div className="store-manager">
      <div className="row">
        <div className="col-md-4">
          <div className="card">
            <div className="card-header">
              <h5>{editingStore ? 'Chỉnh sửa' : 'Thêm'} cửa hàng</h5>
            </div>
            <div className="card-body">
              <form onSubmit={handleSubmit}>
                <div className="mb-3">
                  <label className="form-label">
                    Tên cửa hàng <span className="text-danger">*</span>
                  </label>
                  <input
                    type="text"
                    className="form-control"
                    name="storeName"
                    value={formData.storeName}
                    onChange={handleInputChange}
                    required
                  />
                </div>
                
                <div className="mb-3">
                  <label className="form-label">
                    Địa chỉ <span className="text-danger">*</span>
                  </label>
                  <textarea
                    className="form-control"
                    name="address"
                    value={formData.address}
                    onChange={handleInputChange}
                    rows="3"
                    required
                  />
                </div>
                
                <div className="d-grid gap-2">
                  <button type="submit" className="btn btn-primary">
                    {editingStore ? 'Cập nhật' : 'Thêm'} cửa hàng
                  </button>
                  {editingStore && (
                    <button 
                      type="button" 
                      className="btn btn-secondary"
                      onClick={handleCancel}
                    >
                      Hủy
                    </button>
                  )}
                </div>
              </form>
            </div>
          </div>
        </div>
        
        <div className="col-md-8">
          <div className="card">
            <div className="card-header">
              <h5>Danh sách cửa hàng</h5>
            </div>
            <div className="card-body">
              {stores.length === 0 ? (
                <div className="text-center py-4">
                  <i className="fas fa-store fa-3x text-muted mb-3"></i>
                  <p className="text-muted">Chưa có cửa hàng nào</p>
                </div>
              ) : (
                <div className="table-responsive">
                  <table className="table table-striped table-hover">
                    <thead className="table-dark">
                      <tr>
                        <th>Tên cửa hàng</th>
                        <th>Địa chỉ</th>
                        <th>Trạng thái</th>
                        <th>Thao tác</th>
                      </tr>
                    </thead>
                    <tbody>
                      {stores.map(store => (
                        <tr key={store.id}>
                          <td>{store.storeName}</td>
                          <td>{store.address}</td>
                          <td>
                            <span className={`badge ${
                              store.status === 'active' 
                                ? 'bg-success' 
                                : 'bg-secondary'
                            }`}>
                              {store.status === 'active' 
                                ? 'Hoạt động' 
                                : 'Ngưng hoạt động'
                              }
                            </span>
                          </td>
                          <td>
                            <div className="btn-group" role="group">
                              <button
                                className="btn btn-sm btn-primary"
                                onClick={() => handleEdit(store)}
                                title="Chỉnh sửa"
                              >
                                <i className="fas fa-edit"></i>
                              </button>
                              <button
                                className="btn btn-sm btn-danger"
                                onClick={() => handleDelete(store)}
                                title="Xóa"
                              >
                                <i className="fas fa-trash"></i>
                              </button>
                            </div>
                          </td>
                        </tr>
                      ))}
                    </tbody>
                  </table>
                </div>
              )}
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default StoreManager;

```


==================== File: .\src\contexts\AppContext.jsx ====================


```


==================== File: .\src\contexts\AuthContext.jsx ====================

import React, { createContext, useContext, useState, useEffect } from 'react';
import { ApiClient } from '../services/api.js';

const AuthContext = createContext();

export const AuthProvider = ({ children }) => {
  const [user, setUser] = useState(null);
  const [loading, setLoading] = useState(true);
  const [initialized, setInitialized] = useState(false);

  useEffect(() => {
    initializeAuth();
  }, []);

  const initializeAuth = async () => {
    try {
      setLoading(true);
      // ✅ SỬA: Thay thế checkAuth() bằng việc gọi trực tiếp getProfile từ ApiClient
      const response = await ApiClient.get('/api/auth/profile');
      if (response.success && response.data.user) {
        setUser(response.data.user);
      } else {
        setUser(null);
      }
    } catch (error) {
      console.warn('Auth initialization: Not logged in.');
      setUser(null);
    } finally {
      setInitialized(true);
      setLoading(false);
    }
  };

  // Hàm checkAuth cũ có thể xóa hoặc giữ lại nếu cần
  const checkAuth = async () => {
    try {
      const response = await ApiClient.get('/api/auth/profile');
      return response.success ? response.data.user : null;
    } catch (error) {
      return null;
    }
  };

  const login = async (credentials) => {
    try {
      setLoading(true);
      const response = await ApiClient.post('/api/auth/login', credentials);
      
      // ✅ SỬA LOGIC KIỂM TRA TẠI ĐÂY
      // Kiểm tra `response.data.user` thay vì `response.user`
      if (response.success && response.data && response.data.user) {
        setUser(response.data.user);
        return response.data; // Trả về `response.data` để LoginPage có thể sử dụng
      } else {
        // Ném lỗi với thông điệp từ server nếu có
        throw new Error(response.message || 'Login failed: Invalid response structure');
      }
    } catch (error) {
      console.error('Login error:', error);
      // Đảm bảo ném lại lỗi để component gọi có thể bắt được
      throw error;
    } finally {
      setLoading(false);
    }
  };

  const logout = async () => {
    try {
      setLoading(true);
      await ApiClient.post('/api/auth/logout');
      setUser(null);
      // Chuyển hướng về trang login một cách an toàn
      window.location.assign('/login');
    } catch (error) {
      console.error('Logout error:', error);
      // Vẫn xóa user và chuyển hướng dù API có lỗi
      setUser(null);
      window.location.assign('/login');
    } finally {
      setLoading(false);
    }
  };

  const updateUserInfo = (userData) => {
    setUser(prevUser => ({
      ...prevUser,
      ...userData
    }));
  };

  const hasRole = (requiredRoles) => {
    if (!user) return false;
    if (typeof requiredRoles === 'string') {
      return user.role === requiredRoles;
    }
    if (Array.isArray(requiredRoles)) {
      return requiredRoles.includes(user.role);
    }
    return false;
  };

  const value = {
    user,
    loading,
    initialized,
    login,
    logout,
    checkAuth,
    updateUserInfo,
    hasRole,
  };

  return (
    <AuthContext.Provider value={value}>
      {children}
    </AuthContext.Provider>
  );
};

export const useAuth = () => {
  const context = useContext(AuthContext);
  if (!context) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
};

export default AuthContext;

```


==================== File: .\src\contexts\NotificationContext.jsx ====================

import React, { createContext, useState, useCallback, useContext } from 'react';
import ReactDOM from 'react-dom';
import Alert from '../components/common/Alert';
import '../styles/notifications.css';

// FIX: Thêm "export" vào đây. Đây là thay đổi quan trọng nhất.
export const NotificationContext = createContext(null);

export const NotificationProvider = ({ children }) => {
    const [notifications, setNotifications] = useState([]);

    const showNotification = useCallback((message, type = 'info', duration = 5000) => {
        const newNotification = {
            id: Date.now() + Math.random(),
            message,
            type,
            duration,
        };
        // Thêm thông báo mới vào đầu danh sách để hiện trên cùng
        setNotifications(prev => [newNotification, ...prev]);
    }, []);

    const removeNotification = useCallback((id) => {
        setNotifications(prev => prev.filter(n => n.id !== id));
    }, []);

    // Giá trị mà Context sẽ cung cấp cho các component con
    const value = {
        showNotification,
    };
    
    // Logic render thông báo qua Portal
    const alertContainer = document.getElementById('alert-container');
    if (!alertContainer) {
        console.error('LỖI NGHIÊM TRỌNG: Không tìm thấy thẻ <div id="alert-container"> trong DOM. Thông báo sẽ không hiển thị.');
        // Vẫn render children để ứng dụng không bị sập
        return (
             <NotificationContext.Provider value={value}>
                {children}
            </NotificationContext.Provider>
        );
    }

    return (
        <NotificationContext.Provider value={value}>
            {children}
            {/* Render các Alert vào portal */}
            {ReactDOM.createPortal(
                <div className="notification-container">
                    {notifications.map((notification) => (
                        <Alert
                            key={notification.id}
                            notification={notification}
                            onClose={removeNotification}
                        />
                    ))}
                </div>,
                alertContainer
            )}
        </NotificationContext.Provider>
    );
};

// Bạn có thể giữ hook này ở đây hoặc trong file riêng đều được
export const useNotification = () => {
    const context = useContext(NotificationContext);
    if (context === null) {
        throw new Error('useNotification must be used within a NotificationProvider');
    }
    return context;
};

```


==================== File: .\src\hooks\useApi.js ====================

import { useState, useEffect } from 'react';
import { ApiClient } from '../services/api.js';

export const useApi = (url, options = {}) => {
  const [data, setData] = useState(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);

  useEffect(() => {
    if (!url) return;
    
    const fetchData = async () => {
      try {
        setLoading(true);
        setError(null);
        
        const response = await ApiClient.get(url, options);
        
        if (response.success && response.data) {
          setData(response.data);
        } else {
          setData(response.data || []);
        }
      } catch (err) {
        console.error('useApi error:', err);
        setError(err);
        setData([]);
      } finally {
        setLoading(false);
      }
    };

    fetchData();
  }, [url]);

  return { data, loading, error };
};

```


==================== File: .\src\hooks\useAttendance.js ====================

// src/hooks/useAttendance.js
import { useState, useCallback } from 'react';
import { useNotification } from './useNotification';
import api from '../services/api';

export function useAttendance() {
    const [loading, setLoading] = useState(false);
    const [error, setError] = useState(null);
    const { showNotification } = useNotification();

    // ✅ CẬP NHẬT: Lấy logs chấm công với filters nâng cao
    const getAttendanceLogs = useCallback(async (filters = {}) => {
        try {
            setLoading(true);
            setError(null);
            
            console.log('🔄 useAttendance: Getting attendance logs with filters:', filters);
            
            const response = await api.get('/attendance/logs', {
                params: filters
            });
            
            console.log('✅ useAttendance: Attendance logs loaded:', response.data.data?.length || 0, 'records');
            
            return {
                success: true,
                data: response.data.data || [],
                message: response.data.message
            };
            
        } catch (error) {
            console.error('❌ useAttendance: Error getting attendance logs:', error);
            const errorMessage = error.response?.data?.message || 'Lỗi khi tải logs chấm công';
            setError(errorMessage);
            
            return {
                success: false,
                data: [],
                message: errorMessage
            };
        } finally {
            setLoading(false);
        }
    }, []);

    // ✅ CẬP NHẬT: Lấy tổng giờ công với format mới  
    const getEmployeeHours = useCallback(async () => {
        try {
            setLoading(true);
            setError(null);
            
            console.log('📊 useAttendance: Getting employee hours...');
            
            const response = await api.get('/api/attendance/employee-hours');
            
            console.log('🔍 useAttendance RAW RESPONSE:', response);
            console.log('🔍 response.data:', response.data);
            console.log('🔍 response.data.data:', response.data.data);
            console.log('🔍 employeeHours array:', response.data.data?.employeeHours);
            console.log('🔍 employeeHours length:', response.data.data?.employeeHours?.length);
            
            return {
                success: true,
                // ✅ SỬA: Thay response.data.data thành response.data
                data: response.data || { employeeHours: [], summary: {} },
                message: response.data.message
            };
            
        } catch (error) {
            // error handling
        } finally {
            setLoading(false);
        }
    }, []);



    // ✅ THÊM MỚI: Lấy thống kê chấm công
    const getAttendanceStats = useCallback(async (filters = {}) => {
        try {
            setLoading(true);
            setError(null);
            
            console.log('📈 useAttendance: Getting attendance stats...');
            
            const response = await api.get('/attendance/stats', {
                params: filters
            });
            
            console.log('✅ useAttendance: Attendance stats loaded:', response.data.data);
            
            return {
                success: true,
                data: response.data.data || {},
                message: response.data.message
            };
            
        } catch (error) {
            console.error('❌ useAttendance: Error getting attendance stats:', error);
            const errorMessage = error.response?.data?.message || 'Lỗi khi tải thống kê chấm công';
            setError(errorMessage);
            
            return {
                success: false,
                data: {},
                message: errorMessage
            };
        } finally {
            setLoading(false);
        }
    }, []);

    // ✅ THÊM MỚI: Lấy giờ công chi tiết của một nhân viên
    const getEmployeeDetailedHours = useCallback(async (employeeId, filters = {}) => {
        try {
            setLoading(true);
            setError(null);
            
            console.log('👤 useAttendance: Getting detailed hours for employee:', employeeId);
            
            const response = await api.get(`/attendance/employee/${employeeId}/detailed`, {
                params: filters
            });
            
            console.log('✅ useAttendance: Employee detailed hours loaded:', response.data.data);
            
            return {
                success: true,
                data: response.data.data || {},
                message: response.data.message
            };
            
        } catch (error) {
            console.error('❌ useAttendance: Error getting employee detailed hours:', error);
            const errorMessage = error.response?.data?.message || 'Lỗi khi tải giờ công chi tiết';
            setError(errorMessage);
            
            return {
                success: false,
                data: {},
                message: errorMessage
            };
        } finally {
            setLoading(false);
        }
    }, []);

    // ✅ CẬP NHẬT: Thêm log chấm công với validation mới
    const addAttendanceLog = useCallback(async (attendanceData) => {
        try {
            setLoading(true);
            setError(null);
            
            // Validate required fields
            const validationErrors = validateAttendanceData(attendanceData);
            if (validationErrors.length > 0) {
                throw new Error(validationErrors.join(', '));
            }
            
            console.log('➕ useAttendance: Adding attendance log:', attendanceData);
            
            const response = await api.post('/attendance/logs', attendanceData);
            
            console.log('✅ useAttendance: Attendance log added successfully');
            showNotification('Thêm bản ghi chấm công thành công', 'success');
            
            return {
                success: true,
                data: response.data.data,
                message: response.data.message
            };
            
        } catch (error) {
            console.error('❌ useAttendance: Error adding attendance log:', error);
            const errorMessage = error.response?.data?.message || error.message || 'Lỗi khi thêm bản ghi chấm công';
            setError(errorMessage);
            showNotification(errorMessage, 'error');
            
            return {
                success: false,
                data: null,
                message: errorMessage
            };
        } finally {
            setLoading(false);
        }
    }, [showNotification]);

    // ✅ THÊM MỚI: Cập nhật log chấm công  
    const updateAttendanceLog = useCallback(async (id, attendanceData) => {
        try {
            setLoading(true);
            setError(null);
            
            console.log('📝 useAttendance: Updating attendance log:', id, attendanceData);
            
            const response = await api.put(`/attendance/logs/${id}`, attendanceData);
            
            console.log('✅ useAttendance: Attendance log updated successfully');
            showNotification('Cập nhật bản ghi chấm công thành công', 'success');
            
            return {
                success: true,
                data: response.data.data,
                message: response.data.message
            };
            
        } catch (error) {
            console.error('❌ useAttendance: Error updating attendance log:', error);
            const errorMessage = error.response?.data?.message || 'Lỗi khi cập nhật bản ghi chấm công';
            setError(errorMessage);
            showNotification(errorMessage, 'error');
            
            return {
                success: false,
                data: null,
                message: errorMessage
            };
        } finally {
            setLoading(false);
        }
    }, [showNotification]);

    // ✅ THÊM MỚI: Xóa log chấm công
    const deleteAttendanceLog = useCallback(async (id) => {
        try {
            setLoading(true);
            setError(null);
            
            console.log('🗑️ useAttendance: Deleting attendance log:', id);
            
            await api.delete(`/attendance/logs/${id}`);
            
            console.log('✅ useAttendance: Attendance log deleted successfully');
            showNotification('Xóa bản ghi chấm công thành công', 'success');
            
            return {
                success: true,
                message: 'Xóa bản ghi chấm công thành công'
            };
            
        } catch (error) {
            console.error('❌ useAttendance: Error deleting attendance log:', error);
            const errorMessage = error.response?.data?.message || 'Lỗi khi xóa bản ghi chấm công';
            setError(errorMessage);
            showNotification(errorMessage, 'error');
            
            return {
                success: false,
                message: errorMessage
            };
        } finally {
            setLoading(false);
        }
    }, [showNotification]);

    // ✅ THÊM MỚI: Refresh cache
    const refreshAttendanceData = useCallback(async () => {
        try {
            setLoading(true);
            console.log('🔄 useAttendance: Refreshing attendance data...');
            
            // Call các API để refresh cache
            await Promise.all([
                getAttendanceLogs(),
                getEmployeeHours()
            ]);
            
            showNotification('Làm mới dữ liệu thành công', 'success');
            
        } catch (error) {
            console.error('❌ useAttendance: Error refreshing data:', error);
            showNotification('Lỗi khi làm mới dữ liệu', 'error');
        } finally {
            setLoading(false);
        }
    }, [getAttendanceLogs, getEmployeeHours, showNotification]);

    // ✅ HELPER: Export dữ liệu ra CSV
    const exportAttendanceToCSV = useCallback((data, filename = 'attendance_export') => {
        try {
            if (!data || data.length === 0) {
                showNotification('Không có dữ liệu để xuất', 'warning');
                return false;
            }

            const headers = Object.keys(data[0]);
            const csvContent = [
                headers.join(','),
                ...data.map(row => 
                    headers.map(header => {
                        const value = row[header];
                        // Escape commas and quotes in CSV
                        if (typeof value === 'string' && (value.includes(',') || value.includes('"'))) {
                            return `"${value.replace(/"/g, '""')}"`;
                        }
                        return value || '';
                    }).join(',')
                )
            ].join('\n');

            const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
            const link = document.createElement('a');
            link.href = URL.createObjectURL(blob);
            link.download = `${filename}_${new Date().toISOString().split('T')[0]}.csv`;
            link.click();
            
            showNotification('Xuất file CSV thành công', 'success');
            return true;
            
        } catch (error) {
            console.error('❌ useAttendance: Error exporting CSV:', error);
            showNotification('Lỗi khi xuất file CSV', 'error');
            return false;
        }
    }, [showNotification]);

    return {
        // State
        loading,
        error,
        
        // Main functions
        getAttendanceLogs,
        getEmployeeHours,
        addAttendanceLog,
        updateAttendanceLog,
        deleteAttendanceLog,
        
        // New functions
        getAttendanceStats,
        getEmployeeDetailedHours,
        refreshAttendanceData,
        exportAttendanceToCSV,
        
        // Utility functions
        clearError: () => setError(null)
    };
}

// ✅ HELPER: Validate dữ liệu chấm công
function validateAttendanceData(data) {
    const errors = [];
    
    if (!data.employeeId?.trim()) {
        errors.push('Mã nhân viên là bắt buộc');
    }
    
    if (!data.type || !['Checkin', 'Checkout'].includes(data.type)) {
        errors.push('Phân loại phải là Checkin hoặc Checkout');
    }
    
    if (!data.position?.trim()) {
        errors.push('Vị trí là bắt buộc');
    }
    
    // Validate position values
    const validPositions = ['Nhân viên Bán hàng', 'Nhân viên Thu ngân', 'Nhân viên Tiếp đón', 'Nhân viên Mascot'];
    if (data.position && !validPositions.includes(data.position)) {
        errors.push(`Vị trí phải là một trong: ${validPositions.join(', ')}`);
    }
    
    if (!data.timestamp) {
        errors.push('Thời gian chấm công là bắt buộc');
    } else {
        const timestamp = new Date(data.timestamp);
        if (isNaN(timestamp.getTime())) {
            errors.push('Thời gian chấm công không hợp lệ');
        }
    }
    
    return errors;
}

// ✅ HELPER: Format dữ liệu cho API
export function formatAttendanceForAPI(formData) {
    return {
        employeeId: formData.employeeId?.trim() || '',
        type: formData.type || 'Checkin',
        position: formData.position?.trim() || '',
        timestamp: formData.timestamp || new Date().toISOString(),
        notes: formData.notes?.trim() || ''
    };
}

// ✅ HELPER: Parse response từ API
export function parseAttendanceResponse(response) {
    if (!response || !response.data) {
        return { success: false, data: null, message: 'Invalid response' };
    }
    
    return {
        success: response.success || false,
        data: response.data || null,
        message: response.message || '',
        errorCode: response.errorCode || null
    };
}

export default useAttendance;

```


==================== File: .\src\hooks\useAuth.js ====================

import { useContext } from 'react';
import AuthContext from '../contexts/AuthContext';

export const useAuth = () => {
  const context = useContext(AuthContext);
  
  if (!context) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  
  return context;
};

export default useAuth;

```


==================== File: .\src\hooks\useEmployees.js ====================

// src/hooks/useEmployees.js

import { useState, useEffect, useCallback } from 'react';
import { 
  getEmployees, 
  addEmployee, 
  updateEmployee, 
  deleteEmployee 
} from '../services/employee.js';
import { useNotification } from './useNotification.js';

/**
 * Hook tùy chỉnh để quản lý dữ liệu và logic của Nhân viên.
 * @returns {object} Trạng thái và các hàm xử lý.
 */
export const useEmployees = () => {
  const [employees, setEmployees] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const { showNotification } = useNotification();

  const fetchEmployees = useCallback(async () => {
    console.log('HOOK: Bắt đầu tải danh sách nhân viên...');
    setLoading(true);
    setError(null);
    try {
      const response = await getEmployees();
      if (response.success) {
        setEmployees(response.data || []);
        console.log('HOOK: Tải danh sách nhân viên thành công.');
      } else {
        // Xử lý trường hợp server trả về success: false nhưng không phải lỗi HTTP
        throw new Error(response.message || 'Lỗi không xác định từ server.');
      }
    } catch (err) {
      // Bắt lỗi được ném từ service (do lỗi mạng, 500, hoặc success: false)
      const errorMessage = err.message || 'Không thể tải danh sách nhân viên.';
      console.error('HOOK: Lỗi khi tải danh sách nhân viên:', errorMessage);

      const userMessage = `Không thể tải dữ liệu. Lỗi: ${errorMessage}. Vui lòng liên hệ phòng CNTT để được hỗ trợ.`;
      
      setError(userMessage);
      showNotification(userMessage, 'error');
      
      // Đảm bảo danh sách nhân viên là mảng rỗng khi có lỗi để tránh crash UI
      setEmployees([]); 
    } finally {
      setLoading(false);
    }
  }, [showNotification]);

  // Tự động gọi fetchEmployees khi component được mount
  useEffect(() => {
    fetchEmployees();
  }, [fetchEmployees]);

  // Hàm thêm nhân viên mới
  const handleAddEmployee = async (employeeData) => {
    try {
      const response = await addEmployee(employeeData);
      if (response.success) {
        showNotification('Thêm nhân viên mới thành công!', 'success');
        await fetchEmployees(); // Tải lại danh sách để cập nhật
        return true;
      } else {
        throw new Error(response.message || 'Thêm nhân viên thất bại.');
      }
    } catch (err) {
      console.error('HOOK: Lỗi khi thêm nhân viên:', err);
      // Hiển thị lỗi cụ thể từ server
      showNotification(`Thêm thất bại: ${err.message}`, 'error');
      return false;
    }
  };

  // Hàm cập nhật thông tin nhân viên
  const handleUpdateEmployee = async (id, employeeData) => {
    try {
      const response = await updateEmployee(id, employeeData);
      if (response.success) {
        showNotification('Cập nhật thông tin thành công!', 'success');
        await fetchEmployees();
        return true;
      } else {
        throw new Error(response.message || 'Cập nhật thất bại.');
      }
    } catch (err) {
      console.error('HOOK: Lỗi khi cập nhật nhân viên:', err);
      showNotification(`Cập nhật thất bại: ${err.message}`, 'error');
      return false;
    }
  };

  // Hàm xóa nhân viên
  const handleDeleteEmployee = async (id) => {
    try {
      const response = await deleteEmployee(id);
      if (response.success) {
        showNotification('Xóa nhân viên thành công!', 'success');
        await fetchEmployees(); // Tải lại danh sách
        return true;
      } else {
        throw new Error(response.message || 'Xóa nhân viên thất bại.');
      }
    } catch (err) {
      console.error('HOOK: Lỗi khi xóa nhân viên:', err);
      showNotification(`Xóa thất bại: ${err.message}`, 'error');
      return false;
    }
  };

  // Trả về state và các hàm để component có thể sử dụng
  return {
    employees,
    loading,
    error, // Trạng thái lỗi này có thể được dùng để hiển thị trên UI
    addEmployee: handleAddEmployee,
    updateEmployee: handleUpdateEmployee,
    deleteEmployee: handleDeleteEmployee,
    refreshEmployees: fetchEmployees,
  };
};

```


==================== File: .\src\hooks\useNotification.js ====================

import { useContext } from 'react';
import { NotificationContext } from '../contexts/NotificationContext';

export const useNotification = () => {
  const context = useContext(NotificationContext);
  if (!context) {
    throw new Error('useNotification must be used within a NotificationProvider');
  }
  return context;
};

```


==================== File: .\src\pages\AttendanceLogsPage.jsx ====================

import { formatDateTimeForCSV, formatTimeForCSV } from '../utils/dateUtils';
import React, { useState, useEffect } from 'react';
import { ApiClient } from '../services/api';
import { useNotification } from '../hooks/useNotification';
import Loading from '../components/common/Loading';

const LARK_LOGS_URL = "https://atino-vietnam.sg.larksuite.com/base/Ey3EbVD9vacAHvs8cVvlHxkKg2r?table=tblU9YY1t4TwxXLh&view=vewpWpbNQv";
const LARK_HOURS_URL = "https://atino-vietnam.sg.larksuite.com/base/Ey3EbVD9vacAHvs8cVvlHxkKg2r?table=tblV2dGhT2O7w30b&view=vewDULr7HU";

const AttendanceLogsPage = () => {
  const [logs, setLogs] = useState([]);
  const [employees, setEmployees] = useState([]);
  const [stores, setStores] = useState([]);
  const [recruitmentRequests, setRecruitmentRequests] = useState([]);
  const [recruitmentHours, setRecruitmentHours] = useState([]);
  const [loading, setLoading] = useState(true);
  const [activeTab, setActiveTab] = useState('logs');
  const [loadingRecruitment, setLoadingRecruitment] = useState(false);
  const { showNotification } = useNotification();

  useEffect(() => {
    loadInitialData();
  }, []);

  useEffect(() => {
    if (activeTab === 'recruitment') {
      console.log('📊 Tab recruitment được chọn, đang refresh data...');
      loadRecruitmentHours(true);
    }
  }, [activeTab]);

  const loadInitialData = async () => {
    try {
      setLoading(true);
      await Promise.all([
        loadEmployees(),
        loadAttendanceLogs(),
        loadStores(),
        loadRecruitmentRequests(),
        loadRecruitmentHours(true)
      ]);
    } catch (error) {
      console.error('Error loading initial data:', error);
      showNotification('Lỗi khi tải dữ liệu chấm công', 'error');
    } finally {
      setLoading(false);
    }
  };

  const loadEmployees = async () => {
    try {
      const response = await ApiClient.get('/api/employees');
      setEmployees(Array.isArray(response?.data) ? response.data : response || []);
    } catch (error) {
      setEmployees([]);
      showNotification('Lỗi khi tải danh sách nhân viên', 'error');
    }
  };

  const loadAttendanceLogs = async () => {
    try {
      const response = await ApiClient.get('/api/attendance/logs');
      setLogs(Array.isArray(response?.data) ? response.data : response || []);
    } catch (error) {
      setLogs([]);
      showNotification('Lỗi khi tải bản ghi chấm công', 'error');
    }
  };

  const loadStores = async () => {
    try {
      const response = await ApiClient.get('/api/master-data/stores');
      setStores(Array.isArray(response?.data) ? response.data : response || []);
    } catch (error) {
      setStores([]);
    }
  };

  const loadRecruitmentRequests = async () => {
    try {
      const response = await ApiClient.get('/api/recruitment');
      setRecruitmentRequests(Array.isArray(response?.data) ? response.data : response || []);
    } catch (error) {
      setRecruitmentRequests([]);
    }
  };

  const loadRecruitmentHours = async (forceRefresh = true) => {
    try {
      setLoadingRecruitment(true);
      
      console.log('🔄 Loading recruitment hours with force refresh:', forceRefresh);
      
      const params = { refresh: 'true' };
      const response = await ApiClient.get('/api/recruitment/hours-summary', params);
      
      setRecruitmentHours(Array.isArray(response?.data?.summary) ? response.data.summary : []);
      
      console.log('✅ Recruitment hours loaded successfully:', response?.data?.summary?.length || 0, 'records');
      
    } catch (error) {
      setRecruitmentHours([]);
      console.error('Error loading recruitment hours:', error);
      showNotification('Lỗi khi tải tổng hợp giờ công theo tuyển dụng', 'error');
    } finally {
      setLoadingRecruitment(false);
    }
  };

  const handleRefresh = async () => {
    try {
      setLoading(true);
      await Promise.all([
        loadEmployees(),
        loadAttendanceLogs(),
        loadStores(),
        loadRecruitmentRequests(),
        loadRecruitmentHours(true)
      ]);
      showNotification('Đã cập nhật dữ liệu', 'success');
    } catch (error) {
      console.error('Error loading initial data:', error);
      showNotification('Lỗi khi tải dữ liệu chấm công', 'error');
    } finally {
      setLoading(false);
    }
  };

  const handleTabChange = (tabName) => {
    console.log('🔄 Switching to tab:', tabName);
    setActiveTab(tabName);
    
    if (tabName === 'recruitment') {
      showNotification('Đang cập nhật dữ liệu realtime...', 'info');
    }
  };

  const exportToExcel = async (request) => {
      try {
          setLoadingRecruitment(true);
          showNotification('Đang tải chi tiết dữ liệu...', 'info');
          
          const response = await ApiClient.get(`/api/recruitment/detailed-hours/${request.requestNo}`);
          
          if (!response.success || !response.data.records.length) {
              showNotification('Không có dữ liệu chi tiết để xuất', 'warning');
              return;
          }
          
          const detailedRecords = response.data.records;
          
          // ✅ SỬA: Áp dụng conversion cho các trường thời gian
          const worksheetData = [
              ['STT', 'Mã nhân viên', 'Ngày chấm công', 'Thời gian vào', 'Thời gian ra', 'Tổng giờ làm', 'Lương/giờ (VNĐ)', 'Tổng lương (VNĐ)'],
              ...detailedRecords.map((record, index) => [
                  index + 1,
                  record.employeeId || 'N/A',
                  // ✅ CHUYỂN ĐỔI: workDate nếu là serial number
                  typeof record.workDate === 'number' ? 
                      formatDateTimeForCSV(record.workDate) : 
                      record.workDate || 'N/A',
                  // ✅ CHUYỂN ĐỔI: checkInTime nếu là serial number
                  typeof record.checkInTime === 'number' ? 
                      formatTimeForCSV(record.checkInTime) : 
                      record.checkInTime || 'N/A',
                  // ✅ CHUYỂN ĐỔI: checkOutTime nếu là serial number
                  typeof record.checkOutTime === 'number' ? 
                      formatTimeForCSV(record.checkOutTime) : 
                      record.checkOutTime || 'N/A',
                  record.totalHours || 0,
                  record.hourlyRate || 0,
                  record.totalSalary || 0 
              ])
          ];

          // Phần còn lại giữ nguyên
          const totalSalary = detailedRecords.reduce((sum, record) => sum + (record.totalSalary || 0), 0);
          
          const summaryData = [
              [],
              ['THÔNG TIN TỔNG HỢP'],
              ['Request No:', request.requestNo],
              ['Phòng ban:', request.department],
              ['Thời gian:', `${request.fromDate || 'N/A'} - ${request.toDate || 'N/A'}`],
              ['Tổng bản ghi:', detailedRecords.length],
              ['Tổng lương:', `${totalSalary.toLocaleString('vi-VN')} VNĐ`],
              ['Trạng thái:', request.status],
              [],
              ['CHI TIẾT CHẤM CÔNG THEO NGÀY'],
              ...worksheetData
          ];

          const csvContent = summaryData.map(row => 
              row.map(cell => {
                  const cellStr = String(cell || '');
                  if (cellStr.includes(',') || cellStr.includes('"') || cellStr.includes('\n')) {
                      return `"${cellStr.replace(/"/g, '""')}"`;
                  }
                  return cellStr;
              }).join(',')
          ).join('\n');

          const BOM = '\uFEFF';
          const blob = new Blob([BOM + csvContent], { 
              type: 'text/csv;charset=utf-8;' 
          });

          const link = document.createElement('a');
          link.href = URL.createObjectURL(blob);
          link.download = `chi_tiet_cham_cong_${request.requestNo}_${new Date().toISOString().split('T')[0]}.csv`;
          
          document.body.appendChild(link);
          link.click();
          document.body.removeChild(link);
          URL.revokeObjectURL(link.href);
          
          showNotification(`Đã xuất file chi tiết cho ${request.requestNo}`, 'success');
          
      } catch (error) {
          console.error('Error exporting detailed Excel:', error);
          showNotification('Lỗi khi xuất file Excel chi tiết', 'error');
      } finally {
          setLoadingRecruitment(false);
      }
  };


  const totalEmployees = Array.isArray(employees) ? employees.length : 0;
  const totalStores = Array.isArray(stores) ? stores.length : 0;
  const activeRecruitmentRequests = Array.isArray(recruitmentRequests)
    ? recruitmentRequests.filter(req => req.status === 'Đang tuyển dụng').length
    : 0;

  if (loading) {
    return <Loading fullScreen text="Đang tải dữ liệu..." />;
  }

  return (
    <div className="attendance-logs-page">
      {/* Header */}
      <div className="d-flex justify-content-between align-items-center mb-4">
        <div>
          <h1>Quản lý Chấm công & Tuyển dụng</h1>
          <p className="text-muted mb-0">Xem và quản lý các hoạt động nhân sự</p>
        </div>
        <button
          className="btn btn-outline-primary"
          onClick={handleRefresh}
        >
          <i className="fas fa-sync-alt me-2"></i>
          Làm mới
        </button>
      </div>

      {/* Statistics */}
      <div className="row mb-4">
        <div className="col-md-3">
          <div className="card text-center bg-primary text-white">
            <div className="card-body">
              <h3 id="logCount">{Array.isArray(logs) ? logs.length : 0}</h3>
              <p className="mb-0">Tổng bản ghi chấm công</p>
            </div>
          </div>
        </div>
        <div className="col-md-3">
          <div className="card text-center bg-success text-white">
            <div className="card-body">
              <h3>{totalEmployees}</h3>
              <p className="mb-0">Tổng nhân viên</p>
            </div>
          </div>
        </div>
        <div className="col-md-3">
          <div className="card text-center bg-info text-white">
            <div className="card-body">
              <h3>{totalStores}</h3>
              <p className="mb-0">Cửa hàng</p>
            </div>
          </div>
        </div>
        <div className="col-md-3">
          <div className="card text-center bg-warning text-white">
            <div className="card-body">
              <h3>{activeRecruitmentRequests}</h3>
              <p className="mb-0">Đang tuyển dụng</p>
            </div>
          </div>
        </div>
      </div>

      {/* Tabs */}
      <ul className="nav nav-tabs mb-4">
        <li className="nav-item">
          <a
            className={`nav-link${activeTab === 'logs' ? ' active' : ''}`}
            onClick={() => handleTabChange('logs')}
            role="button"
          >
            <i className="fas fa-list me-2"></i>
            Bản ghi chấm công
          </a>
        </li>
        <li className="nav-item">
          <a
            className={`nav-link${activeTab === 'hours' ? ' active' : ''}`}
            onClick={() => handleTabChange('hours')}
            role="button"
          >
            <i className="fas fa-clock me-2"></i>
            Tổng giờ công
          </a>
        </li>
        <li className="nav-item">
          <a
            className={`nav-link${activeTab === 'recruitment' ? ' active' : ''}`}
            onClick={() => handleTabChange('recruitment')}
            role="button"
          >
            <i className="fas fa-users me-2"></i>
            Tổng hợp giờ công theo tuyển dụng
            {loadingRecruitment && (
              <span className="spinner-border spinner-border-sm ms-2" role="status" aria-hidden="true"></span>
            )}
          </a>
        </li>
      </ul>

      {/* Tab Content */}
      <div className="tab-content">
        {/* Tab Logs (iframe) */}
        <div
          className="iframe-tab-container"
          style={{
            display: activeTab === 'logs' ? 'block' : 'none',
            width: '100%',
            height: 'calc(100vh - 450px)',
            minHeight: '500px'
          }}
        >
          <div className="card h-100">
            <div className="card-header">
              <h5 className="mb-0">Chi tiết bản ghi chấm công (Dữ liệu trực tiếp từ Lark)</h5>
            </div>
            <div className="card-body p-0 h-100">
              <iframe
                src={LARK_LOGS_URL}
                title="Bảng Chấm Công từ Lark Base"
                style={{ width: '100%', height: '100%', border: 'none' }}
                loading="lazy"
                allow="fullscreen"
              >
                Trình duyệt của bạn không hỗ trợ iframe.
              </iframe>
            </div>
          </div>
        </div>

        {/* Tab Hours (iframe) */}
        <div
          className="iframe-tab-container"
          style={{
            display: activeTab === 'hours' ? 'block' : 'none',
            width: '100%',
            height: 'calc(100vh - 450px)',
            minHeight: '500px'
          }}
        >
          <div className="card h-100">
            <div className="card-header">
              <h5 className="mb-0">Tổng giờ công (Dữ liệu trực tiếp từ Lark)</h5>
            </div>
            <div className="card-body p-0 h-100">
              <iframe
                src={LARK_HOURS_URL}
                title="Tổng Giờ Công từ Lark Base"
                style={{ width: '100%', height: '100%', border: 'none' }}
                loading="lazy"
                allow="fullscreen"
              >
                Trình duyệt của bạn không hỗ trợ iframe.
              </iframe>
            </div>
          </div>
        </div>

        {/* Tab Recruitment */}
        {activeTab === 'recruitment' && (
          <div className="tab-pane fade show active" id="recruitment-tab">
            <div className="card">
              <div className="card-header d-flex justify-content-between align-items-center">
                <div>
                  <h5 className="mb-0">Tổng hợp giờ công theo kế hoạch tuyển dụng</h5>
                  <small className="text-muted">
                    Dữ liệu realtime - Click nút download để xuất file Excel chi tiết
                    {loadingRecruitment && (
                      <span className="text-info ms-2">
                        <i className="fas fa-sync fa-spin"></i> Đang cập nhật...
                      </span>
                    )}
                  </small>
                </div>
                <button
                  className="btn btn-sm btn-outline-primary"
                  onClick={() => loadRecruitmentHours(true)}
                  disabled={loadingRecruitment}
                >
                  <i className={`fas fa-sync ${loadingRecruitment ? 'fa-spin' : ''} me-1`}></i>
                  Làm mới ngay
                </button>
              </div>
              <div className="card-body">
                {loadingRecruitment && (
                  <div className="text-center py-4">
                    <div className="spinner-border text-primary" role="status">
                      <span className="visually-hidden">Loading...</span>
                    </div>
                    <p className="mt-2 text-muted">Đang tải dữ liệu mới nhất...</p>
                  </div>
                )}
                
                {!loadingRecruitment && (
                  <div className="table-responsive">
                    <table className="table table-striped table-hover">
                      <thead>
                        <tr>
                          <th>Request No.</th>
                          <th>Phòng ban</th>
                          <th>Thời gian</th>
                          <th>Nhân viên</th>
                          <th>Tổng giờ công</th>
                          <th>Tổng lương</th>
                          <th>Trạng thái</th>
                          <th>Chi tiết</th>
                        </tr>
                      </thead>
                      <tbody>
                        {Array.isArray(recruitmentHours) && recruitmentHours.length > 0 ? (
                          recruitmentHours.map((request, index) => (
                            <tr key={request.requestNo || index}>
                              <td>
                                <strong className="text-primary">{request.requestNo || 'N/A'}</strong>
                              </td>
                              <td>{request.department || 'N/A'}</td>
                              <td>
                                <small>
                                  {request.fromDate && request.toDate ?
                                    `${request.fromDate} - ${request.toDate}` :
                                    'N/A'
                                  }
                                </small>
                              </td>
                              <td>
                                <span className="badge bg-info">
                                  {request.totalEmployees} người
                                </span>
                              </td>
                              <td>
                                <strong className="text-success">{request.totalHours || '0 giờ'}</strong>
                              </td>
                              <td>
                                <strong className="text-warning">{request.totalSalary || '0 ₫'}</strong>
                              </td>
                              <td>
                                <span className={`badge ${
                                  request.status === 'Đang tuyển dụng' ? 'bg-success' :
                                    request.status === 'Đã hoàn thành' ? 'bg-primary' : 'bg-secondary'
                                  }`}>
                                  {request.status || 'N/A'}
                                </span>
                              </td>
                              <td>
                                <button
                                  className="btn btn-sm btn-success"
                                  onClick={() => exportToExcel(request)}
                                  title="Xuất Excel chi tiết"
                                  disabled={!request.employees || request.employees.length === 0}
                                >
                                  <i className="fas fa-file-excel"></i>
                                </button>
                              </td>
                            </tr>
                          ))
                        ) : (
                          <tr>
                            <td colSpan="8" className="text-center text-muted py-4">
                              <i className="fas fa-inbox fa-2x mb-2"></i>
                              <br />
                              Chưa có dữ liệu tổng hợp giờ công theo tuyển dụng
                            </td>
                          </tr>
                        )}
                      </tbody>
                    </table>
                  </div>
                )}

                {/* Thống kê tổng quan */}
                {!loadingRecruitment && recruitmentHours.length > 0 && (
                  <div className="row mt-4">
                    <div className="col-md-3">
                      <div className="card text-center bg-light">
                        <div className="card-body">
                          <h4 className="text-primary">{recruitmentHours.length}</h4>
                          <p className="mb-0">Tổng số đề xuất</p>
                        </div>
                      </div>
                    </div>
                    <div className="col-md-3">
                      <div className="card text-center bg-light">
                        <div className="card-body">
                          <h4 className="text-success">
                            {recruitmentHours.reduce((sum, req) => sum + req.totalEmployees, 0)}
                          </h4>
                          <p className="mb-0">Tổng nhân viên</p>
                        </div>
                      </div>
                    </div>
                    <div className="col-md-3">
                      <div className="card text-center bg-light">
                        <div className="card-body">
                          <h4 className="text-warning">
                            {recruitmentHours.reduce((sum, req) => sum + (req.totalHoursNumeric || 0), 0).toFixed(1)} giờ
                          </h4>
                          <p className="mb-0">Tổng giờ công</p>
                        </div>
                      </div>
                    </div>
                    <div className="col-md-3">
                      <div className="card text-center bg-light">
                        <div className="card-body">
                          <h4 className="text-danger">
                            {new Intl.NumberFormat('vi-VN', { 
                              style: 'currency', 
                              currency: 'VND' 
                            }).format(recruitmentHours.reduce((sum, req) => sum + (req.totalSalaryNumeric || 0), 0))}
                          </h4>
                          <p className="mb-0">Tổng lương</p>
                        </div>
                      </div>
                    </div>
                  </div>
                )}
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default AttendanceLogsPage;

```


==================== File: .\src\pages\EmployeeManagementPage.jsx ====================

import React, { useState, useMemo } from 'react';
import { useEmployees } from '../hooks/useEmployees';

// Import các components con
import EmployeeList from '../components/employee/EmployeeList.jsx';
import EmployeeAddForm from '../components/employee/EmployeeAddForm.jsx';
import EmployeeEditModal from '../components/employee/EmployeeEditModal.jsx';
// ✅ THÊM: Import các modal cho Work History
import AddWorkHistoryModal from '../components/employee/AddWorkHistoryModal.jsx';
import WorkHistoryModal from '../components/employee/WorkHistoryModal.jsx';
import Loading from '../components/common/Loading.jsx';
import Alert from '../components/common/Alert.jsx';

const EmployeeManagementPage = () => {
  const {
    employees,
    loading,
    error,
    addEmployee,
    updateEmployee,
    deleteEmployee,
    refreshEmployees,
  } = useEmployees();

  // State cho modal chỉnh sửa
  const [isEditModalOpen, setIsEditModalOpen] = useState(false);
  const [selectedEmployee, setSelectedEmployee] = useState(null);

  // ✅ CẬP NHẬT: State cho các modal Work History
  const [isAddWorkHistoryModalOpen, setAddWorkHistoryModalOpen] = useState(false);
  const [isManageWorkHistoryModalOpen, setManageWorkHistoryModalOpen] = useState(false); // ✅ THAY ĐỔI: Đổi tên từ isViewWorkHistoryModalOpen
  const [employeeForHistory, setEmployeeForHistory] = useState(null);
  
  // State cho tìm kiếm và bộ lọc
  const [searchTerm, setSearchTerm] = useState('');
  const [statusFilter, setStatusFilter] = useState('');

  const filteredEmployees = useMemo(() => {
    // ... (Giữ nguyên logic lọc)
    let filtered = employees;
    if (searchTerm) {
      const lowerCaseSearchTerm = searchTerm.toLowerCase();
      filtered = filtered.filter(
        (employee) =>
          employee.fullName.toLowerCase().includes(lowerCaseSearchTerm) ||
          employee.employeeId.toLowerCase().includes(lowerCaseSearchTerm) ||
          (employee.phoneNumber && employee.phoneNumber.includes(searchTerm))
      );
    }
    if (statusFilter) {
      filtered = filtered.filter((employee) => employee.status === statusFilter);
    }
    return filtered;
  }, [employees, searchTerm, statusFilter]);

  // Các hàm xử lý sự kiện cho Nhân viên
  const handleOpenEditModal = (employee) => {
    setSelectedEmployee(employee);
    setIsEditModalOpen(true);
  };
  
  const handleUpdateEmployee = async (employeeData) => {
    if (!selectedEmployee) return;
    const success = await updateEmployee(selectedEmployee.id, employeeData);
    if (success) {
      setIsEditModalOpen(false);
      setSelectedEmployee(null);
    }
  };

  // const handleDeleteEmployee = async (id) => {
  //   await deleteEmployee(id);
  // };


  // ✅ CẬP NHẬT: handleDeleteEmployee với warning về work history
  const handleDeleteEmployee = async (id) => {
      // Tìm employee để lấy thông tin
      const employee = employees.find(emp => emp.id === id);
      if (!employee) {
          showNotification('Không tìm thấy nhân viên để xóa', 'error');
          return;
      }
      
      // ✅ THÊM: Warning về cascade delete
      const confirmMessage = `⚠️ CẢNH BÁO: Xóa nhân viên sẽ xóa vĩnh viễn:

  👤 Nhân viên: "${employee.fullName}" (${employee.employeeId})
  📋 TẤT CẢ lịch sử công việc liên quan
  ⏰ TẤT CẢ dữ liệu chấm công liên quan

  ❗ Hành động này KHÔNG THỂ HOÀN TÁC!

  Bạn có chắc chắn muốn tiếp tục?`;

      if (!window.confirm(confirmMessage)) {
          return;
      }
      
      // ✅ THÊM: Second confirmation
      const finalConfirm = `Xác nhận lần cuối: Xóa "${employee.fullName}"?`;
      if (!window.confirm(finalConfirm)) {
          return;
      }
      
      // Thực hiện xóa
      const success = await deleteEmployee(id);
      if (success) {
          showNotification(`Đã xóa nhân viên "${employee.fullName}" và tất cả dữ liệu liên quan`, 'success');
      }
  };



  const handleAddEmployee = async (formData) => {
    return await addEmployee(formData);
  };

  // ✅ CẬP NHẬT: Các hàm xử lý cho Work History
  const handleOpenAddWorkHistoryModal = (employee) => {
    setEmployeeForHistory(employee);
    setAddWorkHistoryModalOpen(true);
  };

  // ✅ THAY ĐỔI: Đổi tên function
  const handleOpenManageWorkHistoryModal = (employee) => {
    setEmployeeForHistory(employee);
    setManageWorkHistoryModalOpen(true); // ✅ THAY ĐỔI: Sử dụng state mới
  };
  

  // ✅ THÊM: Hàm refresh data sau khi sửa work history
  const handleWorkHistoryUpdated = async () => {
    console.log('🔄 Work history updated, refreshing employee data...');
    await refreshEmployees();
  };

  const handleCloseModals = () => {
    setAddWorkHistoryModalOpen(false);
    setManageWorkHistoryModalOpen(false); // ✅ THAY ĐỔI: Cập nhật state mới
    setEmployeeForHistory(null);
  };

  // Hàm này sẽ được gọi khi thêm Work History thành công từ modal
  const handleSaveWorkHistory = () => {
    refreshEmployees(); // Tải lại danh sách để cập nhật (nếu cần)
    handleCloseModals();
  };

  const handleWorkHistoryDataChanged = () => {
    console.log('Work history đã thay đổi, đang refresh...');
    // Gọi lại API để fetch data nhân viên mới
    refreshEmployees(); // Hoặc tên hàm fetch data của bạn
  };


  return (
    <div className="container-fluid mt-4">
      <div className="page-header d-flex justify-content-between align-items-center mb-3">
        <h2>Quản lý Nhân viên</h2>
      </div>
      
      <div className="row">
        <div className="col-lg-5 mb-4">
          <EmployeeAddForm onSave={handleAddEmployee} isLoading={loading} />
        </div>
        <div className="col-lg-7">
          <div className="card">
            <div className="card-header">
              <h5 className="card-title mb-0">Danh sách nhân viên</h5>
            </div>
            <div className="card-body">
              <div className="row mb-3">
                <div className="col-md-8">
                  <input
                    type="text"
                    className="form-control"
                    placeholder="Tìm kiếm theo tên, mã NV, SĐT..."
                    value={searchTerm}
                    onChange={(e) => setSearchTerm(e.target.value)}
                  />
                </div>
                <div className="col-md-4">
                  <select
                    className="form-select"
                    value={statusFilter}
                    onChange={(e) => setStatusFilter(e.target.value)}
                  >
                    <option value="">Tất cả trạng thái</option>
                    <option value="active">Hoạt động</option>
                    <option value="inactive">Ngưng hoạt động</option>
                  </select>
                </div>
              </div>

              {loading && !error && <Loading />}
              {error && <Alert message={`Lỗi: ${error}`} type="danger" onRetry={refreshEmployees} />}
              
              {!loading && !error && (
                <EmployeeList
                  employees={filteredEmployees}
                  onEdit={handleOpenEditModal}
                  onDelete={handleDeleteEmployee}
                  // ✅ CẬP NHẬT: Truyền các hàm xử lý Work History với tên mới
                  onAddWorkHistory={handleOpenAddWorkHistoryModal}
                  onManageWorkHistory={handleOpenManageWorkHistoryModal} // ✅ THAY ĐỔI: Đổi tên prop
                />
              )}
            </div>
          </div>
        </div>
      </div>

      {/* Modal chỉnh sửa nhân viên */}
      {isEditModalOpen && selectedEmployee && (
        <EmployeeEditModal
          isOpen={isEditModalOpen}
          onClose={() => setIsEditModalOpen(false)}
          onSave={handleUpdateEmployee}
          employee={selectedEmployee}
        />
      )}

      {/* ✅ CẬP NHẬT: Render các modal cho Work History */}
      {isAddWorkHistoryModalOpen && employeeForHistory && (
        <AddWorkHistoryModal
          isOpen={isAddWorkHistoryModalOpen}
          onClose={handleCloseModals}
          onSave={handleSaveWorkHistory}
          employee={employeeForHistory}
        />
      )}
      
      {/* ✅ THAY ĐỔI: Sử dụng WorkHistoryModal CRUD với state và props mới */}
      {isManageWorkHistoryModalOpen && employeeForHistory && (
        <WorkHistoryModal
          isOpen={isManageWorkHistoryModalOpen}
          onClose={handleCloseModals}
          onDataUpdated={handleWorkHistoryUpdated}
          employeeId={employeeForHistory.employeeId}
          employeeName={employeeForHistory.fullName}
          onDataChanged={handleWorkHistoryDataChanged}
        />
      )}
    </div>
  );
};

export default EmployeeManagementPage;

```


==================== File: .\src\pages\HRDashboardPage.jsx ====================

import React, { useState, useEffect } from 'react';
import { useAuth } from '../hooks/useAuth';
import { ApiClient } from '../services/api';
import { useNotification } from '../hooks/useNotification';
import Loading from '../components/common/Loading';

const HRDashboardPage = () => {
  const [stats, setStats] = useState({
    totalEmployees: 0,
    activeEmployees: 0,
    inactiveEmployees: 0,
    totalAttendanceLogs: 0,
    todayLogs: 0,
  });
  const [loading, setLoading] = useState(true);
  const { user } = useAuth();
  const { showNotification } = useNotification();

  useEffect(() => {
    checkPermissions();
    loadStats();
    // eslint-disable-next-line
  }, []);

  const checkPermissions = () => {
    if (!user || (user.role !== 'hr' && user.role !== 'admin')) {
      showNotification('Bạn không có quyền truy cập trang này', 'error');
      window.location.href = '/dashboard';
    }
  };

  // **Lưu ý QUAN TRỌNG: Phải dùng đúng endpoint `/api/dashboard/stats`**
  const loadStats = async () => {
    setLoading(true);
    try {
      console.log('🔍 HRDashboard: Loading stats...');
      // ĐỔI endpoint
      const response = await ApiClient.get('/api/dashboard/stats');
      console.log('📨 HRDashboard: Raw response:', response);

      if (response.success && response.data) {
        // Gộp stats employee và attendance
        const employee = response.data.employee || {};
        const attendance = response.data.attendance || {};

        const statsObj = {
          totalEmployees: employee.totalEmployees || 0,
          activeEmployees: employee.activeEmployees || 0,
          inactiveEmployees:
            (employee.totalEmployees || 0) - (employee.activeEmployees || 0),
          totalAttendanceLogs: attendance.totalAttendanceLogs || 0,
          todayLogs: attendance.todayLogs || 0,
        };

        console.log('✅ HRDashboard: Setting stats to:', statsObj);
        setStats(statsObj);
      } else {
        showNotification(
          response.message || 'Không thể tải dữ liệu thống kê',
          'warning'
        );
      }
    } catch (error) {
      console.error('❌ HRDashboard: Error loading stats:', error);
      showNotification('Lỗi khi tải thống kê HR', 'error');
    } finally {
      setLoading(false);
    }
  };

  const handleRefresh = async () => {
    await loadStats();
    showNotification('Đã cập nhật dữ liệu HR dashboard', 'success');
  };

  // DEBUG info
  console.log('🎯 HRDashboard render - Current stats:', stats); // eslint-disable-line
  console.log('🎯 HRDashboard render - Loading:', loading); // eslint-disable-line

  if (loading) {
    return <Loading fullScreen text="Đang tải HR dashboard..." />;
  }

  return (
    <div className="hr-dashboard-page">
      {/* DEBUG INFO - Có thể xoá sau */}
      <div
        style={{
          background: '#f8f9fa',
          border: '1px solid #dee2e6',
          borderRadius: '0.25rem',
          padding: '1rem',
          marginBottom: '1rem',
        }}
      >
        <h6 className="text-muted mb-2">🐛 DEBUG INFO (HR Dashboard):</h6>
        <small className="d-block">Raw stats: {JSON.stringify(stats)}</small>
        <small className="d-block">Total Employees: {stats.totalEmployees}</small>
        <small className="d-block">Active Employees: {stats.activeEmployees}</small>
        <small className="d-block">Inactive Employees: {stats.inactiveEmployees}</small>
        <small className="d-block">Total Attendance Logs: {stats.totalAttendanceLogs}</small>
        <small className="d-block">Today Logs: {stats.todayLogs}</small>
      </div>

      {/* Header */}
      <div className="d-flex justify-content-between align-items-center mb-4">
        <div>
          <h1>HR Dashboard</h1>
          <p className="text-muted mb-0">Dashboard dành cho bộ phận nhân sự</p>
        </div>
        <button
          className="btn btn-outline-primary"
          onClick={handleRefresh}
          disabled={loading}
        >
          <i className={`fas fa-sync-alt me-2 ${loading ? 'fa-spin' : ''}`}></i>
          Làm mới
        </button>
      </div>

      {/* Stats Cards */}
      <div className="row mb-4">
        <div className="col-md-3 mb-3">
          <div className="card text-center bg-primary text-white h-100">
            <div className="card-body">
              <i className="fas fa-users fa-3x mb-3"></i>
              <h2>{stats.totalEmployees}</h2>
              <p className="mb-0">Tổng nhân viên</p>
            </div>
          </div>
        </div>

        <div className="col-md-3 mb-3">
          <div className="card text-center bg-success text-white h-100">
            <div className="card-body">
              <i className="fas fa-user-check fa-3x mb-3"></i>
              <h2>{stats.activeEmployees}</h2>
              <p className="mb-0">Nhân viên hoạt động</p>
            </div>
          </div>
        </div>

        <div className="col-md-3 mb-3">
          <div className="card text-center bg-warning text-white h-100">
            <div className="card-body">
              <i className="fas fa-user-times fa-3x mb-3"></i>
              <h2>{stats.inactiveEmployees}</h2>
              <p className="mb-0">Không hoạt động</p>
            </div>
          </div>
        </div>

        <div className="col-md-3 mb-3">
          <div className="card text-center bg-info text-white h-100">
            <div className="card-body">
              <i className="fas fa-clock fa-3x mb-3"></i>
              <h2>{stats.totalAttendanceLogs}</h2>
              <p className="mb-0">Tổng chấm công</p>
            </div>
          </div>
        </div>
      </div>

      {/* Management Actions */}
      <div className="row mb-4">
        <div className="col-md-6">
          <div className="card">
            <div className="card-header">
              <h5 className="mb-0">Quản lý nhân sự</h5>
            </div>
            <div className="card-body">
              <div className="d-grid gap-2">
                <a href="/employee-management" className="btn btn-primary">
                  <i className="fas fa-users-cog me-2"></i>
                  Quản lý nhân viên
                </a>
                <a href="/attendance-logs" className="btn btn-info">
                  <i className="fas fa-clock me-2"></i>
                  Xem chấm công
                </a>
                <button className="btn btn-success" onClick={handleRefresh}>
                  <i className="fas fa-sync-alt me-2"></i>
                  Cập nhật dữ liệu
                </button>
              </div>
            </div>
          </div>
        </div>

        <div className="col-md-6">
          <div className="card">
            <div className="card-header">
              <h5 className="mb-0">Công cụ HR</h5>
            </div>
            <div className="card-body">
              <div className="d-grid gap-2">
                <button className="btn btn-outline-primary" disabled>
                  <i className="fas fa-user-plus me-2"></i>
                  Tuyển dụng (Sắp có)
                </button>
                <button className="btn btn-outline-secondary" disabled>
                  <i className="fas fa-file-export me-2"></i>
                  Xuất báo cáo (Sắp có)
                </button>
                <a href="/dashboard" className="btn btn-outline-info">
                  <i className="fas fa-tachometer-alt me-2"></i>
                  Dashboard chính
                </a>
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* HR Reports Section */}
      <div className="row">
        <div className="col-12">
          <div className="card">
            <div className="card-header">
              <h5 className="mb-0">Báo cáo HR</h5>
            </div>
            <div className="card-body">
              <div className="row">
                <div className="col-md-4 text-center">
                  <div className="p-3">
                    <i className="fas fa-chart-bar fa-2x text-primary mb-2"></i>
                    <h6>Báo cáo nhân sự</h6>
                    <button className="btn btn-sm btn-primary" disabled>
                      Xem báo cáo (Sắp có)
                    </button>
                  </div>
                </div>
                <div className="col-md-4 text-center">
                  <div className="p-3">
                    <i className="fas fa-chart-line fa-2x text-success mb-2"></i>
                    <h6>Báo cáo chấm công</h6>
                    <button className="btn btn-sm btn-success" disabled>
                      Xem báo cáo (Sắp có)
                    </button>
                  </div>
                </div>
                <div className="col-md-4 text-center">
                  <div className="p-3">
                    <i className="fas fa-chart-pie fa-2x text-info mb-2"></i>
                    <h6>Báo cáo tổng hợp</h6>
                    <button className="btn btn-sm btn-info" disabled>
                      Xem báo cáo (Sắp có)
                    </button>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default HRDashboardPage;

```


==================== File: .\src\pages\LoginPage.jsx ====================

import React, { useState, useEffect } from 'react';
import { Navigate, useNavigate } from 'react-router-dom';
import { useAuth } from '../hooks/useAuth';
import { useNotification } from '../hooks/useNotification';
import Loading from '../components/common/Loading';

const LoginPage = () => {
  const [credentials, setCredentials] = useState({
    username: '',
    password: ''
  });
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [errors, setErrors] = useState({});
  
  // ✅ THÊM: State để đánh dấu khi đang thực hiện quick access
  const [isQuickAccess, setIsQuickAccess] = useState(false);
  
  const { user, login, loading } = useAuth();
  const { showNotification } = useNotification();
  const navigate = useNavigate();

  useEffect(() => {
    // Clear any existing alerts
    const alertContainer = document.getElementById('alert-container');
    if (alertContainer) {
      alertContainer.innerHTML = '';
    }
  }, []);

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setCredentials(prev => ({
      ...prev,
      [name]: value
    }));
    
    // Clear error when user starts typing
    if (errors[name]) {
      setErrors(prev => ({
        ...prev,
        [name]: ''
      }));
    }
  };

  const validateForm = () => {
    const newErrors = {};
    
    if (!credentials.username.trim()) {
      newErrors.username = 'Vui lòng nhập tên đăng nhập';
    }
    
    if (!credentials.password.trim()) {
      newErrors.password = 'Vui lòng nhập mật khẩu';
    }
    
    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    
    if (!validateForm()) {
      showNotification('Vui lòng điền đầy đủ thông tin!', 'error');
      return;
    }

    setIsSubmitting(true);
    
    try {
      const response = await login(credentials);
      
      console.log('✅ Regular login response:', response);
      console.log('👤 User role:', response?.data?.user?.role);
      
      showNotification('Đăng nhập thành công!', 'success');
      
      // Login bình thường - redirect to employee-management với full quyền
      setTimeout(() => {
        console.log('🎯 Regular login redirecting to /employee-management');
        navigate('/employee-management', { replace: true });
      }, 1000);
      
    } catch (error) {
      console.error('Login error:', error);
      showNotification('Tên đăng nhập hoặc mật khẩu không đúng!', 'error');
    } finally {
      setIsSubmitting(false);
    }
  };

  // ✅ SỬA: Handle quick access với giải pháp 1
  const handleQuickAccess = async () => {
    setIsQuickAccess(true); // ✅ Set flag trước khi login
    setIsSubmitting(true);
    console.log('🚀 Starting quick access with bypass flag...');
    
    try {
      const salesCredentials = {
        username: 'sales',
        password: 'sales123'
      };
      
      console.log('📝 Calling login with sales credentials');
      const response = await login(salesCredentials);
      
      // ✅ Đơn giản hóa logic xử lý response
      if (response && (response.success || response.data?.user || response.user)) {
        const userData = response.data?.user || response.user;
        console.log('👤 User found:', userData);
        console.log('🏷️ User role:', userData?.role);
        
        showNotification('Truy cập thành công!', 'success');
        
        // ✅ Navigate ngay lập tức, không cần setTimeout
        console.log('🎯 Quick access redirecting to /attendance-logs');
        navigate('/attendance-logs', { replace: true });
        
      } else {
        console.error('❌ Login failed - no user data found');
        showNotification('Đăng nhập thất bại!', 'error');
      }
      
    } catch (error) {
      console.error('❌ Quick access error:', error);
      console.error('❌ Error details:', error.message);
      showNotification('Không thể truy cập hệ thống. Vui lòng thử lại!', 'error');
    } finally {
      setIsSubmitting(false);
      setIsQuickAccess(false); // ✅ Reset flag
    }
  };

  // ✅ SỬA: Logic redirect tự động với bypass cho quick access
  if (user && !isQuickAccess) {
    // Phân quyền redirect: sales -> attendance-logs, còn lại -> employee-management
    const redirectPath = user.role === 'sales' ? '/attendance-logs' : '/employee-management';
    console.log('🔄 User already logged in, redirecting to:', redirectPath);
    return <Navigate to={redirectPath} replace />;
  }

  // Show loading during auth check
  if (loading) {
    return (
      <div className="d-flex justify-content-center align-items-center min-vh-100">
        <Loading />
      </div>
    );
  }

  return (
    <div className="min-vh-100 d-flex align-items-center justify-content-center bg-light">
      <div className="container">
        <div className="row justify-content-center">
          <div className="col-md-6 col-lg-4">
            <div className="card shadow">
              <div className="card-body p-4">
                <div className="text-center mb-4">
                  <h2 className="card-title">Đăng nhập</h2>
                  <p className="text-muted">Hệ thống quản lý nhân sự</p>
                </div>

                <form onSubmit={handleSubmit} noValidate>
                  <div className="mb-3">
                    <label htmlFor="username" className="form-label">
                      Tên đăng nhập <span className="text-danger">*</span>
                    </label>
                    <input
                      type="text"
                      className={`form-control ${errors.username ? 'is-invalid' : ''}`}
                      id="username"
                      name="username"
                      value={credentials.username}
                      onChange={handleInputChange}
                      placeholder="Nhập tên đăng nhập"
                      disabled={isSubmitting}
                      required
                    />
                    {errors.username && (
                      <div className="invalid-feedback">
                        {errors.username}
                      </div>
                    )}
                  </div>

                  <div className="mb-4">
                    <label htmlFor="password" className="form-label">
                      Mật khẩu <span className="text-danger">*</span>
                    </label>
                    <input
                      type="password"
                      className={`form-control ${errors.password ? 'is-invalid' : ''}`}
                      id="password"
                      name="password"
                      value={credentials.password}
                      onChange={handleInputChange}
                      placeholder="Nhập mật khẩu"
                      disabled={isSubmitting}
                      required
                    />
                    {errors.password && (
                      <div className="invalid-feedback">
                        {errors.password}
                      </div>
                    )}
                  </div>

                  {/* Hai nút: Đăng nhập và Truy cập nhanh */}
                  <div className="row mb-3">
                    <div className="col-6">
                      <button
                        type="submit"
                        className="btn btn-primary w-100"
                        disabled={isSubmitting}
                      >
                        {isSubmitting && !isQuickAccess ? (
                          <>
                            <span className="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                            Đang xử lý...
                          </>
                        ) : (
                          'Đăng nhập'
                        )}
                      </button>
                    </div>
                    <div className="col-6">
                      <button
                        type="button"
                        className="btn btn-outline-secondary w-100"
                        onClick={handleQuickAccess}
                        disabled={isSubmitting}
                      >
                        {isSubmitting && isQuickAccess ? (
                          <>
                            <span className="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                            Truy cập...
                          </>
                        ) : (
                          'Truy cập nhanh'
                        )}
                      </button>
                    </div>
                  </div>
                </form>

                {/* Ghi chú thông tin */}
                <div className="mt-3 p-3 bg-info bg-opacity-10 rounded">
                  <small className="text-info">
                    <i className="bi bi-info-circle me-1"></i>
                    <strong>Ghi chú:</strong><br />
                    • <strong>Đăng nhập:</strong> Truy cập đầy đủ tính năng quản lý nhân viên<br />
                    • <strong>Truy cập nhanh:</strong> Xem báo cáo chấm công nhanh chóng
                  </small>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default LoginPage;

```


==================== File: .\src\services\api.js ====================

// API helper functions - converted from vanilla JS
export class ApiClient {
  static async request(url, options = {}) {
    try {
      const response = await fetch(url, {
        headers: {
          'Content-Type': 'application/json',
          ...options.headers
        },
        credentials: 'include',
        ...options
      });

      // ✅ THÊM: Log request details để debug
      console.log('API Request:', {
        url,
        method: options.method || 'GET',
        body: options.body,
        status: response.status,
        statusText: response.statusText
      });

      if (!response.ok) {
        let errorData;
        try {
          errorData = await response.json();
          // ✅ THÊM: Log full error response
          console.error('Server error response:', errorData);
        } catch (parseError) {
          console.error('Could not parse error response:', parseError);
          errorData = { error: `HTTP ${response.status}: ${response.statusText}` };
        }
        
        // ✅ SỬA: Trả về object chứa đầy đủ thông tin lỗi
        throw new Error(JSON.stringify({
          status: response.status,
          message: errorData.message || errorData.error || 'Request failed',
          details: errorData
        }));
      }

      const data = await response.json();
      console.log('API Response:', data);
      return data;
    } catch (error) {
      console.error('API request error:', error);
      throw error;
    }
  }

  static async get(url, params = {}) {
    const queryString = new URLSearchParams(params).toString();
    const fullUrl = queryString ? `${url}?${queryString}` : url;
    return this.request(fullUrl);
  }

  static async post(url, data) {
    return this.request(url, {
      method: 'POST',
      body: JSON.stringify(data)
    });
  }

  static async put(url, data) {
    return this.request(url, {
      method: 'PUT',
      body: JSON.stringify(data)
    });
  }

  static async delete(url) {
    return this.request(url, {
      method: 'DELETE'
    });
  }
}

export default ApiClient;

```


==================== File: .\src\services\auth.js ====================


```


==================== File: .\src\services\employee.js ====================

// src/services/employee.js

import { ApiClient } from './api.js';

const handleError = (error, context) => {
    const message = error.response?.data?.message || error.message || `Lỗi không xác định khi ${context}.`;
    console.error(`❌ Lỗi Service API (${context}):`, message);
    throw new Error(message);
};

export const getEmployees = async () => {
    try {
        console.log('📡 SERVICE (FE): Gọi API lấy danh sách nhân viên...');
        const response = await ApiClient.get('/api/employees');
        
        // ✅ SỬA: Debug chi tiết response structure
        console.log('🔍 EMPLOYEE SERVICE: Raw axios response:', response);
        console.log('🔍 EMPLOYEE SERVICE: Response data type:', typeof response.data);
        console.log('🔍 EMPLOYEE SERVICE: Response data keys:', response.data ? Object.keys(response.data) : 'NULL');
        console.log('🔍 EMPLOYEE SERVICE: Response data:', response.data);
        
        if (!response.data) {
            throw new Error('Server không trả về dữ liệu');
        }
        
        // ✅ SỬA: Xử lý cả 2 trường hợp response structure
        
        // Trường hợp 1: Standard structure {success, data, message}
        if (typeof response.data.success !== 'undefined') {
            console.log('✅ EMPLOYEE SERVICE: Found standard structure');
            console.log('  - success:', response.data.success);
            console.log('  - message:', response.data.message);
            console.log('  - data type:', Array.isArray(response.data.data) ? 'array' : typeof response.data.data);
            console.log('  - data length:', response.data.data?.length);
            
            if (!response.data.success) {
                throw new Error(response.data.message || 'Server trả về lỗi');
            }
            
            return response.data; // Trả về {success: true, data: [...], message: "..."}
        }
        
        // Trường hợp 2: Backend trả về array trực tiếp
        if (Array.isArray(response.data)) {
            console.log('✅ EMPLOYEE SERVICE: Response is direct array, converting to standard structure');
            console.log('  - data length:', response.data.length);
            
            // Wrap array vào standard structure
            return {
                success: true,
                data: response.data,
                message: 'Lấy danh sách nhân viên thành công'
            };
        }
        
        // Trường hợp 3: Unknown structure
        console.warn('⚠️ EMPLOYEE SERVICE: Unknown response structure, trying to extract data');
        
        // Thử tìm array trong các keys của response
        const possibleArrays = Object.values(response.data).filter(val => Array.isArray(val));
        if (possibleArrays.length > 0) {
            console.log('✅ EMPLOYEE SERVICE: Found array in response, using it as data');
            return {
                success: true,
                data: possibleArrays[0],
                message: 'Lấy danh sách nhân viên thành công'
            };
        }
        
        throw new Error('Server trả về dữ liệu không đúng định dạng');
        
    } catch (error) {
        console.error('❌ EMPLOYEE SERVICE: Full error:', error);
        handleError(error, 'lấy danh sách nhân viên');
    }
};

// Giữ nguyên các functions khác...
export const addEmployee = async (employeeData) => {
    try {
        console.log('📡 SERVICE (FE): Gọi API thêm nhân viên mới...', employeeData);
        const response = await ApiClient.post('/api/employees', employeeData);
        
        // ✅ THÊM: Debug và handle response structure
        console.log('🔍 ADD EMPLOYEE SERVICE: Response:', response);
        
        if (!response) {
            throw new Error('Server không trả về dữ liệu khi thêm nhân viên');
        }
        
        // Handle different response structures
        if (typeof response.success !== 'undefined') {
            return response;
        }
        
        // Fallback: assume success if we got a response
        return {
            success: true,
            data: response,
            message: 'Thêm nhân viên thành công'
        };
        
    } catch (error) {
        handleError(error, 'thêm nhân viên mới');
    }
};

export const updateEmployee = async (id, employeeData) => {
    try {
        console.log(`📡 SERVICE (FE): Gọi API cập nhật nhân viên ID: ${id}...`, employeeData);
        const response = await ApiClient.put(`/api/employees/${id}`, employeeData);
        
        console.log('🔍 DEBUG: PUT Response Status:', response.status);
        console.log('🔍 DEBUG: PUT Response Headers:', response.headers);
        console.log('🔍 DEBUG: PUT Response Data:', response.data);
        console.log('🔍 DEBUG: PUT Response Full:', response);

        console.log('🔍 UPDATE EMPLOYEE SERVICE: Response:', response);
        
        // Handle different response structures
        if (typeof response.success !== 'undefined') {
            return response;
        }
        
        return {
            success: true,
            data: response,
            message: 'Cập nhật nhân viên thành công'
        };
        
    } catch (error) {
        handleError(error, 'cập nhật nhân viên');
    }
};

// export const deleteEmployee = async (id) => {
//     try {
//         console.log(`📡 SERVICE (FE): Gọi API xóa nhân viên ID: ${id}...`);
//         const response = await ApiClient.delete(`/api/employees/${id}`);
        
//         console.log('🔍 DELETE EMPLOYEE SERVICE: Response:', response);
        
//         return {
//             success: true,
//             message: 'Xóa nhân viên thành công'
//         };
//     } catch (error) {
//         handleError(error, 'xóa nhân viên');
//     }
// };


export const deleteEmployee = async (id) => {
    try {
        console.log(`📡 SERVICE (FE): Gọi API xóa nhân viên ID: ${id}...`);
        const response = await ApiClient.delete(`/api/employees/${id}`);
        
        console.log('🔍 DELETE EMPLOYEE SERVICE: Response:', response);
        
        // ✅ THÊM: Hiển thị thông tin chi tiết từ backend
        if (response.data?.deletedWorkHistories > 0) {
            console.log(`✅ Deleted ${response.data.deletedWorkHistories} work history records`);
        }
        
        return {
            success: true,
            message: response.message || 'Xóa nhân viên thành công',
            data: response.data
        };
        
    } catch (error) {
        console.error('❌ Delete employee service error:', error);
        
        // ✅ THÊM: Better error message
        let errorMessage = 'Lỗi khi xóa nhân viên';
        
        try {
            const errorData = JSON.parse(error.message);
            errorMessage = errorData.message || errorMessage;
        } catch (parseError) {
            errorMessage = error.message || errorMessage;
        }
        
        throw new Error(errorMessage);
    }
};



export const getApprovedRecruitmentRequests = async () => {
    try {
        console.log('📡 SERVICE (FE): Gọi API lấy danh sách đề xuất tuyển dụng...');
        //const response = await ApiClient.get('/api/recruitment');

        //Thêm filter theo status
        const response = await ApiClient.get('/api/recruitment', {
            status: 'Approved,Under Review'
        });
        console.log('🔍 RECRUITMENT SERVICE: Response:', response);
        
        // Handle different response structures
        if (typeof response.success !== 'undefined') {
            return response.data || [];
        }
        
        if (Array.isArray(response)) {
            return response;
        }
        
        if (Array.isArray(response.data)) {
            return response.data;
        }
        
        return [];
    } catch (error) {
        console.error('❌ Recruitment service error:', error);
        return []; // Return empty array instead of throwing
    }
};

export const getWorkHistory = async (employeeId) => {
    try {
        console.log(`📡 SERVICE (FE): Gọi API lấy lịch sử công việc: ${employeeId}...`);
        const response = await ApiClient.get(`/api/employees/${employeeId}/work-history`);
        
        console.log('🔍 WORK HISTORY SERVICE: Response:', response);
        
        // Handle different response structures
        if (typeof response.success !== 'undefined') {
            return response.data || [];
        }
        
        if (Array.isArray(response)) {
            return response;
        }
        
        if (Array.isArray(response.data)) {
            return response.data;
        }
        
        return [];
    } catch (error) {
        console.error('❌ Work history service error:', error);
        return [];
    }
};

export const addWorkHistory = async (workHistoryData) => {
    try {
        console.log('📡 SERVICE (FE): Gọi API thêm lịch sử công việc...', workHistoryData);
        const response = await ApiClient.post('/api/employees/work-history', workHistoryData);
        
        console.log('🔍 ADD WORK HISTORY SERVICE: Response:', response);
        
        // Handle different response structures
        if (typeof response.success !== 'undefined') {
            return response;
        }
        
        return {
            success: true,
            data: response,
            message: 'Thêm lịch sử công việc thành công'
        };
    } catch (error) {
        handleError(error, 'thêm lịch sử công việc');
    }
};

// ✅ THÊM MỚI: Update work history
export const updateWorkHistory = async (id, workHistoryData) => {
    try {
        console.log(`📡 SERVICE (FE): Gọi API cập nhật lịch sử công việc ID: ${id}...`, workHistoryData);
        const response = await ApiClient.put(`/api/employees/work-history/${id}`, workHistoryData);
        
        console.log('🔍 UPDATE WORK HISTORY SERVICE: Response:', response);
        
        // Handle different response structures
        if (typeof response.success !== 'undefined') {
            return response;
        }
        
        return {
            success: true,
            data: response,
            message: 'Cập nhật lịch sử công việc thành công'
        };
        
    } catch (error) {
        handleError(error, 'cập nhật lịch sử công việc');
    }
};

// ✅ THÊM MỚI: Delete work history
export const deleteWorkHistory = async (id) => {
    try {
        console.log(`📡 SERVICE (FE): Gọi API xóa lịch sử công việc ID: ${id}...`);
        const response = await ApiClient.delete(`/api/employees/work-history/${id}`);
        
        console.log('🔍 DELETE WORK HISTORY SERVICE: Response:', response);
        
        return {
            success: true,
            message: 'Xóa lịch sử công việc thành công'
        };
        
    } catch (error) {
        handleError(error, 'xóa lịch sử công việc');
    }
};

```


==================== File: .\src\styles\components.css ====================


```


==================== File: .\src\styles\globals.css ====================

/* Global styles for React app */
.loading {
  position: relative;
}

.loading::after {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: rgba(255, 255, 255, 0.8);
  display: flex;
  justify-content: center;
  align-items: center;
  z-index: 1000;
}

.min-vh-100 {
  min-height: 100vh;
}

/* Alert container */
#alert-container {
  position: fixed;
  top: 20px;
  right: 20px;
  z-index: 1055;
  min-width: 300px;
}

/* Table enhancements */
.table-hover tbody tr:hover {
  background-color: rgba(0, 0, 0, 0.075);
}

/* Button groups */
.btn-group .btn {
  margin-right: 2px;
}

.btn-group .btn:last-child {
  margin-right: 0;
}

/* Form enhancements */
.is-invalid {
  border-color: #dc3545;
}

.is-valid {
  border-color: #198754;
}

/* Modal enhancements */
.modal-backdrop {
  backdrop-filter: blur(2px);
}

/* Work history entries */
.work-history-entry {
  background: #f8f9fa;
  border-left: 4px solid #007bff;
}

/* Recruitment table */
.recruitment-row.table-primary {
  background-color: rgba(13, 110, 253, 0.1) !important;
}

/* Loading spinner */
.spinner-border-sm {
  width: 1rem;
  height: 1rem;
}

/* Responsive adjustments */
@media (max-width: 768px) {
  .btn-group {
    flex-direction: column;
  }
  
  .btn-group .btn {
    margin-right: 0;
    margin-bottom: 2px;
  }
  
  .table-responsive {
    font-size: 0.875rem;
  }
}

```


==================== File: .\src\styles\notifications.css ====================

/* CSS cho hệ thống thông báo "toast" */
.notification-container {
    position: fixed;
    top: 20px;
    right: 20px;
    z-index: 9999;
    display: flex;
    flex-direction: column;
    gap: 12px;
    max-width: 380px;
}

.alert-toast {
    padding: 16px;
    border-radius: 8px;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
    display: flex;
    align-items: flex-start; /* Canh lề trên cho icon và text */
    color: #fff;
    opacity: 0;
    transform: translateX(110%);
    transition: all 0.4s cubic-bezier(0.21, 1.02, 0.73, 1);
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;
    font-size: 15px;
}

.alert-toast.show {
    opacity: 1;
    transform: translateX(0);
}

.alert-toast-icon {
    margin-right: 12px;
    font-size: 20px;
    flex-shrink: 0;
    line-height: 1.4;
}

.alert-toast-content {
    flex-grow: 1;
}

.alert-toast-message {
    font-weight: 500;
    line-height: 1.4;
}

.alert-toast-close {
    margin-left: 16px;
    background: none;
    border: none;
    color: inherit;
    font-size: 22px;
    cursor: pointer;
    opacity: 0.7;
    padding: 0;
    line-height: 1;
}

.alert-toast-close:hover {
    opacity: 1;
}

/* Các loại thông báo */
.alert-toast.success { background-color: #28a745; }
.alert-toast.error { background-color: #dc3545; }
.alert-toast.warning { background-color: #ffc107; color: #212529; }
.alert-toast.info { background-color: #0d6efd; }

```


==================== File: .\src\utils\dateUtils.js ====================

// src/utils/dateUtils.js

export const convertExcelSerialToDate = (serialNumber) => {
    if (!serialNumber || typeof serialNumber !== 'number') return null;
    try {
        const excelEpoch = new Date(Date.UTC(1899, 11, 30, 0, 0, 0, 0));
        const msPerDay = 24 * 60 * 60 * 1000;
        const msOffset = serialNumber * msPerDay;
        return new Date(excelEpoch.getTime() + msOffset);
    } catch (error) {
        console.error('Error converting Excel serial number:', error);
        return null;
    }
};

export const formatDateTimeForCSV = (serialNumber) => {
    const date = convertExcelSerialToDate(serialNumber);
    if (!date) return 'Invalid Date';
    const y = date.getUTCFullYear(), m = String(date.getUTCMonth()+1).padStart(2,'0');
    const d = String(date.getUTCDate()).padStart(2,'0');
    const h = String(date.getUTCHours()).padStart(2,'0');
    const mi = String(date.getUTCMinutes()).padStart(2,'0');
    const s = String(date.getUTCSeconds()).padStart(2,'0');
    return `${y}-${m}-${d} ${h}:${mi}:${s}`;
};

export const formatTimeForCSV = (serialNumber) => {
    const date = convertExcelSerialToDate(serialNumber);
    if (!date) return 'Invalid Time';
    const h = String(date.getUTCHours()).padStart(2,'0');
    const mi = String(date.getUTCMinutes()).padStart(2,'0');
    const s = String(date.getUTCSeconds()).padStart(2,'0');
    return `${h}:${mi}:${s}`;
};

```


================================================================================
3. THỐNG KÊ TỔNG QUAN:
----------------------------------------
📊 Tổng số file đã phân tích: 97
📊 Tổng số dòng code (ước tính): 24650

================================================================================
Báo cáo được tạo thành công!
================================================================================
