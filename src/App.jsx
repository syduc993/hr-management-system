import React, { useEffect, useState } from 'react';
import { Routes, Route, Navigate, useLocation } from 'react-router-dom';
import { useAuth } from './hooks/useAuth';
import { useNotification } from './hooks/useNotification';

// Components - Th√†nh ph·∫ßn giao di·ªán
import Layout from './components/layout/Layout';
import Loading from './components/common/Loading';
import ProtectedRoute from './components/auth/ProtectedRoute';

// Pages - C√°c trang ch√≠nh
import LoginPage from './pages/LoginPage';
import EmployeeManagementPage from './pages/EmployeeManagementPage';
import AttendanceLogsPage from './pages/AttendanceLogsPage';
import HRDashboardPage from './pages/HRDashboardPage';

// Global styles - Styles to√†n c·ª•c
import './styles/globals.css';

const App = () => {
  const [loading, setLoading] = useState(true);
  const [initialized, setInitialized] = useState(false);
  const { user, checkAuth, loading: authLoading } = useAuth();
  const { showNotification } = useNotification();
  const location = useLocation();

  useEffect(() => {
    const initializeApp = async () => {
      try {
        console.log('üöÄ B·∫Øt ƒë·∫ßu kh·ªüi t·∫°o ·ª©ng d·ª•ng React...');
        
        initializeGlobalUtilities();
        
        if (isProtectedPage()) {
          console.log('üîê ƒêang ki·ªÉm tra x√°c th·ª±c...');
          const authUser = await checkAuth();
          if (!authUser && !isPublicPage()) {
            console.log('‚ùå X√°c th·ª±c th·∫•t b·∫°i cho trang ƒë∆∞·ª£c b·∫£o v·ªá');
            return;
          }
          console.log('‚úÖ Ho√†n th√†nh ki·ªÉm tra x√°c th·ª±c');
        }
        
        setInitialized(true);
        console.log('‚úÖ Kh·ªüi t·∫°o ·ª©ng d·ª•ng React th√†nh c√¥ng');
        
      } catch (error) {
        console.error('‚ùå L·ªói kh·ªüi t·∫°o ·ª©ng d·ª•ng:', error);
        
        if (error.name === 'TypeError') {
          showNotification('L·ªói t·∫£i module. Vui l√≤ng refresh trang.', 'error');
        } else if (error.message.includes('fetch')) {
          showNotification('L·ªói k·∫øt n·ªëi server. Vui l√≤ng ki·ªÉm tra m·∫°ng.', 'error');
        } else {
          showNotification('L·ªói kh·ªüi t·∫°o ·ª©ng d·ª•ng. Vui l√≤ng refresh trang.', 'error');
        }
      } finally {
        setLoading(false);
      }
    };

    initializeApp();
  }, []);

  const initializeGlobalUtilities = () => {
    try {
      if (typeof window.bootstrap !== 'undefined') {
        const tooltipTriggerList = [].slice.call(
          document.querySelectorAll('[data-bs-toggle="tooltip"]')
        );
        tooltipTriggerList.map(tooltipTriggerEl => {
          return new window.bootstrap.Tooltip(tooltipTriggerEl);
        });
      }
    } catch (error) {
      console.warn('L·ªói kh·ªüi t·∫°o tooltips:', error);
    }
  };

  const isProtectedPage = () => {
    const publicPaths = ['/', '/login'];
    return !publicPaths.includes(location.pathname);
  };

  const isPublicPage = () => {
    const publicPaths = ['/', '/login'];
    return publicPaths.includes(location.pathname);
  };

  if (loading || authLoading) {
    return (
      <div className="d-flex justify-content-center align-items-center min-vh-100">
        <Loading />
      </div>
    );
  }

  if (!initialized) {
    return (
      <div className="container mt-5">
        <div className="alert alert-danger">
          <h4>L·ªói kh·ªüi t·∫°o ·ª©ng d·ª•ng</h4>
          <p>Kh√¥ng th·ªÉ kh·ªüi t·∫°o ·ª©ng d·ª•ng. Vui l√≤ng:</p>
          <ul>
            <li>Refresh l·∫°i trang (F5)</li>
            <li>Ki·ªÉm tra k·∫øt n·ªëi m·∫°ng</li>
            <li>Li√™n h·ªá IT support n·∫øu v·∫•n ƒë·ªÅ v·∫´n ti·∫øp t·ª•c</li>
          </ul>
          <button 
            className="btn btn-primary" 
            onClick={() => window.location.reload()}
          >
            Refresh Trang
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className="App">
      {/* ‚úÖ B∆Ø·ªöC 1: Th√™m container cho th√¥ng b√°o t·∫°i ƒë√¢y */}
      <div id="alert-container" style={{
        position: 'fixed',
        top: '20px',
        right: '20px',
        zIndex: 1055,
        minWidth: '300px'
      }}></div>

      <Routes>
        {/* C√°c route c√¥ng khai */}
        <Route 
          path="/login" 
          element={
            user ? <Navigate to="/dashboard" replace /> : <LoginPage />
          } 
        />
        
        {/* C√°c route ƒë∆∞·ª£c b·∫£o v·ªá v·ªõi Layout */}
        <Route 
          path="/" 
          element={
            <ProtectedRoute>
              <Layout />
            </ProtectedRoute>
          }
        >
          {/* Redirect m·∫∑c ƒë·ªãnh */}
          <Route index element={<Navigate to="/dashboard" replace />} />
          
          <Route path="dashboard" element={<HRDashboardPage />} />
          
          {/* Route qu·∫£n l√Ω nh√¢n vi√™n */}
          <Route 
            path="employee-management" 
            element={
              <ProtectedRoute requiredRoles={['hr', 'admin']}>
                <EmployeeManagementPage />
              </ProtectedRoute>
            } 
          />
          
          {/* Route nh·∫≠t k√Ω ch·∫•m c√¥ng */}
          <Route path="attendance-logs" element={<AttendanceLogsPage />} />
        </Route>

        {/* Route b·∫Øt t·∫•t c·∫£ */}
        <Route 
          path="*" 
          element={
            user ? (
              <Navigate to="/dashboard" replace />
            ) : (
              <Navigate to="/login" replace />
            )
          } 
        />
      </Routes>
    </div>
  );
};

export default App;
