import larkServiceManager from '../services/lark-service-manager.js';
import { formatResponse } from '../services/utils/response-formatter.js';
import CacheService from '../services/core/cache-service.js';


export const getRecruitmentRequests = async (req, res) => {
    try {
        const filters = req.query;
        const recruitmentService = larkServiceManager.getService('recruitment');
        const requests = await recruitmentService.getRecruitmentRequests(filters);

        res.json(formatResponse(true, 'L·∫•y danh s√°ch ƒë·ªÅ xu·∫•t th√†nh c√¥ng', requests));
    } catch (error) {
        console.error('‚ùå Controller: getRecruitmentRequests failed:', error);
        res.status(500).json(formatResponse(
            false, 
            `L·ªói khi l·∫•y danh s√°ch ƒë·ªÅ xu·∫•t: ${error.message}`, 
            null, 
            'RECRUITMENT_LOAD_FAILED'
        ));
    }
};

export const getRecruitmentHoursSummary = async (req, res) => {
    try {
        console.log('üìä Controller: Getting recruitment hours summary...');
        
        // ‚úÖ S·ª¨A: Lu√¥n clear cache ƒë·ªÉ ƒë·∫£m b·∫£o realtime data
        console.log('üßπ Clearing cache for realtime data...');
        CacheService.delete('hours_summary_table_data');
        CacheService.delete('work_history_all');
        CacheService.delete('recruitment_requests_{}'); // Clear recruitment cache n·∫øu c√≥
        
        const recruitmentService = larkServiceManager.getService('recruitment');
        const hoursSummary = await recruitmentService.getRecruitmentHoursSummary();

        // ‚úÖ TH√äM: Log ƒë·ªÉ debug
        console.log(`‚úÖ Controller: Retrieved ${hoursSummary.length} recruitment hour summaries`);

        res.json(formatResponse(true, 'L·∫•y t·ªïng h·ª£p gi·ªù c√¥ng theo tuy·ªÉn d·ª•ng th√†nh c√¥ng', {
            summary: hoursSummary,
            totalRequests: hoursSummary.length,
            totalEmployees: hoursSummary.reduce((sum, req) => sum + req.totalEmployees, 0),
            totalHours: hoursSummary.reduce((sum, req) => sum + req.totalHoursNumeric, 0),
            timestamp: new Date().toISOString() // ‚úÖ TH√äM: Timestamp ƒë·ªÉ track khi n√†o data ƒë∆∞·ª£c load
        }));
    } catch (error) {
        console.error('‚ùå Controller: getRecruitmentHoursSummary failed:', error);
        res.status(500).json(formatResponse(
            false, 
            `L·ªói khi l·∫•y t·ªïng h·ª£p gi·ªù c√¥ng: ${error.message}`, 
            null, 
            'RECRUITMENT_HOURS_LOAD_FAILED'
        ));
    }
};



export const getDetailedHoursForRequest = async (req, res) => {
    try {
        const { requestNo } = req.params;
        
        console.log(`üìä Getting detailed hours for request: ${requestNo}`);
        
        const recruitmentService = larkServiceManager.getService('recruitment');
        
        // ‚úÖ TH√äM: L·∫•y c·∫£ th√¥ng tin l∆∞∆°ng
        const detailedRecords = await recruitmentService.getDetailedHoursForRequest(requestNo);
        
        // ‚úÖ TH√äM: L·∫•y th√¥ng tin l∆∞∆°ng t·ª´ salary map
        const mapsResult = await recruitmentService.getEmployeeHoursFromSummaryTable();
        const employeeSalaryMap = mapsResult.salaryMap;
        const employeeHourlyRateMap = mapsResult.hourlyRateMap;
        
        // ‚úÖ TH√äM: Enriched data v·ªõi th√¥ng tin l∆∞∆°ng
        const enrichedRecords = detailedRecords.map(record => ({
            ...record,
            hourlyRate: employeeHourlyRateMap.get(record.employeeId) || 0,
            totalSalary: (record.totalHours || 0) * (employeeHourlyRateMap.get(record.employeeId) || 0)
        }));
        
        res.json(formatResponse(true, 'L·∫•y chi ti·∫øt gi·ªù c√¥ng th√†nh c√¥ng', {
            requestNo,
            records: enrichedRecords, // ‚úÖ S·ª¨A: Tr·∫£ v·ªÅ enriched data
            totalRecords: enrichedRecords.length
        }));
        
    } catch (error) {
        console.error('‚ùå Controller: getDetailedHoursForRequest failed:', error);
        res.status(500).json(formatResponse(
            false, 
            `L·ªói khi l·∫•y chi ti·∫øt gi·ªù c√¥ng: ${error.message}`, 
            null, 
            'DETAILED_HOURS_LOAD_FAILED'
        ));
    }
};

