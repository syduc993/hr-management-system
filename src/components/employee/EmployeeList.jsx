import React, { useState, useEffect } from 'react';
import { ApiClient } from '../../services/api';
import { useNotification } from '../../hooks/useNotification';
import EmployeeTable from './EmployeeTable';
import Loading from '../common/Loading';

const EmployeeList = () => {
  const [employees, setEmployees] = useState([]);
  const [filteredEmployees, setFilteredEmployees] = useState([]);
  const [loading, setLoading] = useState(true);
  const [searchTerm, setSearchTerm] = useState('');
  const [statusFilter, setStatusFilter] = useState('');
  const { showNotification } = useNotification();

  useEffect(() => {
    loadEmployees();
  }, []);

  useEffect(() => {
    filterEmployees();
  }, [employees, searchTerm, statusFilter]);

  const loadEmployees = async () => {
    try {
      setLoading(true);
      console.log('üîç FRONTEND: Starting loadEmployees...');
      
      const response = await ApiClient.get('/api/employees');
      
      // üö® DEBUG: In ra to√†n b·ªô response ƒë·ªÉ xem c·∫•u tr√∫c
      console.log('üîç RAW RESPONSE FROM BACKEND:', response);
      console.log('üîç Response type:', typeof response);
      console.log('üîç Response keys:', Object.keys(response || {}));
      
      // Ki·ªÉm tra t·ª´ng thu·ªôc t√≠nh
      if (response?.data) {
        console.log('üîç response.data:', response.data);
        console.log('üîç response.data type:', typeof response.data);
        console.log('üîç response.data is Array:', Array.isArray(response.data));
        
        if (Array.isArray(response.data) && response.data.length > 0) {
          console.log('üîç First employee in response.data:', response.data[0]);
          console.log('üîç First employee keys:', Object.keys(response.data[0] || {}));
        }
      }
      
      if (response?.success) {
        console.log('üîç response.success:', response.success);
      }
      
      // X·ª≠ l√Ω d·ªØ li·ªáu d·ª±a tr√™n c·∫•u tr√∫c response
      let employeeData = [];
      
      if (response && response.success && Array.isArray(response.data)) {
        // Tr∆∞·ªùng h·ª£p API tr·∫£ v·ªÅ { success: true, data: [...] }
        employeeData = response.data;
        console.log('‚úÖ Using response.data (structured format)');
      } else if (Array.isArray(response)) {
        // Tr∆∞·ªùng h·ª£p API tr·∫£ v·ªÅ tr·ª±c ti·∫øp array
        employeeData = response;
        console.log('‚úÖ Using response directly (array format)');
      } else if (response && Array.isArray(response.employees)) {
        // Tr∆∞·ªùng h·ª£p API tr·∫£ v·ªÅ { employees: [...] }
        employeeData = response.employees;
        console.log('‚úÖ Using response.employees');
      } else {
        console.warn('‚ö†Ô∏è Unknown response format, using empty array');
        employeeData = [];
      }
      
      console.log('üîç Final employeeData to set:', employeeData);
      console.log('üîç Final employeeData length:', employeeData.length);
      
      setEmployees(employeeData);
      
    } catch (error) {
      console.error('‚ùå Error loading employees:', error);
      console.error('‚ùå Error details:', {
        message: error.message,
        response: error.response?.data,
        status: error.response?.status
      });
      
      // Set empty array on error
      setEmployees([]);
      showNotification('L·ªói khi t·∫£i danh s√°ch nh√¢n vi√™n', 'error');
    } finally {
      setLoading(false);
    }
  };

  const filterEmployees = () => {
    // ƒê·∫£m b·∫£o employees lu√¥n l√† array tr∆∞·ªõc khi filter
    const safeEmployees = Array.isArray(employees) ? employees : [];
    let filtered = safeEmployees;

    if (searchTerm) {
      filtered = filtered.filter(employee => {
        // Safe check cho t·ª´ng property
        const fullName = employee?.fullName || '';
        const employeeId = employee?.employeeId || '';
        const phoneNumber = employee?.phoneNumber || '';
        
        return (
          fullName.toLowerCase().includes(searchTerm.toLowerCase()) ||
          employeeId.toLowerCase().includes(searchTerm.toLowerCase()) ||
          phoneNumber.includes(searchTerm)
        );
      });
    }

    if (statusFilter) {
      filtered = filtered.filter(employee => employee?.status === statusFilter);
    }

    setFilteredEmployees(filtered);
  };

  const handleEdit = async (employeeId) => {
    // TODO: Implement edit functionality
    console.log('Edit employee:', employeeId);
    showNotification('Ch·ª©c nƒÉng ch·ªânh s·ª≠a ƒëang ƒë∆∞·ª£c ph√°t tri·ªÉn', 'info');
  };

  const handleDelete = async (employeeId) => {
    const employee = employees.find(emp => emp?.id === employeeId);
    if (!employee) return;

    const confirmed = window.confirm(`B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a nh√¢n vi√™n "${employee.fullName || 'N/A'}"?`);
    if (!confirmed) return;

    try {
      await ApiClient.delete(`/api/employees/${employeeId}`);
      
      // Remove from local state
      setEmployees(employees.filter(emp => emp?.id !== employeeId));
      showNotification('X√≥a nh√¢n vi√™n th√†nh c√¥ng', 'success');
      
    } catch (error) {
      console.error('Error deleting employee:', error);
      showNotification('L·ªói khi x√≥a nh√¢n vi√™n', 'error');
    }
  };

  const handleAddWorkHistory = (employeeId, employeeName) => {
    // TODO: Implement add work history functionality
    console.log('Add work history for:', employeeId, employeeName);
    showNotification('Ch·ª©c nƒÉng th√™m work history ƒëang ƒë∆∞·ª£c ph√°t tri·ªÉn', 'info');
  };

  const handleViewWorkHistory = (employeeId) => {
    // TODO: Implement view work history functionality
    console.log('View work history for:', employeeId);
    showNotification('Ch·ª©c nƒÉng xem work history ƒëang ƒë∆∞·ª£c ph√°t tri·ªÉn', 'info');
  };

  const handleRefresh = async () => {
    await loadEmployees();
    showNotification('ƒê√£ l√†m m·ªõi danh s√°ch nh√¢n vi√™n', 'success');
  };

  if (loading) {
    return <Loading text="ƒêang t·∫£i danh s√°ch nh√¢n vi√™n..." />;
  }

  return (
    <div className="employee-list">
      {/* Search and Filter Controls */}
      <div className="row mb-3">
        <div className="col-md-8">
          <input
            type="text"
            className="form-control"
            placeholder="T√¨m ki·∫øm nh√¢n vi√™n (t√™n, m√£ NV, s·ªë ƒêT)..."
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            id="employeeSearch"
          />
        </div>
        <div className="col-md-3">
          <select
            className="form-select"
            value={statusFilter}
            onChange={(e) => setStatusFilter(e.target.value)}
            id="employeeStatusFilter"
          >
            <option value="">T·∫•t c·∫£ tr·∫°ng th√°i</option>
            <option value="active">Ho·∫°t ƒë·ªông</option>
            <option value="inactive">Ng∆∞ng ho·∫°t ƒë·ªông</option>
          </select>
        </div>
        <div className="col-md-1">
          <button 
            className="btn btn-outline-secondary"
            onClick={handleRefresh}
            title="L√†m m·ªõi"
          >
            <i className="fas fa-sync-alt"></i>
          </button>
        </div>
      </div>

      {/* Employee Count */}
      <div className="mb-3">
        <small className="text-muted">
          Hi·ªÉn th·ªã {filteredEmployees.length} / {employees.length} nh√¢n vi√™n
        </small>
      </div>

      {/* Debug Info - Remove this in production */}
      <div className="mb-3 p-2 bg-light border rounded">
        <small className="text-muted">
          <strong>DEBUG:</strong> employees type: {typeof employees}, isArray: {Array.isArray(employees).toString()}, length: {Array.isArray(employees) ? employees.length : 'N/A'}
        </small>
      </div>

      {/* Employee Table */}
      <EmployeeTable
        employees={filteredEmployees}
        onEdit={handleEdit}
        onDelete={handleDelete}
        onAddWorkHistory={handleAddWorkHistory}
        onViewWorkHistory={handleViewWorkHistory}
      />
    </div>
  );
};

export default EmployeeList;
