// server/services/employees/work-history-service.js
import BaseService from '../core/base-service.js';
import LarkClient from '../core/lark-client.js';
import CacheService from '../core/cache-service.js';


// **H√ÄM TI·ªÜN √çCH ƒê·ªäNH D·∫†NG NG√ÄY**
const formatDate = (dateValue) => {
    if (!dateValue) return 'N/A';
    const date = new Date(dateValue);
    if (isNaN(date.getTime())) return 'Ng√†y kh√¥ng h·ª£p l·ªá';
    
    const day = String(date.getDate()).padStart(2, '0');
    const month = String(date.getMonth() + 1).padStart(2, '0');
    const year = date.getFullYear();
    return `${day}/${month}/${year}`;
};


// H√†m ti·ªán √≠ch ƒë·ªÉ ki·ªÉm tra hai kho·∫£ng ng√†y c√≥ ch·ªìng ch√©o kh√¥ng
const dateRangesOverlap = (start1, end1, start2, end2) => {
    const s1 = new Date(start1);
    const e1 = new Date(end1);
    const s2 = new Date(start2);
    const e2 = new Date(end2);
    return s1 <= e2 && e1 >= s2;
};


class WorkHistoryService extends BaseService {
    constructor() {
        super();
        this.baseId = process.env.LARK_BASE_ID;
        this.tableId = process.env.LARK_WORK_HISTORY_TABLE_ID;
        this.salaryTableId = process.env.LARK_SALARY_TABLE_ID || 'tblLdJp61bLeK3MG';
    }


    async initializeService() {
        console.log('Initializing Work History Service...');
    }


    async getSalaryData() {
        const cacheKey = 'salary_data_all';
        let salaryData = CacheService.get(cacheKey);


        if (salaryData) {
            console.log(`‚úÖ SALARY: Loaded ${salaryData.length} records from cache.`);
            return salaryData;
        }


        try {
            console.log('üì° SALARY: Fetching salary data from Lark...');
            const response = await LarkClient.getAllRecords(
                `/bitable/v1/apps/${this.baseId}/tables/${this.salaryTableId}/records`
            );


            salaryData = this.transformSalaryData(response.data?.items || []);
            console.log(`‚úÖ SALARY: Transformed ${salaryData.length} total records.`);


            CacheService.set(cacheKey, salaryData, 300000); // Cache 5 ph√∫t
            return salaryData;
        } catch (error) {
            console.error('‚ùå Error getting salary data:', error);
            return [];
        }
    }


    transformSalaryData(larkData) {
        return larkData.map(record => ({
            id: record.record_id,
            employeeId: this.extractEmployeeId(record.fields['M√£ nh√¢n vi√™n']),
            hourlyRate: record.fields['M·ª©c l∆∞∆°ng/gi·ªù'] || null,
        }));
    }


    extractEmployeeId(employeeIdField) {
        if (!employeeIdField) return '';
        
        if (Array.isArray(employeeIdField) && employeeIdField.length > 0) {
            const firstRecord = employeeIdField[0];
            return firstRecord?.text || firstRecord?.name || '';
        }
        
        if (typeof employeeIdField === 'string') {
            return employeeIdField;
        }
        
        if (typeof employeeIdField === 'object' && employeeIdField.text) {
            return employeeIdField.text;
        }
        
        return '';
    }


    async getWorkHistoryByEmployee(employeeId) {
        try {
            console.log(`üîç Getting work history for employee: ${employeeId}`);
            
            const response = await LarkClient.get(`/bitable/v1/apps/${this.baseId}/tables/${this.tableId}/records`, {
                filter: `AND(CurrentValue.[M√£ nh√¢n vi√™n] = "${employeeId}")`
            });

            const workHistoryData = response.data?.items || [];
            console.log(`üìã Found ${workHistoryData.length} work history records`);

            const salaryData = await this.getSalaryData();
            console.log(`üí∞ Found ${salaryData.length} salary records`);

            return this.transformWorkHistoryDataWithSalary(workHistoryData, salaryData);
        } catch (error) {
            console.error('Error fetching work history:', error);
            return [];
        }
    }


    transformWorkHistoryDataWithSalary(workHistoryData, salaryData) {
        const salaryMap = new Map();
        salaryData.forEach(salary => {
            if (salary.employeeId) {
                salaryMap.set(salary.employeeId, salary.hourlyRate);
            }
        });

        console.log(`üó∫Ô∏è Created salary map with ${salaryMap.size} entries`);
        console.log(`üîç Salary map keys:`, Array.from(salaryMap.keys()));

        return workHistoryData.map(record => {
            const employeeId = record.fields['M√£ nh√¢n vi√™n'] || '';
            const hourlyRateFromSalary = salaryMap.get(employeeId);
            
            console.log(`üí° Employee ${employeeId}: Work history hourlyRate = ${record.fields['M·ª©c l∆∞∆°ng/gi·ªù']}, Salary table hourlyRate = ${hourlyRateFromSalary}`);

            return {
                id: record.record_id,
                employeeId: employeeId,
                requestNo: record.fields['Request No.'] || '',
                fromDate: record.fields['T·ª´ ng√†y'] || null,
                toDate: record.fields['ƒê·∫øn ng√†y'] || null,
                hourlyRate: record.fields['M·ª©c l∆∞∆°ng/gi·ªù'] || hourlyRateFromSalary || null,
                // S·ª¨A: L·∫•y gi√° tr·ªã th·ª±c t·ª´ Lark, kh√¥ng t·ª± t·∫°o m·ªõi
                createdAt: record.fields['Created At'] || null, 
                updatedAt: record.fields['Updated At'] || null
            };
        });
    }


    async checkWorkHistoryExists(employeeId, requestNo) {
        try {
            console.log(`üîç WORK HISTORY: Checking duplicate (${employeeId}, ${requestNo})`);
            
            const response = await LarkClient.get(`/bitable/v1/apps/${this.baseId}/tables/${this.tableId}/records`);
            
            const records = response.data?.items || [];
            console.log(`üìã WORK HISTORY: Found ${records.length} total records`);
            
            const exists = records.some(record => {
                const fields = record.fields || {};
                const recordEmployeeId = fields['M√£ nh√¢n vi√™n'];
                const recordRequestNo = fields['Request No.'];
                
                const isMatch = recordEmployeeId === employeeId && recordRequestNo === requestNo;
                
                if (isMatch) {
                    console.log(`‚ùå WORK HISTORY: Found duplicate - ${recordEmployeeId} / ${recordRequestNo}`);
                }
                
                return isMatch;
            });
            
            console.log(`‚úÖ WORK HISTORY: Duplicate check result: ${exists ? 'EXISTS' : 'NOT_EXISTS'}`);
            return exists;
            
        } catch (error) {
            console.error('‚ùå Error checking work history exists:', error);
            return false;
        }
    }


    async validateWorkHistoryDateOverlap(employeeId, newRequestNo, recruitmentService) {
        console.log(`üîç VALIDATING DATE OVERLAP: Employee ${employeeId}, Request ${newRequestNo}`);

        const newRequestDetails = await recruitmentService.getRequestByNo(newRequestNo);
        if (!newRequestDetails.fromDate || !newRequestDetails.toDate) {
            console.warn(`‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y ng√†y cho Request No. ${newRequestNo}, b·ªè qua ki·ªÉm tra tr√πng l·∫∑p.`);
            return;
        }
        const newStartDate = newRequestDetails.fromDate;
        const newEndDate = newRequestDetails.toDate;

        const existingHistories = await this.getWorkHistoryByEmployee(employeeId);
        if (existingHistories.length === 0) {
            console.log('‚úÖ Kh√¥ng c√≥ l·ªãch s·ª≠ c≈©, kh√¥ng c·∫ßn ki·ªÉm tra.');
            return;
        }

        for (const oldHistory of existingHistories) {
            const oldRequestDetails = await recruitmentService.getRequestByNo(oldHistory.requestNo);
            if (!oldRequestDetails || !oldRequestDetails.fromDate || !oldRequestDetails.toDate) {
                continue;
            }

            const oldStartDate = oldRequestDetails.fromDate;
            const oldEndDate = oldRequestDetails.toDate;

            if (dateRangesOverlap(newStartDate, newEndDate, oldStartDate, oldEndDate)) {
                const formattedNewStart = formatDate(newStartDate);
                const formattedNewEnd = formatDate(newEndDate);
                const formattedOldStart = formatDate(oldStartDate);
                const formattedOldEnd = formatDate(oldEndDate);

                const errorMessage = `Kho·∫£ng th·ªùi gian t·ª´ ${formattedNewStart} ƒë·∫øn ${formattedNewEnd} b·ªã tr√πng v·ªõi l·ªãch s·ª≠ l√†m vi·ªác c≈© (t·ª´ ${formattedOldStart} ƒë·∫øn ${formattedOldEnd}, m√£ ƒë·ªÅ xu·∫•t ${oldHistory.requestNo}).`;
                console.error(`‚ùå DATE OVERLAP DETECTED: ${errorMessage}`);
                throw new Error(errorMessage);
            }
        }
        
        console.log('‚úÖ Ki·ªÉm tra tr√πng l·∫∑p ng√†y th√†nh c√¥ng, kh√¥ng c√≥ ch·ªìng ch√©o.');
    }


    validateWorkHistoryFields(workHistoryData, recruitmentDetails) {
        const { fromDate, toDate, hourlyRate } = workHistoryData;
        
        if (!fromDate || !toDate) {
            throw new Error('T·ª´ ng√†y v√† ƒê·∫øn ng√†y l√† b·∫Øt bu·ªôc.');
        }

        const fromDateObj = new Date(fromDate);
        const toDateObj = new Date(toDate);
        
        if (isNaN(fromDateObj.getTime()) || isNaN(toDateObj.getTime())) {
            throw new Error('ƒê·ªãnh d·∫°ng ng√†y kh√¥ng h·ª£p l·ªá.');
        }

        if (toDateObj < fromDateObj) {
            throw new Error('ƒê·∫øn ng√†y ph·∫£i l·ªõn h∆°n ho·∫∑c b·∫±ng T·ª´ ng√†y.');
        }

        if (recruitmentDetails && recruitmentDetails.fromDate && recruitmentDetails.toDate) {
            const recruitmentStart = new Date(recruitmentDetails.fromDate);
            const recruitmentEnd = new Date(recruitmentDetails.toDate);

            if (fromDateObj < recruitmentStart || toDateObj > recruitmentEnd) {
                throw new Error(
                    `Kho·∫£ng ng√†y l√†m vi·ªác (${formatDate(fromDate)} - ${formatDate(toDate)}) ph·∫£i n·∫±m trong kho·∫£ng ng√†y c·ªßa ƒë·ªÅ xu·∫•t tuy·ªÉn d·ª•ng (${formatDate(recruitmentDetails.fromDate)} - ${formatDate(recruitmentDetails.toDate)}).`
                );
            }
        }

        if (hourlyRate !== undefined && (isNaN(hourlyRate) || hourlyRate < 0)) {
            throw new Error('M·ª©c l∆∞∆°ng/gi·ªù ph·∫£i l√† s·ªë v√† kh√¥ng ƒë∆∞·ª£c √¢m.');
        }
    }


    async addWorkHistory(workHistoryData, recruitmentService) {
        try {
            const { employeeId, requestNo, fromDate, toDate, hourlyRate } = workHistoryData;

            console.log('üì• WORK HISTORY SERVICE: Processing new work history:', { employeeId, requestNo, fromDate, toDate, hourlyRate });

            const recruitmentDetails = await recruitmentService.getRequestByNo(requestNo);

            if (!recruitmentDetails) {
                throw new Error(`Kh√¥ng t√¨m th·∫•y ƒë·ªÅ xu·∫•t tuy·ªÉn d·ª•ng v·ªõi m√£: ${requestNo}`);
            }

            this.validateWorkHistoryFields(workHistoryData, recruitmentDetails);
            await this.validateWorkHistoryDateOverlap(employeeId, requestNo, recruitmentService);

            const transformedData = this.transformWorkHistoryForLark(workHistoryData);
            
            console.log('üì§ WORK HISTORY SERVICE: Sending data to Lark:', transformedData);
            
            const response = await LarkClient.post(`/bitable/v1/apps/${this.baseId}/tables/${this.tableId}/records`, {
                fields: transformedData
            });

            console.log('üì• WORK HISTORY SERVICE: Raw Lark response:', response);

            // TH√äM: Ki·ªÉm tra m√£ l·ªói t·ª´ Lark API
            if (response.code !== 0) {
                throw new Error(`L·ªói t·ª´ Lark API khi th√™m: ${response.msg} (code: ${response.code})`);
            }

            CacheService.delete('work_history_all');
            CacheService.delete('salary_data_all');

            return {
                success: true,
                ...workHistoryData,
                larkResponse: response
            };
            
        } catch (error) {
            console.error('‚ùå WORK HISTORY SERVICE: Full error:', error);
            await this.handleError(error, 'addWorkHistory');
            throw error;
        }
    }


    async updateWorkHistory(id, workHistoryData) {
        try {
            const { employeeId, requestNo, fromDate, toDate, hourlyRate } = workHistoryData;

            console.log('üìù WORK HISTORY SERVICE: Updating work history:', { id, ...workHistoryData });

            const currentWorkHistory = await this.getWorkHistoryById(id);
            if (!currentWorkHistory) {
                throw new Error(`Kh√¥ng t√¨m th·∫•y l·ªãch s·ª≠ c√¥ng vi·ªác v·ªõi ID: ${id}`);
            }

            if (!employeeId || !requestNo) {
                throw new Error('M√£ nh√¢n vi√™n v√† Request No. l√† b·∫Øt bu·ªôc');
            }

            // S·ª¨A: Lo·∫°i b·ªè ho√†n to√†n vi·ªác ghi ƒë√® v√†o c√°c tr∆∞·ªùng h·ªá th·ªëng
            const transformedData = this.transformWorkHistoryForLark(workHistoryData);
            
            console.log('üì§ WORK HISTORY SERVICE: Updating data in Lark:', transformedData);
            
            const response = await LarkClient.put(`/bitable/v1/apps/${this.baseId}/tables/${this.tableId}/records/${id}`, {
                fields: transformedData
            });

            console.log('üì• WORK HISTORY SERVICE: Update response:', response);

            // TH√äM: Ki·ªÉm tra m√£ l·ªói t·ª´ Lark API
            if (response.code !== 0) {
                throw new Error(`L·ªói t·ª´ Lark API khi c·∫≠p nh·∫≠t: ${response.msg} (code: ${response.code})`);
            }

            // X√≥a cache ƒë·ªÉ ƒë·∫£m b·∫£o d·ªØ li·ªáu ƒë∆∞·ª£c l√†m m·ªõi
            CacheService.delete('work_history_all');
            CacheService.delete('salary_data_all');
            CacheService.clear(); // X√≥a to√†n b·ªô cache ƒë·ªÉ an to√†n

            return {
                success: true,
                id: id,
                ...workHistoryData,
                larkResponse: response
            };
            
        } catch (error) {
            console.error('‚ùå WORK HISTORY SERVICE: Update error:', error);
            await this.handleError(error, 'updateWorkHistory');
            throw error;
        }
    }


    async deleteWorkHistory(id) {
        try {
            console.log('üóëÔ∏è WORK HISTORY SERVICE: Deleting work history:', id);

            const currentWorkHistory = await this.getWorkHistoryById(id);
            if (!currentWorkHistory) {
                throw new Error(`Kh√¥ng t√¨m th·∫•y l·ªãch s·ª≠ c√¥ng vi·ªác v·ªõi ID: ${id}`);
            }

            const response = await LarkClient.delete(`/bitable/v1/apps/${this.baseId}/tables/${this.tableId}/records/${id}`);
            
            // TH√äM: Ki·ªÉm tra m√£ l·ªói t·ª´ Lark API
            if (response.code !== 0) {
                throw new Error(`L·ªói t·ª´ Lark API khi x√≥a: ${response.msg} (code: ${response.code})`);
            }

            console.log('‚úÖ WORK HISTORY SERVICE: Work history deleted successfully');

            CacheService.delete('work_history_all');
            CacheService.delete('salary_data_all');
            CacheService.clear();
            
            return {
                success: true,
                message: 'X√≥a l·ªãch s·ª≠ c√¥ng vi·ªác th√†nh c√¥ng'
            };
            
        } catch (error) {
            console.error('‚ùå WORK HISTORY SERVICE: Delete error:', error);
            await this.handleError(error, 'deleteWorkHistory');
            throw error;
        }
    }


    async getWorkHistoryById(id) {
        try {
            console.log('üîç WORK HISTORY SERVICE: Getting work history by ID:', id);
            
            const response = await LarkClient.get(`/bitable/v1/apps/${this.baseId}/tables/${this.tableId}/records/${id}`);
            
            if (response.data && response.data.record) {
                const salaryData = await this.getSalaryData();
                return this.transformWorkHistoryDataWithSalary([response.data.record], salaryData)[0];
            }
            
            return null;
            
        } catch (error) {
            console.error('‚ùå Error getting work history by ID:', error);
            return null;
        }
    }


    async getAllWorkHistory() {
        const cacheKey = 'work_history_all';
        let history = CacheService.get(cacheKey);

        if (history) {
            console.log(`‚úÖ WORK HISTORY: Loaded ${history.length} records from cache.`);
            return history;
        }

        try {
            console.log('üì° WORK HISTORY: Fetching all work history from Lark...');
            const response = await LarkClient.getAllRecords(
                `/bitable/v1/apps/${this.baseId}/tables/${this.tableId}/records`
            );

            const salaryData = await this.getSalaryData();
            history = this.transformWorkHistoryDataWithSalary(response.data?.items || [], salaryData);
            console.log(`‚úÖ WORK HISTORY: Transformed ${history.length} total records.`);

            CacheService.set(cacheKey, history, 300000);
            return history;
        } catch (error) {
            console.error('‚ùå Error getting all work history:', error);
            return [];
        }
    }


    transformWorkHistoryData(larkData) {
        return larkData.map(record => ({
            id: record.record_id,
            employeeId: record.fields['M√£ nh√¢n vi√™n'] || '',
            requestNo: record.fields['Request No.'] || '',
            fromDate: record.fields['T·ª´ ng√†y'] || null,
            toDate: record.fields['ƒê·∫øn ng√†y'] || null,
            hourlyRate: record.fields['M·ª©c l∆∞∆°ng/gi·ªù'] || null,
            // S·ª¨A: L·∫•y gi√° tr·ªã th·ª±c t·ª´ Lark, kh√¥ng t·ª± t·∫°o m·ªõi
            createdAt: record.fields['Created At'] || null,
            updatedAt: record.fields['Updated At'] || null
        }));
    }


    transformWorkHistoryForLark(workHistoryData) {
        const larkData = {
            'M√£ nh√¢n vi√™n': workHistoryData.employeeId,
            'Request No.': workHistoryData.requestNo
        };

        if (workHistoryData.fromDate) {
            larkData['T·ª´ ng√†y'] = workHistoryData.fromDate;
        }

        if (workHistoryData.toDate) {
            larkData['ƒê·∫øn ng√†y'] = workHistoryData.toDate;
        }

        if (workHistoryData.hourlyRate !== undefined && workHistoryData.hourlyRate !== null) {
            larkData['M·ª©c l∆∞∆°ng/gi·ªù'] = parseFloat(workHistoryData.hourlyRate);
        }

        return larkData;
    }
}


export default WorkHistoryService;
