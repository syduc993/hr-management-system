// server/services/employees/work-history-service.js


/**
 * @file D·ªãch v·ª• n√†y ch·ªãu tr√°ch nhi·ªám qu·∫£n l√Ω t·∫•t c·∫£ c√°c ho·∫°t ƒë·ªông li√™n quan ƒë·∫øn
 * L·ªãch s·ª≠ C√¥ng t√°c c·ªßa Nh√¢n vi√™n (Work History).
 * N√≥ bao g·ªìm c√°c ch·ª©c nƒÉng CRUD (T·∫°o, ƒê·ªçc, C·∫≠p nh·∫≠t, X√≥a) d·ªØ li·ªáu t·ª´
 * Lark Bitable, c≈©ng nh∆∞ c√°c logic x√°c th·ª±c v√† bi·∫øn ƒë·ªïi d·ªØ li·ªáu ph·ª©c t·∫°p.
 * D·ªãch v·ª• s·ª≠ d·ª•ng cache ƒë·ªÉ t·ªëi ∆∞u h√≥a hi·ªáu su·∫•t cho c√°c ho·∫°t ƒë·ªông ƒë·ªçc d·ªØ li·ªáu.
 */


import BaseService from '../core/base-service.js';
import LarkClient from '../core/lark-client.js';
import CacheService from '../core/cache-service.js';


// =================================================================
// H√ÄM TI·ªÜN √çCH ƒê·ªòC L·∫¨P (STANDALONE UTILITY FUNCTIONS)
// =================================================================


/**
 * ƒê·ªãnh d·∫°ng m·ªôt gi√° tr·ªã ng√†y th√†nh chu·ªói 'DD/MM/YYYY'.
 * @param {Date|string|number} dateValue - Gi√° tr·ªã ng√†y c·∫ßn ƒë·ªãnh d·∫°ng.
 * @returns {string} Chu·ªói ng√†y ƒë√£ ƒë·ªãnh d·∫°ng ho·∫∑c 'N/A' n·∫øu kh√¥ng c√≥ gi√° tr·ªã, 'Ng√†y kh√¥ng h·ª£p l·ªá' n·∫øu sai ƒë·ªãnh d·∫°ng.
 */
const formatDate = (dateValue) => {
    if (!dateValue) return 'N/A';
    const date = new Date(dateValue);
    if (isNaN(date.getTime())) return 'Ng√†y kh√¥ng h·ª£p l·ªá';
    
    const day = String(date.getDate()).padStart(2, '0');
    const month = String(date.getMonth() + 1).padStart(2, '0');
    const year = date.getFullYear();
    return `${day}/${month}/${year}`;
};


// H√†m ti·ªán √≠ch ƒë·ªÉ ki·ªÉm tra hai kho·∫£ng ng√†y c√≥ ch·ªìng ch√©o kh√¥ng
const dateRangesOverlap = (start1, end1, start2, end2) => {
    const s1 = new Date(start1);
    const e1 = new Date(end1);
    const s2 = new Date(start2);
    const e2 = new Date(end2);
    return s1 <= e2 && e1 >= s2;
};


// =================================================================
// L·ªöP D·ªäCH V·ª§ (SERVICE CLASS)
// =================================================================

class WorkHistoryService extends BaseService {
    constructor() {
        super();
        this.baseId = process.env.LARK_BASE_ID;
        this.tableId = process.env.LARK_WORK_HISTORY_TABLE_ID;
        this.salaryTableId = process.env.LARK_SALARY_TABLE_ID || 'tblLdJp61bLeK3MG';
    }


    async initializeService() {
        console.log('Initializing Work History Service...');
    }

    // =================================================================
    // C√ÅC H√ÄM C√îNG KHAI - PUBLIC API (MAIN METHODS)
    // =================================================================


    /**
     * L·∫•y to√†n b·ªô l·ªãch s·ª≠ c√¥ng t√°c c·ªßa nh√¢n vi√™n t·ª´ Lark Bitable.
     * H√†m n√†y s·∫Ω th·ª±c hi·ªán c√°c b∆∞·ªõc sau:
     * 1. G·ªçi API ƒë·ªÉ l·∫•y d·ªØ li·ªáu th√¥ t·ª´ Lark.
     * 2. L·∫•y th√™m d·ªØ li·ªáu l∆∞∆°ng ƒë·ªÉ l√†m gi√†u th√¥ng tin.
     * 3. Bi·∫øn ƒë·ªïi v√† k·∫øt h·ª£p hai ngu·ªìn d·ªØ li·ªáu tr√™n.
     * 4. L∆∞u k·∫øt qu·∫£ v√†o cache ƒë·ªÉ tƒÉng t·ªëc cho c√°c l·∫ßn g·ªçi sau.
     * 5. X·ª≠ l√Ω l·ªói m·ªôt c√°ch an to√†n.
     *
     * @returns {Promise<Array>} M·ªôt m·∫£ng ch·ª©a c√°c ƒë·ªëi t∆∞·ª£ng l·ªãch s·ª≠ c√¥ng t√°c ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω,
     *                            ho·∫∑c m·ªôt m·∫£ng r·ªóng n·∫øu c√≥ l·ªói x·∫£y ra.
     */
    async getAllWorkHistory() {
        // ƒê·ªãnh danh key cho vi·ªác cache d·ªØ li·ªáu. Gi√∫p truy xu·∫•t v√† l∆∞u tr·ªØ nh·∫•t qu√°n.
        const cacheKey = 'work_history_all';

        try {
            // G·ªçi API ƒë·ªÉ l·∫•y t·∫•t c·∫£ b·∫£n ghi l·ªãch s·ª≠ c√¥ng t√°c t·ª´ Lark Bitable.
            // `await` ƒë·∫£m b·∫£o ch∆∞∆°ng tr√¨nh s·∫Ω ƒë·ª£i cho ƒë·∫øn khi c√≥ ph·∫£n h·ªìi t·ª´ server.
            const response = await LarkClient.getAllRecords(
                `/bitable/v1/apps/${this.baseId}/tables/${this.tableId}/records`
            );

            // L·∫•y d·ªØ li·ªáu l∆∞∆°ng ƒë·ªÉ k·∫øt h·ª£p ·ªü b∆∞·ªõc sau.
            const salaryData = await this.getSalaryData();

            // Bi·∫øn ƒë·ªïi d·ªØ li·ªáu th√¥ t·ª´ Lark v√† k·∫øt h·ª£p v·ªõi d·ªØ li·ªáu l∆∞∆°ng.
            const history = this.transformWorkHistoryDataWithSalary(response.data?.items || [], salaryData);
            CacheService.set(cacheKey, history, 300000);

            // Tr·∫£ v·ªÅ danh s√°ch l·ªãch s·ª≠ c√¥ng t√°c ƒë√£ x·ª≠ l√Ω.
            return history;
        } catch (error) {
            console.error('‚ùå ƒê√£ x·∫£y ra l·ªói khi l·∫•y l·ªãch s·ª≠ c√¥ng t√°c:', error);
            // Tr·∫£ v·ªÅ m·ªôt m·∫£ng r·ªóng ƒë·ªÉ ƒë·∫£m b·∫£o c√°c ph·∫ßn kh√°c c·ªßa ·ª©ng d·ª•ng kh√¥ng b·ªã "crash" khi kh√¥ng nh·∫≠n ƒë∆∞·ª£c d·ªØ li·ªáu.
            return [];
        }
    }


    /**
     * L·∫•y l·ªãch s·ª≠ c√¥ng t√°c c·ªßa m·ªôt nh√¢n vi√™n c·ª• th·ªÉ d·ª±a v√†o m√£ nh√¢n vi√™n.
     * @param {string} employeeId - M√£ c·ªßa nh√¢n vi√™n.
     * @returns {Promise<Array<Object>>} M·ªôt m·∫£ng ch·ª©a l·ªãch s·ª≠ c√¥ng t√°c c·ªßa nh√¢n vi√™n ƒë√≥.
     */
    async getWorkHistoryByEmployee(employeeId) {
        try {
            
            const response = await LarkClient.get(`/bitable/v1/apps/${this.baseId}/tables/${this.tableId}/records`, {
                filter: `AND(CurrentValue.[M√£ nh√¢n vi√™n] = "${employeeId}")`
            });

            const workHistoryData = response.data?.items || [];

            const salaryData = await this.getSalaryData();

            return this.transformWorkHistoryDataWithSalary(workHistoryData, salaryData);
        } catch (error) {
            console.error('Error fetching work history:', error);
            return [];
        }
    }


    /**
     * L·∫•y m·ªôt b·∫£n ghi l·ªãch s·ª≠ c√¥ng t√°c c·ª• th·ªÉ b·∫±ng ID c·ªßa b·∫£n ghi (record_id).
     * @param {string} id - ID c·ªßa b·∫£n ghi trong Lark Bitable.
     * @returns {Promise<Object|null>} ƒê·ªëi t∆∞·ª£ng l·ªãch s·ª≠ c√¥ng t√°c ho·∫∑c null n·∫øu kh√¥ng t√¨m th·∫•y.
     */
    async getWorkHistoryById(id) {
        try {
            console.log('üîç WORK HISTORY SERVICE: Getting work history by ID:', id);
            
            const response = await LarkClient.get(`/bitable/v1/apps/${this.baseId}/tables/${this.tableId}/records/${id}`);
            
            if (response.data && response.data.record) {
                const salaryData = await this.getSalaryData();
                return this.transformWorkHistoryDataWithSalary([response.data.record], salaryData)[0];
            }
            
            return null;
            
        } catch (error) {
            console.error('‚ùå Error getting work history by ID:', error);
            return null;
        }
    }


        /**
     * Th√™m m·ªôt b·∫£n ghi l·ªãch s·ª≠ c√¥ng t√°c m·ªõi.
     * @param {Object} workHistoryData - D·ªØ li·ªáu v·ªÅ l·ªãch s·ª≠ c√¥ng t√°c c·∫ßn th√™m.
     * @param {Object} recruitmentService - M·ªôt instance c·ªßa RecruitmentService ƒë·ªÉ l·∫•y th√¥ng tin ƒë·ªÅ xu·∫•t.
     * @returns {Promise<Object>} Th√¥ng tin v·ªÅ b·∫£n ghi ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng.
     * @throws {Error} N√©m l·ªói n·∫øu d·ªØ li·ªáu kh√¥ng h·ª£p l·ªá ho·∫∑c c√≥ l·ªói t·ª´ API.
     */
    async addWorkHistory(workHistoryData, recruitmentService) {
        try {
            const { employeeId, requestNo, fromDate, toDate, hourlyRate } = workHistoryData;

            console.log('üì• WORK HISTORY SERVICE: Processing new work history:', { employeeId, requestNo, fromDate, toDate, hourlyRate });

            const recruitmentDetails = await recruitmentService.getRequestByNo(requestNo);

            if (!recruitmentDetails) {
                throw new Error(`Kh√¥ng t√¨m th·∫•y ƒë·ªÅ xu·∫•t tuy·ªÉn d·ª•ng v·ªõi m√£: ${requestNo}`);
            }

            this.validateWorkHistoryFields(workHistoryData, recruitmentDetails);
            //await this.validateWorkHistoryDateOverlap(employeeId, requestNo, recruitmentService);
            await this.validateWorkHistoryDateOverlap(employeeId, workHistoryData, recruitmentService);
            const transformedData = this.transformWorkHistoryForLark(workHistoryData);
            
            console.log('üì§ WORK HISTORY SERVICE: Sending data to Lark:', transformedData);
            
            const response = await LarkClient.post(`/bitable/v1/apps/${this.baseId}/tables/${this.tableId}/records`, {
                fields: transformedData
            });

            console.log('üì• WORK HISTORY SERVICE: Raw Lark response:', response);

            // TH√äM: Ki·ªÉm tra m√£ l·ªói t·ª´ Lark API
            if (response.code !== 0) {
                throw new Error(`L·ªói t·ª´ Lark API khi th√™m: ${response.msg} (code: ${response.code})`);
            }

            CacheService.delete('work_history_all');
            CacheService.delete('salary_data_all');

            return {
                success: true,
                ...workHistoryData,
                larkResponse: response
            };
            
        } catch (error) {
            console.error('‚ùå WORK HISTORY SERVICE: Full error:', error);
            await this.handleError(error, 'addWorkHistory');
            throw error;
        }
    }


    /**
     * C·∫≠p nh·∫≠t m·ªôt b·∫£n ghi l·ªãch s·ª≠ c√¥ng t√°c ƒë√£ c√≥.
     * @param {string} id - ID c·ªßa b·∫£n ghi c·∫ßn c·∫≠p nh·∫≠t.
     * @param {Object} workHistoryData - D·ªØ li·ªáu m·ªõi ƒë·ªÉ c·∫≠p nh·∫≠t.
     * @returns {Promise<Object>} Th√¥ng tin v·ªÅ b·∫£n ghi ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t.
     * @throws {Error} N√©m l·ªói n·∫øu kh√¥ng t√¨m th·∫•y b·∫£n ghi ho·∫∑c c√≥ l·ªói t·ª´ API.
     */
    async updateWorkHistory(id, workHistoryData) {
        try {
            const { employeeId, requestNo, fromDate, toDate, hourlyRate } = workHistoryData;

            console.log('üìù WORK HISTORY SERVICE: Updating work history:', { id, ...workHistoryData });

            const currentWorkHistory = await this.getWorkHistoryById(id);
            if (!currentWorkHistory) {
                throw new Error(`Kh√¥ng t√¨m th·∫•y l·ªãch s·ª≠ c√¥ng vi·ªác v·ªõi ID: ${id}`);
            }

            if (!employeeId || !requestNo) {
                throw new Error('M√£ nh√¢n vi√™n v√† Request No. l√† b·∫Øt bu·ªôc');
            }

            // S·ª¨A: Lo·∫°i b·ªè ho√†n to√†n vi·ªác ghi ƒë√® v√†o c√°c tr∆∞·ªùng h·ªá th·ªëng
            const transformedData = this.transformWorkHistoryForLark(workHistoryData);
            
            console.log('üì§ WORK HISTORY SERVICE: Updating data in Lark:', transformedData);
            
            const response = await LarkClient.put(`/bitable/v1/apps/${this.baseId}/tables/${this.tableId}/records/${id}`, {
                fields: transformedData
            });

            console.log('üì• WORK HISTORY SERVICE: Update response:', response);

            // TH√äM: Ki·ªÉm tra m√£ l·ªói t·ª´ Lark API
            if (response.code !== 0) {
                throw new Error(`L·ªói t·ª´ Lark API khi c·∫≠p nh·∫≠t: ${response.msg} (code: ${response.code})`);
            }

            // X√≥a cache ƒë·ªÉ ƒë·∫£m b·∫£o d·ªØ li·ªáu ƒë∆∞·ª£c l√†m m·ªõi
            CacheService.delete('work_history_all');
            CacheService.delete('salary_data_all');
            CacheService.clear(); // X√≥a to√†n b·ªô cache ƒë·ªÉ an to√†n

            return {
                success: true,
                id: id,
                ...workHistoryData,
                larkResponse: response
            };
            
        } catch (error) {
            console.error('‚ùå WORK HISTORY SERVICE: Update error:', error);
            await this.handleError(error, 'updateWorkHistory');
            throw error;
        }
    }

    /**
     * X√≥a m·ªôt b·∫£n ghi l·ªãch s·ª≠ c√¥ng t√°c b·∫±ng ID.
     * @param {string} id - ID c·ªßa b·∫£n ghi c·∫ßn x√≥a.
     * @returns {Promise<Object>} Th√¥ng b√°o th√†nh c√¥ng.
     * @throws {Error} N√©m l·ªói n·∫øu kh√¥ng t√¨m th·∫•y b·∫£n ghi ho·∫∑c c√≥ l·ªói t·ª´ API.
     */
    async deleteWorkHistory(id) {
        try {
            console.log('üóëÔ∏è WORK HISTORY SERVICE: Deleting work history:', id);

            const currentWorkHistory = await this.getWorkHistoryById(id);
            if (!currentWorkHistory) {
                throw new Error(`Kh√¥ng t√¨m th·∫•y l·ªãch s·ª≠ c√¥ng vi·ªác v·ªõi ID: ${id}`);
            }

            const response = await LarkClient.delete(`/bitable/v1/apps/${this.baseId}/tables/${this.tableId}/records/${id}`);
            
            // TH√äM: Ki·ªÉm tra m√£ l·ªói t·ª´ Lark API
            if (response.code !== 0) {
                throw new Error(`L·ªói t·ª´ Lark API khi x√≥a: ${response.msg} (code: ${response.code})`);
            }

            console.log('‚úÖ WORK HISTORY SERVICE: Work history deleted successfully');

            CacheService.delete('work_history_all');
            CacheService.delete('salary_data_all');
            CacheService.clear();
            
            return {
                success: true,
                message: 'X√≥a l·ªãch s·ª≠ c√¥ng vi·ªác th√†nh c√¥ng'
            };
            
        } catch (error) {
            console.error('‚ùå WORK HISTORY SERVICE: Delete error:', error);
            await this.handleError(error, 'deleteWorkHistory');
            throw error;
        }
    }

    // ‚úÖ TH√äM M·ªöI: Method ƒë·ªÉ x√≥a t·∫•t c·∫£ work history c·ªßa m·ªôt employee
    async deleteAllWorkHistoryByEmployee(employeeId) {
        try {
            console.log(`üóëÔ∏è Deleting all work history for employee: ${employeeId}`);
            
            // L·∫•y t·∫•t c·∫£ work history c·ªßa employee
            const workHistories = await this.getWorkHistoryByEmployee(employeeId);
            
            if (workHistories.length === 0) {
                console.log('‚ÑπÔ∏è No work history to delete for this employee');
                return { success: true, deletedCount: 0 };
            }
            
            // X√≥a t·ª´ng record
            const deletePromises = workHistories.map(wh => 
                this.deleteWorkHistory(wh.id)
            );
            
            const results = await Promise.allSettled(deletePromises);
            
            const successful = results.filter(r => r.status === 'fulfilled').length;
            const failed = results.filter(r => r.status === 'rejected').length;
            
            if (failed > 0) {
                throw new Error(`Failed to delete ${failed} out of ${workHistories.length} work history records`);
            }
            
            console.log(`‚úÖ Successfully deleted ${successful} work history records`);
            
            return {
                success: true,
                deletedCount: successful,
                originalCount: workHistories.length
            };
            
        } catch (error) {
            console.error('‚ùå Error deleting work history by employee:', error);
            throw error;
        }
    }


    // =================================================================
    // H√ÄM TI·ªÜN √çCH N·ªòI B·ªò - INTERNAL HELPERS
    // =================================================================

    /**
     * L·∫•y v√† cache d·ªØ li·ªáu l∆∞∆°ng t·ª´ b·∫£ng l∆∞∆°ng.
     * D·ªØ li·ªáu n√†y ƒë∆∞·ª£c d√πng ƒë·ªÉ l√†m gi√†u th√¥ng tin cho l·ªãch s·ª≠ c√¥ng t√°c.
     * @returns {Promise<Array<Object>>} M·∫£ng c√°c ƒë·ªëi t∆∞·ª£ng l∆∞∆°ng ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω.
     */
    async getSalaryData() {
        const cacheKey = 'salary_data_all';
        let salaryData = CacheService.get(cacheKey);


        if (salaryData) {
            console.log(`‚úÖ SALARY: Loaded ${salaryData.length} records from cache.`);
            return salaryData;
        }


        try {
            console.log('üì° SALARY: Fetching salary data from Lark...');
            const response = await LarkClient.getAllRecords(
                `/bitable/v1/apps/${this.baseId}/tables/${this.salaryTableId}/records`
            );


            salaryData = this.transformSalaryData(response.data?.items || []);
            console.log(`‚úÖ SALARY: Transformed ${salaryData.length} total records.`);


            CacheService.set(cacheKey, salaryData, 300000); // Cache 5 ph√∫t
            return salaryData;
        } catch (error) {
            console.error('‚ùå Error getting salary data:', error);
            return [];
        }
    }

    /**
     * X√°c th·ª±c c√°c tr∆∞·ªùng c∆° b·∫£n c·ªßa m·ªôt ƒë·ªëi t∆∞·ª£ng l·ªãch s·ª≠ c√¥ng t√°c.
     * @param {Object} workHistoryData - D·ªØ li·ªáu l·ªãch s·ª≠ c√¥ng t√°c.
     * @throws {Error} N√©m l·ªói n·∫øu c√≥ tr∆∞·ªùng kh√¥ng h·ª£p l·ªá.
     */
    validateWorkHistoryFields(workHistoryData, recruitmentDetails) {
        const { fromDate, toDate, hourlyRate } = workHistoryData;
        
        if (!fromDate || !toDate) {
            throw new Error('T·ª´ ng√†y v√† ƒê·∫øn ng√†y l√† b·∫Øt bu·ªôc.');
        }

        const fromDateObj = new Date(fromDate);
        const toDateObj = new Date(toDate);
        
        if (isNaN(fromDateObj.getTime()) || isNaN(toDateObj.getTime())) {
            throw new Error('ƒê·ªãnh d·∫°ng ng√†y kh√¥ng h·ª£p l·ªá.');
        }

        if (toDateObj < fromDateObj) {
            throw new Error('ƒê·∫øn ng√†y ph·∫£i l·ªõn h∆°n ho·∫∑c b·∫±ng T·ª´ ng√†y.');
        }

        if (recruitmentDetails && recruitmentDetails.fromDate && recruitmentDetails.toDate) {
            const recruitmentStart = new Date(recruitmentDetails.fromDate);
            const recruitmentEnd = new Date(recruitmentDetails.toDate);

            // ‚úÖ S·ª¨A: Normalize v·ªÅ ƒë·∫ßu ng√†y ƒë·ªÉ tr√°nh l·ªói precision
            fromDateObj.setHours(0, 0, 0, 0);
            toDateObj.setHours(23, 59, 59, 999);  // Cu·ªëi ng√†y ƒë·ªÉ inclusive
            recruitmentStart.setHours(0, 0, 0, 0);
            recruitmentEnd.setHours(23, 59, 59, 999);

            if (fromDateObj < recruitmentStart || toDateObj > recruitmentEnd) {
                throw new Error(
                    `Kho·∫£ng ng√†y l√†m vi·ªác (${formatDate(fromDate)} - ${formatDate(toDate)}) ph·∫£i n·∫±m trong kho·∫£ng ng√†y c·ªßa ƒë·ªÅ xu·∫•t tuy·ªÉn d·ª•ng (${formatDate(recruitmentDetails.fromDate)} - ${formatDate(recruitmentDetails.toDate)}).`
                );
            }
        }

        if (hourlyRate !== undefined && (isNaN(hourlyRate) || hourlyRate < 0)) {
            throw new Error('M·ª©c l∆∞∆°ng/gi·ªù ph·∫£i l√† s·ªë v√† kh√¥ng ƒë∆∞·ª£c √¢m.');
        }
    }


    /**
     * X√°c th·ª±c kho·∫£ng ng√†y l√†m vi·ªác, ƒë·∫£m b·∫£o kh√¥ng tr√πng v·ªõi c√°c l·ªãch s·ª≠ ƒë√£ c√≥
     * v√† ph·∫£i n·∫±m trong kho·∫£ng ng√†y c·ªßa ƒë·ªÅ xu·∫•t tuy·ªÉn d·ª•ng li√™n quan.
     * @param {string} employeeId - M√£ nh√¢n vi√™n.
     * @param {Object} workHistoryData - D·ªØ li·ªáu l·ªãch s·ª≠ c√¥ng t√°c m·ªõi.
     * @param {Object} recruitmentService - Instance c·ªßa RecruitmentService.
     * @throws {Error} N√©m l·ªói n·∫øu c√≥ s·ª± ch·ªìng ch√©o ng√†y ho·∫∑c ng√†y n·∫±m ngo√†i ƒë·ªÅ xu·∫•t.
     */
    async validateWorkHistoryDateOverlap(employeeId, workHistoryData, recruitmentService) {
        console.log(`üîç VALIDATING DATE OVERLAP: Employee ${employeeId}, New work period: ${workHistoryData.fromDate} - ${workHistoryData.toDate}`);

        // ‚úÖ B∆Ø·ªöC 1: Validate kho·∫£ng ng√†y c√≥ n·∫±m trong ƒë·ªÅ xu·∫•t tuy·ªÉn d·ª•ng kh√¥ng
        const recruitmentDetails = await recruitmentService.getRequestByNo(workHistoryData.requestNo);
        if (recruitmentDetails && recruitmentDetails.fromDate && recruitmentDetails.toDate) {
            const workStart = new Date(workHistoryData.fromDate);
            const workEnd = new Date(workHistoryData.toDate);
            const recruitmentStart = new Date(recruitmentDetails.fromDate);
            const recruitmentEnd = new Date(recruitmentDetails.toDate);

            // Normalize v·ªÅ ƒë·∫ßu ng√†y ƒë·ªÉ tr√°nh l·ªói precision
            workStart.setHours(0, 0, 0, 0);
            workEnd.setHours(23, 59, 59, 999);
            recruitmentStart.setHours(0, 0, 0, 0);
            recruitmentEnd.setHours(23, 59, 59, 999);

            if (workStart < recruitmentStart || workEnd > recruitmentEnd) {
                throw new Error(
                    `Kho·∫£ng ng√†y l√†m vi·ªác (${formatDate(workHistoryData.fromDate)} - ${formatDate(workHistoryData.toDate)}) ph·∫£i n·∫±m trong kho·∫£ng ng√†y c·ªßa ƒë·ªÅ xu·∫•t tuy·ªÉn d·ª•ng (${formatDate(recruitmentDetails.fromDate)} - ${formatDate(recruitmentDetails.toDate)}).`
                );
            }
        }

        // ‚úÖ B∆Ø·ªöC 2: Ki·ªÉm tra tr√πng l·∫∑p v·ªõi work history c≈© (ng√†y th·ª±c t·∫ø l√†m vi·ªác)
        const existingHistories = await this.getWorkHistoryByEmployee(employeeId);
        if (existingHistories.length === 0) {
            console.log('‚úÖ Kh√¥ng c√≥ l·ªãch s·ª≠ c≈©, kh√¥ng c·∫ßn ki·ªÉm tra overlap.');
            return;
        }

        const newWorkStart = new Date(workHistoryData.fromDate);
        const newWorkEnd = new Date(workHistoryData.toDate);

        for (const oldHistory of existingHistories) {
            // ‚ö†Ô∏è QUAN TR·ªåNG: So s√°nh v·ªõi ng√†y th·ª±c t·∫ø l√†m vi·ªác, kh√¥ng ph·∫£i ng√†y ƒë·ªÅ xu·∫•t
            if (!oldHistory.fromDate || !oldHistory.toDate) {
                continue; // Skip n·∫øu kh√¥ng c√≥ th√¥ng tin ng√†y
            }

            const oldWorkStart = new Date(oldHistory.fromDate);
            const oldWorkEnd = new Date(oldHistory.toDate);

            // Ki·ªÉm tra overlap gi·ªØa 2 kho·∫£ng ng√†y th·ª±c t·∫ø l√†m vi·ªác
            if (dateRangesOverlap(newWorkStart, newWorkEnd, oldWorkStart, oldWorkEnd)) {
                const formattedNewStart = formatDate(workHistoryData.fromDate);
                const formattedNewEnd = formatDate(workHistoryData.toDate);
                const formattedOldStart = formatDate(oldHistory.fromDate);
                const formattedOldEnd = formatDate(oldHistory.toDate);

                throw new Error(`Kho·∫£ng th·ªùi gian l√†m vi·ªác t·ª´ ${formattedNewStart} ƒë·∫øn ${formattedNewEnd} b·ªã tr√πng v·ªõi l·ªãch s·ª≠ l√†m vi·ªác c≈© (t·ª´ ${formattedOldStart} ƒë·∫øn ${formattedOldEnd}, m√£ ƒë·ªÅ xu·∫•t ${oldHistory.requestNo}).`);
            }
        }
        
        console.log('‚úÖ Ki·ªÉm tra tr√πng l·∫∑p ng√†y th√†nh c√¥ng, kh√¥ng c√≥ ch·ªìng ch√©o.');
    }

    async checkWorkHistoryExists(employeeId, requestNo) {
        try {
            console.log(`üîç WORK HISTORY: Checking duplicate (${employeeId}, ${requestNo})`);
            
            const response = await LarkClient.get(`/bitable/v1/apps/${this.baseId}/tables/${this.tableId}/records`);
            
            const records = response.data?.items || [];
            console.log(`üìã WORK HISTORY: Found ${records.length} total records`);
            
            const exists = records.some(record => {
                const fields = record.fields || {};
                const recordEmployeeId = fields['M√£ nh√¢n vi√™n'];
                const recordRequestNo = fields['Request No.'];
                
                const isMatch = recordEmployeeId === employeeId && recordRequestNo === requestNo;
                
                if (isMatch) {
                    console.log(`‚ùå WORK HISTORY: Found duplicate - ${recordEmployeeId} / ${recordRequestNo}`);
                }
                
                return isMatch;
            });
            
            console.log(`‚úÖ WORK HISTORY: Duplicate check result: ${exists ? 'EXISTS' : 'NOT_EXISTS'}`);
            return exists;
            
        } catch (error) {
            console.error('‚ùå Error checking work history exists:', error);
            return false;
        }
    }

    transformWorkHistoryDataWithSalary(workHistoryData, salaryData) {
        const salaryMap = new Map();
        salaryData.forEach(salary => {
            if (salary.employeeId) {
                salaryMap.set(salary.employeeId, salary.hourlyRate);
            }
        });

        console.log(`üó∫Ô∏è Created salary map with ${salaryMap.size} entries`);
        console.log(`üîç Salary map keys:`, Array.from(salaryMap.keys()));

        return workHistoryData.map(record => {
            const employeeId = record.fields['M√£ nh√¢n vi√™n'] || '';
            const hourlyRateFromSalary = salaryMap.get(employeeId);
            
            console.log(`üí° Employee ${employeeId}: Work history hourlyRate = ${record.fields['M·ª©c l∆∞∆°ng/gi·ªù']}, Salary table hourlyRate = ${hourlyRateFromSalary}`);

            return {
                id: record.record_id,
                employeeId: employeeId,
                requestNo: record.fields['Request No.'] || '',
                fromDate: record.fields['T·ª´ ng√†y'] || null,
                toDate: record.fields['ƒê·∫øn ng√†y'] || null,
                hourlyRate: record.fields['M·ª©c l∆∞∆°ng/gi·ªù'] || hourlyRateFromSalary || null,
                // S·ª¨A: L·∫•y gi√° tr·ªã th·ª±c t·ª´ Lark, kh√¥ng t·ª± t·∫°o m·ªõi
                createdAt: record.fields['Created At'] || null, 
                updatedAt: record.fields['Updated At'] || null
            };
        });
    }

    transformSalaryData(larkData) {
        return larkData.map(record => ({
            id: record.record_id,
            employeeId: this.extractEmployeeId(record.fields['M√£ nh√¢n vi√™n']),
            hourlyRate: record.fields['M·ª©c l∆∞∆°ng/gi·ªù'] || null,
        }));
    }

    /**
     * Bi·∫øn ƒë·ªïi (transform) d·ªØ li·ªáu th√¥ v·ªÅ l·ªãch s·ª≠ c√¥ng t√°c t·ª´ Lark Bitable
     * th√†nh m·ªôt c·∫•u tr√∫c d·ªØ li·ªáu s·∫°ch s·∫Ω, chu·∫©n h√≥a v√† d·ªÖ s·ª≠ d·ª•ng h∆°n trong ·ª©ng d·ª•ng.
     *
     * @param {Array<Object>} larkData - M·∫£ng ch·ª©a c√°c b·∫£n ghi (record) th√¥ t·ª´ API c·ªßa Lark.
     *                                  M·ªói record ch·ª©a m·ªôt thu·ªôc t√≠nh `fields` v·ªõi d·ªØ li·ªáu th·ª±c t·∫ø.
     * @returns {Array<Object>} M·ªôt m·∫£ng m·ªõi ch·ª©a c√°c ƒë·ªëi t∆∞·ª£ng l·ªãch s·ª≠ c√¥ng t√°c ƒë√£ ƒë∆∞·ª£c ƒë·ªãnh d·∫°ng l·∫°i.
     */
    transformWorkHistoryData(larkData) {
        // S·ª≠ d·ª•ng ph∆∞∆°ng th·ª©c `map()` ƒë·ªÉ duy·ªát qua t·ª´ng `record` trong m·∫£ng `larkData` v√† tr·∫£ v·ªÅ m·ªôt m·∫£ng m·ªõi ch·ª©a c√°c ƒë·ªëi t∆∞·ª£ng ƒë√£ ƒë∆∞·ª£c ƒë·ªãnh d·∫°ng l·∫°i.

        return larkData.map(record => {
            // ƒê·ªëi v·ªõi m·ªói record, t·∫°o v√† tr·∫£ v·ªÅ m·ªôt ƒë·ªëi t∆∞·ª£ng m·ªõi v·ªõi c·∫•u tr√∫c ƒë√£ ƒë∆∞·ª£c chu·∫©n h√≥a.
            return {
                id: record.record_id,
                employeeId: record.fields['M√£ nh√¢n vi√™n'] || '',
                requestNo: record.fields['Request No.'] || '',
                fromDate: this.convertTimestampToDateString(record.fields['T·ª´ ng√†y']),
                toDate: this.convertTimestampToDateString(record.fields['ƒê·∫øn ng√†y']),
                hourlyRate: record.fields['M·ª©c l∆∞∆°ng/gi·ªù'] || null,
                createdAt: record.fields['Created At'] || null,
                updatedAt: record.fields['Updated At'] || null
            };
        });
    }

    extractEmployeeId(employeeIdField) {
        if (!employeeIdField) return '';
        
        if (Array.isArray(employeeIdField) && employeeIdField.length > 0) {
            const firstRecord = employeeIdField[0];
            return firstRecord?.text || firstRecord?.name || '';
        }
        
        if (typeof employeeIdField === 'string') {
            return employeeIdField;
        }
        
        if (typeof employeeIdField === 'object' && employeeIdField.text) {
            return employeeIdField.text;
        }
        
        return '';
    }

    // ‚úÖ TH√äM: Helper method
    convertTimestampToDateString(timestamp) {
        if (!timestamp) return null;
        
        try {
            let date;
            
            if (Array.isArray(timestamp) && timestamp.length > 0) {
                date = new Date(timestamp[0]);
            } else if (typeof timestamp === 'number') {
                date = new Date(timestamp);
            } else if (typeof timestamp === 'string') {
                date = new Date(timestamp);
            } else {
                console.warn('‚ö†Ô∏è Unknown timestamp format:', timestamp);
                return null;
            }
            
            if (isNaN(date.getTime())) {
                console.warn('‚ö†Ô∏è Invalid date:', timestamp);
                return null;
            }
            
            return date.toISOString().split('T')[0]; // Return YYYY-MM-DD format
        } catch (error) {
            console.error('‚ùå Error converting timestamp:', error);
            return null;
        }
    }

    transformWorkHistoryForLark(workHistoryData) {
        const larkData = {
            'M√£ nh√¢n vi√™n': workHistoryData.employeeId,
            'Request No.': workHistoryData.requestNo
        };

        // ‚úÖ Convert string date to timestamp
        if (workHistoryData.fromDate) {
            const fromDate = new Date(workHistoryData.fromDate);
            larkData['T·ª´ ng√†y'] = fromDate.getTime(); // Convert to timestamp
        }

        if (workHistoryData.toDate) {
            const toDate = new Date(workHistoryData.toDate);
            larkData['ƒê·∫øn ng√†y'] = toDate.getTime(); // Convert to timestamp
        }

        if (workHistoryData.hourlyRate !== undefined && workHistoryData.hourlyRate !== null) {
            larkData['M·ª©c l∆∞∆°ng/gi·ªù'] = parseFloat(workHistoryData.hourlyRate);
        }

        return larkData;
    }

}


export default WorkHistoryService;
