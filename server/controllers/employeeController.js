// server/controllers/employeeController.js
import larkServiceManager from '../services/lark-service-manager.js';
import { formatResponse } from '../services/utils/response-formatter.js';
import CacheService from '../services/core/cache-service.js';
class EmployeeController {



    /* =================================================================================== */
    /* ======================= API Ch√≠nh - Qu·∫£n l√Ω Nh√¢n vi√™n ======================= */
    /* =================================================================================== */



    /* ======================= Qu·∫£n l√Ω danh s√°ch nh√¢n vi√™n ======================= */
    /**
     * GET: L·∫•y danh s√°ch t·∫•t c·∫£ nh√¢n vi√™n trong h·ªá th·ªëng.
     * - Tr·∫£ v·ªÅ array ch·ª©a th√¥ng tin c∆° b·∫£n c·ªßa t·∫•t c·∫£ nh√¢n vi√™n.
     * - Kh√¥ng c√≥ filter, pagination (l·∫•y t·∫•t c·∫£).
     * @route GET /api/employees
     */
    async getAllEmployees(req, res) {
        try {
            const employeeService = larkServiceManager.getService('employee');
            const employees = await employeeService.getAllEmployees();

            res.json(formatResponse(true, 'L·∫•y danh s√°ch nh√¢n vi√™n th√†nh c√¥ng', employees));
        } catch (error) {
            console.error('‚ùå CONTROLLER: L·ªói khi l·∫•y danh s√°ch nh√¢n vi√™n:', error);
            res.status(500).json(formatResponse(
                false, 
                `Kh√¥ng th·ªÉ t·∫£i danh s√°ch nh√¢n vi√™n: ${error.message}`, 
                null, 
                'EMPLOYEE_LOAD_FAILED'
            ));
        }
    }


    /**
     * GET: T√¨m ki·∫øm nh√¢n vi√™n d·ª±a tr√™n m·ªôt chu·ªói truy v·∫•n.
     * @route GET /api/employees/search
     */
    async searchEmployees(req, res) {
        try {
            const { q } = req.query;
            const employees = await larkServiceManager.searchEmployees(q);
            res.json(formatResponse(true, 'T√¨m ki·∫øm th√†nh c√¥ng', employees));
        } catch (error) {
            console.error('‚ùå Controller: searchEmployees failed:', error);
            res.status(500).json(formatResponse(
                false, 
                `L·ªói khi t√¨m ki·∫øm nh√¢n vi√™n: ${error.message}`, 
                null, 
                'EMPLOYEE_SEARCH_FAILED'
            ));
        }
    }


    /* =======================  Th√™m nh√¢n vi√™n m·ªõi ======================= */
    /**
     * POST: Th√™m nh√¢n vi√™n m·ªõi k√®m theo work history.
     * - T·ª± ƒë·ªông generate employeeId t·ª´ t√™n + SƒêT.
     * - Validate duplicate employeeId tr∆∞·ªõc khi t·∫°o.
     * - Validate work history data (ng√†y th√°ng, overlap, ƒë·ªÅ xu·∫•t tuy·ªÉn d·ª•ng).
     * - Rollback to√†n b·ªô n·∫øu c√≥ l·ªói trong qu√° tr√¨nh t·∫°o.
     * - Transaction-like behavior: t·∫°o employee tr∆∞·ªõc, sau ƒë√≥ t·∫°o work histories.
     * @route POST /api/employees
     */

    async addEmployee(req, res) {
        let createdEmployee = null;
        let createdWorkHistories = [];
        
        try {
            const { fullName, phoneNumber, gender, bankAccount, bankName, workHistoryData } = req.body;
            const employeeId = larkServiceManager.getService('employee').generateEmployeeId(fullName, phoneNumber);
            
            // ‚úÖ STEP 1: Ki·ªÉm tra duplicate tr∆∞·ªõc khi t·∫°o b·∫•t k·ª≥ record n√†o
            const isDuplicate = await larkServiceManager.getService('employee').checkEmployeeIdExists(employeeId);
            if (isDuplicate) {
                return res.status(409).json(formatResponse(
                    false, 
                    'M√£ nh√¢n vi√™n ƒë√£ t·ªìn t·∫°i trong h·ªá th·ªëng', 
                    null, 
                    'DUPLICATE_EMPLOYEE_ID'
                ));
            }

            // ‚úÖ STEP 2: Validate work history TR∆Ø·ªöC KHI t·∫°o employee
            const recruitmentService = larkServiceManager.getService('recruitment');
            const workHistoryService = larkServiceManager.getService('workHistory');
            
            for (const historyEntry of workHistoryData) {
                // Validate work history tr∆∞·ªõc
                const recruitmentDetails = await recruitmentService.getRequestByNo(historyEntry.requestNo);
                if (!recruitmentDetails) {
                    throw new Error(`Kh√¥ng t√¨m th·∫•y ƒë·ªÅ xu·∫•t tuy·ªÉn d·ª•ng v·ªõi m√£: ${historyEntry.requestNo}`);
                }
                
                // Validate ng√†y th√°ng
                workHistoryService.validateWorkHistoryFields({
                    fromDate: historyEntry.fromDate,
                    toDate: historyEntry.toDate,
                    hourlyRate: historyEntry.hourlyRate
                }, recruitmentDetails);
                
                // Validate date overlap
                await workHistoryService.validateWorkHistoryDateOverlap(
                    employeeId, 
                    historyEntry.requestNo, 
                    recruitmentService
                );
            }

            // ‚úÖ STEP 3: N·∫øu validation pass, m·ªõi t·∫°o employee
            const employeeData = {
                employeeId,
                fullName,
                phoneNumber,
                gender,
                bankAccount,
                bankName,
                recruitmentLink: workHistoryData.map(item => item.requestNo).join(', '),
                status: 'active',
                createdAt: new Date().toISOString()
            };

            console.log('‚úÖ All validations passed, creating employee...');
            createdEmployee = await larkServiceManager.addEmployee(employeeData);
            
            // ‚úÖ STEP 4: T·∫°o work history
            console.log('‚úÖ Employee created, creating work histories...');
            const workHistoryResults = [];
            
            for (const historyEntry of workHistoryData) {
                try {
                    const workHistory = await larkServiceManager.addWorkHistory({
                        employeeId,
                        requestNo: historyEntry.requestNo,
                        fromDate: historyEntry.fromDate,
                        toDate: historyEntry.toDate,
                        hourlyRate: historyEntry.hourlyRate
                    });
                    workHistoryResults.push(workHistory);
                    createdWorkHistories.push(workHistory); // Track for rollback
                } catch (workHistoryError) {
                    console.error('‚ùå Work history creation failed:', workHistoryError);
                    
                    // ‚úÖ ROLLBACK: X√≥a employee v√† work histories ƒë√£ t·∫°o
                    await this.rollbackEmployeeCreation(createdEmployee.employee, createdWorkHistories);
                    
                    throw new Error(`L·ªói khi t·∫°o work history: ${workHistoryError.message}`);
                }
            }

            console.log('‚úÖ All work histories created successfully');

            res.json(formatResponse(true, 'Th√™m nh√¢n vi√™n th√†nh c√¥ng', {
                employee: createdEmployee,
                workHistory: workHistoryResults
            }));
            
        } catch (error) {
            console.error('‚ùå Employee creation failed:', error);
            
            // ‚úÖ ROLLBACK n·∫øu c√≥ l·ªói
            if (createdEmployee) {
                await this.rollbackEmployeeCreation(createdEmployee.employee, createdWorkHistories);
            }
            
            // Tr·∫£ v·ªÅ l·ªói c·ª• th·ªÉ cho frontend
            res.status(500).json(formatResponse(
                false, 
                error.message || 'L·ªói h·ªá th·ªëng khi th√™m nh√¢n vi√™n', 
                null, 
                'EMPLOYEE_ADD_FAILED'
            ));
        }
    }


    /* ======================= REGION: C·∫≠p nh·∫≠t th√¥ng tin nh√¢n vi√™n ======================= */
    /**
     * PUT: C·∫≠p nh·∫≠t th√¥ng tin nh√¢n vi√™n.
     * - T·ª± ƒë·ªông t·∫°o l·∫°i employeeId n·∫øu t√™n/SƒêT thay ƒë·ªïi.
     * - N·∫øu employeeId thay ƒë·ªïi, t·ª± ƒë·ªông c·∫≠p nh·∫≠t t·∫•t c·∫£ work history li√™n quan.
     * - Validate employee t·ªìn t·∫°i tr∆∞·ªõc khi update.
     * @route PUT /api/employees/:id
     */

    async updateEmployee(req, res) {
        try {
            const { id } = req.params;
            const { fullName, phoneNumber, gender, bankAccount, bankName, recruitmentLink, status } = req.body;
            
            // ‚úÖ STEP 1: L·∫•y th√¥ng tin employee c≈© tr∆∞·ªõc khi update
            console.log('üìã Getting old employee data for comparison...');
            const oldEmployee = await larkServiceManager.getService('employee').getEmployeeById(id);
            if (!oldEmployee) {
                return res.status(404).json(formatResponse(
                    false, 
                    'Kh√¥ng t√¨m th·∫•y nh√¢n vi√™n c·∫ßn c·∫≠p nh·∫≠t', 
                    null, 
                    'EMPLOYEE_NOT_FOUND'
                ));
            }
            
            const oldEmployeeId = oldEmployee.employeeId;
            
            // ‚úÖ STEP 2: T·∫°o m√£ nh√¢n vi√™n m·ªõi
            const newEmployeeId = larkServiceManager.getService('employee').generateEmployeeId(fullName, phoneNumber);
            
            console.log('üîç Comparing employee IDs:', {
                old: oldEmployeeId,
                new: newEmployeeId,
                changed: oldEmployeeId !== newEmployeeId
            });
            
            // ‚úÖ STEP 3: Update employee data
            const updatedData = {
                employeeId: newEmployeeId,
                fullName,
                phoneNumber,
                gender,
                bankAccount,
                bankName,
                recruitmentLink: recruitmentLink || '',
                status,
                updatedAt: new Date().toISOString()
            };
            
            const employee = await larkServiceManager.updateEmployee(id, updatedData);
            
            // ‚úÖ STEP 4: N·∫øu m√£ nh√¢n vi√™n thay ƒë·ªïi, c·∫≠p nh·∫≠t work history
            if (oldEmployeeId !== newEmployeeId) {
                console.log('üîÑ Employee ID changed, updating work history records...');
                await this.updateWorkHistoryEmployeeId(oldEmployeeId, newEmployeeId);
            }
            
            console.log('‚úÖ Employee updated successfully, clearing cache...');
            
            res.json(formatResponse(true, 'C·∫≠p nh·∫≠t nh√¢n vi√™n th√†nh c√¥ng', { employee }));
            
        } catch (error) {
            console.error('‚ùå Controller: updateEmployee failed:', error);
            res.status(500).json(formatResponse(
                false, 
                `L·ªói khi c·∫≠p nh·∫≠t nh√¢n vi√™n: ${error.message}`, 
                null, 
                'EMPLOYEE_UPDATE_FAILED'
            ));
        }
    }


    /* ======================= REGION: X√≥a nh√¢n vi√™n ======================= */
    /**
     * DELETE: X√≥a nh√¢n vi√™n v√† t·∫•t c·∫£ work history li√™n quan.
     * - Validate employee t·ªìn t·∫°i tr∆∞·ªõc khi x√≥a.
     * - X√≥a t·∫•t c·∫£ work history records tr∆∞·ªõc.
     * - Ch·ªâ x√≥a employee sau khi ƒë√£ x√≥a h·∫øt work history th√†nh c√¥ng.
     * - Fail n·∫øu kh√¥ng th·ªÉ x√≥a h·∫øt work history (ƒë·ªÉ ƒë·∫£m b·∫£o data consistency).
     * @route DELETE /api/employees/:id
     */

    async deleteEmployee(req, res) {
        try {
            const { id } = req.params;
            
            // STEP 1: L·∫•y th√¥ng tin employee tr∆∞·ªõc khi x√≥a
            console.log(`üîç Getting employee info before deletion: ${id}`);
            const employee = await larkServiceManager.getService('employee').getEmployeeById(id);
            
            if (!employee) {
                return res.status(404).json(formatResponse(
                    false, 
                    'Kh√¥ng t√¨m th·∫•y nh√¢n vi√™n c·∫ßn x√≥a', 
                    null, 
                    'EMPLOYEE_NOT_FOUND'
                ));
            }
            
            const employeeId = employee.employeeId;
            console.log(`üë§ Employee to delete: ${employee.fullName} (${employeeId})`);
            
            // STEP 2: L·∫•y danh s√°ch work history c·∫ßn x√≥a
            const workHistoryService = larkServiceManager.getService('workHistory');
            const workHistories = await workHistoryService.getWorkHistoryByEmployee(employeeId);
            
            console.log(`üìã Found ${workHistories.length} work history records to delete`);
            
            // STEP 3: X√≥a t·∫•t c·∫£ work history tr∆∞·ªõc
            const deleteWorkHistoryPromises = workHistories.map(async (wh) => {
                try {
                    await workHistoryService.deleteWorkHistory(wh.id);
                    console.log(`‚úÖ Deleted work history: ${wh.id} (${wh.requestNo})`);
                    return { success: true, id: wh.id };
                } catch (error) {
                    console.error(`‚ùå Failed to delete work history ${wh.id}:`, error);
                    return { success: false, id: wh.id, error: error.message };
                }
            });
            
            const workHistoryResults = await Promise.all(deleteWorkHistoryPromises);
            const failedDeletions = workHistoryResults.filter(r => !r.success);
            
            if (failedDeletions.length > 0) {
                console.error(`‚ùå Failed to delete ${failedDeletions.length} work history records`);
                return res.status(500).json(formatResponse(
                    false,
                    `Kh√¥ng th·ªÉ x√≥a ho√†n to√†n d·ªØ li·ªáu. ${failedDeletions.length} work history records failed to delete.`,
                    { failedDeletions },
                    'WORK_HISTORY_DELETE_FAILED'
                ));
            }
            
            // STEP 4: X√≥a employee sau khi ƒë√£ x√≥a h·∫øt work history
            console.log(`üóëÔ∏è All work histories deleted successfully. Now deleting employee...`);
            await larkServiceManager.deleteEmployee(id);
            
            console.log(`‚úÖ Successfully deleted employee ${employee.fullName} and ${workHistories.length} work history records`);
            
            res.json(formatResponse(
                true, 
                `X√≥a nh√¢n vi√™n "${employee.fullName}" v√† ${workHistories.length} b·∫£n ghi l·ªãch s·ª≠ c√¥ng vi·ªác th√†nh c√¥ng`,
                {
                    deletedEmployee: employee.fullName,
                    deletedWorkHistories: workHistories.length
                }
            ));
            
        } catch (error) {
            console.error('‚ùå Controller: deleteEmployee failed:', error);
            res.status(500).json(formatResponse(
                false, 
                `L·ªói khi x√≥a nh√¢n vi√™n: ${error.message}`, 
                null, 
                'EMPLOYEE_DELETE_FAILED'
            ));
        }
    }


    /* ======================================================================================== */
    /* ======================= REGION: API Ch√≠nh - Qu·∫£n l√Ω L·ªãch s·ª≠ c√¥ng vi·ªác ======================= */
    /* ======================================================================================== */


    /** Get employee work history
     * @route GET /api/employees/:employeeId/work-history
     */
    async getEmployeeWorkHistory(req, res) {
        try {
            const { employeeId } = req.params;
            const workHistory = await larkServiceManager.getWorkHistoryByEmployee(employeeId);
            res.json(formatResponse(true, 'L·∫•y l·ªãch s·ª≠ l√†m vi·ªác th√†nh c√¥ng', workHistory));
        } catch (error) {
            console.error('‚ùå Controller: getEmployeeWorkHistory failed:', error);
            res.status(500).json(formatResponse(
                false, 
                `L·ªói khi l·∫•y l·ªãch s·ª≠ l√†m vi·ªác: ${error.message}`, 
                null, 
                'WORK_HISTORY_LOAD_FAILED'
            ));
        }
    }


    /** Add work history for employee
     * @route POST /api/employees/work-history
     */
    async addWorkHistory(req, res) {
        try {
            
            // ‚úÖ C·∫¨P NH·∫¨T: Nh·∫≠n th√™m c√°c tr∆∞·ªùng m·ªõi t·ª´ request body
            const { employeeId, requestNo, fromDate, toDate, hourlyRate } = req.body;

            CacheService.clear();

            if (!employeeId || !requestNo) {
                return res.status(400).json(formatResponse(
                    false, 
                    'Thi·∫øu th√¥ng tin b·∫Øt bu·ªôc: employeeId v√† requestNo', 
                    null, 
                    'VALIDATION_ERROR'
                ));
            }
            
            // ‚úÖ C·∫¨P NH·∫¨T: Truy·ªÅn t·∫•t c·∫£ c√°c tr∆∞·ªùng v√†o addWorkHistory
            const workHistory = await larkServiceManager.addWorkHistory({
                employeeId,
                requestNo,
                fromDate,
                toDate,
                hourlyRate
            });
            
            res.json(formatResponse(true, 'Th√™m work history th√†nh c√¥ng', { workHistory }));
            
        } catch (error) {
            console.error('‚ùå Controller: addWorkHistory failed:', error);

            // ‚úÖ C·∫¨P NH·∫¨T: X·ª≠ l√Ω c√°c lo·∫°i l·ªói c·ª• th·ªÉ t·ª´ validation m·ªõi
            if (error.message.includes('b·ªã tr√πng v·ªõi l·ªãch s·ª≠ l√†m vi·ªác c≈©')) {
                return res.status(409).json(formatResponse(
                    false,
                    error.message,
                    null,
                    'DATE_OVERLAP_CONFLICT'
                ));
            }

            if (error.message.includes('ph·∫£i n·∫±m trong kho·∫£ng ng√†y c·ªßa ƒë·ªÅ xu·∫•t tuy·ªÉn d·ª•ng')) {
                return res.status(400).json(formatResponse(
                    false,
                    error.message,
                    null,
                    'INVALID_DATE_RANGE'
                ));
            }

            if (error.message.includes('T·ª´ ng√†y v√† ƒê·∫øn ng√†y l√† b·∫Øt bu·ªôc') || 
                error.message.includes('ƒê·∫øn ng√†y ph·∫£i l·ªõn h∆°n ho·∫∑c b·∫±ng T·ª´ ng√†y')) {
                return res.status(400).json(formatResponse(
                    false,
                    error.message,
                    null,
                    'VALIDATION_ERROR'
                ));
            }

            res.status(500).json(formatResponse(
                false, 
                `L·ªói khi th√™m work history: ${error.message}`, 
                null, 
                'WORK_HISTORY_ADD_FAILED'
            ));
        }
    }


    // Update work history
    /**
     * Update work history entry
     * @route PUT /api/employees/work-history/:id
     */
    async updateWorkHistory(req, res) {
        try {
            const { id } = req.params;
            const { employeeId, requestNo, fromDate, toDate, hourlyRate } = req.body;
            
            if (!employeeId || !requestNo) {
                return res.status(400).json(formatResponse(
                    false, 
                    'Thi·∫øu th√¥ng tin b·∫Øt bu·ªôc: employeeId v√† requestNo', 
                    null, 
                    'VALIDATION_ERROR'
                ));
            }
            
            console.log(`üìù CONTROLLER: Updating work history ID: ${id}...`);
            
            const workHistoryService = larkServiceManager.getService('workHistory');
            const updatedWorkHistory = await workHistoryService.updateWorkHistory(id, {
                employeeId,
                requestNo,
                fromDate,
                toDate,
                hourlyRate
            });
            
            console.log('‚úÖ CONTROLLER: Work history updated successfully');
            
            res.json(formatResponse(true, 'C·∫≠p nh·∫≠t l·ªãch s·ª≠ c√¥ng vi·ªác th√†nh c√¥ng', { workHistory: updatedWorkHistory }));
            
        } catch (error) {
            console.error('‚ùå Controller: updateWorkHistory failed:', error);

            // X·ª≠ l√Ω c√°c lo·∫°i l·ªói c·ª• th·ªÉ
            if (error.message.includes('b·ªã tr√πng v·ªõi l·ªãch s·ª≠ l√†m vi·ªác c≈©')) {
                return res.status(409).json(formatResponse(
                    false,
                    error.message,
                    null,
                    'DATE_OVERLAP_CONFLICT'
                ));
            }

            if (error.message.includes('ph·∫£i n·∫±m trong kho·∫£ng ng√†y c·ªßa ƒë·ªÅ xu·∫•t tuy·ªÉn d·ª•ng')) {
                return res.status(400).json(formatResponse(
                    false,
                    error.message,
                    null,
                    'INVALID_DATE_RANGE'
                ));
            }

            if (error.message.includes('T·ª´ ng√†y v√† ƒê·∫øn ng√†y l√† b·∫Øt bu·ªôc') || 
                error.message.includes('ƒê·∫øn ng√†y ph·∫£i l·ªõn h∆°n ho·∫∑c b·∫±ng T·ª´ ng√†y')) {
                return res.status(400).json(formatResponse(
                    false,
                    error.message,
                    null,
                    'VALIDATION_ERROR'
                ));
            }

            res.status(500).json(formatResponse(
                false, 
                `L·ªói khi c·∫≠p nh·∫≠t work history: ${error.message}`, 
                null, 
                'WORK_HISTORY_UPDATE_FAILED'
            ));
        }
    }


    // Delete work history
    /**
     * Delete work history entry
     * @route DELETE /api/employees/work-history/:id
     */
    async deleteWorkHistory(req, res) {
        try {
            const { id } = req.params;
            
            console.log(`üóëÔ∏è CONTROLLER: Deleting work history ID: ${id}...`);
            
            const workHistoryService = larkServiceManager.getService('workHistory');
            await workHistoryService.deleteWorkHistory(id);
            
            console.log('‚úÖ CONTROLLER: Work history deleted successfully');
            
            res.json(formatResponse(true, 'X√≥a l·ªãch s·ª≠ c√¥ng vi·ªác th√†nh c√¥ng'));
            
        } catch (error) {
            console.error('‚ùå Controller: deleteWorkHistory failed:', error);
            res.status(500).json(formatResponse(
                false, 
                `L·ªói khi x√≥a work history: ${error.message}`, 
                null, 
                'WORK_HISTORY_DELETE_FAILED'
            ));
        }
    }


    /* =========================================================================== */
    /* ======================= REGION: H√†m ph·ª• tr·ª£ (Utilities) ======================= */
    /* =========================================================================== */


    /**
     * UTILITY: Rollback khi t·∫°o nh√¢n vi√™n th·∫•t b·∫°i.
     * - X√≥a c√°c work history records ƒë√£ t·∫°o th√†nh c√¥ng.
     * - X√≥a employee record n·∫øu ƒë√£ t·∫°o.
     * - ƒê·∫£m b·∫£o data consistency khi c√≥ l·ªói x·∫£y ra.
     */
    async rollbackEmployeeCreation(employee, createdWorkHistories) {
        console.log('üîÑ ROLLBACK: Starting cleanup...');
        
        try {
            // X√≥a work histories ƒë√£ t·∫°o
            for (const workHistory of createdWorkHistories) {
                if (workHistory && workHistory.larkResponse && workHistory.larkResponse.data) {
                    try {
                        await larkServiceManager.getService('workHistory').deleteWorkHistory(
                            workHistory.larkResponse.data.record.record_id
                        );
                        console.log('‚úÖ ROLLBACK: Deleted work history', workHistory.larkResponse.data.record.record_id);
                    } catch (whDeleteError) {
                        console.error('‚ùå ROLLBACK: Failed to delete work history', whDeleteError);
                    }
                }
            }
            
            // X√≥a employee
            if (employee && employee.larkResponse && employee.larkResponse.data) {
                try {
                    await larkServiceManager.getService('employee').deleteEmployee(
                        employee.larkResponse.data.record_id
                    );
                    console.log('‚úÖ ROLLBACK: Deleted employee', employee.larkResponse.data.record_id);
                } catch (empDeleteError) {
                    console.error('‚ùå ROLLBACK: Failed to delete employee', empDeleteError);
                }
            }
            
            console.log('‚úÖ ROLLBACK: Cleanup completed');
        } catch (rollbackError) {
            console.error('‚ùå ROLLBACK: Critical error during cleanup:', rollbackError);
        }
    }


    /** UTILITY: C·∫≠p nh·∫≠t employeeId trong c√°c work history records.
     * - ƒê∆∞·ª£c g·ªçi khi employeeId thay ƒë·ªïi sau khi update employee.
     * - T√¨m t·∫•t c·∫£ work history c·ªßa employee c≈© v√† c·∫≠p nh·∫≠t sang ID m·ªõi.
     * - Log k·∫øt qu·∫£ nh∆∞ng kh√¥ng fail n·∫øu m·ªôt s·ªë records update l·ªói.
     */

    async updateWorkHistoryEmployeeId(oldEmployeeId, newEmployeeId) {
        try {
            console.log(`üîÑ Updating work history: ${oldEmployeeId} -> ${newEmployeeId}`);
            
            const workHistoryService = larkServiceManager.getService('workHistory');
            
            // L·∫•y t·∫•t c·∫£ work history c·ªßa employee c≈©
            const workHistories = await workHistoryService.getWorkHistoryByEmployee(oldEmployeeId);
            
            if (workHistories.length === 0) {
                console.log('‚ÑπÔ∏è No work history records to update');
                return;
            }
            
            console.log(`üìã Found ${workHistories.length} work history records to update`);
            
            // C·∫≠p nh·∫≠t t·ª´ng record
            const updatePromises = workHistories.map(async (workHistory) => {
                try {
                    await workHistoryService.updateWorkHistory(workHistory.id, {
                        employeeId: newEmployeeId,
                        requestNo: workHistory.requestNo,
                        fromDate: workHistory.fromDate,
                        toDate: workHistory.toDate,
                        hourlyRate: workHistory.hourlyRate
                    });
                    
                    console.log(`‚úÖ Updated work history record: ${workHistory.id}`);
                    return { success: true, id: workHistory.id };
                } catch (updateError) {
                    console.error(`‚ùå Failed to update work history ${workHistory.id}:`, updateError);
                    return { success: false, id: workHistory.id, error: updateError.message };
                }
            });
            
            const results = await Promise.all(updatePromises);
            
            const successCount = results.filter(r => r.success).length;
            const failedCount = results.length - successCount;
            
            console.log(`üìä Work history update results: ${successCount} success, ${failedCount} failed`);
            
            if (failedCount > 0) {
                const failedIds = results.filter(r => !r.success).map(r => r.id);
                console.warn('‚ö†Ô∏è Some work history records failed to update:', failedIds);
                // C√≥ th·ªÉ log warning nh∆∞ng kh√¥ng throw error ƒë·ªÉ kh√¥ng l√†m fail employee update
            }
            
        } catch (error) {
            console.error('‚ùå Critical error updating work history employee IDs:', error);
            // Log error nh∆∞ng kh√¥ng throw ƒë·ªÉ kh√¥ng l√†m fail employee update
        }
    }

}


/* ======================================================================== */
/* ======================= REGION: Kh·ªüi t·∫°o v√† Export ======================= */
/* ======================================================================== */


// Export instance methods
const employeeController = new EmployeeController();

export const getAllEmployees = employeeController.getAllEmployees.bind(employeeController);
export const addEmployee = employeeController.addEmployee.bind(employeeController);
export const updateEmployee = employeeController.updateEmployee.bind(employeeController);
export const deleteEmployee = employeeController.deleteEmployee.bind(employeeController);
export const searchEmployees = employeeController.searchEmployees.bind(employeeController);
export const getEmployeeWorkHistory = employeeController.getEmployeeWorkHistory.bind(employeeController);
export const addWorkHistory = employeeController.addWorkHistory.bind(employeeController);
// ‚úÖ TH√äM M·ªöI: Export 2 methods m·ªõi
export const updateWorkHistory = employeeController.updateWorkHistory.bind(employeeController);
export const deleteWorkHistory = employeeController.deleteWorkHistory.bind(employeeController);
