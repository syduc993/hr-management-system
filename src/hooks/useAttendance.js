// src/hooks/useAttendance.js
import { useState, useCallback } from 'react';
import { useNotification } from './useNotification';
import api from '../services/api';

export function useAttendance() {
    const [loading, setLoading] = useState(false);
    const [error, setError] = useState(null);
    const { showNotification } = useNotification();

    // ‚úÖ C·∫¨P NH·∫¨T: L·∫•y logs ch·∫•m c√¥ng v·ªõi filters n√¢ng cao
    const getAttendanceLogs = useCallback(async (filters = {}) => {
        try {
            setLoading(true);
            setError(null);
            
            console.log('üîÑ useAttendance: Getting attendance logs with filters:', filters);
            
            const response = await api.get('/attendance/logs', {
                params: filters
            });
            
            console.log('‚úÖ useAttendance: Attendance logs loaded:', response.data.data?.length || 0, 'records');
            
            return {
                success: true,
                data: response.data.data || [],
                message: response.data.message
            };
            
        } catch (error) {
            console.error('‚ùå useAttendance: Error getting attendance logs:', error);
            const errorMessage = error.response?.data?.message || 'L·ªói khi t·∫£i logs ch·∫•m c√¥ng';
            setError(errorMessage);
            
            return {
                success: false,
                data: [],
                message: errorMessage
            };
        } finally {
            setLoading(false);
        }
    }, []);

    // ‚úÖ C·∫¨P NH·∫¨T: L·∫•y t·ªïng gi·ªù c√¥ng v·ªõi format m·ªõi  
    const getEmployeeHours = useCallback(async () => {
        try {
            setLoading(true);
            setError(null);
            
            console.log('üìä useAttendance: Getting employee hours...');
            
            const response = await api.get('/api/attendance/employee-hours');
            
            console.log('üîç useAttendance RAW RESPONSE:', response);
            console.log('üîç response.data:', response.data);
            console.log('üîç response.data.data:', response.data.data);
            console.log('üîç employeeHours array:', response.data.data?.employeeHours);
            console.log('üîç employeeHours length:', response.data.data?.employeeHours?.length);
            
            return {
                success: true,
                // ‚úÖ S·ª¨A: Thay response.data.data th√†nh response.data
                data: response.data || { employeeHours: [], summary: {} },
                message: response.data.message
            };
            
        } catch (error) {
            // error handling
        } finally {
            setLoading(false);
        }
    }, []);



    // ‚úÖ TH√äM M·ªöI: L·∫•y th·ªëng k√™ ch·∫•m c√¥ng
    const getAttendanceStats = useCallback(async (filters = {}) => {
        try {
            setLoading(true);
            setError(null);
            
            console.log('üìà useAttendance: Getting attendance stats...');
            
            const response = await api.get('/attendance/stats', {
                params: filters
            });
            
            console.log('‚úÖ useAttendance: Attendance stats loaded:', response.data.data);
            
            return {
                success: true,
                data: response.data.data || {},
                message: response.data.message
            };
            
        } catch (error) {
            console.error('‚ùå useAttendance: Error getting attendance stats:', error);
            const errorMessage = error.response?.data?.message || 'L·ªói khi t·∫£i th·ªëng k√™ ch·∫•m c√¥ng';
            setError(errorMessage);
            
            return {
                success: false,
                data: {},
                message: errorMessage
            };
        } finally {
            setLoading(false);
        }
    }, []);

    // ‚úÖ TH√äM M·ªöI: L·∫•y gi·ªù c√¥ng chi ti·∫øt c·ªßa m·ªôt nh√¢n vi√™n
    const getEmployeeDetailedHours = useCallback(async (employeeId, filters = {}) => {
        try {
            setLoading(true);
            setError(null);
            
            console.log('üë§ useAttendance: Getting detailed hours for employee:', employeeId);
            
            const response = await api.get(`/attendance/employee/${employeeId}/detailed`, {
                params: filters
            });
            
            console.log('‚úÖ useAttendance: Employee detailed hours loaded:', response.data.data);
            
            return {
                success: true,
                data: response.data.data || {},
                message: response.data.message
            };
            
        } catch (error) {
            console.error('‚ùå useAttendance: Error getting employee detailed hours:', error);
            const errorMessage = error.response?.data?.message || 'L·ªói khi t·∫£i gi·ªù c√¥ng chi ti·∫øt';
            setError(errorMessage);
            
            return {
                success: false,
                data: {},
                message: errorMessage
            };
        } finally {
            setLoading(false);
        }
    }, []);

    // ‚úÖ C·∫¨P NH·∫¨T: Th√™m log ch·∫•m c√¥ng v·ªõi validation m·ªõi
    const addAttendanceLog = useCallback(async (attendanceData) => {
        try {
            setLoading(true);
            setError(null);
            
            // Validate required fields
            const validationErrors = validateAttendanceData(attendanceData);
            if (validationErrors.length > 0) {
                throw new Error(validationErrors.join(', '));
            }
            
            console.log('‚ûï useAttendance: Adding attendance log:', attendanceData);
            
            const response = await api.post('/attendance/logs', attendanceData);
            
            console.log('‚úÖ useAttendance: Attendance log added successfully');
            showNotification('Th√™m b·∫£n ghi ch·∫•m c√¥ng th√†nh c√¥ng', 'success');
            
            return {
                success: true,
                data: response.data.data,
                message: response.data.message
            };
            
        } catch (error) {
            console.error('‚ùå useAttendance: Error adding attendance log:', error);
            const errorMessage = error.response?.data?.message || error.message || 'L·ªói khi th√™m b·∫£n ghi ch·∫•m c√¥ng';
            setError(errorMessage);
            showNotification(errorMessage, 'error');
            
            return {
                success: false,
                data: null,
                message: errorMessage
            };
        } finally {
            setLoading(false);
        }
    }, [showNotification]);

    // ‚úÖ TH√äM M·ªöI: C·∫≠p nh·∫≠t log ch·∫•m c√¥ng  
    const updateAttendanceLog = useCallback(async (id, attendanceData) => {
        try {
            setLoading(true);
            setError(null);
            
            console.log('üìù useAttendance: Updating attendance log:', id, attendanceData);
            
            const response = await api.put(`/attendance/logs/${id}`, attendanceData);
            
            console.log('‚úÖ useAttendance: Attendance log updated successfully');
            showNotification('C·∫≠p nh·∫≠t b·∫£n ghi ch·∫•m c√¥ng th√†nh c√¥ng', 'success');
            
            return {
                success: true,
                data: response.data.data,
                message: response.data.message
            };
            
        } catch (error) {
            console.error('‚ùå useAttendance: Error updating attendance log:', error);
            const errorMessage = error.response?.data?.message || 'L·ªói khi c·∫≠p nh·∫≠t b·∫£n ghi ch·∫•m c√¥ng';
            setError(errorMessage);
            showNotification(errorMessage, 'error');
            
            return {
                success: false,
                data: null,
                message: errorMessage
            };
        } finally {
            setLoading(false);
        }
    }, [showNotification]);

    // ‚úÖ TH√äM M·ªöI: X√≥a log ch·∫•m c√¥ng
    const deleteAttendanceLog = useCallback(async (id) => {
        try {
            setLoading(true);
            setError(null);
            
            console.log('üóëÔ∏è useAttendance: Deleting attendance log:', id);
            
            await api.delete(`/attendance/logs/${id}`);
            
            console.log('‚úÖ useAttendance: Attendance log deleted successfully');
            showNotification('X√≥a b·∫£n ghi ch·∫•m c√¥ng th√†nh c√¥ng', 'success');
            
            return {
                success: true,
                message: 'X√≥a b·∫£n ghi ch·∫•m c√¥ng th√†nh c√¥ng'
            };
            
        } catch (error) {
            console.error('‚ùå useAttendance: Error deleting attendance log:', error);
            const errorMessage = error.response?.data?.message || 'L·ªói khi x√≥a b·∫£n ghi ch·∫•m c√¥ng';
            setError(errorMessage);
            showNotification(errorMessage, 'error');
            
            return {
                success: false,
                message: errorMessage
            };
        } finally {
            setLoading(false);
        }
    }, [showNotification]);

    // ‚úÖ TH√äM M·ªöI: Refresh cache
    const refreshAttendanceData = useCallback(async () => {
        try {
            setLoading(true);
            console.log('üîÑ useAttendance: Refreshing attendance data...');
            
            // Call c√°c API ƒë·ªÉ refresh cache
            await Promise.all([
                getAttendanceLogs(),
                getEmployeeHours()
            ]);
            
            showNotification('L√†m m·ªõi d·ªØ li·ªáu th√†nh c√¥ng', 'success');
            
        } catch (error) {
            console.error('‚ùå useAttendance: Error refreshing data:', error);
            showNotification('L·ªói khi l√†m m·ªõi d·ªØ li·ªáu', 'error');
        } finally {
            setLoading(false);
        }
    }, [getAttendanceLogs, getEmployeeHours, showNotification]);

    // ‚úÖ HELPER: Export d·ªØ li·ªáu ra CSV
    const exportAttendanceToCSV = useCallback((data, filename = 'attendance_export') => {
        try {
            if (!data || data.length === 0) {
                showNotification('Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ xu·∫•t', 'warning');
                return false;
            }

            const headers = Object.keys(data[0]);
            const csvContent = [
                headers.join(','),
                ...data.map(row => 
                    headers.map(header => {
                        const value = row[header];
                        // Escape commas and quotes in CSV
                        if (typeof value === 'string' && (value.includes(',') || value.includes('"'))) {
                            return `"${value.replace(/"/g, '""')}"`;
                        }
                        return value || '';
                    }).join(',')
                )
            ].join('\n');

            const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
            const link = document.createElement('a');
            link.href = URL.createObjectURL(blob);
            link.download = `${filename}_${new Date().toISOString().split('T')[0]}.csv`;
            link.click();
            
            showNotification('Xu·∫•t file CSV th√†nh c√¥ng', 'success');
            return true;
            
        } catch (error) {
            console.error('‚ùå useAttendance: Error exporting CSV:', error);
            showNotification('L·ªói khi xu·∫•t file CSV', 'error');
            return false;
        }
    }, [showNotification]);

    return {
        // State
        loading,
        error,
        
        // Main functions
        getAttendanceLogs,
        getEmployeeHours,
        addAttendanceLog,
        updateAttendanceLog,
        deleteAttendanceLog,
        
        // New functions
        getAttendanceStats,
        getEmployeeDetailedHours,
        refreshAttendanceData,
        exportAttendanceToCSV,
        
        // Utility functions
        clearError: () => setError(null)
    };
}

// ‚úÖ HELPER: Validate d·ªØ li·ªáu ch·∫•m c√¥ng
function validateAttendanceData(data) {
    const errors = [];
    
    if (!data.employeeId?.trim()) {
        errors.push('M√£ nh√¢n vi√™n l√† b·∫Øt bu·ªôc');
    }
    
    if (!data.type || !['Checkin', 'Checkout'].includes(data.type)) {
        errors.push('Ph√¢n lo·∫°i ph·∫£i l√† Checkin ho·∫∑c Checkout');
    }
    
    if (!data.position?.trim()) {
        errors.push('V·ªã tr√≠ l√† b·∫Øt bu·ªôc');
    }
    
    // Validate position values
    const validPositions = ['Nh√¢n vi√™n B√°n h√†ng', 'Nh√¢n vi√™n Thu ng√¢n', 'Nh√¢n vi√™n Ti·∫øp ƒë√≥n', 'Nh√¢n vi√™n Mascot'];
    if (data.position && !validPositions.includes(data.position)) {
        errors.push(`V·ªã tr√≠ ph·∫£i l√† m·ªôt trong: ${validPositions.join(', ')}`);
    }
    
    if (!data.timestamp) {
        errors.push('Th·ªùi gian ch·∫•m c√¥ng l√† b·∫Øt bu·ªôc');
    } else {
        const timestamp = new Date(data.timestamp);
        if (isNaN(timestamp.getTime())) {
            errors.push('Th·ªùi gian ch·∫•m c√¥ng kh√¥ng h·ª£p l·ªá');
        }
    }
    
    return errors;
}

// ‚úÖ HELPER: Format d·ªØ li·ªáu cho API
export function formatAttendanceForAPI(formData) {
    return {
        employeeId: formData.employeeId?.trim() || '',
        type: formData.type || 'Checkin',
        position: formData.position?.trim() || '',
        timestamp: formData.timestamp || new Date().toISOString(),
        notes: formData.notes?.trim() || ''
    };
}

// ‚úÖ HELPER: Parse response t·ª´ API
export function parseAttendanceResponse(response) {
    if (!response || !response.data) {
        return { success: false, data: null, message: 'Invalid response' };
    }
    
    return {
        success: response.success || false,
        data: response.data || null,
        message: response.message || '',
        errorCode: response.errorCode || null
    };
}

export default useAttendance;
