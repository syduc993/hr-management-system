import React, { useState, useMemo } from 'react';
import { useEmployees } from '../hooks/useEmployees';

// Import c√°c components con
import EmployeeList from '../components/employee/EmployeeList.jsx';
import EmployeeAddForm from '../components/employee/EmployeeAddForm.jsx';
import EmployeeEditModal from '../components/employee/EmployeeEditModal.jsx';
// ‚úÖ TH√äM: Import c√°c modal cho Work History
import AddWorkHistoryModal from '../components/employee/AddWorkHistoryModal.jsx';
import WorkHistoryModal from '../components/employee/WorkHistoryModal.jsx';
import Loading from '../components/common/Loading.jsx';
import Alert from '../components/common/Alert.jsx';

const EmployeeManagementPage = () => {
  const {
    employees,
    loading,
    error,
    addEmployee,
    updateEmployee,
    deleteEmployee,
    refreshEmployees,
  } = useEmployees();

  // State cho modal ch·ªânh s·ª≠a
  const [isEditModalOpen, setIsEditModalOpen] = useState(false);
  const [selectedEmployee, setSelectedEmployee] = useState(null);

  // ‚úÖ C·∫¨P NH·∫¨T: State cho c√°c modal Work History
  const [isAddWorkHistoryModalOpen, setAddWorkHistoryModalOpen] = useState(false);
  const [isManageWorkHistoryModalOpen, setManageWorkHistoryModalOpen] = useState(false); // ‚úÖ THAY ƒê·ªîI: ƒê·ªïi t√™n t·ª´ isViewWorkHistoryModalOpen
  const [employeeForHistory, setEmployeeForHistory] = useState(null);
  
  // State cho t√¨m ki·∫øm v√† b·ªô l·ªçc
  const [searchTerm, setSearchTerm] = useState('');
  const [statusFilter, setStatusFilter] = useState('');

  const filteredEmployees = useMemo(() => {
    // ... (Gi·ªØ nguy√™n logic l·ªçc)
    let filtered = employees;
    if (searchTerm) {
      const lowerCaseSearchTerm = searchTerm.toLowerCase();
      filtered = filtered.filter(
        (employee) =>
          employee.fullName.toLowerCase().includes(lowerCaseSearchTerm) ||
          employee.employeeId.toLowerCase().includes(lowerCaseSearchTerm) ||
          (employee.phoneNumber && employee.phoneNumber.includes(searchTerm))
      );
    }
    if (statusFilter) {
      filtered = filtered.filter((employee) => employee.status === statusFilter);
    }
    return filtered;
  }, [employees, searchTerm, statusFilter]);

  // C√°c h√†m x·ª≠ l√Ω s·ª± ki·ªán cho Nh√¢n vi√™n
  const handleOpenEditModal = (employee) => {
    setSelectedEmployee(employee);
    setIsEditModalOpen(true);
  };
  
  const handleUpdateEmployee = async (employeeData) => {
    if (!selectedEmployee) return;
    const success = await updateEmployee(selectedEmployee.id, employeeData);
    if (success) {
      setIsEditModalOpen(false);
      setSelectedEmployee(null);
    }
  };

  const handleDeleteEmployee = async (id) => {
    await deleteEmployee(id);
  };

  const handleAddEmployee = async (formData) => {
    return await addEmployee(formData);
  };

  // ‚úÖ C·∫¨P NH·∫¨T: C√°c h√†m x·ª≠ l√Ω cho Work History
  const handleOpenAddWorkHistoryModal = (employee) => {
    setEmployeeForHistory(employee);
    setAddWorkHistoryModalOpen(true);
  };

  // ‚úÖ THAY ƒê·ªîI: ƒê·ªïi t√™n function
  const handleOpenManageWorkHistoryModal = (employee) => {
    setEmployeeForHistory(employee);
    setManageWorkHistoryModalOpen(true); // ‚úÖ THAY ƒê·ªîI: S·ª≠ d·ª•ng state m·ªõi
  };
  

  // ‚úÖ TH√äM: H√†m refresh data sau khi s·ª≠a work history
  const handleWorkHistoryUpdated = async () => {
    console.log('üîÑ Work history updated, refreshing employee data...');
    await refreshEmployees();
  };

  const handleCloseModals = () => {
    setAddWorkHistoryModalOpen(false);
    setManageWorkHistoryModalOpen(false); // ‚úÖ THAY ƒê·ªîI: C·∫≠p nh·∫≠t state m·ªõi
    setEmployeeForHistory(null);
  };

  // H√†m n√†y s·∫Ω ƒë∆∞·ª£c g·ªçi khi th√™m Work History th√†nh c√¥ng t·ª´ modal
  const handleSaveWorkHistory = () => {
    refreshEmployees(); // T·∫£i l·∫°i danh s√°ch ƒë·ªÉ c·∫≠p nh·∫≠t (n·∫øu c·∫ßn)
    handleCloseModals();
  };

  const handleWorkHistoryDataChanged = () => {
    console.log('Work history ƒë√£ thay ƒë·ªïi, ƒëang refresh...');
    // G·ªçi l·∫°i API ƒë·ªÉ fetch data nh√¢n vi√™n m·ªõi
    refreshEmployees(); // Ho·∫∑c t√™n h√†m fetch data c·ªßa b·∫°n
  };


  return (
    <div className="container-fluid mt-4">
      <div className="page-header d-flex justify-content-between align-items-center mb-3">
        <h2>Qu·∫£n l√Ω Nh√¢n vi√™n</h2>
      </div>
      
      <div className="row">
        <div className="col-lg-5 mb-4">
          <EmployeeAddForm onSave={handleAddEmployee} isLoading={loading} />
        </div>
        <div className="col-lg-7">
          <div className="card">
            <div className="card-header">
              <h5 className="card-title mb-0">Danh s√°ch nh√¢n vi√™n</h5>
            </div>
            <div className="card-body">
              <div className="row mb-3">
                <div className="col-md-8">
                  <input
                    type="text"
                    className="form-control"
                    placeholder="T√¨m ki·∫øm theo t√™n, m√£ NV, SƒêT..."
                    value={searchTerm}
                    onChange={(e) => setSearchTerm(e.target.value)}
                  />
                </div>
                <div className="col-md-4">
                  <select
                    className="form-select"
                    value={statusFilter}
                    onChange={(e) => setStatusFilter(e.target.value)}
                  >
                    <option value="">T·∫•t c·∫£ tr·∫°ng th√°i</option>
                    <option value="active">Ho·∫°t ƒë·ªông</option>
                    <option value="inactive">Ng∆∞ng ho·∫°t ƒë·ªông</option>
                  </select>
                </div>
              </div>

              {loading && !error && <Loading />}
              {error && <Alert message={`L·ªói: ${error}`} type="danger" onRetry={refreshEmployees} />}
              
              {!loading && !error && (
                <EmployeeList
                  employees={filteredEmployees}
                  onEdit={handleOpenEditModal}
                  onDelete={handleDeleteEmployee}
                  // ‚úÖ C·∫¨P NH·∫¨T: Truy·ªÅn c√°c h√†m x·ª≠ l√Ω Work History v·ªõi t√™n m·ªõi
                  onAddWorkHistory={handleOpenAddWorkHistoryModal}
                  onManageWorkHistory={handleOpenManageWorkHistoryModal} // ‚úÖ THAY ƒê·ªîI: ƒê·ªïi t√™n prop
                />
              )}
            </div>
          </div>
        </div>
      </div>

      {/* Modal ch·ªânh s·ª≠a nh√¢n vi√™n */}
      {isEditModalOpen && selectedEmployee && (
        <EmployeeEditModal
          isOpen={isEditModalOpen}
          onClose={() => setIsEditModalOpen(false)}
          onSave={handleUpdateEmployee}
          employee={selectedEmployee}
        />
      )}

      {/* ‚úÖ C·∫¨P NH·∫¨T: Render c√°c modal cho Work History */}
      {isAddWorkHistoryModalOpen && employeeForHistory && (
        <AddWorkHistoryModal
          isOpen={isAddWorkHistoryModalOpen}
          onClose={handleCloseModals}
          onSave={handleSaveWorkHistory}
          employee={employeeForHistory}
        />
      )}
      
      {/* ‚úÖ THAY ƒê·ªîI: S·ª≠ d·ª•ng WorkHistoryModal CRUD v·ªõi state v√† props m·ªõi */}
      {isManageWorkHistoryModalOpen && employeeForHistory && (
        <WorkHistoryModal
          isOpen={isManageWorkHistoryModalOpen}
          onClose={handleCloseModals}
          onDataUpdated={handleWorkHistoryUpdated}
          employeeId={employeeForHistory.employeeId}
          employeeName={employeeForHistory.fullName}
          onDataChanged={handleWorkHistoryDataChanged}
        />
      )}
    </div>
  );
};

export default EmployeeManagementPage;
