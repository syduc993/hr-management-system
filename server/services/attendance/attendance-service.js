// server/services/attendance/attendance-service.js
import BaseService from '../core/base-service.js';
import LarkClient from '../core/lark-client.js';
import CacheService from '../core/cache-service.js';
import TimezoneService from '../core/timezone-service.js'; // ‚úÖ TH√äM: Import TimezoneService

/**
 * @class AttendanceService
 * @description Qu·∫£n l√Ω t·∫•t c·∫£ c√°c nghi·ªáp v·ª• li√™n quan ƒë·∫øn ch·∫•m c√¥ng,
 * bao g·ªìm l·∫•y d·ªØ li·ªáu t·ª´ Lark Base, th√™m b·∫£n ghi m·ªõi, v√† t√≠nh to√°n gi·ªù l√†m.
 */
class AttendanceService extends BaseService {
    constructor() {
        super();
        this.baseId = process.env.LARK_BASE_ID;
        this.tableId = process.env.LARK_ATTENDANCE_TABLE_ID;
    }

    async initializeService() {
        console.log('Initializing Attendance Service...');
    }

    // =================================================================
    //  PUBLIC API METHODS - C√ÅC H√ÄM CUNG C·∫§P RA B√äN NGO√ÄI
    // =================================================================

    /** L·∫•y danh s√°ch b·∫£n ghi ch·∫•m c√¥ng t·ª´ Lark Bitable, c√≥ h·ªó tr·ª£ cache v√† b·ªô l·ªçc.
     * @param {object} [filters={}] - C√°c b·ªô l·ªçc ƒë·ªÉ truy v·∫•n.
     * @param {string} [filters.employeeId] - L·ªçc theo M√£ nh√¢n vi√™n.
     * @param {string} [filters.dateFrom] - L·ªçc t·ª´ ng√†y (YYYY-MM-DD).
     * @param {string} [filters.dateTo] - L·ªçc ƒë·∫øn ng√†y (YYYY-MM-DD).
     * @returns {Promise<Array<object>>} - M·∫£ng c√°c b·∫£n ghi ch·∫•m c√¥ng ƒë√£ ƒë∆∞·ª£c chuy·ªÉn ƒë·ªïi.
     */
    async getAttendanceLogs(filters = {}) {
        const cacheKey = `attendance_logs_${JSON.stringify(filters)}`;
        let logs = CacheService.get(cacheKey);
        
        if (logs) {
            console.log(`‚úÖ ATTENDANCE: Loaded ${logs.length} records from cache.`);
            return logs;
        }

        try {
            
            // X√¢y d·ª±ng c√°c tham s·ªë cho API
            const params = {};
            if (filters.employeeId) {
                // Lark filter syntax: CurrentValue.[T√™n c·ªôt] = "Gi√° tr·ªã"
                params.filter = `CurrentValue.[M√£ nh√¢n vi√™n] = "${filters.employeeId}"`;
            }
            
            // G·ªçi ph∆∞∆°ng th·ª©c m·ªõi ƒë·ªÉ l·∫•y t·∫•t c·∫£ c√°c trang d·ªØ li·ªáu
            const response = await LarkClient.getAllRecords(
                `/bitable/v1/apps/${this.baseId}/tables/${this.tableId}/records`,
                params
            );

            logs = this.transformAttendanceData(response.data?.items || []);

            
            // L·ªçc theo ng√†y (sau khi ƒë√£ l·∫•y h·∫øt d·ªØ li·ªáu)
            if (filters.dateFrom || filters.dateTo) {
                logs = this.filterByDateRange(logs, filters.dateFrom, filters.dateTo);

            }
            
            CacheService.set(cacheKey, logs, 300000); // Cache trong 5 ph√∫t

        } catch (error) {
            console.error('‚ùå Error fetching attendance logs:', error);
            logs = []; // Tr·∫£ v·ªÅ m·∫£ng r·ªóng n·∫øu c√≥ l·ªói
        }
        
        return logs;
    }

    /** Th√™m m·ªôt b·∫£n ghi ch·∫•m c√¥ng m·ªõi v√†o Lark Bitable.
     * @param {object} attendanceData - D·ªØ li·ªáu ch·∫•m c√¥ng c·∫ßn th√™m.
     * @returns {Promise<object>} - B·∫£n ghi ch·∫•m c√¥ng ƒë√£ ƒë∆∞·ª£c t·∫°o v√† chuy·ªÉn ƒë·ªïi.
     */
    async addAttendanceLog(attendanceData) {
        try {
            const transformedData = this.transformAttendanceForLark(attendanceData);
            
            const response = await LarkClient.post(`/bitable/v1/apps/${this.baseId}/tables/${this.tableId}/records`, {
                fields: transformedData
            });

            // Clear cache
            CacheService.clear();
            
            return this.transformAttendanceData([response.data])[0];
        } catch (error) {
            await this.handleError(error, 'addAttendanceLog');
            throw error;
        }
    }

    /**
     * L·∫•y v√† t·ªïng h·ª£p gi·ªù l√†m cho t·∫•t c·∫£ nh√¢n vi√™n c√≥ ph√°t sinh ch·∫•m c√¥ng.
     * @returns {Promise<object>} - M·ªôt ƒë·ªëi t∆∞·ª£ng v·ªõi key l√† employeeId v√† value l√† m·∫£ng c√°c ng√†y c√¥ng.
     * V√≠ d·ª•: { "NV001": [{ date: "2025-08-08", totalHours: "8 gi·ªù 0 ph√∫t", ... }] }
     */
    async getEmployeeHours() {
        const logs = await this.getAttendanceLogs();
        console.log('üîç Total attendance logs:', logs.length);

        const employeeHours = {};

        // Group logs by employee and date
        const groupedLogs = this.groupLogsByEmployeeAndDate(logs);

        // L·∫•y t·∫•t c·∫£ employeeId th·ª±c t·∫ø c√≥ ph√°t sinh log
        const allEmployeeIds = [...new Set(logs.map(log => log.employeeId))].filter(id => id);
        console.log('üîç All employee IDs found in logs:', allEmployeeIds);

        // Ch·ªâ t·ªïng h·ª£p c√°c ng√†y nh√¢n vi√™n c√≥ ch·∫•m c√¥ng
        for (const employeeId of allEmployeeIds) {
            if (!employeeId) continue;
            employeeHours[employeeId] = [];
            const employeeDateGroups = groupedLogs[employeeId] || {};

            // Ch·ªâ l·∫∑p qua c√°c ng√†y c√≥ log
            for (const date in employeeDateGroups) {
                const dayLogs = employeeDateGroups[date];
                const dailyResult = this.calculateDailyHours(employeeId, date, dayLogs);
                employeeHours[employeeId].push({
                    date,
                    ...dailyResult
                });
            }
        }

        return employeeHours;
    }

    // =================================================================
    //  BUSINESS LOGIC & CALCULATIONS - LOGIC NGHI·ªÜP V·ª§ & T√çNH TO√ÅN
    // =================================================================

    /**
     * Gom nh√≥m c√°c b·∫£n ghi ch·∫•m c√¥ng theo m√£ nh√¢n vi√™n v√† ng√†y.
     * @param {Array<object>} logs - M·∫£ng c√°c b·∫£n ghi ch·∫•m c√¥ng.
     * @returns {object} - ƒê·ªëi t∆∞·ª£ng ƒë√£ ƒë∆∞·ª£c gom nh√≥m. 
     * V√≠ d·ª•: { "NV001": { "2025-08-08": [log1, log2] } }
     */
    groupLogsByEmployeeAndDate(logs) {
        
        const grouped = {};
        
        logs.forEach(log => {
            if (!log.employeeId || !log.date) {
                console.warn('‚ö†Ô∏è Invalid log record:', log);
                return;
            }
            
            if (!grouped[log.employeeId]) {
                grouped[log.employeeId] = {};
            }
            
            if (!grouped[log.employeeId][log.date]) {
                grouped[log.employeeId][log.date] = [];
            }
            
            grouped[log.employeeId][log.date].push(log);
        });
        
        
        return grouped;
    }

    /**
     * H√†m ƒëi·ªÅu ph·ªëi: T√≠nh to√°n gi·ªù l√†m trong m·ªôt ng√†y d·ª±a tr√™n ch·ª©c v·ª• c·ªßa nh√¢n vi√™n.
     * @param {string} employeeId - M√£ nh√¢n vi√™n.
     * @param {string} date - Ng√†y t√≠nh c√¥ng (YYYY-MM-DD).
     * @param {Array<object>} dayLogs - M·∫£ng c√°c b·∫£n ghi ch·∫•m c√¥ng trong ng√†y ƒë√≥.
     * @returns {object} - K·∫øt qu·∫£ gi·ªù c√¥ng v√† c√°c c·∫£nh b√°o.
     */
    calculateDailyHours(employeeId, date, dayLogs) {
        if (dayLogs.length === 0) {
            return {
                totalHours: '0 gi·ªù 0 ph√∫t',
                warnings: ['Kh√¥ng c√≥ d·ªØ li·ªáu ch·∫•m c√¥ng'],
                position: 'N/A'
            };
        }

        return this.calculateSimpleHours(dayLogs)
    }

    /**
     * Logic t√≠nh gi·ªù m·∫∑c ƒë·ªãnh: l·∫•y check-in s·ªõm nh·∫•t v√† check-out mu·ªôn nh·∫•t trong ng√†y.
     * Ph√π h·ª£p cho nh√¢n vi√™n c√≥ l·ªãch l√†m vi·ªác linh ho·∫°t ho·∫∑c kh√¥ng theo ca c·ªë ƒë·ªãnh.
     * @param {Array<object>} dayLogs - C√°c log ch·∫•m c√¥ng trong ng√†y.
     * @returns {object} - K·∫øt qu·∫£ gi·ªù c√¥ng.
     */
    calculateSimpleHours(dayLogs) {
        const checkinLogs = dayLogs.filter(log => log.type === 'Checkin');
        const checkoutLogs = dayLogs.filter(log => log.type === 'Checkout');
        
        const warnings = [];
        
        if (checkinLogs.length === 0) {
            warnings.push('Thi·∫øu check in');
        }
        
        if (checkoutLogs.length === 0) {
            warnings.push('Thi·∫øu check out');
        }
        
        if (checkinLogs.length === 0 || checkoutLogs.length === 0) {
            return {
                totalHours: '0 gi·ªù 0 ph√∫t',
                warnings,
                position: dayLogs[0]?.position || 'N/A'
            };
        }
        
        // ‚úÖ S·ª¨A: S·ª≠ d·ª•ng TimezoneService ƒë·ªÉ chuy·ªÉn ƒë·ªïi timestamp
        const earliestCheckin = checkinLogs.reduce((earliest, current) => {
            const earliestTime = TimezoneService.toVietnamTime(earliest.timestamp);
            const currentTime = TimezoneService.toVietnamTime(current.timestamp);
            return currentTime < earliestTime ? current : earliest;
        });
        
        const latestCheckout = checkoutLogs.reduce((latest, current) => {
            const latestTime = TimezoneService.toVietnamTime(latest.timestamp);
            const currentTime = TimezoneService.toVietnamTime(current.timestamp);
            return currentTime > latestTime ? current : latest;
        });
        
        // ‚úÖ S·ª¨A: S·ª≠ d·ª•ng TimezoneService ƒë·ªÉ chuy·ªÉn ƒë·ªïi timestamp
        const checkinTime = TimezoneService.toVietnamTime(earliestCheckin.timestamp);
        const checkoutTime = TimezoneService.toVietnamTime(latestCheckout.timestamp);
        const diffHours = (checkoutTime - checkinTime) / (1000 * 60 * 60);
        
        // ‚úÖ TH√äM C·∫¢NH B√ÅO N·∫æU C√ì NHI·ªÄU LOGS
        if (dayLogs.length > 2) {
            warnings.push(`C√≥ ${dayLogs.length} l·∫ßn ch·∫•m c√¥ng trong ng√†y`);
        }
        
        return {
            totalHours: this.formatHoursDisplay(Math.max(0, diffHours)),
            warnings,
            position: dayLogs[0]?.position || 'N/A'
        };
    }

    /**
     * Logic t√≠nh gi·ªù cho Mascot: y√™u c·∫ßu ch·∫•m c√¥ng 4 l·∫ßn/ng√†y (v√†o/ra ca s√°ng, v√†o/ra ca chi·ªÅu).
     * @param {Array<object>} dayLogs - C√°c log ch·∫•m c√¥ng trong ng√†y.
     * @returns {object} - K·∫øt qu·∫£ gi·ªù c√¥ng bu·ªïi s√°ng, chi·ªÅu v√† t·ªïng c·ªông.
     */
    calculateMascotHours(dayLogs) {
        // Ki·ªÉm tra s·ªë l·∫ßn ch·∫•m c√¥ng
        if (dayLogs.length !== 4) {
            return {
                totalHours: '0 gi·ªù 0 ph√∫t',
                morningHours: '0 gi·ªù 0 ph√∫t',
                afternoonHours: '0 gi·ªù 0 ph√∫t',
                warnings: [`Mascot ph·∫£i ch·∫•m c√¥ng ƒë√∫ng 4 l·∫ßn/ng√†y. Hi·ªán t·∫°i: ${dayLogs.length} l·∫ßn`],
                position: 'Nh√¢n vi√™n Mascot',
                error: true
            };
        }

        // ‚úÖ S·ª¨A: S·ª≠ d·ª•ng TimezoneService ƒë·ªÉ chia ca theo 13:00
        const morningLogs = dayLogs.filter(log => {
            const vietnamTime = TimezoneService.toVietnamTime(log.timestamp);
            return vietnamTime.getUTCHours() < 13;
        });

        const afternoonLogs = dayLogs.filter(log => {
            const vietnamTime = TimezoneService.toVietnamTime(log.timestamp);
            return vietnamTime.getUTCHours() >= 13;
        });

        const morningResult = this.calculateShiftHours(morningLogs);
        const afternoonResult = this.calculateShiftHours(afternoonLogs);

        const totalHours = morningResult.hours + afternoonResult.hours;

        return {
            morningHours: this.formatHoursDisplay(morningResult.hours),
            afternoonHours: this.formatHoursDisplay(afternoonResult.hours),
            totalHours: this.formatHoursDisplay(totalHours),
            warnings: [...morningResult.warnings, ...afternoonResult.warnings],
            position: 'Nh√¢n vi√™n Mascot'
        };
    }

    /**
     * Logic t√≠nh gi·ªù cho nh√¢n vi√™n th·ªùi v·ª•: y√™u c·∫ßu ƒë√∫ng 1 check-in v√† 1 check-out.
     * @param {Array<object>} dayLogs - C√°c log ch·∫•m c√¥ng trong ng√†y.
     * @returns {object} - K·∫øt qu·∫£ gi·ªù c√¥ng.
     */
    calculateRegularHours(dayLogs) {
        const checkinLog = dayLogs.find(log => log.type === 'Checkin');
        const checkoutLog = dayLogs.find(log => log.type === 'Checkout');

        if (!checkinLog || !checkoutLog) {
            return {
                totalHours: '0 gi·ªù 0 ph√∫t',
                warnings: [
                    !checkinLog ? 'Thi·∫øu check in' : '',
                    !checkoutLog ? 'Thi·∫øu check out' : ''
                ].filter(Boolean),
                position: dayLogs[0]?.position || 'N/A'
            };
        }

        // ‚úÖ S·ª¨A: S·ª≠ d·ª•ng TimezoneService ƒë·ªÉ chuy·ªÉn ƒë·ªïi timestamp
        const checkinTime = TimezoneService.toVietnamTime(checkinLog.timestamp);
        const checkoutTime = TimezoneService.toVietnamTime(checkoutLog.timestamp);
        const diffHours = (checkoutTime - checkinTime) / (1000 * 60 * 60);

        return {
            totalHours: this.formatHoursDisplay(Math.max(0, diffHours)),
            warnings: [],
            position: dayLogs[0]?.position || 'N/A'
        };
    }

    /**
     * T√≠nh to√°n gi·ªù l√†m cho m·ªôt ca ƒë∆°n l·∫ª (g·ªìm 1 check-in v√† 1 check-out) (D√πng cho masscot).
     * @param {Array<object>} shiftLogs - C√°c log trong m·ªôt ca.
     * @returns {{hours: number, warnings: Array<string>}} - S·ªë gi·ªù v√† c·∫£nh b√°o.
     */
    calculateShiftHours(shiftLogs) {
        const checkin = shiftLogs.find(log => log.type === 'Checkin');
        const checkout = shiftLogs.find(log => log.type === 'Checkout');

        if (!checkin || !checkout) {
            return {
                hours: 0,
                warnings: [
                    !checkin ? 'Thi·∫øu check in ca n√†y' : '',
                    !checkout ? 'Thi·∫øu check out ca n√†y' : ''
                ].filter(Boolean)
            };
        }

        // ‚úÖ S·ª¨A: S·ª≠ d·ª•ng TimezoneService ƒë·ªÉ chuy·ªÉn ƒë·ªïi timestamp
        const checkinTime = TimezoneService.toVietnamTime(checkin.timestamp);
        const checkoutTime = TimezoneService.toVietnamTime(checkout.timestamp);
        const diffHours = (checkoutTime - checkinTime) / (1000 * 60 * 60);
        
        return {
            hours: Math.max(0, diffHours),
            warnings: []
        };
    }

    // =================================================================
    //  DATA TRANSFORMATION & FILTERING - CHUY·ªÇN ƒê·ªîI & L·ªåC D·ªÆ LI·ªÜU
    // =================================================================

    /**
     * Chuy·ªÉn ƒë·ªïi d·ªØ li·ªáu ch·∫•m c√¥ng th√¥ t·ª´ Lark Bitable th√†nh m·ªôt ƒë·ªëi t∆∞·ª£ng c√≥ c·∫•u tr√∫c r√µ r√†ng.
     * @param {Array<object>} larkData - M·∫£ng c√°c b·∫£n ghi t·ª´ API c·ªßa Lark.
     * @returns {Array<object>} - M·∫£ng c√°c b·∫£n ghi ƒë√£ ƒë∆∞·ª£c chuy·ªÉn ƒë·ªïi.
     */
    transformAttendanceData(larkData) {
        
        return larkData.map(record => {
            let employeeId = '';
            const employeeIdField = record.fields['M√£ nh√¢n vi√™n'];
            
            if (Array.isArray(employeeIdField) && employeeIdField.length > 0) {
                employeeId = employeeIdField[0]?.text || '';
            } else if (typeof employeeIdField === 'string') {
                employeeId = employeeIdField;
            }

            // ‚úÖ S·ª¨A: S·ª≠ d·ª•ng TimezoneService ƒë·ªÉ convert timestamp
            const convertedTimestamp = this.convertUnixToDateTime(record.fields['Th·ªùi gian ch·∫•m c√¥ng']);
            const vietnamTime = TimezoneService.toVietnamTime(convertedTimestamp);
            
            return {
                id: record.record_id,
                employeeId: employeeId,
                type: record.fields['Ph√¢n lo·∫°i'] || '',
                position: record.fields['V·ªã tr√≠'] || '',
                timestamp: convertedTimestamp,
                date: TimezoneService.larkTimestampToDateString(new Date(convertedTimestamp).getTime()) || vietnamTime.toISOString().split('T')[0],
                time: TimezoneService.formatTime(convertedTimestamp),
                notes: record.fields['Ghi ch√∫'] || '',
                createdAt: record.fields['Created At'] || TimezoneService.getCurrentVietnamDate().toISOString()
            };
        });
    }

    /**
     * Chuy·ªÉn ƒë·ªïi d·ªØ li·ªáu t·ª´ ·ª©ng d·ª•ng sang ƒë·ªãnh d·∫°ng m√† API c·ªßa Lark Bitable y√™u c·∫ßu.
     * @param {object} attendanceData - D·ªØ li·ªáu ch·∫•m c√¥ng t·ª´ ·ª©ng d·ª•ng.
     * @returns {object} - ƒê·ªëi t∆∞·ª£ng `fields` ƒë·ªÉ g·ª≠i cho Lark.
     */
    transformAttendanceForLark(attendanceData) {
        // ‚úÖ S·ª¨A: S·ª≠ d·ª•ng TimezoneService ƒë·ªÉ convert timestamp
        let timestamp;
        if (attendanceData.timestamp) {
            const vietnamTime = TimezoneService.toVietnamTime(attendanceData.timestamp);
            timestamp = Math.floor(vietnamTime.getTime() / 1000);
        } else {
            const currentVietnamTime = TimezoneService.getCurrentVietnamDate();
            timestamp = Math.floor(currentVietnamTime.getTime() / 1000);
        }

        return {
            'M√£ nh√¢n vi√™n': attendanceData.employeeId,
            'Ph√¢n lo·∫°i': attendanceData.type,
            'V·ªã tr√≠': attendanceData.position,
            'Th·ªùi gian ch·∫•m c√¥ng': timestamp,
            'Ghi ch√∫': attendanceData.notes || '',
            'Created At': TimezoneService.getCurrentVietnamDate().toISOString()
        };
    }

    /**
     * L·ªçc m·ªôt danh s√°ch c√°c b·∫£n ghi ch·∫•m c√¥ng theo kho·∫£ng ng√†y.
     * @param {Array<object>} logs - M·∫£ng c√°c b·∫£n ghi ch·∫•m c√¥ng.
     * @param {string} dateFrom - Ng√†y b·∫Øt ƒë·∫ßu (YYYY-MM-DD).
     * @param {string} dateTo - Ng√†y k·∫øt th√∫c (YYYY-MM-DD).
     * @returns {Array<object>} - M·∫£ng c√°c b·∫£n ghi ƒë√£ ƒë∆∞·ª£c l·ªçc.
     */
    filterByDateRange(logs, dateFrom, dateTo) {
        return logs.filter(log => {
            // ‚úÖ S·ª¨A: S·ª≠ d·ª•ng TimezoneService ƒë·ªÉ so s√°nh ng√†y
            if (!TimezoneService.isValidDate(log.date)) return false;
            
            const logVietnamTime = TimezoneService.toVietnamTime(log.date);
            
            if (dateFrom && TimezoneService.isValidDate(dateFrom)) {
                const fromVietnamTime = TimezoneService.toVietnamTime(dateFrom);
                if (TimezoneService.isDateBefore(logVietnamTime, fromVietnamTime)) return false;
            }
            
            if (dateTo && TimezoneService.isValidDate(dateTo)) {
                const toVietnamTime = TimezoneService.toVietnamTime(dateTo);
                if (TimezoneService.isDateAfter(logVietnamTime, toVietnamTime)) return false;
            }
            
            return true;
        });
    }

    // =================================================================
    //  UTILITY HELPERS - C√ÅC H√ÄM TI·ªÜN √çCH
    // =================================================================

    /**
     * Tr√≠ch xu·∫•t m√£ nh√¢n vi√™n t·ª´ tr∆∞·ªùng d·ªØ li·ªáu c·ªßa Lark (c√≥ th·ªÉ l√† string ho·∫∑c array).
     * @param {string|Array} employeeIdField - D·ªØ li·ªáu t·ª´ c·ªôt "M√£ nh√¢n vi√™n".
     * @returns {string} - M√£ nh√¢n vi√™n d·∫°ng chu·ªói.
     */
    extractEmployeeId(employeeIdField) {
        if (!employeeIdField) return '';
        
        // N·∫øu l√† array (linked record t·ª´ Lark)
        if (Array.isArray(employeeIdField) && employeeIdField.length > 0) {
            const firstRecord = employeeIdField[0];
            return firstRecord?.text || firstRecord?.name || '';
        }
        
        // N·∫øu l√† string ƒë∆°n gi·∫£n
        if (typeof employeeIdField === 'string') {
            return employeeIdField;
        }
        
        // N·∫øu l√† object
        if (typeof employeeIdField === 'object' && employeeIdField.text) {
            return employeeIdField.text;
        }
        
        console.warn('‚ö†Ô∏è Unknown employeeId format:', employeeIdField);
        return '';
    }

    /**
     * Chuy·ªÉn ƒë·ªïi timestamp t·ª´ Lark (c√≥ th·ªÉ l√† Unix milliseconds ho·∫∑c ISO string) sang ƒë·ªãnh d·∫°ng ISO string.
     * @param {number|string} timestampValue - Gi√° tr·ªã timestamp t·ª´ Lark.
     * @returns {string} - Chu·ªói ISO 8601 (v√≠ d·ª•: "2025-08-08T10:00:00.000Z").
     */
    convertUnixToDateTime(unixTimestamp) {
        if (!unixTimestamp) return TimezoneService.getCurrentVietnamDate().toISOString();
        
        // ‚úÖ S·ª¨A: S·ª≠ d·ª•ng TimezoneService ƒë·ªÉ validate v√† convert
        if (typeof unixTimestamp === 'string' && unixTimestamp.includes('T')) {
            if (TimezoneService.isValidDate(unixTimestamp)) {
                return TimezoneService.toVietnamTime(unixTimestamp).toISOString();
            }
        }
        
        // ‚úÖ S·ª¨A: S·ª≠ d·ª•ng TimezoneService ƒë·ªÉ convert timestamp
        if (typeof unixTimestamp === 'number') {
            if (TimezoneService.isValidDate(new Date(unixTimestamp))) {
                return TimezoneService.toVietnamTime(unixTimestamp).toISOString();
            }
        }
        
        console.warn('‚ö†Ô∏è Invalid timestamp format:', unixTimestamp);
        return TimezoneService.getCurrentVietnamDate().toISOString();
    }

    /**
     * ƒê·ªãnh d·∫°ng t·ªïng s·ªë gi·ªù sang chu·ªói hi·ªÉn th·ªã "X gi·ªù Y ph√∫t".
     * @param {number} totalHours - T·ªïng s·ªë gi·ªù (v√≠ d·ª•: 8.5).
     * @returns {string} - Chu·ªói ƒë√£ ƒë·ªãnh d·∫°ng (v√≠ d·ª•: "8 gi·ªù 30 ph√∫t").
     */
    formatHoursDisplay(totalHours) {
        if (!totalHours || totalHours === 0) return '0 gi·ªù 0 ph√∫t';
        
        const hours = Math.floor(totalHours);
        const minutes = Math.round((totalHours - hours) * 60);
        
        if (minutes === 0) {
            return `${hours} gi·ªù`;
        } else if (hours === 0) {
            return `${minutes} ph√∫t`;
        } else {
            return `${hours} gi·ªù ${minutes} ph√∫t`;
        }
    }
}

export default AttendanceService;
