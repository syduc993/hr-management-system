================================================================================
                   PHÂN TÍCH CẤU TRÚC DỰ ÁN VÀ NỘI DUNG CODE
================================================================================

1. CẤU TRÚC THƯ MỤC:
----------------------------------------
hr-management-system/
├── .env
├── .gitignore
├── Getcode.ipynb
├── index.html
├── package-lock.json
├── package.json
├── project_analysis.txt
├── Readme.md
├── vite.config.js
├── server/
│   ├── server.js
│   ├── config/
│   │   ├── database.js
│   │   └── lark-config.js
│   ├── controllers/
│   │   ├── attendanceController.js
│   │   ├── authController.js
│   │   ├── dashboardController.js
│   │   ├── employeeController.js
│   │   ├── positionController.js
│   │   ├── recruitmentController.js
│   │   └── storeController.js
│   ├── middleware/
│   │   ├── auth.js
│   │   └── validation.js
│   ├── routes/
│   │   ├── attendance.js
│   │   ├── auth.js
│   │   ├── dashboard.js
│   │   ├── employees.js
│   │   ├── masterData.js
│   │   └── recruitment.js
│   └── services/
│       ├── index.js
│       ├── lark-service-manager.js
│       ├── attendance/
│       │   ├── attendance-service.js
│       │   ├── attendance-validator.js
│       │   └── index.js
│       ├── auth/
│       │   ├── auth-service.js
│       │   ├── index.js
│       │   └── session-service.js
│       ├── core/
│       │   ├── base-service.js
│       │   ├── cache-service.js
│       │   ├── index.js
│       │   └── lark-client.js
│       ├── employees/
│       │   ├── employee-service.js
│       │   ├── employee-validator.js
│       │   ├── index.js
│       │   └── work-history-service.js
│       ├── master-data/
│       │   ├── index.js
│       │   ├── master-data-validator.js
│       │   ├── position-service.js
│       │   └── store-service.js
│       ├── recruitment/
│       │   ├── index.js
│       │   ├── recruitment-service.js
│       │   └── recruitment-validator.js
│       └── utils/
│           ├── error-handler.js
│           ├── index.js
│           ├── response-formatter.js
│           └── service-factory.js
└── src/
    ├── App.jsx
    ├── main.jsx
    ├── components/
    │   ├── attendance/
    │   │   ├── AttendanceFilters.jsx
    │   │   ├── AttendanceLogs.jsx
    │   │   └── EmployeeHours.jsx
    │   ├── auth/
    │   │   ├── LoginForm.jsx
    │   │   └── ProtectedRoute.jsx
    │   ├── common/
    │   │   ├── Alert.jsx
    │   │   ├── Loading.jsx
    │   │   ├── Modal.jsx
    │   │   └── Table.jsx
    │   ├── dashboard/
    │   │   ├── Dashboard.jsx
    │   │   ├── HRDashboard.jsx
    │   │   └── StatsCard.jsx
    │   ├── employee/
    │   │   ├── AddWorkHistoryModal.jsx
    │   │   ├── EmployeeAddForm.jsx
    │   │   ├── EmployeeEditModal.jsx
    │   │   ├── EmployeeForm.jsx
    │   │   ├── EmployeeList.jsx
    │   │   ├── EmployeeTable.jsx
    │   │   ├── RecruitmentModal.jsx
    │   │   └── WorkHistoryModal.jsx
    │   ├── layout/
    │   │   ├── Layout.jsx
    │   │   └── ResponsiveNavigation.jsx
    │   └── masterdata/
    │       ├── PositionManager.jsx
    │       └── StoreManager.jsx
    ├── contexts/
    │   ├── AppContext.jsx
    │   ├── AuthContext.jsx
    │   └── NotificationContext.jsx
    ├── hooks/
    │   ├── useApi.js
    │   ├── useAttendance.js
    │   ├── useAuth.js
    │   ├── useEmployees.js
    │   └── useNotification.js
    ├── pages/
    │   ├── AttendanceLogsPage.jsx
    │   ├── EmployeeManagementPage.jsx
    │   ├── HRDashboardPage.jsx
    │   └── LoginPage.jsx
    ├── services/
    │   ├── api.js
    │   ├── auth.js
    │   └── employee.js
    └── styles/
        ├── components.css
        └── globals.css

2. NỘI DUNG CHI TIẾT CÁC FILE:
----------------------------------------


==================== File: .\index.html ====================

<!DOCTYPE html>
<html lang="vi">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>HR Management System - React</title>
</head>
<body>
  <div id="root"></div>
  <div id="alert-container"></div>
  <script type="module" src="/src/main.jsx"></script>
</body>
</html>

```


==================== File: .\package.json ====================

{
  "name": "hr-management-system-react",
  "version": "1.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "preview": "vite preview",
    "server": "node server/server.js"
  },
  "dependencies": {
    "@fortawesome/fontawesome-free": "^6.7.2",
    "axios": "^1.10.0",
    "bootstrap": "^5.3.7",
    "cors": "^2.8.5",
    "dotenv": "^16.6.1",
    "express": "^4.21.2",
    "express-session": "^1.18.2",
    "react": "^18.3.1",
    "react-dom": "^18.3.1",
    "react-router-dom": "^6.30.1"
  },
  "devDependencies": {
    "@types/react": "^18.0.28",
    "@types/react-dom": "^18.0.11",
    "@vitejs/plugin-react": "^3.1.0",
    "eslint": "^8.38.0",
    "eslint-plugin-react": "^7.32.2",
    "eslint-plugin-react-hooks": "^4.6.0",
    "eslint-plugin-react-refresh": "^0.3.4",
    "vite": "^4.5.14"
  }
}

```


==================== File: .\project_analysis.txt ====================


```


==================== File: .\Readme.md ====================

Backend (Node.js/Express)
Kiến trúc khuyến nghị:
Layered Architecture (Service - Controller - Route - Middleware)
Routes: Định nghĩa các endpoint, phân chia rõ theo module (vd: /employees, /attendance).
Controllers: Xử lý request/response, gọi sang service. Không chứa logic nghiệp vụ sâu.
Services: Chứa logic nghiệp vụ (business logic) và thao tác dữ liệu (gọi API, DB, Lark).
Utils & Validators: Kiểm tra, format, handler lỗi, validation input.
Models: (Nếu xài ORM/database thực), mô tả cấu trúc dữ liệu.
(Bạn đã có phân chia khá chuẩn, chỉ cần dọn lại các chỗ còn lẫn lộn, loại bỏ code cũ).
Các điểm cần lưu ý:
Không gọi trực tiếp từ route xuống service, luôn qua controller.
Chỉ để một nơi chịu trách nhiệm chính về validate (thường là middleware hoặc nằm trong services/utils).
Không để controllers vừa thao tác dữ liệu, vừa gọi nhiều tầng - 1 controller = 1 use-case nghiệp vụ.
Frontend (React + Context + Service Layer)
Kiến trúc khuyến nghị:
Component-based (Atomic/Domain)
Pages: Trang tương ứng route (/dashboard, /employee-management...)
Components: Thành phần tái sử dụng (Form, Table, Modal, Cards...)
Hooks: Quản lý logic dùng chung (fetch data, validate, notification...)
Contexts: Chứa state global (Auth, Notification).
Services layer: File JS quản lý toàn bộ gọi API, các hàm CRUD trả ra đúng format.
Styles: Để riêng, tránh style inline nhiều.
Ngoài ra:
Hạn chế để logic xử lý data trực tiếp trong component, hãy đẩy tối đa sang service/hook.
Tách biệt rõ các tầng: Page → Hook → Service → API (và Context nếu cần).
Kiểm tra toàn bộ các API bạn gọi trả đúng structure JSON (success, data, message...), đừng xử lý dữ liệu thẳng từ response chưa kiểm soát.
```


==================== File: .\vite.config.js ====================

// vite.config.js
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'

export default defineConfig({
  plugins: [react()],
  server: {
    port: 3000,
    proxy: {
      '/api': {
        target: 'http://localhost:8080',
        changeOrigin: true,
      }
    }
  }
})

```


==================== File: .\server\server.js ====================

// server/server.js
import dotenv from 'dotenv';

// Configure dotenv FIRST
dotenv.config();

// Import các modules AFTER đã config dotenv
import express from 'express';
import cors from 'cors';
import session from 'express-session';
import path from 'path';
import { fileURLToPath } from 'url';

// ES6 module equivalent of __dirname
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Import service manager AFTER dotenv config
import larkServiceManager from './services/lark-service-manager.js';

// Import routes
import authRoutes from './routes/auth.js';
import employeeRoutes from './routes/employees.js';
import attendanceRoutes from './routes/attendance.js';
import recruitmentRoutes from './routes/recruitment.js';
import masterDataRoutes from './routes/masterData.js';
import dashboardRoutes from './routes/dashboard.js';

const app = express();
const PORT = process.env.PORT || 8080;

// Middleware
app.use(cors({
    origin: 'http://localhost:3000',
    credentials: true
}));

app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// Session configuration
app.use(session({
    secret: process.env.SESSION_SECRET || 'your-secret-key',
    resave: false,
    saveUninitialized: false,
    cookie: { secure: false, maxAge: 24 * 60 * 60 * 1000 }
}));

// API Routes
app.use('/api/auth', authRoutes);
app.use('/api/employees', employeeRoutes);
app.use('/api/attendance', attendanceRoutes);
app.use('/api/recruitment', recruitmentRoutes);
app.use('/api/master-data', masterDataRoutes);
app.use('/api/dashboard', dashboardRoutes);

// Health check endpoint
app.get('/api/health', (req, res) => {
    res.json({
        status: 'OK',
        timestamp: new Date().toISOString(),
        services: {
            larkServiceManager: larkServiceManager.initialized
        }
    });
});

// Root endpoint
app.get('/', (req, res) => {
    res.json({
        message: 'HR Management System API',
        version: '1.0.0',
        timestamp: new Date().toISOString()
    });
});

// Start server with proper initialization
app.listen(PORT, async () => {
    console.log(`Server running on http://localhost:${PORT}`);
    
    try {
        await larkServiceManager.init();
        console.log('Server fully initialized and ready');
    } catch (error) {
        console.error('Service initialization failed:', error.message);
        console.log('Server running but services unavailable');
    }
});

```


==================== File: .\server\config\database.js ====================

// Demo users data (in production, use real database)
const users = {
    admin: {
        id: 'admin',
        username: 'admin',
        password: 'admin123',
        role: 'admin',
        fullName: 'System Admin'
    },
    hr: {
        id: 'hr',
        username: 'hr',
        password: 'hr123',
        role: 'hr',
        fullName: 'HR Manager'
    },
    sales: {
        id: 'sales',
        username: 'sales',
        password: 'sales123',
        role: 'sales_manager',
        fullName: 'Sales Manager'
    },
    finance: {
        id: 'finance',
        username: 'finance',
        password: 'finance123',
        role: 'finance_manager',
        fullName: 'Finance Manager'
    },
    director: {
        id: 'director',
        username: 'director',
        password: 'director123',
        role: 'director',
        fullName: 'Director'
    }
};

const roles = {
    admin: 'Admin',
    hr: 'HR',
    sales_manager: 'Trưởng phòng kinh doanh',
    finance_manager: 'Trưởng phòng tài chính kế toán',
    director: 'Tổng giám đốc'
};

export {
    users,
    roles
};

```


==================== File: .\server\config\lark-config.js ====================

// server/config/lark-config.js
export const validateLarkConfig = () => {
    const requiredVars = [
        'LARK_APP_ID',
        'LARK_APP_SECRET', 
        'LARK_BASE_ID',
        'LARK_EMPLOYEE_TABLE_ID',
        'LARK_ATTENDANCE_TABLE_ID',
        'LARK_RECRUITMENT_TABLE_ID',
        'LARK_STORE_TABLE_ID',
        'LARK_POSITION_TABLE_ID',
        'LARK_WORK_HISTORY_TABLE_ID'
    ];

    const missing = requiredVars.filter(key => !process.env[key]);
    
    if (missing.length > 0) {
        throw new Error(`❌ Missing Lark configuration: ${missing.join(', ')}`);
    }
    
    console.log('✅ Lark configuration validated');
};

export const larkConfig = {
    appId: process.env.LARK_APP_ID,
    appSecret: process.env.LARK_APP_SECRET,
    baseId: process.env.LARK_BASE_ID,
    tables: {
        employee: process.env.LARK_EMPLOYEE_TABLE_ID,
        attendance: process.env.LARK_ATTENDANCE_TABLE_ID,
        recruitment: process.env.LARK_RECRUITMENT_TABLE_ID,
        store: process.env.LARK_STORE_TABLE_ID,
        position: process.env.LARK_POSITION_TABLE_ID,
        workHistory: process.env.LARK_WORK_HISTORY_TABLE_ID
    }
};

```


==================== File: .\server\controllers\attendanceController.js ====================

// server/controllers/attendanceController.js
import larkServiceManager from '../services/lark-service-manager.js';
import { formatResponse } from '../services/utils/response-formatter.js';

export const getAttendanceLogs = async (req, res) => {
    try {
        const filters = req.query;
        const logs = await larkServiceManager.getAttendanceLogs(filters);
        res.json(formatResponse(true, 'Lấy bản ghi chấm công thành công', logs));
    } catch (error) {
        console.error('❌ Controller: getAttendanceLogs failed:', error);
        res.status(500).json(formatResponse(
            false, 
            `Lỗi khi lấy bản ghi chấm công: ${error.message}`, 
            null, 
            'ATTENDANCE_LOAD_FAILED'
        ));
    }
};

export const addAttendanceLog = async (req, res) => {
    try {
        const attendanceData = req.body;
        const result = await larkServiceManager.addAttendanceLog(attendanceData);
        res.json(formatResponse(true, 'Thêm bản ghi chấm công thành công', result));
    } catch (error) {
        console.error('❌ Controller: addAttendanceLog failed:', error);
        res.status(500).json(formatResponse(
            false, 
            `Lỗi khi thêm bản ghi chấm công: ${error.message}`, 
            null, 
            'ATTENDANCE_ADD_FAILED'
        ));
    }
};

export const getEmployeeHours = async (req, res) => {
    try {
        const employeeHours = await larkServiceManager.getEmployeeHours();
        res.json(formatResponse(true, 'Lấy tổng giờ công thành công', employeeHours));
    } catch (error) {
        console.error('❌ Controller: getEmployeeHours failed:', error);
        res.status(500).json(formatResponse(
            false, 
            `Lỗi khi lấy tổng giờ công: ${error.message}`, 
            null, 
            'EMPLOYEE_HOURS_LOAD_FAILED'
        ));
    }
};
```


==================== File: .\server\controllers\authController.js ====================

// server/controllers/authController.js
import larkServiceManager from '../services/lark-service-manager.js';
import { formatResponse } from '../services/utils/response-formatter.js';

/**
 * Xử lý đăng nhập người dùng.
 * Controller gọi đến AuthService để xác thực.
 * @route POST /api/auth/login
 */
const login = async (req, res) => {
    try {
        const { username, password } = req.body;
        const authService = larkServiceManager.getService('auth');

        // Gọi service để xử lý logic đăng nhập
        const result = await authService.login({ username, password });

        // Nếu service trả về thành công, tạo session
        if (result.success) {
            req.session.user = {
                id: result.user.id,
                username: result.user.username,
                role: result.user.role,
                fullName: result.user.fullName
            };
            
            // Trả về response thành công với thông tin user
            res.json(formatResponse(true, result.message, { user: req.session.user }));
        } else {
            // Trường hợp service xử lý nhưng không thành công (ít xảy ra với logic hiện tại)
             res.status(401).json(formatResponse(false, result.message, null, 'LOGIN_FAILED'));
        }

    } catch (error) {
        // Bắt lỗi do service throw (ví dụ: sai credentials)
        console.error('❌ Controller: login failed:', error.message);
        res.status(401).json(formatResponse(false, 'Tên đăng nhập hoặc mật khẩu không đúng.', null, 'INVALID_CREDENTIALS'));
    }
};

/**
 * Xử lý đăng xuất người dùng.
 * @route POST /api/auth/logout
 */
const logout = (req, res) => {
    req.session.destroy((err) => {
        if (err) {
            console.error('❌ Controller: logout failed:', err);
            return res.status(500).json(formatResponse(false, 'Không thể đăng xuất', null, 'LOGOUT_ERROR'));
        }
        res.clearCookie('connect.sid'); // Xóa cookie session phía client
        res.json(formatResponse(true, 'Đăng xuất thành công'));
    });
};

/**
 * Lấy thông tin profile của user đang đăng nhập.
 * @route GET /api/auth/profile
 */
const getProfile = (req, res) => {
    // req.user được gán từ middleware `authenticateUser`
    if (req.user) {
        res.json(formatResponse(true, 'Lấy thông tin người dùng thành công', { user: req.user }));
    } else {
        res.status(401).json(formatResponse(false, 'Người dùng chưa được xác thực', null, 'UNAUTHENTICATED'));
    }
};

export {
    login,
    logout,
    getProfile
};

```


==================== File: .\server\controllers\dashboardController.js ====================

// server/controllers/dashboardController.js (MỚI)
import larkServiceManager from '../services/lark-service-manager.js';
import { formatResponse } from '../services/utils/response-formatter.js';

export const getDashboardStats = async (req, res) => {
    try {
        console.log('📊 GETTING DASHBOARD STATS...');
        
        const employeeService = larkServiceManager.getService('employee');
        const attendanceService = larkServiceManager.getService('attendance');
        
        // ✅ Tách riêng, handle error độc lập
        let employeeStats = {
            totalEmployees: 0,
            activeEmployees: 0,
            error: null
        };
        
        let attendanceStats = {
            totalAttendanceLogs: 0,
            todayLogs: 0,
            error: null
        };
        
        // Get employee stats
        try {
            const employees = await employeeService.getAllEmployees();
            employeeStats = {
                totalEmployees: employees.length,
                activeEmployees: employees.filter(emp => emp.status === 'active').length,
                error: null
            };
        } catch (error) {
            console.error('❌ Employee stats error:', error);
            employeeStats.error = 'Không thể tải thống kê nhân viên';
        }
        
        // Get attendance stats
        try {
            const logs = await attendanceService.getAttendanceLogs();
            const today = new Date().toISOString().split('T')[0];
            attendanceStats = {
                totalAttendanceLogs: logs.length,
                todayLogs: logs.filter(log => log.date === today).length,
                error: null
            };
        } catch (error) {
            console.error('❌ Attendance stats error:', error);
            attendanceStats.error = 'Không thể tải thống kê chấm công';
        }
        
        const dashboardData = {
            employee: employeeStats,
            attendance: attendanceStats,
            timestamp: new Date().toISOString()
        };
        
        res.json(formatResponse(true, 'Lấy thống kê dashboard thành công', dashboardData));
        
    } catch (error) {
        console.error('❌ Dashboard stats error:', error);
        res.status(500).json(formatResponse(
            false, 
            `Lỗi hệ thống: ${error.message}`, 
            null, 
            'DASHBOARD_STATS_ERROR'
        ));
    }
};

```


==================== File: .\server\controllers\employeeController.js ====================

// server/controllers/employeeController.js
import larkServiceManager from '../services/lark-service-manager.js';
import { formatResponse } from '../services/utils/response-formatter.js';

class EmployeeController {
    /**
     * Get all employees
     * @route GET /api/employees
     */
    async getAllEmployees(req, res) {
        try {
            console.log('CONTROLLER: Yêu cầu lấy danh sách nhân viên...');
            const employeeService = larkServiceManager.getService('employee');
            const employees = await employeeService.getAllEmployees();

            res.json(formatResponse(true, 'Lấy danh sách nhân viên thành công', employees));
        } catch (error) {
            console.error('❌ CONTROLLER: Lỗi khi lấy danh sách nhân viên:', error);
            res.status(500).json(formatResponse(
                false, 
                `Không thể tải danh sách nhân viên: ${error.message}`, 
                null, 
                'EMPLOYEE_LOAD_FAILED'
            ));
        }
    }

    /**
     * Add new employee with work history support
     * @route POST /api/employees
     */
    async addEmployee(req, res) {
        try {
            const { fullName, phoneNumber, gender, hourlyRate, bankAccount, bankName, workHistoryData } = req.body;

            // Check for duplicate request numbers (phần này vẫn nên giữ lại vì nó là logic nghiệp vụ đặc thù)
            const requestNos = workHistoryData.map(item => item.requestNo);
            const uniqueRequestNos = [...new Set(requestNos)];
            if (requestNos.length !== uniqueRequestNos.length) {
                return res.status(400).json(formatResponse(
                    false, 
                    'Không được trùng lặp Request No.', 
                    null, 
                    'DUPLICATE_REQUEST_NO'
                ));
            }

            // Generate employee ID and check for duplicates (đã chuyển vào service)
            const employeeId = larkServiceManager.getService('employee').generateEmployeeId(fullName, phoneNumber);
            const isDuplicate = await larkServiceManager.checkEmployeeIdExists(employeeId);
            if (isDuplicate) {
                return res.status(409).json(formatResponse(
                    false, 
                    'Mã nhân viên đã tồn tại trong hệ thống', 
                    null, 
                    'DUPLICATE_EMPLOYEE_ID'
                ));
            }
            
            // Prepare employee data
            const employeeData = {
                employeeId,
                fullName,
                phoneNumber,
                gender,
                hourlyRate: parseFloat(hourlyRate),
                bankAccount,
                bankName,
                recruitmentLink: workHistoryData.map(item => item.requestNo).join(', '),
                status: 'active',
                createdAt: new Date().toISOString()
            };

            // Create employee
            const employee = await larkServiceManager.addEmployee(employeeData);
            
            // Add work history entries with duplicate check
            const workHistoryResults = [];
            for (const historyEntry of workHistoryData) {
                const workHistoryExists = await larkServiceManager.checkWorkHistoryExists(employeeId, historyEntry.requestNo);
                if (workHistoryExists) {
                    return res.status(409).json(formatResponse(
                        false, 
                        `Work History đã tồn tại: ${employeeId} - ${historyEntry.requestNo}`, 
                        null, 
                        'DUPLICATE_WORK_HISTORY'
                    ));
                }
                
                const workHistory = await larkServiceManager.addWorkHistory({
                    employeeId: employeeId,
                    requestNo: historyEntry.requestNo
                });
                workHistoryResults.push(workHistory);
            }

            res.json(formatResponse(true, 'Thêm nhân viên thành công', {
                employee,
                workHistory: workHistoryResults
            }));
            
        } catch (error) {
            console.error('❌ Controller: addEmployee failed:', error);
            res.status(500).json(formatResponse(
                false, 
                `Lỗi hệ thống khi thêm nhân viên: ${error.message}`, 
                null, 
                'EMPLOYEE_ADD_FAILED'
            ));
        }
    }

    /**
     * Update employee
     * @route PUT /api/employees/:id
     */
    async updateEmployee(req, res) {
        try {
            const { id } = req.params;
            const { fullName, phoneNumber, gender, hourlyRate, bankAccount, bankName, recruitmentLink, status } = req.body;
            
            // Generate new employee ID with updated info
            const employeeId = larkServiceManager.getService('employee').generateEmployeeId(fullName, phoneNumber);
            const updatedData = {
                employeeId,
                fullName,
                phoneNumber,
                gender,
                hourlyRate: parseFloat(hourlyRate),
                bankAccount,
                bankName,
                recruitmentLink: recruitmentLink || '',
                status,
                updatedAt: new Date().toISOString()
            };
            
            const employee = await larkServiceManager.updateEmployee(id, updatedData);
            
            res.json(formatResponse(true, 'Cập nhật nhân viên thành công', { employee }));
            
        } catch (error) {
            console.error('❌ Controller: updateEmployee failed:', error);
            res.status(500).json(formatResponse(
                false, 
                `Lỗi khi cập nhật nhân viên: ${error.message}`, 
                null, 
                'EMPLOYEE_UPDATE_FAILED'
            ));
        }
    }

    /**
     * Delete employee
     * @route DELETE /api/employees/:id
     */
    async deleteEmployee(req, res) {
        try {
            const { id } = req.params;
            await larkServiceManager.deleteEmployee(id);
            res.json(formatResponse(true, 'Xóa nhân viên thành công'));
        } catch (error) {
            console.error('❌ Controller: deleteEmployee failed:', error);
            res.status(500).json(formatResponse(
                false, 
                `Lỗi khi xóa nhân viên: ${error.message}`, 
                null, 
                'EMPLOYEE_DELETE_FAILED'
            ));
        }
    }

    /**
     * Search employees
     * @route GET /api/employees/search
     */
    async searchEmployees(req, res) {
        try {
            const { q } = req.query;
            const employees = await larkServiceManager.searchEmployees(q);
            res.json(formatResponse(true, 'Tìm kiếm thành công', employees));
        } catch (error) {
            console.error('❌ Controller: searchEmployees failed:', error);
            res.status(500).json(formatResponse(
                false, 
                `Lỗi khi tìm kiếm nhân viên: ${error.message}`, 
                null, 
                'EMPLOYEE_SEARCH_FAILED'
            ));
        }
    }

    /**
     * Get employee work history
     * @route GET /api/employees/:employeeId/work-history
     */
    async getEmployeeWorkHistory(req, res) {
        try {
            const { employeeId } = req.params;
            const workHistory = await larkServiceManager.getWorkHistoryByEmployee(employeeId);
            res.json(formatResponse(true, 'Lấy lịch sử làm việc thành công', workHistory));
        } catch (error) {
            console.error('❌ Controller: getEmployeeWorkHistory failed:', error);
            res.status(500).json(formatResponse(
                false, 
                `Lỗi khi lấy lịch sử làm việc: ${error.message}`, 
                null, 
                'WORK_HISTORY_LOAD_FAILED'
            ));
        }
    }

    /**
     * Add work history for employee
     * @route POST /api/employees/work-history
     */
    async addWorkHistory(req, res) {
        try {
            const { employeeId, requestNo } = req.body;
            
            if (!employeeId || !requestNo) {
                return res.status(400).json(formatResponse(
                    false, 
                    'Thiếu thông tin bắt buộc', 
                    null, 
                    'VALIDATION_ERROR'
                ));
            }
            
            const workHistory = await larkServiceManager.addWorkHistory({
                employeeId,
                requestNo
            });
            
            res.json(formatResponse(true, 'Thêm work history thành công', { workHistory }));
            
        } catch (error) {
            console.error('❌ Controller: addWorkHistory failed:', error);
            res.status(500).json(formatResponse(
                false, 
                `Lỗi khi thêm work history: ${error.message}`, 
                null, 
                'WORK_HISTORY_ADD_FAILED'
            ));
        }
    }
}

// Export instance methods
const employeeController = new EmployeeController();

export const getAllEmployees = employeeController.getAllEmployees.bind(employeeController);
export const addEmployee = employeeController.addEmployee.bind(employeeController);
export const updateEmployee = employeeController.updateEmployee.bind(employeeController);
export const deleteEmployee = employeeController.deleteEmployee.bind(employeeController);
export const searchEmployees = employeeController.searchEmployees.bind(employeeController);
export const getEmployeeWorkHistory = employeeController.getEmployeeWorkHistory.bind(employeeController);
export const addWorkHistory = employeeController.addWorkHistory.bind(employeeController);

// DÒNG BỊ LỖI ĐÃ ĐƯỢC XÓA BỎ

```


==================== File: .\server\controllers\positionController.js ====================

// server/controllers/positionController.js
import larkServiceManager from '../services/lark-service-manager.js';
import { formatResponse } from '../services/utils/response-formatter.js';

// ==================== POSITION MANAGEMENT ====================
export const getPositions = async (req, res) => {
    try {
        const positions = await larkServiceManager.getAllPositions();
        res.json(formatResponse(true, 'Lấy danh sách vị trí thành công', positions));
    } catch (error) {
        console.error('❌ Controller: getPositions failed:', error);
        res.status(500).json(formatResponse(false, `Lỗi khi tải danh sách vị trí: ${error.message}`, null, 'POSITION_LOAD_FAILED'));
    }
};

export const addPosition = async (req, res) => {
    try {
        const { positionName, description } = req.body;
        // (Validation sẽ được thêm vào ở bước sau)
        const position = {
            positionName,
            description: description || '',
            status: 'active',
            createdAt: new Date().toISOString()
        };
        const result = await larkServiceManager.addPosition(position);
        res.json(formatResponse(true, 'Thêm vị trí thành công', { position: result }));
    } catch (error) {
        console.error('❌ Controller: addPosition failed:', error);
        res.status(500).json(formatResponse(false, `Lỗi khi thêm vị trí: ${error.message}`, null, 'POSITION_ADD_FAILED'));
    }
};

export const updatePosition = async (req, res) => {
    try {
        const { id } = req.params;
        const updatedData = { ...req.body, updatedAt: new Date().toISOString() };
        const result = await larkServiceManager.updatePosition(id, updatedData);
        res.json(formatResponse(true, 'Cập nhật vị trí thành công', { position: result }));
    } catch (error) {
        console.error('❌ Controller: updatePosition failed:', error);
        res.status(500).json(formatResponse(false, `Lỗi khi cập nhật vị trí: ${error.message}`, null, 'POSITION_UPDATE_FAILED'));
    }
};

export const deletePosition = async (req, res) => {
    try {
        const { id } = req.params;
        await larkServiceManager.deletePosition(id);
        res.json(formatResponse(true, 'Xóa vị trí thành công'));
    } catch (error) {
        console.error('❌ Controller: deletePosition failed:', error);
        res.status(500).json(formatResponse(false, `Lỗi khi xóa vị trí: ${error.message}`, null, 'POSITION_DELETE_FAILED'));
    }
};

```


==================== File: .\server\controllers\recruitmentController.js ====================

import larkServiceManager from '../services/lark-service-manager.js';
import { formatResponse } from '../services/utils/response-formatter.js';

export const getRecruitmentRequests = async (req, res) => {
    try {
        const filters = req.query;
        const recruitmentService = larkServiceManager.getService('recruitment');
        const requests = await recruitmentService.getRecruitmentRequests(filters);

        res.json(formatResponse(true, 'Lấy danh sách đề xuất thành công', requests));
    } catch (error) {
        console.error('❌ Controller: getRecruitmentRequests failed:', error);
        res.status(500).json(formatResponse(
            false, 
            `Lỗi khi lấy danh sách đề xuất: ${error.message}`, 
            null, 
            'RECRUITMENT_LOAD_FAILED'
        ));
    }
};

```


==================== File: .\server\controllers\storeController.js ====================

// server/controllers/storeController.js
import larkServiceManager from '../services/lark-service-manager.js';
import { formatResponse } from '../services/utils/response-formatter.js';

// ==================== STORE MANAGEMENT ====================
export const getStores = async (req, res) => {
    try {
        const stores = await larkServiceManager.getAllStores();
        res.json(formatResponse(true, 'Lấy danh sách cửa hàng thành công', stores));
    } catch (error) {
        console.error('❌ Controller: getStores failed:', error);
        res.status(500).json(formatResponse(false, `Lỗi khi tải danh sách cửa hàng: ${error.message}`, null, 'STORE_LOAD_FAILED'));
    }
};

export const addStore = async (req, res) => {
    try {
        const { storeName, address } = req.body;
        // (Validation sẽ được thêm vào ở bước sau)
        const store = {
            storeName,
            address,
            status: 'active',
            createdAt: new Date().toISOString()
        };
        const result = await larkServiceManager.addStore(store);
        res.json(formatResponse(true, 'Thêm cửa hàng thành công', { store: result }));
    } catch (error) {
        console.error('❌ Controller: addStore failed:', error);
        res.status(500).json(formatResponse(false, `Lỗi khi thêm cửa hàng: ${error.message}`, null, 'STORE_ADD_FAILED'));
    }
};

export const updateStore = async (req, res) => {
    try {
        const { id } = req.params;
        const updatedData = { ...req.body, updatedAt: new Date().toISOString() };
        const result = await larkServiceManager.updateStore(id, updatedData);
        res.json(formatResponse(true, 'Cập nhật cửa hàng thành công', { store: result }));
    } catch (error) {
        console.error('❌ Controller: updateStore failed:', error);
        res.status(500).json(formatResponse(false, `Lỗi khi cập nhật cửa hàng: ${error.message}`, null, 'STORE_UPDATE_FAILED'));
    }
};

export const deleteStore = async (req, res) => {
    try {
        const { id } = req.params;
        await larkServiceManager.deleteStore(id);
        res.json(formatResponse(true, 'Xóa cửa hàng thành công'));
    } catch (error) {
        console.error('❌ Controller: deleteStore failed:', error);
        res.status(500).json(formatResponse(false, `Lỗi khi xóa cửa hàng: ${error.message}`, null, 'STORE_DELETE_FAILED'));
    }
};

```


==================== File: .\server\middleware\auth.js ====================

const authenticateUser = (req, res, next) => {
    if (!req.session || !req.session.user) {
        return res.status(401).json({ error: 'Unauthorized' });
    }
    req.user = req.session.user;
    next();
};

const authorizeRoles = (...roles) => {
    return (req, res, next) => {
        if (!req.user || !roles.includes(req.user.role)) {
            return res.status(403).json({ error: 'Forbidden' });
        }
        next();
    };
};

export {
    authenticateUser,
    authorizeRoles
};

```


==================== File: .\server\middleware\validation.js ====================

// server/middleware/validation.js
import { formatResponse } from '../services/utils/response-formatter.js';
import { EmployeeValidator } from '../services/employees/index.js';
import { MasterDataValidator } from '../services/master-data/index.js';

class ValidationMiddleware {
    // Middleware để validate dữ liệu nhân viên mới
    static validateAddEmployee(req, res, next) {
        // Kiểm tra dữ liệu nhân viên
        const employeeErrors = EmployeeValidator.validateEmployeeData(req.body);
        if (employeeErrors.length > 0) {
            return res.status(400).json(formatResponse(false, employeeErrors.join(', '), null, 'VALIDATION_ERROR'));
        }

        // Kiểm tra dữ liệu work history
        const workHistoryErrors = EmployeeValidator.validateWorkHistoryData(req.body.workHistoryData || []);
        if (workHistoryErrors.length > 0) {
            return res.status(400).json(formatResponse(false, workHistoryErrors.join(', '), null, 'VALIDATION_ERROR'));
        }
        
        next();
    }

    // Middleware để validate dữ liệu khi cập nhật nhân viên (có thể khác với khi thêm mới)
    static validateUpdateEmployee(req, res, next) {
        const errors = EmployeeValidator.validateEmployeeData(req.body);
        if (errors.length > 0) {
            return res.status(400).json(formatResponse(false, errors.join(', '), null, 'VALIDATION_ERROR'));
        }
        next();
    }
    
    // Middleware để validate dữ liệu cửa hàng
    static validateStore(req, res, next) {
        const errors = MasterDataValidator.validateStoreData(req.body);
         if (errors.length > 0) {
            return res.status(400).json(formatResponse(false, errors.join(', '), null, 'VALIDATION_ERROR'));
        }
        next();
    }
    
    // Middleware để validate dữ liệu vị trí
    static validatePosition(req, res, next) {
        const errors = MasterDataValidator.validatePositionData(req.body);
         if (errors.length > 0) {
            return res.status(400).json(formatResponse(false, errors.join(', '), null, 'VALIDATION_ERROR'));
        }
        next();
    }
}

export default ValidationMiddleware;

```


==================== File: .\server\routes\attendance.js ====================

// server/routes/attendance.js
import express from 'express';
import { 
    getAttendanceLogs, 
    addAttendanceLog, 
    getEmployeeHours
} from '../controllers/attendanceController.js';
import { authenticateUser } from '../middleware/auth.js';

const router = express.Router();

router.get('/logs', authenticateUser, getAttendanceLogs);
router.post('/logs', authenticateUser, addAttendanceLog);
router.get('/employee-hours', authenticateUser, getEmployeeHours);

export default router;

```


==================== File: .\server\routes\auth.js ====================

import express from 'express';
import { login, logout, getProfile } from '../controllers/authController.js';
import { authenticateUser } from '../middleware/auth.js';

const router = express.Router();

router.post('/login', login);
router.post('/logout', logout);
router.get('/profile', authenticateUser, getProfile);

export default router;

```


==================== File: .\server\routes\dashboard.js ====================

import express from 'express';
import { getDashboardStats } from '../controllers/dashboardController.js';
import { authenticateUser } from '../middleware/auth.js';

const router = express.Router();

router.get('/stats', authenticateUser, getDashboardStats);

export default router;

```


==================== File: .\server\routes\employees.js ====================

// server/routes/employees.js
import express from 'express';
import { 
    getAllEmployees, 
    addEmployee, 
    updateEmployee, 
    deleteEmployee, 
    searchEmployees, 
    getEmployeeWorkHistory, 
    addWorkHistory
} from '../controllers/employeeController.js';
import { authenticateUser, authorizeRoles } from '../middleware/auth.js';
import ValidationMiddleware from '../middleware/validation.js';

const router = express.Router();

// ==================== EMPLOYEE ROUTES ====================
// GET routes should come before parameterized routes
router.get('/search', authenticateUser, searchEmployees);
router.get('/', authenticateUser, getAllEmployees);

// Employee CRUD operations
router.post('/', authenticateUser, authorizeRoles('hr', 'admin'), ValidationMiddleware.validateAddEmployee, addEmployee);
router.put('/:id', authenticateUser, authorizeRoles('hr', 'admin'), ValidationMiddleware.validateUpdateEmployee, updateEmployee);
router.delete('/:id', authenticateUser, authorizeRoles('hr', 'admin'), deleteEmployee);

// ==================== WORK HISTORY ROUTES ====================
// Work history routes - SỬA ĐỂ TƯƠNG THÍCH VỚI CLIENT
router.get('/:employeeId/work-history', authenticateUser, getEmployeeWorkHistory);
router.post('/work-history', authenticateUser, authorizeRoles('hr', 'admin'), addWorkHistory);

// ==================== ERROR HANDLING ====================
// Handle 404 for unmatched routes
router.use('*', (req, res) => {
    res.status(404).json({
        success: false,
        error: 'Route not found',
        path: req.originalUrl
    });
});

export default router;

```


==================== File: .\server\routes\masterData.js ====================

// server/routes/masterData.js
import express from 'express';
import { authenticateUser, authorizeRoles } from '../middleware/auth.js';
import { getStores, addStore, updateStore, deleteStore } from '../controllers/storeController.js';
import { getPositions, addPosition, updatePosition, deletePosition } from '../controllers/positionController.js';
import ValidationMiddleware from '../middleware/validation.js';

const router = express.Router();

// ==================== STORE ROUTES ====================
router.get('/stores', authenticateUser, getStores);
router.post('/stores', authenticateUser, authorizeRoles('hr', 'admin'), ValidationMiddleware.validateStore, addStore);
router.put('/stores/:id', authenticateUser, authorizeRoles('hr', 'admin'), ValidationMiddleware.validateStore, updateStore);
router.delete('/stores/:id', authenticateUser, authorizeRoles('hr', 'admin'), deleteStore);

// ==================== POSITION ROUTES ====================
router.get('/positions', authenticateUser, getPositions);
router.post('/positions', authenticateUser, authorizeRoles('hr', 'admin'), ValidationMiddleware.validatePosition, addPosition);
router.put('/positions/:id', authenticateUser, authorizeRoles('hr', 'admin'), ValidationMiddleware.validatePosition, updatePosition);
router.delete('/positions/:id', authenticateUser, authorizeRoles('hr', 'admin'), deletePosition);

export default router;

```


==================== File: .\server\routes\recruitment.js ====================

// server/routes/recruitment.js
import express from 'express';
import { getRecruitmentRequests } from '../controllers/recruitmentController.js';
import { authenticateUser } from '../middleware/auth.js';

const router = express.Router();

router.get('/', authenticateUser, getRecruitmentRequests);

export default router;

```


==================== File: .\server\services\index.js ====================

// Main services export file
export * from './core/index.js';
export * from './auth/index.js';
export * from './employee/index.js';
export * from './attendance/index.js';
export * from './recruitment/index.js';
export * from './master-data/index.js';
export * from './utils/index.js';

// Export service factory for easy access
export { default as ServiceFactory } from './utils/service-factory.js';

```


==================== File: .\server\services\lark-service-manager.js ====================

// server/services/lark-service-manager.js
import { EmployeeService, WorkHistoryService } from './employees/index.js';
import { AttendanceService } from './attendance/index.js';
import { RecruitmentService } from './recruitment/index.js';
import { StoreService, PositionService } from './master-data/index.js';
import { AuthService, SessionService } from './auth/index.js';
import { validateLarkConfig } from '../config/lark-config.js';

class LarkServiceManager {
    constructor() {
        this.services = {};
        this.initialized = false;
    }

    async init() {
        if (this.initialized) return;

        try {
            console.log('🚀 Initializing Lark Service Manager...');
            
            // Validate configuration first
            validateLarkConfig();
            
            // Initialize all services
            this.services.employee = new EmployeeService();
            this.services.workHistory = new WorkHistoryService();
            this.services.attendance = new AttendanceService();
            this.services.recruitment = new RecruitmentService();
            this.services.store = new StoreService();
            this.services.position = new PositionService();
            this.services.auth = new AuthService();
            this.services.session = new SessionService();

            // Initialize each service
            await Promise.all([
                this.services.employee.init(),
                this.services.workHistory.init(),
                this.services.attendance.init(),
                this.services.recruitment.init(),
                this.services.store.init(),
                this.services.position.init(),
                this.services.auth.init(),
                this.services.session.init()
            ]);

            this.initialized = true;
            console.log('✅ All Lark services initialized successfully');
            
        } catch (error) {
            console.error('❌ Lark Service Manager initialization failed:', error);
            throw new Error(`Service Manager initialization failed: ${error.message}`);
        }
    }

    async ensureInitialized() {
        if (!this.initialized) {
            await this.init();
        }
    }

    // Get specific service for advanced operations
    getService(serviceName) {
        if (!this.services[serviceName]) {
            throw new Error(`Service '${serviceName}' not found. Available services: ${Object.keys(this.services).join(', ')}`);
        }
        return this.services[serviceName];
    }

    // ==================== EMPLOYEE METHODS ====================
    async getAllEmployees() {
        await this.ensureInitialized();
        return await this.services.employee.getAllEmployees();
    }

    async addEmployee(employeeData) {
        await this.ensureInitialized();
        return await this.services.employee.addEmployee(employeeData);
    }

    async updateEmployee(id, employeeData) {
        await this.ensureInitialized();
        return await this.services.employee.updateEmployee(id, employeeData);
    }

    async deleteEmployee(id) {
        await this.ensureInitialized();
        return await this.services.employee.deleteEmployee(id);
    }

    async checkEmployeeIdExists(employeeId) {
        await this.ensureInitialized();
        return await this.services.employee.checkEmployeeIdExists(employeeId);
    }

    async searchEmployees(query) {
        await this.ensureInitialized();
        return await this.services.employee.searchEmployees(query);
    }

    // ==================== WORK HISTORY METHODS ====================
    async getWorkHistoryByEmployee(employeeId) {
        await this.ensureInitialized();
        return await this.services.workHistory.getWorkHistoryByEmployee(employeeId);
    }

    async addWorkHistory(workHistoryData) {
        await this.ensureInitialized();
        return await this.services.workHistory.addWorkHistory(workHistoryData);
    }

    async checkWorkHistoryExists(employeeId, requestNo) {
        await this.ensureInitialized();
        return await this.services.workHistory.checkWorkHistoryExists(employeeId, requestNo);
    }
    
    // ==================== ATTENDANCE METHODS ====================
    async getAttendanceLogs(filters = {}) {
        await this.ensureInitialized();
        return await this.services.attendance.getAttendanceLogs(filters);
    }

    async addAttendanceLog(attendanceData) {
        await this.ensureInitialized();
        return await this.services.attendance.addAttendanceLog(attendanceData);
    }

    async getEmployeeHours() {
        await this.ensureInitialized();
        return await this.services.attendance.getEmployeeHours();
    }

    // ==================== STORE METHODS ====================
    async getAllStores() {
        await this.ensureInitialized();
        return await this.services.store.getAllStores();
    }

    async addStore(storeData) {
        await this.ensureInitialized();
        return await this.services.store.addStore(storeData);
    }

    async updateStore(id, storeData) {
        await this.ensureInitialized();
        return await this.services.store.updateStore(id, storeData);
    }

    async deleteStore(id) {
        await this.ensureInitialized();
        return await this.services.store.deleteStore(id);
    }

    // ==================== POSITION METHODS ====================
    async getAllPositions() {
        await this.ensureInitialized();
        return await this.services.position.getAllPositions();
    }

    async addPosition(positionData) {
        await this.ensureInitialized();
        return await this.services.position.addPosition(positionData);
    }

    async updatePosition(id, positionData) {
        await this.ensureInitialized();
        return await this.services.position.updatePosition(id, positionData);
    }

    async deletePosition(id) {
        await this.ensureInitialized();
        return await this.services.position.deletePosition(id);
    }
}

export default new LarkServiceManager();

```


==================== File: .\server\services\attendance\attendance-service.js ====================

// Attendance service
import BaseService from '../core/base-service.js';
import LarkClient from '../core/lark-client.js';
import CacheService from '../core/cache-service.js';

class AttendanceService extends BaseService {
    constructor() {
        super();
        this.baseId = process.env.LARK_BASE_ID;
        this.tableId = process.env.LARK_ATTENDANCE_TABLE_ID;
    }

    async initializeService() {
        console.log('Initializing Attendance Service...');
    }

    async getAttendanceLogs(filters = {}) {
        const cacheKey = `attendance_logs_${JSON.stringify(filters)}`;
        let logs = CacheService.get(cacheKey);
        
        if (!logs) {
            try {
                let filterString = '';
                if (filters.employeeId) {
                    filterString = `AND(CurrentValue.[Employee ID] = "${filters.employeeId}")`;
                }
                
                const response = await LarkClient.get(`/bitable/v1/apps/${this.baseId}/tables/${this.tableId}/records`, {
                    filter: filterString
                });

                logs = this.transformAttendanceData(response.data?.items || []);
                
                // Apply date filters if provided
                if (filters.dateFrom || filters.dateTo) {
                    logs = this.filterByDateRange(logs, filters.dateFrom, filters.dateTo);
                }
                
                CacheService.set(cacheKey, logs, 300000); // 5 minutes
            } catch (error) {
                console.error('Error fetching attendance logs:', error);
                logs = this.getMockAttendanceLogs();
            }
        }
        
        return logs;
    }

    async addAttendanceLog(attendanceData) {
        try {
            const transformedData = this.transformAttendanceForLark(attendanceData);
            
            const response = await LarkClient.post(`/bitable/v1/apps/${this.baseId}/tables/${this.tableId}/records`, {
                fields: transformedData
            });

            // Clear cache
            CacheService.clear();
            
            return this.transformAttendanceData([response.data])[0];
        } catch (error) {
            await this.handleError(error, 'addAttendanceLog');
            throw error;
        }
    }

    async getEmployeeHours() {
        const logs = await this.getAttendanceLogs();
        const employeeHours = {};
        
        logs.forEach(log => {
            if (!employeeHours[log.employeeId]) {
                employeeHours[log.employeeId] = {
                    totalHours: 0,
                    totalDays: 0
                };
            }
            
            employeeHours[log.employeeId].totalHours += log.totalHours || 0;
            employeeHours[log.employeeId].totalDays += 1;
        });
        
        return employeeHours;
    }

    filterByDateRange(logs, dateFrom, dateTo) {
        return logs.filter(log => {
            const logDate = new Date(log.date);
            const fromDate = dateFrom ? new Date(dateFrom) : null;
            const toDate = dateTo ? new Date(dateTo) : null;
            
            if (fromDate && logDate < fromDate) return false;
            if (toDate && logDate > toDate) return false;
            
            return true;
        });
    }

    calculateTotalHours(timeIn, timeOut) {
        if (!timeIn || !timeOut) return 0;
        
        const inTime = new Date(`1970-01-01T${timeIn}`);
        const outTime = new Date(`1970-01-01T${timeOut}`);
        
        const diffMs = outTime - inTime;
        return Math.max(0, diffMs / (1000 * 60 * 60)); // Convert to hours
    }

    transformAttendanceData(larkData) {
        return larkData.map(record => {
            const timeIn = record.fields['Time In'] || '';
            const timeOut = record.fields['Time Out'] || '';
            const totalHours = this.calculateTotalHours(timeIn, timeOut);
            
            return {
                id: record.record_id,
                employeeId: record.fields['Employee ID'] || '',
                date: record.fields['Date'] || '',
                timeIn: timeIn,
                timeOut: timeOut,
                totalHours: totalHours,
                notes: record.fields['Notes'] || '',
                createdAt: record.fields['Created At'] || new Date().toISOString()
            };
        });
    }

    transformAttendanceForLark(attendanceData) {
        return {
            'Employee ID': attendanceData.employeeId,
            'Date': attendanceData.date,
            'Time In': attendanceData.timeIn,
            'Time Out': attendanceData.timeOut,
            'Notes': attendanceData.notes || '',
            'Created At': new Date().toISOString()
        };
    }

    getMockAttendanceLogs() {
        return [
            {
                id: 'att_001',
                employeeId: 'Nguyễn Văn A - 0123456789',
                date: '2025-01-15',
                timeIn: '08:00',
                timeOut: '17:00',
                totalHours: 8,
                notes: 'Làm việc bình thường',
                createdAt: new Date().toISOString()
            }
        ];
    }
}

export default AttendanceService;

```


==================== File: .\server\services\attendance\attendance-validator.js ====================

// Attendance validation service
class AttendanceValidator {
    static validateAttendanceData(attendanceData) {
        const errors = [];

        // Required fields validation
        if (!attendanceData.employeeId) {
            errors.push('Employee ID là bắt buộc');
        }

        if (!attendanceData.date) {
            errors.push('Ngày là bắt buộc');
        } else if (!this.isValidDate(attendanceData.date)) {
            errors.push('Ngày không hợp lệ');
        }

        if (!attendanceData.timeIn) {
            errors.push('Thời gian vào là bắt buộc');
        } else if (!this.isValidTime(attendanceData.timeIn)) {
            errors.push('Thời gian vào không hợp lệ');
        }

        if (!attendanceData.timeOut) {
            errors.push('Thời gian ra là bắt buộc');
        } else if (!this.isValidTime(attendanceData.timeOut)) {
            errors.push('Thời gian ra không hợp lệ');
        }

        // Check if time out is after time in
        if (attendanceData.timeIn && attendanceData.timeOut) {
            if (!this.isTimeOutAfterTimeIn(attendanceData.timeIn, attendanceData.timeOut)) {
                errors.push('Thời gian ra phải sau thời gian vào');
            }
        }

        return errors;
    }

    static isValidDate(dateString) {
        const date = new Date(dateString);
        return date instanceof Date && !isNaN(date);
    }

    static isValidTime(timeString) {
        const timeRegex = /^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$/;
        return timeRegex.test(timeString);
    }

    static isTimeOutAfterTimeIn(timeIn, timeOut) {
        const inTime = new Date(`1970-01-01T${timeIn}`);
        const outTime = new Date(`1970-01-01T${timeOut}`);
        return outTime > inTime;
    }
}

export default AttendanceValidator;

```


==================== File: .\server\services\attendance\index.js ====================

// Attendance services exports
export { default as AttendanceService } from './attendance-service.js';
export { default as AttendanceValidator } from './attendance-validator.js';

```


==================== File: .\server\services\auth\auth-service.js ====================

// Authentication service
import BaseService from '../core/base-service.js';
import { users } from '../../config/database.js';

class AuthService extends BaseService {
    constructor() {
        super();
        this.activeSessions = new Map();
    }

    async validateCredentials(username, password) {
        const user = users[username];
        if (!user || user.password !== password) {
            throw new Error('Invalid credentials');
        }
        return user;
    }

    createSession(user) {
        const sessionData = {
            id: user.id,
            username: user.username,
            role: user.role,
            fullName: user.fullName,
            loginTime: new Date().toISOString()
        };
        
        this.activeSessions.set(user.id, sessionData);
        return sessionData;
    }

    validateSession(sessionId) {
        return this.activeSessions.get(sessionId);
    }

    destroySession(sessionId) {
        return this.activeSessions.delete(sessionId);
    }

    async login(credentials) {
        const { username, password } = credentials;
        
        const user = await this.validateCredentials(username, password);
        const sessionData = this.createSession(user);
        
        return {
            success: true,
            user: sessionData,
            message: 'Login successful'
        };
    }

    async logout(sessionId) {
        const destroyed = this.destroySession(sessionId);
        return {
            success: destroyed,
            message: destroyed ? 'Logout successful' : 'Session not found'
        };
    }

    getActiveUsers() {
        return Array.from(this.activeSessions.values());
    }
}

export default AuthService;

```


==================== File: .\server\services\auth\index.js ====================

// Auth services exports
export { default as AuthService } from './auth-service.js';
export { default as SessionService } from './session-service.js';

```


==================== File: .\server\services\auth\session-service.js ====================

// Session management service
import BaseService from '../core/base-service.js';

class SessionService extends BaseService {
    constructor() {
        super();
        this.sessions = new Map();
        this.sessionTimeout = 24 * 60 * 60 * 1000; // 24 hours
    }

    createSession(user, req) {
        const sessionId = this.generateId('sess_');
        const sessionData = {
            id: sessionId,
            userId: user.id,
            user: user,
            createdAt: new Date().toISOString(),
            lastAccessed: new Date().toISOString(),
            ipAddress: req.ip || req.connection.remoteAddress,
            userAgent: req.get('User-Agent')
        };

        this.sessions.set(sessionId, sessionData);
        return sessionData;
    }

    getSession(sessionId) {
        const session = this.sessions.get(sessionId);
        if (!session) return null;

        // Check if session is expired
        const now = Date.now();
        const lastAccessed = new Date(session.lastAccessed).getTime();
        if (now - lastAccessed > this.sessionTimeout) {
            this.destroySession(sessionId);
            return null;
        }

        // Update last accessed
        session.lastAccessed = new Date().toISOString();
        this.sessions.set(sessionId, session);
        
        return session;
    }

    destroySession(sessionId) {
        return this.sessions.delete(sessionId);
    }

    cleanupExpiredSessions() {
        const now = Date.now();
        for (const [sessionId, session] of this.sessions.entries()) {
            const lastAccessed = new Date(session.lastAccessed).getTime();
            if (now - lastAccessed > this.sessionTimeout) {
                this.destroySession(sessionId);
            }
        }
    }

    getActiveSessions() {
        return Array.from(this.sessions.values());
    }

    getUserSessions(userId) {
        return Array.from(this.sessions.values()).filter(session => session.userId === userId);
    }
}

export default SessionService;

```


==================== File: .\server\services\core\base-service.js ====================

// Abstract base class for all services
import { formatResponse } from '../utils/response-formatter.js';

export default class BaseService {
    constructor() {
        this.initialized = false;
        this.cache = new Map();
    }

    async init() {
        if (!this.initialized) {
            await this.initializeService();
            this.initialized = true;
        }
    }

    async initializeService() {
        // Override in subclasses
    }

    formatResponse(success, message, data = null, errorCode = null) {
        return formatResponse(success, message, data, errorCode);
    }

    validateRequired(data, fields) {
        const errors = [];
        fields.forEach(field => {
            if (!data[field]) {
                errors.push(`${field} là bắt buộc`);
            }
        });
        return errors;
    }

    generateId(prefix = '') {
        return `${prefix}${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
    }

    async handleError(error, operation) {
        console.error(`Error in ${operation}:`, error);
        throw error;
    }
}

```


==================== File: .\server\services\core\cache-service.js ====================

// server/services/core/cache-service.js
class CacheService {
    constructor() {
        this.cache = new Map();
        this.ttl = new Map();
    }

    set(key, value, ttlMs = 300000) { // 5 minutes default
        this.cache.set(key, value);
        this.ttl.set(key, Date.now() + ttlMs);
    }

    get(key) {
        const expiry = this.ttl.get(key);
        if (expiry && Date.now() > expiry) {
            this.delete(key);
            return null;
        }
        return this.cache.get(key);
    }

    delete(key) {
        this.cache.delete(key);
        this.ttl.delete(key);
    }

    clear() {
        this.cache.clear();
        this.ttl.clear();
    }

    has(key) {
        const expiry = this.ttl.get(key);
        if (expiry && Date.now() > expiry) {
            this.delete(key);
            return false;
        }
        return this.cache.has(key);
    }

    size() {
        return this.cache.size;
    }

    cleanup() {
        const now = Date.now();
        for (const [key, expiry] of this.ttl.entries()) {
            if (now > expiry) {
                this.delete(key);
            }
        }
    }
}

export default new CacheService();

```


==================== File: .\server\services\core\index.js ====================

// Core services exports
export { default as BaseService } from './base-service.js';
export { default as LarkClient } from './lark-client.js';
export { default as CacheService } from './cache-service.js';

```


==================== File: .\server\services\core\lark-client.js ====================

// server/services/core/lark-client.js
import axios from 'axios';

class LarkClient {
    constructor() {
        // Không load env vars tại constructor
        this.baseURL = 'https://open.larksuite.com/open-apis';
        this.tenantAccessToken = null;
        this.tokenExpiry = null;
    }

    // Getter methods để load env vars khi cần
    get appId() {
        return process.env.LARK_APP_ID;
    }

    get appSecret() {
        return process.env.LARK_APP_SECRET;
    }

    async getTenantAccessToken() {
        console.log('🔑 Getting tenant access token...');
        
        // Debug environment variables khi thực sự sử dụng
        console.log('🔍 DEBUG Lark Credentials:');
        console.log('App ID:', this.appId ? `${this.appId.substring(0, 8)}...` : 'Missing');
        console.log('App Secret:', this.appSecret ? `${this.appSecret.substring(0, 8)}...` : 'Missing');
        
        if (!this.appId || !this.appSecret) {
            throw new Error('Lark credentials not configured properly');
        }
        
        if (this.tenantAccessToken && this.tokenExpiry > Date.now()) {
            console.log('✅ Using cached access token');
            return this.tenantAccessToken;
        }

        try {
            console.log('📡 Requesting new access token from Lark...');
            const payload = {
                app_id: this.appId,
                app_secret: this.appSecret
            };
            
            console.log('🚀 Sending request to:', `${this.baseURL}/auth/v3/tenant_access_token/internal`);
            console.log('📦 Payload keys:', Object.keys(payload));
            
            const response = await axios.post(`${this.baseURL}/auth/v3/tenant_access_token/internal`, payload);
            
            console.log('📨 Lark auth response:', {
                status: response.status,
                code: response.data.code,
                msg: response.data.msg
            });

            if (response.data.code === 0) {
                this.tenantAccessToken = response.data.tenant_access_token;
                this.tokenExpiry = Date.now() + (response.data.expire - 300) * 1000;
                console.log('✅ Access token obtained successfully');
                console.log('Token expires in:', Math.floor((this.tokenExpiry - Date.now()) / 1000), 'seconds');
                return this.tenantAccessToken;
            } else {
                console.error('❌ Lark auth error:', response.data);
                throw new Error(`Lark Auth Error: ${response.data.msg}`);
            }
        } catch (error) {
            console.error('❌ Error getting tenant access token:', {
                message: error.message,
                response: error.response?.data,
                status: error.response?.status
            });
            throw error;
        }
    }

    async request(endpoint, options = {}) {
        console.log(`📞 Making Lark API request: ${options.method || 'GET'} ${endpoint}`);
        
        const token = await this.getTenantAccessToken();
        
        const config = {
            ...options,
            headers: {
                'Authorization': `Bearer ${token}`,
                'Content-Type': 'application/json',
                ...options.headers
            }
        };

        try {
            console.log('🔄 Sending request to:', `${this.baseURL}${endpoint}`);
            const response = await axios(`${this.baseURL}${endpoint}`, config);
            
            console.log('✅ Lark API response:', {
                status: response.status,
                dataLength: response.data ? JSON.stringify(response.data).length : 0
            });
            
            return response.data;
        } catch (error) {
            console.error('❌ Lark API Error:', {
                endpoint,
                status: error.response?.status,
                data: error.response?.data,
                message: error.message
            });
            throw error;
        }
    }

    async get(endpoint, params = {}) {
        console.log('📥 GET request:', endpoint, params);
        return this.request(endpoint, { method: 'GET', params });
    }

    async post(endpoint, data = {}) {
        console.log('📤 POST request:', endpoint, { dataKeys: Object.keys(data) });
        return this.request(endpoint, { method: 'POST', data });
    }

    async put(endpoint, data = {}) {
        console.log('📝 PUT request:', endpoint, { dataKeys: Object.keys(data) });
        return this.request(endpoint, { method: 'PUT', data });
    }

    async delete(endpoint) {
        console.log('🗑️ DELETE request:', endpoint);
        return this.request(endpoint, { method: 'DELETE' });
    }
}

export default new LarkClient();

```


==================== File: .\server\services\employees\employee-service.js ====================

// Employee management service
import BaseService from '../core/base-service.js';
import LarkClient from '../core/lark-client.js';
import CacheService from '../core/cache-service.js';

class EmployeeService extends BaseService {
    constructor() {
        super();
        this.tableName = 'employees';
        this.baseId = process.env.LARK_BASE_ID;
        this.tableId = process.env.LARK_EMPLOYEE_TABLE_ID;
    }

    async initializeService() {
        // Initialize Lark Base connection
        console.log('Initializing Employee Service...');
    }

    async getAllEmployees() {
        const cacheKey = 'employees_all';
        let employees = CacheService.get(cacheKey);

        if (employees) {
            console.log('✅ SERVICE: Sử dụng dữ liệu nhân viên từ cache.');
            return employees;
        }

        try {
            console.log('📡 SERVICE: Đang lấy dữ liệu nhân viên từ Lark API...');
            const response = await LarkClient.get(`/bitable/v1/apps/${this.baseId}/tables/${this.tableId}/records`);
            
            employees = this.transformEmployeeData(response.data?.items || []);
            console.log(`✅ SERVICE: Lấy và chuyển đổi thành công ${employees.length} nhân viên.`);
            
            CacheService.set(cacheKey, employees, 300000); // Cache trong 5 phút
            
            return employees;
        } catch (error) {
            console.error('❌ SERVICE: Lỗi khi lấy dữ liệu nhân viên từ Lark:', error.message);
            console.log('🔄 SERVICE: Sử dụng dữ liệu mẫu (mock data) làm phương án dự phòng.');
            return this.getMockEmployees(); // Trả về mock data nếu có lỗi
        }
    }

    generateEmployeeId(fullName, phoneNumber) {
        return `${fullName} - ${phoneNumber}`;
    }


    async addEmployee(employeeData) {
        try {
            const transformedData = this.transformEmployeeForLark(employeeData);
            
            console.log('📤 EMPLOYEE SERVICE: Sending data to Lark:', transformedData);
            console.log('🔍 EMPLOYEE SERVICE: Base ID:', this.baseId);
            console.log('🔍 EMPLOYEE SERVICE: Table ID:', this.tableId);
            console.log('🔍 EMPLOYEE SERVICE: URL will be:', `/bitable/v1/apps/${this.baseId}/tables/${this.tableId}/records`);
            
            const response = await LarkClient.post(`/bitable/v1/apps/${this.baseId}/tables/${this.tableId}/records`, {
                fields: transformedData
            });

            console.log('📥 EMPLOYEE SERVICE: Raw Lark response:', response);
            console.log('📥 EMPLOYEE SERVICE: Response status:', response?.status);
            console.log('📥 EMPLOYEE SERVICE: Response data:', response?.data);

            // Clear cache
            CacheService.delete('employees_all');
            
            return {
                success: true,
                employeeId: employeeData.employeeId,
                larkResponse: response  // ✅ THÊM: Debug response
            };
            
        } catch (error) {
            console.error('❌ EMPLOYEE SERVICE: Full error:', error);
            console.error('❌ EMPLOYEE SERVICE: Error message:', error.message);
            console.error('❌ EMPLOYEE SERVICE: Error stack:', error.stack);
            await this.handleError(error, 'addEmployee');
            throw error;
        }
    }



    async updateEmployee(id, employeeData) {
        try {
            const transformedData = this.transformEmployeeForLark(employeeData);
            
            const response = await LarkClient.put(`/bitable/v1/apps/${this.baseId}/tables/${this.tableId}/records/${id}`, {
                fields: transformedData
            });

            // Clear cache
            CacheService.delete('employees_all');
            
            return this.transformEmployeeData([response.data])[0];
        } catch (error) {
            await this.handleError(error, 'updateEmployee');
            throw error;
        }
    }

    async deleteEmployee(id) {
        try {
            await LarkClient.delete(`/bitable/v1/apps/${this.baseId}/tables/${this.tableId}/records/${id}`);
            
            // Clear cache
            CacheService.delete('employees_all');
            
            return true;
        } catch (error) {
            await this.handleError(error, 'deleteEmployee');
            throw error;
        }
    }

    async checkEmployeeIdExists(employeeId) {
        const employees = await this.getAllEmployees();
        return employees.some(emp => emp.employeeId === employeeId);
    }

    async searchEmployees(query) {
        const employees = await this.getAllEmployees();
        
        if (!query) return employees;
        
        const searchTerm = query.toLowerCase();
        return employees.filter(emp => 
            emp.fullName.toLowerCase().includes(searchTerm) ||
            emp.employeeId.toLowerCase().includes(searchTerm) ||
            emp.phoneNumber.includes(searchTerm)
        );
    }

    //generateEmployeeId(fullName, phoneNumber) {
    //    return `${fullName} - ${phoneNumber}`;
    //}

    transformEmployeeData(larkData) {
        
        if (!Array.isArray(larkData)) {
            console.warn('⚠️ SERVICE: larkData is not an array:', typeof larkData);
            return [];
        }
        
        const transformed = larkData.map((record, index) => {

            const result = {
                id: record.record_id,
                // ✅ SỬA: Sử dụng tên cột tiếng Việt từ Larkbase
                employeeId: record.fields['Mã nhân viên'] || '',
                fullName: record.fields['Họ tên'] || '',
                phoneNumber: record.fields['Số điện thoại'] || '',
                gender: record.fields['Giới tính'] || '',
                position: record.fields['Vị trí'] || '',
                hourlyRate: record.fields['Mức lương/giờ'] || 0,
                bankAccount: record.fields['Số tài khoản'] || '',
                bankName: record.fields['Ngân hàng'] || '',
                recruitmentLink: record.fields['Link đề xuất tuyển dụng'] || '',
                status: record.fields['Trạng thái'] || 'active',
                createdAt: record.fields['Created At'] || new Date().toISOString(),
                updatedAt: record.fields['Updated At'] || new Date().toISOString()
            };
            
            return result;
        });
        
        return transformed;
    }

    transformEmployeeForLark(employeeData) {
        return {
            'Mã nhân viên': employeeData.employeeId,
            'Họ tên': employeeData.fullName,
            'Số điện thoại': employeeData.phoneNumber,
            'Giới tính': employeeData.gender,
            'Vị trí': employeeData.position || '',
            'Mức lương/giờ': employeeData.hourlyRate,
            'Số tài khoản': employeeData.bankAccount,
            'Ngân hàng': employeeData.bankName,
            'Link đề xuất tuyển dụng': employeeData.recruitmentLink || '',
            'Trạng thái': employeeData.status || 'active'
        };
    }

    getMockEmployees() {
        return [
            {
                id: 'emp_001',
                employeeId: 'Nguyễn Văn A - 0123456789',
                fullName: 'Nguyễn Văn A',
                phoneNumber: '0123456789',
                gender: 'Nam',
                position: 'Nhân viên bán hàng',
                hourlyRate: 50000,
                bankAccount: '123456789',
                bankName: 'Vietcombank',
                recruitmentLink: '20250620014',
                status: 'active',
                createdAt: new Date().toISOString(),
                updatedAt: new Date().toISOString()
            },
            {
                id: 'emp_002',
                employeeId: 'Trần Thị B - 0987654321',
                fullName: 'Trần Thị B',
                phoneNumber: '0987654321',
                gender: 'Nữ',
                position: 'Thu ngân',
                hourlyRate: 45000,
                bankAccount: '987654321',
                bankName: 'Techcombank',
                recruitmentLink: '20250620017',
                status: 'active',
                createdAt: new Date().toISOString(),
                updatedAt: new Date().toISOString()
            }
        ];
    }
}

export default EmployeeService;

```


==================== File: .\server\services\employees\employee-validator.js ====================

// Employee validation service
class EmployeeValidator {
    static validateEmployeeData(employeeData) {
        const errors = [];

        // Required fields validation
        if (!employeeData.fullName || employeeData.fullName.trim().length < 2) {
            errors.push('Họ tên phải có ít nhất 2 ký tự');
        }

        if (!employeeData.phoneNumber || !this.isValidPhoneNumber(employeeData.phoneNumber)) {
            errors.push('Số điện thoại không hợp lệ');
        }

        if (!employeeData.gender || !['Nam', 'Nữ'].includes(employeeData.gender)) {
            errors.push('Giới tính phải là Nam hoặc Nữ');
        }

        if (!employeeData.hourlyRate || employeeData.hourlyRate <= 0) {
            errors.push('Lương theo giờ phải lớn hơn 0');
        }

        if (!employeeData.bankAccount || employeeData.bankAccount.trim().length < 6) {
            errors.push('Số tài khoản phải có ít nhất 6 ký tự');
        }

        if (!employeeData.bankName || employeeData.bankName.trim().length < 2) {
            errors.push('Tên ngân hàng là bắt buộc');
        }

        return errors;
    }

    static isValidPhoneNumber(phoneNumber) {
        const phoneRegex = /^[0-9]{10,11}$/;
        return phoneRegex.test(phoneNumber);
    }

    static validateWorkHistoryData(workHistoryData) {
        const errors = [];

        if (!Array.isArray(workHistoryData) || workHistoryData.length === 0) {
            errors.push('Phải có ít nhất một work history entry');
        }

        const requestNos = workHistoryData.map(item => item.requestNo);
        const uniqueRequestNos = [...new Set(requestNos)];
        
        if (requestNos.length !== uniqueRequestNos.length) {
            errors.push('Không được trùng lặp Request No');
        }

        workHistoryData.forEach((item, index) => {
            if (!item.requestNo || item.requestNo.trim().length === 0) {
                errors.push(`Work history entry ${index + 1}: Request No là bắt buộc`);
            }
        });

        return errors;
    }
}

export default EmployeeValidator;

```


==================== File: .\server\services\employees\index.js ====================

// Employee services exports
export { default as EmployeeService } from './employee-service.js';
export { default as WorkHistoryService } from './work-history-service.js';
export { default as EmployeeValidator } from './employee-validator.js';

```


==================== File: .\server\services\employees\work-history-service.js ====================

// Work history service
import BaseService from '../core/base-service.js';
import LarkClient from '../core/lark-client.js';


class WorkHistoryService extends BaseService {
    constructor() {
        super();
        this.baseId = process.env.LARK_BASE_ID;
        this.tableId = process.env.LARK_WORK_HISTORY_TABLE_ID;
    }


    async initializeService() {
        console.log('Initializing Work History Service...');
    }


    async getWorkHistoryByEmployee(employeeId) {
        try {
            const response = await LarkClient.get(`/bitable/v1/apps/${this.baseId}/tables/${this.tableId}/records`, {
                filter: `AND(CurrentValue.[Employee ID] = "${employeeId}")`
            });


            return this.transformWorkHistoryData(response.data?.items || []);
        } catch (error) {
            console.error('Error fetching work history:', error);
            return [];
        }
    }


    // ✅ THÊM METHOD MỚI
    async checkWorkHistoryExists(employeeId, requestNo) {
        try {
            console.log(`🔍 WORK HISTORY: Checking duplicate (${employeeId}, ${requestNo})`);
            
            const response = await LarkClient.get(`/bitable/v1/apps/${this.baseId}/tables/${this.tableId}/records`);
            
            const records = response.data?.items || [];
            console.log(`📋 WORK HISTORY: Found ${records.length} total records`);
            
            // Check xem có record nào match (employeeId, requestNo) không
            const exists = records.some(record => {
                const fields = record.fields || {};
                const recordEmployeeId = fields['Employee ID'];
                const recordRequestNo = fields['Request No'];
                
                const isMatch = recordEmployeeId === employeeId && recordRequestNo === requestNo;
                
                if (isMatch) {
                    console.log(`❌ WORK HISTORY: Found duplicate - ${recordEmployeeId} / ${recordRequestNo}`);
                }
                
                return isMatch;
            });
            
            console.log(`✅ WORK HISTORY: Duplicate check result: ${exists ? 'EXISTS' : 'NOT_EXISTS'}`);
            return exists;
            
        } catch (error) {
            console.error('❌ Error checking work history exists:', error);
            return false; // Safe fallback - cho phép thêm nếu không check được
        }
    }

    async addWorkHistory(workHistoryData) {
        try {
            const transformedData = this.transformWorkHistoryForLark(workHistoryData);
            
            console.log('📤 WORK HISTORY SERVICE: Sending data to Lark:', transformedData);
            console.log('🔍 WORK HISTORY SERVICE: Base ID:', this.baseId);
            console.log('🔍 WORK HISTORY SERVICE: Table ID:', this.tableId);
            console.log('🔍 WORK HISTORY SERVICE: URL will be:', `/bitable/v1/apps/${this.baseId}/tables/${this.tableId}/records`);
            
            const response = await LarkClient.post(`/bitable/v1/apps/${this.baseId}/tables/${this.tableId}/records`, {
                fields: transformedData
            });

            console.log('📥 WORK HISTORY SERVICE: Raw Lark response:', response);
            console.log('📥 WORK HISTORY SERVICE: Response status:', response?.status);
            console.log('📥 WORK HISTORY SERVICE: Response data:', response?.data);

            return {
                success: true,
                employeeId: workHistoryData.employeeId,
                requestNo: workHistoryData.requestNo,
                larkResponse: response  // ✅ THÊM: Debug response
            };
            
        } catch (error) {
            console.error('❌ WORK HISTORY SERVICE: Full error:', error);
            console.error('❌ WORK HISTORY SERVICE: Error message:', error.message);
            console.error('❌ WORK HISTORY SERVICE: Error stack:', error.stack);
            await this.handleError(error, 'addWorkHistory');
            throw error;
        }
    }



    async deleteWorkHistory(id) {
        try {
            await LarkClient.delete(`/bitable/v1/apps/${this.baseId}/tables/${this.tableId}/records/${id}`);
            return true;
        } catch (error) {
            await this.handleError(error, 'deleteWorkHistory');
            throw error;
        }
    }


    transformWorkHistoryData(larkData) {
        return larkData.map(record => ({
            id: record.record_id,
            employeeId: record.fields['Mã nhân viên'] || '',
            requestNo: record.fields['Request No.'] || ''
        }));
    }


    transformWorkHistoryForLark(workHistoryData) {
        return {
            'Mã nhân viên': workHistoryData.employeeId,
            'Request No.': workHistoryData.requestNo
        };
    }
}


export default WorkHistoryService;

```


==================== File: .\server\services\master-data\index.js ====================

// Master data services exports
export { default as StoreService } from './store-service.js';
export { default as PositionService } from './position-service.js';
export { default as MasterDataValidator } from './master-data-validator.js';

```


==================== File: .\server\services\master-data\master-data-validator.js ====================

// Master data validation service
class MasterDataValidator {
    static validateStoreData(storeData) {
        const errors = [];

        // Required fields validation
        if (!storeData.storeName || storeData.storeName.trim().length < 2) {
            errors.push('Tên cửa hàng phải có ít nhất 2 ký tự');
        }

        if (!storeData.address || storeData.address.trim().length < 5) {
            errors.push('Địa chỉ phải có ít nhất 5 ký tự');
        }

        // Status validation
        if (storeData.status && !['active', 'inactive'].includes(storeData.status)) {
            errors.push('Trạng thái phải là active hoặc inactive');
        }

        return errors;
    }

    static validatePositionData(positionData) {
        const errors = [];

        // Required fields validation
        if (!positionData.positionName || positionData.positionName.trim().length < 2) {
            errors.push('Tên vị trí phải có ít nhất 2 ký tự');
        }

        // Description validation (optional but if provided must be reasonable)
        if (positionData.description && positionData.description.trim().length < 3) {
            errors.push('Mô tả phải có ít nhất 3 ký tự nếu được cung cấp');
        }

        // Status validation
        if (positionData.status && !['active', 'inactive'].includes(positionData.status)) {
            errors.push('Trạng thái phải là active hoặc inactive');
        }

        return errors;
    }

    static validateMasterDataBatch(dataArray, type) {
        const errors = [];
        const names = [];

        dataArray.forEach((item, index) => {
            // Validate individual item
            let itemErrors = [];
            if (type === 'store') {
                itemErrors = this.validateStoreData(item);
            } else if (type === 'position') {
                itemErrors = this.validatePositionData(item);
            }

            if (itemErrors.length > 0) {
                errors.push(`Item ${index + 1}: ${itemErrors.join(', ')}`);
            }

            // Check for duplicate names
            const nameField = type === 'store' ? 'storeName' : 'positionName';
            if (item[nameField] && names.includes(item[nameField])) {
                errors.push(`Item ${index + 1}: Tên đã bị trùng lặp trong batch`);
            } else if (item[nameField]) {
                names.push(item[nameField]);
            }
        });

        return errors;
    }

    static sanitizeStoreData(storeData) {
        return {
            storeName: storeData.storeName?.trim() || '',
            address: storeData.address?.trim() || '',
            status: storeData.status || 'active',
            createdAt: storeData.createdAt || new Date().toISOString(),
            updatedAt: new Date().toISOString()
        };
    }

    static sanitizePositionData(positionData) {
        return {
            positionName: positionData.positionName?.trim() || '',
            description: positionData.description?.trim() || '',
            status: positionData.status || 'active',
            createdAt: positionData.createdAt || new Date().toISOString(),
            updatedAt: new Date().toISOString()
        };
    }
}

export default MasterDataValidator;

```


==================== File: .\server\services\master-data\position-service.js ====================

// Position management service
import BaseService from '../core/base-service.js';
import LarkClient from '../core/lark-client.js';
import CacheService from '../core/cache-service.js';

class PositionService extends BaseService {
    constructor() {
        super();
        this.baseId = process.env.LARK_BASE_ID;
        this.tableId = process.env.LARK_POSITION_TABLE_ID;
    }

    async initializeService() {
        console.log('Initializing Position Service...');
    }

    async getAllPositions() {
        const cacheKey = 'positions_all';
        let positions = CacheService.get(cacheKey);
        
        if (!positions) {
            try {
                const response = await LarkClient.get(`/bitable/v1/apps/${this.baseId}/tables/${this.tableId}/records`);
                positions = this.transformPositionData(response.data?.items || []);
                CacheService.set(cacheKey, positions, 300000); // 5 minutes
            } catch (error) {
                console.error('Error fetching positions from Lark:', error);
                positions = this.getMockPositions();
            }
        }
        
        return positions;
    }

    async addPosition(positionData) {
        try {
            const transformedData = this.transformPositionForLark(positionData);
            
            const response = await LarkClient.post(`/bitable/v1/apps/${this.baseId}/tables/${this.tableId}/records`, {
                fields: transformedData
            });

            // Clear cache
            CacheService.delete('positions_all');
            
            return this.transformPositionData([response.data])[0];
        } catch (error) {
            await this.handleError(error, 'addPosition');
            throw error;
        }
    }

    async updatePosition(id, positionData) {
        try {
            const transformedData = this.transformPositionForLark(positionData);
            
            const response = await LarkClient.put(`/bitable/v1/apps/${this.baseId}/tables/${this.tableId}/records/${id}`, {
                fields: transformedData
            });

            // Clear cache
            CacheService.delete('positions_all');
            
            return this.transformPositionData([response.data])[0];
        } catch (error) {
            await this.handleError(error, 'updatePosition');
            throw error;
        }
    }

    async deletePosition(id) {
        try {
            await LarkClient.delete(`/bitable/v1/apps/${this.baseId}/tables/${this.tableId}/records/${id}`);
            
            // Clear cache
            CacheService.delete('positions_all');
            
            return true;
        } catch (error) {
            await this.handleError(error, 'deletePosition');
            throw error;
        }
    }

    async getActivePositions() {
        const positions = await this.getAllPositions();
        return positions.filter(position => position.status === 'active');
    }

    async searchPositions(query) {
        const positions = await this.getAllPositions();
        
        if (!query) return positions;
        
        const searchTerm = query.toLowerCase();
        return positions.filter(position => 
            position.positionName.toLowerCase().includes(searchTerm) ||
            (position.description && position.description.toLowerCase().includes(searchTerm))
        );
    }

    transformPositionData(larkData) {
        return larkData.map(record => ({
            id: record.record_id,
            positionName: record.fields['Position Name'] || '',
            description: record.fields['Description'] || '',
            status: record.fields['Status'] || 'active',
            createdAt: record.fields['Created At'] || new Date().toISOString(),
            updatedAt: record.fields['Updated At'] || new Date().toISOString()
        }));
    }

    transformPositionForLark(positionData) {
        return {
            'Position Name': positionData.positionName,
            'Description': positionData.description || '',
            'Status': positionData.status || 'active',
            'Created At': positionData.createdAt || new Date().toISOString(),
            'Updated At': positionData.updatedAt || new Date().toISOString()
        };
    }

    getMockPositions() {
        return [
            {
                id: 'pos_001',
                positionName: 'Nhân viên bán hàng',
                description: 'Nhân viên bán hàng tại cửa hàng',
                status: 'active',
                createdAt: new Date().toISOString(),
                updatedAt: new Date().toISOString()
            },
            {
                id: 'pos_002',
                positionName: 'Nhân viên kho',
                description: 'Nhân viên quản lý kho hàng',
                status: 'active',
                createdAt: new Date().toISOString(),
                updatedAt: new Date().toISOString()
            },
            {
                id: 'pos_003',
                positionName: 'Trưởng ca',
                description: 'Trưởng ca quản lý nhân viên',
                status: 'active',
                createdAt: new Date().toISOString(),
                updatedAt: new Date().toISOString()
            }
        ];
    }
}

export default PositionService;

```


==================== File: .\server\services\master-data\store-service.js ====================

// Store management service
import BaseService from '../core/base-service.js';
import LarkClient from '../core/lark-client.js';
import CacheService from '../core/cache-service.js';

class StoreService extends BaseService {
    constructor() {
        super();
        this.baseId = process.env.LARK_BASE_ID;
        this.tableId = process.env.LARK_STORE_TABLE_ID;
    }

    async initializeService() {
        console.log('Initializing Store Service...');
    }

    async getAllStores() {
        const cacheKey = 'stores_all';
        let stores = CacheService.get(cacheKey);
        
        if (!stores) {
            try {
                const response = await LarkClient.get(`/bitable/v1/apps/${this.baseId}/tables/${this.tableId}/records`);
                stores = this.transformStoreData(response.data?.items || []);
                CacheService.set(cacheKey, stores, 300000); // 5 minutes
            } catch (error) {
                console.error('Error fetching stores from Lark:', error);
                stores = this.getMockStores();
            }
        }
        
        return stores;
    }

    async addStore(storeData) {
        try {
            const transformedData = this.transformStoreForLark(storeData);
            
            const response = await LarkClient.post(`/bitable/v1/apps/${this.baseId}/tables/${this.tableId}/records`, {
                fields: transformedData
            });

            // Clear cache
            CacheService.delete('stores_all');
            
            return this.transformStoreData([response.data])[0];
        } catch (error) {
            await this.handleError(error, 'addStore');
            throw error;
        }
    }

    async updateStore(id, storeData) {
        try {
            const transformedData = this.transformStoreForLark(storeData);
            
            const response = await LarkClient.put(`/bitable/v1/apps/${this.baseId}/tables/${this.tableId}/records/${id}`, {
                fields: transformedData
            });

            // Clear cache
            CacheService.delete('stores_all');
            
            return this.transformStoreData([response.data])[0];
        } catch (error) {
            await this.handleError(error, 'updateStore');
            throw error;
        }
    }

    async deleteStore(id) {
        try {
            await LarkClient.delete(`/bitable/v1/apps/${this.baseId}/tables/${this.tableId}/records/${id}`);
            
            // Clear cache
            CacheService.delete('stores_all');
            
            return true;
        } catch (error) {
            await this.handleError(error, 'deleteStore');
            throw error;
        }
    }

    async getActiveStores() {
        const stores = await this.getAllStores();
        return stores.filter(store => store.status === 'active');
    }

    async searchStores(query) {
        const stores = await this.getAllStores();
        
        if (!query) return stores;
        
        const searchTerm = query.toLowerCase();
        return stores.filter(store => 
            store.storeName.toLowerCase().includes(searchTerm) ||
            store.address.toLowerCase().includes(searchTerm)
        );
    }

    transformStoreData(larkData) {
        return larkData.map(record => ({
            id: record.record_id,
            storeName: record.fields['Store Name'] || '',
            address: record.fields['Address'] || '',
            status: record.fields['Status'] || 'active',
            createdAt: record.fields['Created At'] || new Date().toISOString(),
            updatedAt: record.fields['Updated At'] || new Date().toISOString()
        }));
    }

    transformStoreForLark(storeData) {
        return {
            'Store Name': storeData.storeName,
            'Address': storeData.address,
            'Status': storeData.status || 'active',
            'Created At': storeData.createdAt || new Date().toISOString(),
            'Updated At': storeData.updatedAt || new Date().toISOString()
        };
    }

    getMockStores() {
        return [
            {
                id: 'store_001',
                storeName: '116 Cầu Giấy',
                address: '116 Cầu Giấy, Hà Nội',
                status: 'active',
                createdAt: new Date().toISOString(),
                updatedAt: new Date().toISOString()
            },
            {
                id: 'store_002',
                storeName: 'Trâm Trỗi',
                address: 'Trâm Trỗi, Hà Nội',
                status: 'active',
                createdAt: new Date().toISOString(),
                updatedAt: new Date().toISOString()
            }
        ];
    }
}

export default StoreService;

```


==================== File: .\server\services\recruitment\index.js ====================

// Recruitment services exports
export { default as RecruitmentService } from './recruitment-service.js';
export { default as RecruitmentValidator } from './recruitment-validator.js';

```


==================== File: .\server\services\recruitment\recruitment-service.js ====================

// Recruitment service
import BaseService from '../core/base-service.js';
import LarkClient from '../core/lark-client.js';
import CacheService from '../core/cache-service.js';

class RecruitmentService extends BaseService {
    constructor() {
        super();
        this.baseId = process.env.LARK_BASE_ID;
        this.tableId = process.env.LARK_RECRUITMENT_TABLE_ID;
    }

    async initializeService() {
        console.log('Initializing Recruitment Service...');
    }

    async getRecruitmentRequests(filters = {}) {
        const cacheKey = `recruitment_requests_${JSON.stringify(filters)}`;
        let requests = CacheService.get(cacheKey);
        
        if (!requests) {
            try {
                let filterString = '';
                if (filters.status) {
                    filterString += `AND(CurrentValue.[Status] = "${filters.status}")`;
                }
                if (filters.department) {
                    filterString += `AND(CurrentValue.[Department] = "${filters.department}")`;
                }
                
                const response = await LarkClient.get(`/bitable/v1/apps/${this.baseId}/tables/${this.tableId}/records`, {
                    filter: filterString
                });

                requests = this.transformRecruitmentData(response.data?.items || []);
                CacheService.set(cacheKey, requests, 300000); // 5 minutes
            } catch (error) {
                console.error('Error fetching recruitment requests:', error);
                requests = this.getMockRecruitmentRequests();
            }
        }
        
        return requests;
    }

    async addRecruitmentRequest(requestData) {
        try {
            const transformedData = this.transformRecruitmentForLark(requestData);
            
            const response = await LarkClient.post(`/bitable/v1/apps/${this.baseId}/tables/${this.tableId}/records`, {
                fields: transformedData
            });

            // Clear cache
            CacheService.delete(`recruitment_requests_${JSON.stringify({})}`);
            
            return this.transformRecruitmentData([response.data])[0];
        } catch (error) {
            await this.handleError(error, 'addRecruitmentRequest');
            throw error;
        }
    }

    async updateRecruitmentRequest(id, requestData) {
        try {
            const transformedData = this.transformRecruitmentForLark(requestData);
            
            const response = await LarkClient.put(`/bitable/v1/apps/${this.baseId}/tables/${this.tableId}/records/${id}`, {
                fields: transformedData
            });

            // Clear cache
            CacheService.clear();
            
            return this.transformRecruitmentData([response.data])[0];
        } catch (error) {
            await this.handleError(error, 'updateRecruitmentRequest');
            throw error;
        }
    }


    transformRecruitmentData(larkData) {
        
        return larkData.map(record => {
            
            const result = {
                id: record.record_id,
                // ✅ SỬA: Extract Request No từ object structure
                requestNo: this.extractRequestNo(record.fields['Request No.']),
                // ✅ SỬA: Extract Requester từ array structure  
                requester: this.extractRequesterName(record.fields['Requester']),
                status: record.fields['Status'] || '',
                department: record.fields['Details_Phòng ban'] || record.fields['Department'] || '',
                quantity: record.fields['Details_Số lượng cần tuyển'] || record.fields['Quantity'] || '',
                gender: record.fields['Details_Giới tính'] || record.fields['Gender'] || '',
                fromDate: record.fields['Details_Từ ngày'] || record.fields['From Date'] || '',
                toDate: record.fields['Details_Đến ngày'] || record.fields['To Date'] || '',
                position: record.fields['Details_Vị trí'] || record.fields['Position'] || '',
                approvalStatus: record.fields['Status'] || 'pending'
            };
            
            return result;
        });
    }

    // ✅ THÊM: Method để extract Request No từ object
    extractRequestNo(requestNoData) {
        if (!requestNoData) return '';
        
        // Nếu là object với structure { "link": "...", "text": "202507140017" }
        if (typeof requestNoData === 'object' && requestNoData.text) {
            return requestNoData.text;
        }
        
        // Nếu là string trực tiếp
        if (typeof requestNoData === 'string') {
            return requestNoData;
        }
        
        // Fallback
        return requestNoData.toString();
    }

    // ✅ THÊM: Method để extract Requester từ array
    extractRequesterName(requesterData) {
        if (!requesterData) return '';
        
        // Nếu là array [{ "name": "236LH.Nguyễn Huy Thành", ... }]
        if (Array.isArray(requesterData)) {
            return requesterData.map(user => 
                user.name || user.en_name || user.id || 'Unknown'
            ).join(', ');
        }
        
        // Nếu là object { "name": "236LH.Nguyễn Huy Thành", ... }
        if (typeof requesterData === 'object') {
            return requesterData.name || requesterData.en_name || requesterData.id || 'Unknown';
        }
        
        // Nếu là string trực tiếp
        return requesterData.toString();
    }


    transformRecruitmentForLark(requestData) {
        return {
            'Request No': requestData.requestNo,
            'Requester': requestData.requester,
            'Status': requestData.status,
            'Department': requestData.department,
            'Quantity': requestData.quantity,
            'Gender': requestData.gender,
            'From Date': requestData.fromDate,
            'To Date': requestData.toDate,
            'Approval Status': requestData.approvalStatus || 'pending',
            'Created At': requestData.createdAt || new Date().toISOString()
        };
    }

    getMockRecruitmentRequests() {
        return [
            {
                id: '20250620014',
                requestNo: '20250620014',
                requester: 'Rikkei Test',
                status: 'Đang tuyển dụng',
                department: '116 Cầu Giấy',
                quantity: '2',
                gender: 'Nam/Nữ',
                fromDate: '2025-06-20',
                toDate: '2025-07-20',
                approvalStatus: 'approved',
                createdAt: '2025-06-20T00:00:00.000Z'
            },
            {
                id: '20250620017',
                requestNo: '20250620017',
                requester: 'Rikkei Test',
                status: 'Đang tuyển dụng',
                department: 'Trâm Trỗi',
                quantity: '1',
                gender: 'Nữ',
                fromDate: '2025-06-20',
                toDate: '2025-07-20',
                approvalStatus: 'approved',
                createdAt: '2025-06-20T00:00:00.000Z'
            }
        ];
    }
}

export default RecruitmentService;

```


==================== File: .\server\services\recruitment\recruitment-validator.js ====================

// Recruitment validation service
class RecruitmentValidator {
    static validateRecruitmentData(requestData) {
        const errors = [];

        // Required fields validation
        if (!requestData.requestNo) {
            errors.push('Request No là bắt buộc');
        }

        if (!requestData.requester) {
            errors.push('Requester là bắt buộc');
        }

        if (!requestData.department) {
            errors.push('Department là bắt buộc');
        }

        if (!requestData.quantity || requestData.quantity <= 0) {
            errors.push('Quantity phải lớn hơn 0');
        }

        if (!requestData.gender) {
            errors.push('Gender là bắt buộc');
        }

        if (!requestData.fromDate) {
            errors.push('From Date là bắt buộc');
        } else if (!this.isValidDate(requestData.fromDate)) {
            errors.push('From Date không hợp lệ');
        }

        if (!requestData.toDate) {
            errors.push('To Date là bắt buộc');
        } else if (!this.isValidDate(requestData.toDate)) {
            errors.push('To Date không hợp lệ');
        }

        // Check if toDate is after fromDate
        if (requestData.fromDate && requestData.toDate) {
            if (!this.isToDateAfterFromDate(requestData.fromDate, requestData.toDate)) {
                errors.push('To Date phải sau From Date');
            }
        }

        return errors;
    }

    static isValidDate(dateString) {
        const date = new Date(dateString);
        return date instanceof Date && !isNaN(date);
    }

    static isToDateAfterFromDate(fromDate, toDate) {
        const from = new Date(fromDate);
        const to = new Date(toDate);
        return to >= from;
    }
}

export default RecruitmentValidator;

```


==================== File: .\server\services\utils\error-handler.js ====================

// Centralized error handling utilities
import ResponseFormatter from './response-formatter.js';

class ErrorHandler {
    static handleLarkError(error) {
        if (error.response?.data?.code) {
            const larkCode = error.response.data.code;
            const larkMessage = error.response.data.msg || 'Lark API Error';
            
            switch (larkCode) {
                case 99991663:
                    return ResponseFormatter.formatError('App access token invalid', 'LARK_AUTH_ERROR');
                case 99991664:
                    return ResponseFormatter.formatError('Tenant access token invalid', 'LARK_AUTH_ERROR');
                case 99991665:
                    return ResponseFormatter.formatError('User access token invalid', 'LARK_AUTH_ERROR');
                case 230002:
                    return ResponseFormatter.formatError('Base not found', 'LARK_BASE_NOT_FOUND');
                case 230003:
                    return ResponseFormatter.formatError('Table not found', 'LARK_TABLE_NOT_FOUND');
                case 230004:
                    return ResponseFormatter.formatError('Record not found', 'LARK_RECORD_NOT_FOUND');
                case 1254006:
                    return ResponseFormatter.formatError('Rate limit exceeded', 'LARK_RATE_LIMIT');
                default:
                    return ResponseFormatter.formatError(`Lark API Error: ${larkMessage}`, 'LARK_API_ERROR');
            }
        }
        
        return ResponseFormatter.formatError('Unknown Lark API error', 'LARK_UNKNOWN_ERROR');
    }

    static handleValidationError(errors) {
        const message = Array.isArray(errors) ? errors.join(', ') : errors;
        return ResponseFormatter.formatError(message, 'VALIDATION_ERROR');
    }

    static handleDatabaseError(error) {
        console.error('Database error:', error);
        
        if (error.code === 'ECONNREFUSED') {
            return ResponseFormatter.formatError('Database connection failed', 'DATABASE_CONNECTION_ERROR');
        }
        
        if (error.code === 'ER_DUP_ENTRY') {
            return ResponseFormatter.formatError('Duplicate entry', 'DUPLICATE_ENTRY');
        }
        
        return ResponseFormatter.formatError('Database operation failed', 'DATABASE_ERROR');
    }

    static handleNetworkError(error) {
        console.error('Network error:', error);
        
        if (error.code === 'ENOTFOUND') {
            return ResponseFormatter.formatError('Service not found', 'SERVICE_NOT_FOUND');
        }
        
        if (error.code === 'ECONNRESET') {
            return ResponseFormatter.formatError('Connection reset', 'CONNECTION_RESET');
        }
        
        if (error.code === 'ETIMEDOUT') {
            return ResponseFormatter.formatError('Request timeout', 'REQUEST_TIMEOUT');
        }
        
        return ResponseFormatter.formatError('Network error', 'NETWORK_ERROR');
    }

    static handleGenericError(error, operation = 'operation') {
        console.error(`Error in ${operation}:`, error);
        
        // Check for specific error types
        if (error.isAxiosError) {
            if (error.response?.status === 401) {
                return ResponseFormatter.formatUnauthorized('Authentication required');
            }
            
            if (error.response?.status === 403) {
                return ResponseFormatter.formatForbidden('Access forbidden');
            }
            
            if (error.response?.status === 404) {
                return ResponseFormatter.formatNotFound('Resource');
            }
            
            if (error.response?.status >= 500) {
                return ResponseFormatter.formatServerError('External service error');
            }
            
            return this.handleLarkError(error);
        }
        
        // Check for validation errors
        if (error.name === 'ValidationError') {
            return this.handleValidationError(error.message);
        }
        
        // Check for database errors
        if (error.code && error.code.startsWith('ER_')) {
            return this.handleDatabaseError(error);
        }
        
        // Check for network errors
        if (error.code && ['ENOTFOUND', 'ECONNRESET', 'ETIMEDOUT'].includes(error.code)) {
            return this.handleNetworkError(error);
        }
        
        // Default generic error
        return ResponseFormatter.formatServerError(`Error in ${operation}: ${error.message}`);
    }

    static async wrapAsync(fn, operation = 'operation') {
        try {
            return await fn();
        } catch (error) {
            throw this.handleGenericError(error, operation);
        }
    }

    static logError(error, context = {}) {
        const errorInfo = {
            message: error.message,
            stack: error.stack,
            context,
            timestamp: new Date().toISOString()
        };
        
        console.error('Error logged:', JSON.stringify(errorInfo, null, 2));
        
        // In production, you might want to send this to a logging service
        // like Winston, Sentry, or CloudWatch
    }
}

export default ErrorHandler;

```


==================== File: .\server\services\utils\index.js ====================

// Utilities services exports
export { default as ResponseFormatter, formatResponse } from './response-formatter.js';
export { default as ServiceFactory } from './service-factory.js';
export { default as ErrorHandler } from './error-handler.js';

// Re-export commonly used functions
export {
    getEmployeeService,
    getWorkHistoryService,
    getAttendanceService,
    getRecruitmentService,
    getStoreService,
    getPositionService,
    getAuthService,
    getSessionService
} from './service-factory.js';

```


==================== File: .\server\services\utils\response-formatter.js ====================

// Response formatting utilities
class ResponseFormatter {
    static formatResponse(success, message, data = null, errorCode = null) {
        const response = {
            success,
            message,
            timestamp: new Date().toISOString()
        };

        if (success && data) {
            response.data = data;
        }

        if (!success && errorCode) {
            response.errorCode = errorCode;
        }

        return response;
    }

    static formatSuccess(message, data = null) {
        return this.formatResponse(true, message, data);
    }

    static formatError(message, errorCode = null) {
        return this.formatResponse(false, message, null, errorCode);
    }

    static formatValidationError(errors) {
        return this.formatResponse(false, 'Validation failed', null, 'VALIDATION_ERROR');
    }

    static formatNotFound(resource) {
        return this.formatResponse(false, `${resource} not found`, null, 'NOT_FOUND');
    }

    static formatUnauthorized(message = 'Unauthorized access') {
        return this.formatResponse(false, message, null, 'UNAUTHORIZED');
    }

    static formatForbidden(message = 'Forbidden access') {
        return this.formatResponse(false, message, null, 'FORBIDDEN');
    }

    static formatServerError(message = 'Internal server error') {
        return this.formatResponse(false, message, null, 'SERVER_ERROR');
    }

    static formatPaginatedResponse(data, pagination) {
        return this.formatResponse(true, 'Success', {
            items: data,
            pagination: {
                page: pagination.page || 1,
                limit: pagination.limit || 10,
                total: pagination.total || 0,
                pages: Math.ceil((pagination.total || 0) / (pagination.limit || 10))
            }
        });
    }

    static formatBatchResponse(results) {
        const successCount = results.filter(r => r.success).length;
        const failureCount = results.length - successCount;

        return this.formatResponse(
            failureCount === 0,
            `Batch operation completed: ${successCount} successful, ${failureCount} failed`,
            {
                results,
                summary: {
                    total: results.length,
                    successful: successCount,
                    failed: failureCount
                }
            }
        );
    }
}

// Legacy function for backward compatibility
export function formatResponse(success, message, data = null, errorCode = null) {
    return ResponseFormatter.formatResponse(success, message, data, errorCode);
}

export default ResponseFormatter;

```


==================== File: .\server\services\utils\service-factory.js ====================

// Service factory for dependency injection
import { EmployeeService } from '../employee/index.js';
import { WorkHistoryService } from '../employee/index.js';
import { AttendanceService } from '../attendance/index.js';
import { RecruitmentService } from '../recruitment/index.js';
import { StoreService, PositionService } from '../master-data/index.js';
import { AuthService, SessionService } from '../auth/index.js';

class ServiceFactory {
    constructor() {
        this.services = new Map();
        this.singletons = new Map();
    }

    // Register a service class
    register(name, ServiceClass, singleton = true) {
        this.services.set(name, { ServiceClass, singleton });
    }

    // Get service instance
    get(name) {
        const serviceConfig = this.services.get(name);
        if (!serviceConfig) {
            throw new Error(`Service '${name}' not found`);
        }

        const { ServiceClass, singleton } = serviceConfig;

        if (singleton) {
            if (!this.singletons.has(name)) {
                this.singletons.set(name, new ServiceClass());
            }
            return this.singletons.get(name);
        }

        return new ServiceClass();
    }

    // Initialize all services
    async initialize() {
        for (const [name, config] of this.services.entries()) {
            const service = this.get(name);
            if (service.init && typeof service.init === 'function') {
                await service.init();
            }
        }
    }

    // Clear all singleton instances
    clear() {
        this.singletons.clear();
    }

    // Get all service names
    getServiceNames() {
        return Array.from(this.services.keys());
    }

    // Check if service exists
    has(name) {
        return this.services.has(name);
    }
}

// Create and configure the global service factory
const serviceFactory = new ServiceFactory();

// Register core services
serviceFactory.register('employee', EmployeeService, true);
serviceFactory.register('workHistory', WorkHistoryService, true);
serviceFactory.register('attendance', AttendanceService, true);
serviceFactory.register('recruitment', RecruitmentService, true);
serviceFactory.register('store', StoreService, true);
serviceFactory.register('position', PositionService, true);
serviceFactory.register('auth', AuthService, true);
serviceFactory.register('session', SessionService, true);

// Helper functions for common service access
export const getEmployeeService = () => serviceFactory.get('employee');
export const getWorkHistoryService = () => serviceFactory.get('workHistory');
export const getAttendanceService = () => serviceFactory.get('attendance');
export const getRecruitmentService = () => serviceFactory.get('recruitment');
export const getStoreService = () => serviceFactory.get('store');
export const getPositionService = () => serviceFactory.get('position');
export const getAuthService = () => serviceFactory.get('auth');
export const getSessionService = () => serviceFactory.get('session');

export default serviceFactory;

```


==================== File: .\src\App.jsx ====================

import React, { useEffect, useState } from 'react';
import { Routes, Route, Navigate, useLocation } from 'react-router-dom';
import { useAuth } from './hooks/useAuth';
import { useNotification } from './hooks/useNotification';

// Components - Thành phần giao diện
import Layout from './components/layout/Layout';
import Loading from './components/common/Loading';
import ProtectedRoute from './components/auth/ProtectedRoute';

// Pages - Các trang chính
import LoginPage from './pages/LoginPage';
import EmployeeManagementPage from './pages/EmployeeManagementPage';
import AttendanceLogsPage from './pages/AttendanceLogsPage';
import HRDashboardPage from './pages/HRDashboardPage';

// Global styles - Styles toàn cục
import './styles/globals.css';

const App = () => {
  const [loading, setLoading] = useState(true);
  const [initialized, setInitialized] = useState(false);
  const { user, checkAuth, loading: authLoading } = useAuth();
  const { showNotification } = useNotification();
  const location = useLocation();

  useEffect(() => {
    const initializeApp = async () => {
      try {
        console.log('🚀 Bắt đầu khởi tạo ứng dụng React...');
        
        initializeGlobalUtilities();
        
        if (isProtectedPage()) {
          console.log('🔐 Đang kiểm tra xác thực...');
          const authUser = await checkAuth();
          if (!authUser && !isPublicPage()) {
            console.log('❌ Xác thực thất bại cho trang được bảo vệ');
            return;
          }
          console.log('✅ Hoàn thành kiểm tra xác thực');
        }
        
        setInitialized(true);
        console.log('✅ Khởi tạo ứng dụng React thành công');
        
      } catch (error) {
        console.error('❌ Lỗi khởi tạo ứng dụng:', error);
        
        if (error.name === 'TypeError') {
          showNotification('Lỗi tải module. Vui lòng refresh trang.', 'error');
        } else if (error.message.includes('fetch')) {
          showNotification('Lỗi kết nối server. Vui lòng kiểm tra mạng.', 'error');
        } else {
          showNotification('Lỗi khởi tạo ứng dụng. Vui lòng refresh trang.', 'error');
        }
      } finally {
        setLoading(false);
      }
    };

    initializeApp();
  }, []);

  const initializeGlobalUtilities = () => {
    try {
      if (typeof window.bootstrap !== 'undefined') {
        const tooltipTriggerList = [].slice.call(
          document.querySelectorAll('[data-bs-toggle="tooltip"]')
        );
        tooltipTriggerList.map(tooltipTriggerEl => {
          return new window.bootstrap.Tooltip(tooltipTriggerEl);
        });
      }
    } catch (error) {
      console.warn('Lỗi khởi tạo tooltips:', error);
    }
  };

  const isProtectedPage = () => {
    const publicPaths = ['/', '/login'];
    return !publicPaths.includes(location.pathname);
  };

  const isPublicPage = () => {
    const publicPaths = ['/', '/login'];
    return publicPaths.includes(location.pathname);
  };

  if (loading || authLoading) {
    return (
      <div className="d-flex justify-content-center align-items-center min-vh-100">
        <Loading />
      </div>
    );
  }

  if (!initialized) {
    return (
      <div className="container mt-5">
        <div className="alert alert-danger">
          <h4>Lỗi khởi tạo ứng dụng</h4>
          <p>Không thể khởi tạo ứng dụng. Vui lòng:</p>
          <ul>
            <li>Refresh lại trang (F5)</li>
            <li>Kiểm tra kết nối mạng</li>
            <li>Liên hệ IT support nếu vấn đề vẫn tiếp tục</li>
          </ul>
          <button 
            className="btn btn-primary" 
            onClick={() => window.location.reload()}
          >
            Refresh Trang
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className="App">
      {/* ✅ BƯỚC 1: Thêm container cho thông báo tại đây */}
      <div id="alert-container" style={{
        position: 'fixed',
        top: '20px',
        right: '20px',
        zIndex: 1055,
        minWidth: '300px'
      }}></div>

      <Routes>
        {/* Các route công khai */}
        <Route 
          path="/login" 
          element={
            user ? <Navigate to="/dashboard" replace /> : <LoginPage />
          } 
        />
        
        {/* Các route được bảo vệ với Layout */}
        <Route 
          path="/" 
          element={
            <ProtectedRoute>
              <Layout />
            </ProtectedRoute>
          }
        >
          {/* Redirect mặc định */}
          <Route index element={<Navigate to="/dashboard" replace />} />
          
          <Route path="dashboard" element={<HRDashboardPage />} />
          
          {/* Route quản lý nhân viên */}
          <Route 
            path="employee-management" 
            element={
              <ProtectedRoute requiredRoles={['hr', 'admin']}>
                <EmployeeManagementPage />
              </ProtectedRoute>
            } 
          />
          
          {/* Route nhật ký chấm công */}
          <Route path="attendance-logs" element={<AttendanceLogsPage />} />
        </Route>

        {/* Route bắt tất cả */}
        <Route 
          path="*" 
          element={
            user ? (
              <Navigate to="/dashboard" replace />
            ) : (
              <Navigate to="/login" replace />
            )
          } 
        />
      </Routes>
    </div>
  );
};

export default App;

```


==================== File: .\src\main.jsx ====================

import React from 'react';
import ReactDOM from 'react-dom/client';
import { BrowserRouter } from 'react-router-dom';
import App from './App.jsx';
import { AuthProvider } from './contexts/AuthContext.jsx';
import { NotificationProvider } from './contexts/NotificationContext.jsx';

// Import Bootstrap CSS và FontAwesome
import 'bootstrap/dist/css/bootstrap.min.css';
import 'bootstrap/dist/js/bootstrap.bundle.min.js';
import '@fortawesome/fontawesome-free/css/all.min.css';
import './styles/globals.css';

// Global error handler
window.addEventListener('error', (e) => {
  console.error('Global error:', e.error);
  console.error('Error details:', {
    message: e.message,
    filename: e.filename,
    lineno: e.lineno,
    colno: e.colno
  });
});

// Global unhandled promise rejection handler
window.addEventListener('unhandledrejection', (e) => {
  console.error('Unhandled promise rejection:', e.reason);
  console.error('Promise:', e.promise);
});

// Initialize tooltips when DOM is ready
document.addEventListener('DOMContentLoaded', () => {
  if (typeof window.bootstrap !== 'undefined') {
    const tooltipTriggerList = [].slice.call(
      document.querySelectorAll('[data-bs-toggle="tooltip"]')
    );
    tooltipTriggerList.map(tooltipTriggerEl => {
      return new window.bootstrap.Tooltip(tooltipTriggerEl);
    });
  }
});

ReactDOM.createRoot(document.getElementById('root')).render(
  <React.StrictMode>
    <BrowserRouter>
      <AuthProvider>
        <NotificationProvider>
          <App />
        </NotificationProvider>
      </AuthProvider>
    </BrowserRouter>
  </React.StrictMode>
);

```


==================== File: .\src\components\attendance\AttendanceFilters.jsx ====================

import React from 'react';

const AttendanceFilters = ({ 
  employees, 
  filters, 
  onFilterChange, 
  onClearFilters 
}) => {
  const handleFilterSubmit = (e) => {
    e.preventDefault();
    const formData = new FormData(e.target);
    const newFilters = {
      employeeId: formData.get('employeeId'),
      dateFrom: formData.get('dateFrom'),
      dateTo: formData.get('dateTo')
    };
    
    // Remove empty filters
    Object.keys(newFilters).forEach(key => {
      if (!newFilters[key]) delete newFilters[key];
    });
    
    onFilterChange(newFilters);
  };

  return (
    <form onSubmit={handleFilterSubmit} id="filterForm">
      <div className="row">
        <div className="col-md-4">
          <label className="form-label">Nhân viên</label>
          <select 
            className="form-select" 
            name="employeeId"
            defaultValue={filters.employeeId || ''}
          >
            <option value="">Tất cả nhân viên</option>
            {employees.map(employee => (
              <option key={employee.id} value={employee.employeeId}>
                {employee.employeeId} - {employee.fullName}
              </option>
            ))}
          </select>
        </div>
        
        <div className="col-md-3">
          <label className="form-label">Từ ngày</label>
          <input 
            type="date" 
            className="form-control" 
            name="dateFrom"
            defaultValue={filters.dateFrom || ''}
          />
        </div>
        
        <div className="col-md-3">
          <label className="form-label">Đến ngày</label>
          <input 
            type="date" 
            className="form-control" 
            name="dateTo"
            defaultValue={filters.dateTo || ''}
          />
        </div>
        
        <div className="col-md-2">
          <label className="form-label">&nbsp;</label>
          <div className="d-grid gap-2">
            <button type="submit" className="btn btn-primary">
              <i className="fas fa-search me-2"></i>
              Lọc
            </button>
            <button 
              type="button" 
              className="btn btn-outline-secondary"
              onClick={onClearFilters}
            >
              <i className="fas fa-times me-2"></i>
              Xóa
            </button>
          </div>
        </div>
      </div>
    </form>
  );
};

export default AttendanceFilters;

```


==================== File: .\src\components\attendance\AttendanceLogs.jsx ====================

import React from 'react';

const AttendanceLogs = ({ logs }) => {
  if (!logs || logs.length === 0) {
    return (
      <div className="text-center py-4">
        <i className="fas fa-calendar-times fa-3x text-muted mb-3"></i>
        <p className="text-muted">Không có bản ghi chấm công nào</p>
      </div>
    );
  }

  return (
    <div className="table-responsive">
      <table className="table table-striped table-hover">
        <thead className="table-dark">
          <tr>
            <th>Mã nhân viên</th>
            <th>Ngày</th>
            <th>Giờ vào</th>
            <th>Giờ ra</th>
            <th>Tổng giờ</th>
            <th>Ghi chú</th>
          </tr>
        </thead>
        <tbody>
          {logs.map((log, index) => (
            <tr key={log.id || index}>
              <td>{log.employeeId}</td>
              <td>{log.date}</td>
              <td>{log.timeIn}</td>
              <td>{log.timeOut}</td>
              <td>
                <strong className="text-primary">{log.totalHours}</strong>
              </td>
              <td>{log.notes}</td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
};

export default AttendanceLogs;

```


==================== File: .\src\components\attendance\EmployeeHours.jsx ====================

import React from 'react';

const EmployeeHours = ({ employees, employeeHours }) => {
  const hoursData = employees
    .map(employee => {
      const hours = employeeHours[employee.employeeId];
      return {
        ...employee,
        totalHours: hours ? hours.totalHours : 0
      };
    })
    .filter(emp => emp.totalHours > 0)
    .sort((a, b) => b.totalHours - a.totalHours);

  if (hoursData.length === 0) {
    return (
      <div className="text-center py-4">
        <i className="fas fa-clock fa-3x text-muted mb-3"></i>
        <p className="text-muted">Không có dữ liệu giờ công</p>
      </div>
    );
  }

  return (
    <div className="table-responsive">
      <table className="table table-striped table-hover">
        <thead className="table-dark">
          <tr>
            <th>Mã nhân viên</th>
            <th>Họ tên</th>
            <th>Tổng giờ công</th>
            <th>Số ngày</th>
            <th>Trung bình/ngày</th>
          </tr>
        </thead>
        <tbody>
          {hoursData.map((employee) => {
            const hours = employeeHours[employee.employeeId];
            const avgHours = hours ? (hours.totalHours / (hours.totalDays || 1)) : 0;
            
            return (
              <tr key={employee.id}>
                <td>{employee.employeeId}</td>
                <td>{employee.fullName}</td>
                <td>
                  <strong className="text-success">
                    {employee.totalHours.toFixed(1)} giờ
                  </strong>
                </td>
                <td>
                  <span className="badge bg-info">
                    {hours ? hours.totalDays : 0} ngày
                  </span>
                </td>
                <td>
                  <span className="text-muted">
                    {avgHours.toFixed(1)} giờ/ngày
                  </span>
                </td>
              </tr>
            );
          })}
        </tbody>
      </table>
    </div>
  );
};

export default EmployeeHours;

```


==================== File: .\src\components\auth\LoginForm.jsx ====================


```


==================== File: .\src\components\auth\ProtectedRoute.jsx ====================

import React from 'react';
import { Navigate, useLocation } from 'react-router-dom';
import { useAuth } from '../../hooks/useAuth';
import Loading from '../common/Loading';

const ProtectedRoute = ({ children, requiredRoles = [] }) => {
  const { user, loading } = useAuth();
  const location = useLocation();

  if (loading) {
    return <Loading fullScreen text="Đang kiểm tra quyền truy cập..." />;
  }

  if (!user) {
    return <Navigate to="/login" state={{ from: location }} replace />;
  }

  // Check role-based access
  if (requiredRoles.length > 0 && !requiredRoles.includes(user.role)) {
    return (
      <div className="container mt-5">
        <div className="alert alert-danger">
          <h4>Không có quyền truy cập</h4>
          <p>Bạn không có quyền truy cập vào trang này.</p>
          <button 
            className="btn btn-primary" 
            onClick={() => window.history.back()}
          >
            Quay lại
          </button>
        </div>
      </div>
    );
  }

  return children;
};

export default ProtectedRoute;

```


==================== File: .\src\components\common\Alert.jsx ====================

// src/components/common/Alert.jsx

// ✅ SỬA: Dùng "export const" để tạo một named export, khớp với cách import
export const Alert = ({ message, type = 'info', onClose }) => {
  if (!message) {
    return null;
  }

  // Chuyển đổi type 'error' thành 'danger' cho Bootstrap
  const alertType = type === 'error' ? 'danger' : type;

  const getIcon = () => {
    switch (alertType) {
      case 'success':
        return 'fas fa-check-circle';
      case 'danger':
        return 'fas fa-exclamation-triangle';
      case 'warning':
        return 'fas fa-exclamation-circle';
      default:
        return 'fas fa-info-circle';
    }
  };

  return (
    <div
      className={`alert alert-${alertType} alert-dismissible fade show d-flex align-items-center`}
      role="alert"
    >
      <i className={`${getIcon()} me-2`}></i>
      <div>{message}</div>
      {onClose && (
        <button
          type="button"
          className="btn-close"
          onClick={onClose}
          aria-label="Close"
        ></button>
      )}
    </div>
  );
};

```


==================== File: .\src\components\common\Loading.jsx ====================

import React from 'react';

const Loading = ({ 
  size = 'medium', 
  text = 'Đang tải...', 
  overlay = false,
  fullScreen = false 
}) => {
  const getSizeClass = () => {
    switch (size) {
      case 'small': return 'spinner-border-sm';
      case 'large': return 'spinner-border spinner-border-lg';
      default: return 'spinner-border';
    }
  };

  const LoadingSpinner = () => (
    <div className="d-flex flex-column align-items-center justify-content-center p-3">
      <div className={`${getSizeClass()} text-primary`} role="status">
        <span className="visually-hidden">Loading...</span>
      </div>
      {text && (
        <div className="mt-2 text-muted small">
          {text}
        </div>
      )}
    </div>
  );

  if (fullScreen) {
    return (
      <div 
        className="position-fixed top-0 start-0 w-100 h-100 d-flex align-items-center justify-content-center"
        style={{ 
          backgroundColor: 'rgba(255, 255, 255, 0.9)', 
          zIndex: 9999 
        }}
      >
        <div className="text-center">
          <div className="spinner-border spinner-border-lg text-primary" role="status">
            <span className="visually-hidden">Loading...</span>
          </div>
          <div className="mt-3 h5 text-muted">{text}</div>
        </div>
      </div>
    );
  }

  if (overlay) {
    return (
      <div 
        className="position-absolute top-0 start-0 w-100 h-100 d-flex align-items-center justify-content-center"
        style={{ 
          backgroundColor: 'rgba(255, 255, 255, 0.8)', 
          zIndex: 1000 
        }}
      >
        <LoadingSpinner />
      </div>
    );
  }

  return <LoadingSpinner />;
};

// Loading wrapper component for conditional loading states
export const LoadingWrapper = ({ loading, children, ...loadingProps }) => {
  if (loading) {
    return <Loading {...loadingProps} />;
  }
  return children;
};

// Inline loading component for buttons
export const ButtonLoading = ({ loading, children, disabled, ...props }) => {
  return (
    <button 
      {...props} 
      disabled={disabled || loading}
      className={`${props.className || ''} ${loading ? 'position-relative' : ''}`}
    >
      {loading && (
        <span className="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
      )}
      {children}
    </button>
  );
};

export default Loading;

```


==================== File: .\src\components\common\Modal.jsx ====================

// src/components/common/Modal.jsx
import React from 'react';

const Modal = ({ isOpen, onClose, title, children, size = 'md' }) => {
  if (!isOpen) return null;

  const handleBackdropClick = (e) => {
    if (e.target === e.currentTarget) {
      onClose();
    }
  };

  return (
    <div 
      className="modal fade show d-block" 
      style={{ backgroundColor: 'rgba(0,0,0,0.5)' }}
      onClick={handleBackdropClick}
    >
      <div className={`modal-dialog modal-${size} modal-dialog-centered`}>
        <div className="modal-content">
          <div className="modal-header">
            <h5 className="modal-title">{title}</h5>
            <button 
              type="button" 
              className="btn-close" 
              onClick={onClose}
            ></button>
          </div>
          <div className="modal-body">
            {children}
          </div>
        </div>
      </div>
    </div>
  );
};

export default Modal;

```


==================== File: .\src\components\common\Table.jsx ====================


```


==================== File: .\src\components\dashboard\Dashboard.jsx ====================

// // src/components/dashboard/Dashboard.jsx
// import React, { useState, useEffect } from 'react';
// import { useAuth } from '../../hooks/useAuth';
// import { ApiClient } from '../../services/api';
// import Loading from '../common/Loading';
// import { useNotification } from '../../hooks/useNotification';

// const Dashboard = () => {
//   const [stats, setStats] = useState({});
//   const [loading, setLoading] = useState(true);
//   const { user } = useAuth();
//   const { showNotification } = useNotification();

//   useEffect(() => {
//     loadStats();
    
//     // Auto refresh every 5 minutes
//     const interval = setInterval(loadStats, 5 * 60 * 1000);
//     return () => clearInterval(interval);
//   }, []);

//   const loadStats = async () => {
//     try {
//       console.log('🔍 Dashboard: Loading stats...');
//       const response = await ApiClient.get('/api/employees/stats');
      
//       console.log('📨 Dashboard: Raw response:', response);
//       console.log('✅ Dashboard: Response success:', response.success);
//       console.log('📊 Dashboard: Response data:', response.data);
      
//       // ✅ FIX: Sử dụng response.data thay vì response
//       if (response.success && response.data) {
//         console.log('✅ Dashboard: Setting stats to:', response.data);
//         setStats(response.data);
//       } else {
//         console.warn('⚠️ Dashboard: API returned success: false');
//         showNotification('Không thể tải dữ liệu thống kê', 'warning');
//       }
      
//     } catch (error) {
//       console.error('❌ Dashboard: Error loading stats:', error);
//       showNotification('Lỗi khi tải thống kê dashboard', 'error');
//     } finally {
//       setLoading(false);
//     }
//   };

//   const handleRefresh = async () => {
//     setLoading(true);
//     await loadStats();
//     showNotification('Đã cập nhật dữ liệu dashboard', 'success');
//   };

//   // ✅ DEBUG: Log current stats state
//   console.log('🎯 Dashboard render - Current stats:', stats);
//   console.log('🎯 Dashboard render - Loading:', loading);

//   if (loading) {
//     return <Loading fullScreen text="Đang tải dashboard..." />;
//   }

//   return (
//     <div className="dashboard-page">
//       {/* ✅ DEBUG INFO - Remove this after fixing */}
//       <div style={{ 
//         background: '#f8f9fa', 
//         border: '1px solid #dee2e6', 
//         borderRadius: '0.25rem', 
//         padding: '1rem', 
//         marginBottom: '1rem' 
//       }}>
//         <h6 className="text-muted mb-2">🐛 DEBUG INFO:</h6>
//         <small className="d-block">Raw stats: {JSON.stringify(stats)}</small>
//         <small className="d-block">Total Employees: {stats.totalEmployees}</small>
//         <small className="d-block">Active Employees: {stats.activeEmployees}</small>
//         <small className="d-block">Inactive Employees: {stats.inactiveEmployees}</small>
//       </div>

//       {/* Header */}
//       <div className="d-flex justify-content-between align-items-center mb-4">
//         <div>
//           <h1>Dashboard</h1>
//           <p className="text-muted mb-0">Chào mừng trở lại, {user?.fullName}!</p>
//         </div>
//         <button 
//           className="btn btn-outline-primary"
//           onClick={handleRefresh}
//           disabled={loading}
//         >
//           <i className={`fas fa-sync-alt me-2 ${loading ? 'fa-spin' : ''}`}></i>
//           Làm mới
//         </button>
//       </div>

//       {/* Stats Cards */}
//       <div className="row mb-4">
//         <div className="col-md-4 mb-3">
//           <div className="card text-center bg-primary text-white h-100">
//             <div className="card-body">
//               <i className="fas fa-users fa-3x mb-3"></i>
//               <h2 className="card-title" id="totalEmployees">
//                 {stats.totalEmployees || 0}
//               </h2>
//               <p className="card-text">Tổng nhân viên</p>
//             </div>
//           </div>
//         </div>

//         <div className="col-md-4 mb-3">
//           <div className="card text-center bg-success text-white h-100">
//             <div className="card-body">
//               <i className="fas fa-user-check fa-3x mb-3"></i>
//               <h2 className="card-title" id="activeEmployees">
//                 {stats.activeEmployees || 0}
//               </h2>
//               <p className="card-text">Nhân viên hoạt động</p>
//             </div>
//           </div>
//         </div>

//         <div className="col-md-4 mb-3">
//           <div className="card text-center bg-info text-white h-100">
//             <div className="card-body">
//               <i className="fas fa-user-times fa-3x mb-3"></i>
//               <h2 className="card-title" id="inactiveEmployees">
//                 {stats.inactiveEmployees || 0}
//               </h2>
//               <p className="card-text">Nhân viên không hoạt động</p>
//             </div>
//           </div>
//         </div>
//       </div>

//       {/* Quick Actions */}
//       <div className="row">
//         <div className="col-12">
//           <div className="card">
//             <div className="card-header">
//               <h5 className="card-title mb-0">Truy cập nhanh</h5>
//             </div>
//             <div className="card-body">
//               <div className="row">
//                 <div className="col-md-4 mb-3">
//                   <a href="/attendance-logs" className="btn btn-outline-info w-100 h-100 d-flex flex-column justify-content-center">
//                     <i className="fas fa-clock fa-2x mb-2"></i>
//                     <span>Xem chấm công</span>
//                   </a>
//                 </div>

//                 {(user?.role === 'hr' || user?.role === 'admin') && (
//                   <>
//                     <div className="col-md-4 mb-3">
//                       <a href="/employee-management" className="btn btn-outline-primary w-100 h-100 d-flex flex-column justify-content-center">
//                         <i className="fas fa-users-cog fa-2x mb-2"></i>
//                         <span>Quản lý nhân viên</span>
//                       </a>
//                     </div>
                    
//                     <div className="col-md-4 mb-3">
//                       <a href="/hr-dashboard" className="btn btn-outline-success w-100 h-100 d-flex flex-column justify-content-center">
//                         <i className="fas fa-chart-bar fa-2x mb-2"></i>
//                         <span>HR Dashboard</span>
//                       </a>
//                     </div>
//                   </>
//                 )}
//               </div>
//             </div>
//           </div>
//         </div>
//       </div>

//       {/* HR Functions */}
//       {(user?.role === 'hr' || user?.role === 'admin') && (
//         <div className="row mt-4">
//           <div className="col-12">
//             <div className="card">
//               <div className="card-body text-center">
//                 <h5>Chức năng HR</h5>
//                 <p className="text-muted">Truy cập các công cụ dành cho HR</p>
//                 <a 
//                   href="https://forms.google.com/your-form-url" 
//                   target="_blank"
//                   rel="noopener noreferrer"
//                   className="btn btn-outline-success me-2"
//                 >
//                   <i className="fas fa-external-link-alt me-2"></i>
//                   Mở Google Form tuyển dụng
//                 </a>
//                 <a 
//                   href="/hr-dashboard" 
//                   className="btn btn-primary"
//                 >
//                   <i className="fas fa-chart-line me-2"></i>
//                   Xem báo cáo HR
//                 </a>
//               </div>
//             </div>
//           </div>
//         </div>
//       )}
//     </div>
//   );
// };

// export default Dashboard;

```


==================== File: .\src\components\dashboard\HRDashboard.jsx ====================


```


==================== File: .\src\components\dashboard\StatsCard.jsx ====================


```


==================== File: .\src\components\employee\AddWorkHistoryModal.jsx ====================

// src/components/employee/AddWorkHistoryModal.jsx
import React, { useState } from 'react';
import { addWorkHistory } from '../../services/employee.js';
import { useNotification } from '../../hooks/useNotification';
import { ButtonLoading } from '../common/Loading';
import Modal from '../common/Modal';
import RecruitmentModal from './RecruitmentModal';

const AddWorkHistoryModal = ({ isOpen, onClose, employeeId, employeeName, onWorkHistoryAdded }) => {
  const [selectedRecruitment, setSelectedRecruitment] = useState(null);
  const [showRecruitmentModal, setShowRecruitmentModal] = useState(false);
  const [loading, setLoading] = useState(false);
  const { showNotification } = useNotification();

  const handleRecruitmentSelect = (recruitments) => {
    if (recruitments && recruitments.length > 0) {
      setSelectedRecruitment(recruitments[0]); // Chỉ chọn 1
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    
    if (!selectedRecruitment) {
      showNotification('Vui lòng chọn đề xuất tuyển dụng', 'error');
      return;
    }

    setLoading(true);
    
    try {
      const workHistoryData = {
        employeeId: employeeId,
        requestNo: selectedRecruitment.requestNo
      };

      const response = await addWorkHistory(workHistoryData);
      
      if (response.success) {
        showNotification('Thêm work history thành công!', 'success');
        onWorkHistoryAdded?.();
        onClose();
        setSelectedRecruitment(null);
      } else {
        showNotification(response.message || 'Lỗi khi thêm work history', 'error');
      }
      
    } catch (error) {
      console.error('❌ Error adding work history:', error);
      showNotification(error.message || 'Lỗi kết nối đến server. Vui lòng thử lại.', 'error');
    } finally {
      setLoading(false);
    }
  };

  if (!isOpen) return null;

  return (
    <>
      <Modal 
        isOpen={isOpen} 
        onClose={onClose}
        title={`Thêm Work History - ${employeeName || employeeId}`}
        size="md"
      >
        <form onSubmit={handleSubmit}>
          <div className="mb-3">
            <label className="form-label">Mã nhân viên</label>
            <input
              type="text"
              className="form-control"
              value={employeeId}
              disabled
            />
          </div>

          <div className="mb-3">
            <label className="form-label">Đề xuất tuyển dụng *</label>
            
            <div className="d-flex align-items-center gap-2 mb-2">
              <button
                type="button"
                className="btn btn-outline-primary"
                onClick={() => setShowRecruitmentModal(true)}
              >
                <i className="fas fa-plus me-2"></i>
                Chọn đề xuất
              </button>
              
              {selectedRecruitment && (
                <span className="badge bg-success">
                  <i className="fas fa-check me-1"></i>
                  Đã chọn
                </span>
              )}
            </div>

            {selectedRecruitment && (
              <div className="mt-2">
                <div className="card">
                  <div className="card-body py-2">
                    <div className="d-flex justify-content-between align-items-center">
                      <div>
                        <strong>{selectedRecruitment.requestNo}</strong> - {selectedRecruitment.department}
                        <br />
                        <small className="text-muted">
                          {selectedRecruitment.quantity} người • {selectedRecruitment.gender}
                        </small>
                      </div>
                      <button
                        type="button"
                        className="btn btn-outline-danger btn-sm"
                        onClick={() => setSelectedRecruitment(null)}
                      >
                        <i className="fas fa-times"></i>
                      </button>
                    </div>
                  </div>
                </div>
              </div>
            )}
          </div>

          <div className="d-flex gap-2 justify-content-end">
            <button type="button" className="btn btn-secondary" onClick={onClose}>
              Hủy
            </button>
            <ButtonLoading
              type="submit"
              className="btn btn-primary"
              loading={loading}
              disabled={loading || !selectedRecruitment}
            >
              {loading ? 'Đang thêm...' : 'Thêm Work History'}
            </ButtonLoading>
          </div>
        </form>
      </Modal>

      {showRecruitmentModal && (
        <RecruitmentModal
          isOpen={showRecruitmentModal}
          onClose={() => setShowRecruitmentModal(false)}
          onRecruitmentSelected={handleRecruitmentSelect}
          selectedRecruitment={selectedRecruitment}
          singleSelect={true}
        />
      )}
    </>
  );
};

export default AddWorkHistoryModal;

```


==================== File: .\src\components\employee\EmployeeAddForm.jsx ====================

// src/components/employee/EmployeeAddForm.jsx

import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
// ✅ SỬA: Import employeeService thay vì api trực tiếp
import { employeeService } from '../../services/employee';
import { useNotification } from '../../hooks/useNotification';
import RecruitmentModal from './RecruitmentModal';

const EmployeeAddForm = () => {
    const navigate = useNavigate();
    const { showNotification } = useNotification();
    
    // State cho đề xuất tuyển dụng (chỉ một đề xuất duy nhất)
    const [selectedRecruitment, setSelectedRecruitment] = useState(null); 
    const [isModalOpen, setIsModalOpen] = useState(false);
    
    // State cho form data nhân viên
    const [formData, setFormData] = useState({
        fullName: '',
        phoneNumber: '',
        gender: 'Nam',
        hourlyRate: '',
        bankAccount: '',
        bankName: '',
    });

    const handleChange = (e) => {
        const { name, value } = e.target;
        setFormData(prev => ({ ...prev, [name]: value }));
    };

    // Xử lý khi chọn đề xuất tuyển dụng
    const handleSelectRecruitment = (request) => {
        setSelectedRecruitment(request); // Ghi đè lên lựa chọn cũ
        setIsModalOpen(false);
    };

    // Xóa đề xuất đã chọn
    const handleRemoveRecruitment = () => {
        setSelectedRecruitment(null);
    };

    const handleSubmit = async (e) => {
        e.preventDefault();
        
        if (!selectedRecruitment) {
            showNotification('Vui lòng chọn một đề xuất tuyển dụng.', 'warning');
            return;
        }

        const payload = {
            ...formData,
            hourlyRate: parseFloat(formData.hourlyRate),
            // Backend yêu cầu workHistoryData là một mảng
            workHistoryData: [{
                requestNo: selectedRecruitment.requestNo
            }]
        };

        try {
            console.log('🔍 COMPONENT: Calling employeeService.create with:', payload);
            
            // ✅ SỬA: Sử dụng employeeService.create thay vì api.post
            const response = await employeeService.create(payload);
            
            console.log('✅ COMPONENT: Response received:', response);
            
            if (response.success) {
                showNotification('Thêm nhân viên mới thành công!', 'success');
                navigate('/employees');
            } else {
                showNotification(response.message || 'Có lỗi xảy ra.', 'error');
            }
        } catch (error) {
            console.error('❌ COMPONENT: Error:', error);
            const errorMessage = error.response?.data?.message || 'Lỗi hệ thống, không thể thêm nhân viên.';
            showNotification(errorMessage, 'error');
        }
    };

    return (
        <div className="card">
            <div className="card-header">
                <h4 className="card-title">Thêm Nhân viên Mới</h4>
            </div>
            <div className="card-body">
                <form onSubmit={handleSubmit}>
                    {/* PHẦN THÔNG TIN CÁ NHÂN */}
                    <h5 className="mb-3">Thông tin Cá nhân</h5>
                    <div className="row">
                        <div className="col-md-6 mb-3">
                            <label htmlFor="fullName" className="form-label">
                                Họ tên <span className="text-danger">*</span>
                            </label>
                            <input 
                                type="text" 
                                className="form-control" 
                                id="fullName" 
                                name="fullName" 
                                value={formData.fullName} 
                                onChange={handleChange} 
                                required 
                                placeholder="Nhập họ tên đầy đủ"
                            />
                        </div>
                        <div className="col-md-6 mb-3">
                            <label htmlFor="phoneNumber" className="form-label">
                                Số điện thoại <span className="text-danger">*</span>
                            </label>
                            <input 
                                type="tel" 
                                className="form-control" 
                                id="phoneNumber" 
                                name="phoneNumber" 
                                value={formData.phoneNumber} 
                                onChange={handleChange} 
                                required 
                                placeholder="Ví dụ: 0123456789"
                            />
                        </div>
                    </div>
                    
                    <div className="row">
                        <div className="col-md-6 mb-3">
                            <label htmlFor="gender" className="form-label">
                                Giới tính <span className="text-danger">*</span>
                            </label>
                            <select 
                                className="form-select" 
                                id="gender" 
                                name="gender" 
                                value={formData.gender} 
                                onChange={handleChange} 
                                required
                            >
                                <option value="Nam">Nam</option>
                                <option value="Nữ">Nữ</option>
                            </select>
                        </div>
                        <div className="col-md-6 mb-3">
                            <label htmlFor="hourlyRate" className="form-label">
                                Mức lương/giờ (VNĐ) <span className="text-danger">*</span>
                            </label>
                            <input 
                                type="number" 
                                className="form-control" 
                                id="hourlyRate" 
                                name="hourlyRate" 
                                value={formData.hourlyRate} 
                                onChange={handleChange} 
                                required 
                                min="0" 
                                step="1000"
                                placeholder="Ví dụ: 50000"
                            />
                        </div>
                    </div>

                    {/* PHẦN THÔNG TIN NGÂN HÀNG */}
                    <h5 className="mb-3 mt-4">Thông tin Ngân hàng</h5>
                    <div className="row">
                        <div className="col-md-6 mb-3">
                            <label htmlFor="bankAccount" className="form-label">
                                Số tài khoản <span className="text-danger">*</span>
                            </label>
                            <input 
                                type="text" 
                                className="form-control" 
                                id="bankAccount" 
                                name="bankAccount" 
                                value={formData.bankAccount} 
                                onChange={handleChange} 
                                required 
                                placeholder="Nhập số tài khoản ngân hàng"
                            />
                        </div>
                        <div className="col-md-6 mb-3">
                            <label htmlFor="bankName" className="form-label">
                                Tên ngân hàng <span className="text-danger">*</span>
                            </label>
                            <input 
                                type="text" 
                                className="form-control" 
                                id="bankName" 
                                name="bankName" 
                                value={formData.bankName} 
                                onChange={handleChange} 
                                required 
                                placeholder="Ví dụ: Vietcombank, Techcombank..."
                            />
                        </div>
                    </div>

                    <hr />
                    
                    {/* PHẦN ĐỀ XUẤT TUYỂN DỤNG */}
                    <h5 className="mb-3">Thông tin Tuyển dụng</h5>
                    
                    {selectedRecruitment ? (
                        <div className="alert alert-info d-flex justify-content-between align-items-center">
                            <div>
                                <strong>Đề xuất đã chọn:</strong> {selectedRecruitment.requestNo} <br />
                                <small className="text-muted">
                                    Phòng ban: {selectedRecruitment.department} - Vị trí: {selectedRecruitment.position || 'Chưa xác định'}
                                </small>
                            </div>
                            <button 
                                type="button" 
                                className="btn-close" 
                                onClick={handleRemoveRecruitment} 
                                aria-label="Xóa"
                                title="Xóa đề xuất đã chọn"
                            ></button>
                        </div>
                    ) : (
                        <div className="alert alert-warning">
                            <i className="fas fa-exclamation-triangle me-2"></i>
                            Chưa chọn đề xuất tuyển dụng. Vui lòng chọn một đề xuất.
                        </div>
                    )}

                    <button
                        type="button"
                        className={`btn ${selectedRecruitment ? 'btn-outline-secondary' : 'btn-outline-primary'}`}
                        onClick={() => setIsModalOpen(true)}
                        disabled={!!selectedRecruitment}
                    >
                        <i className="fas fa-search me-2"></i>
                        {selectedRecruitment ? 'Đã chọn đề xuất' : 'Chọn Đề xuất Tuyển dụng'}
                    </button>
                    
                    {/* BUTTONS */}
                    <div className="mt-4 d-flex gap-2">
                        <button type="submit" className="btn btn-primary">
                            <i className="fas fa-save me-2"></i>
                            Lưu Nhân viên
                        </button>
                        <button 
                            type="button" 
                            className="btn btn-light" 
                            onClick={() => navigate('/employees')}
                        >
                            <i className="fas fa-times me-2"></i>
                            Hủy
                        </button>
                    </div>
                </form>
            </div>

            {/* MODAL CHỌN ĐỀ XUẤT */}
            <RecruitmentModal
                isOpen={isModalOpen}
                onClose={() => setIsModalOpen(false)}
                onRecruitmentSelected={handleSelectRecruitment}
            />
        </div>
    );
};

export default EmployeeAddForm;

```


==================== File: .\src\components\employee\EmployeeEditModal.jsx ====================

// src/components/employee/EmployeeEditModal.jsx

import React, { useState, useEffect } from 'react';
// ✅ SỬA 1: Import cả object `employeeService` thay vì từng hàm lẻ
import { employeeService } from '../../services/employee.js';
import { useNotification } from '../../hooks/useNotification';
import Modal from '../common/Modal.jsx';

// Component này chỉ nhận props và gọi hàm `onSave` từ page cha
// Nó không cần biết logic update đến từ đâu
const EmployeeEditModal = ({ isOpen, onClose, onSave, employee }) => {
  const [formData, setFormData] = useState({});
  const [loading, setLoading] = useState(false);
  const { showNotification } = useNotification();

  useEffect(() => {
    if (employee) {
      setFormData({
        fullName: employee.fullName || '',
        phoneNumber: employee.phoneNumber || '',
        gender: employee.gender || '',
        hourlyRate: employee.hourlyRate || '',
        bankAccount: employee.bankAccount || '',
        bankName: employee.bankName || '',
        status: employee.status || 'active',
      });
    }
  }, [employee]);

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData((prev) => ({ ...prev, [name]: value }));
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    // ✅ SỬA 2: Gọi hàm onSave được truyền từ page cha,
    // page cha (EmployeeManagementPage) sẽ gọi hook useEmployees để update
    await onSave(formData);
    setLoading(false);
  };

  if (!isOpen) return null;

  return (
    <Modal
      isOpen={isOpen}
      onClose={onClose}
      title={`Chỉnh sửa: ${employee.fullName}`}
    >
      <form onSubmit={handleSubmit}>
        {/* Các trường input trong form giữ nguyên */}
        <div className="row">
          <div className="col-md-6 mb-3">
            <label className="form-label">Họ tên</label>
            <input name="fullName" value={formData.fullName} onChange={handleChange} className="form-control" />
          </div>
          <div className="col-md-6 mb-3">
            <label className="form-label">Số điện thoại</label>
            <input name="phoneNumber" value={formData.phoneNumber} onChange={handleChange} className="form-control" />
          </div>
        </div>
        <div className="row">
          <div className="col-md-6 mb-3">
            <label className="form-label">Giới tính</label>
            <select name="gender" value={formData.gender} onChange={handleChange} className="form-select">
              <option value="Nam">Nam</option>
              <option value="Nữ">Nữ</option>
            </select>
          </div>
          <div className="col-md-6 mb-3">
            <label className="form-label">Lương/giờ</label>
            <input type="number" name="hourlyRate" value={formData.hourlyRate} onChange={handleChange} className="form-control" />
          </div>
        </div>
        <div className="row">
          <div className="col-md-6 mb-3">
            <label className="form-label">Số tài khoản</label>
            <input name="bankAccount" value={formData.bankAccount} onChange={handleChange} className="form-control" />
          </div>
          <div className="col-md-6 mb-3">
            <label className="form-label">Ngân hàng</label>
            <input name="bankName" value={formData.bankName} onChange={handleChange} className="form-control" />
          </div>
        </div>
        <div className="mb-3">
          <label className="form-label">Trạng thái</label>
          <select name="status" value={formData.status} onChange={handleChange} className="form-select">
            <option value="active">Hoạt động</option>
            <option value="inactive">Ngưng hoạt động</option>
          </select>
        </div>
        <div className="modal-footer">
          <button type="button" className="btn btn-secondary" onClick={onClose}>Hủy</button>
          <button type="submit" className="btn btn-primary" disabled={loading}>
            {loading ? 'Đang lưu...' : 'Lưu thay đổi'}
          </button>
        </div>
      </form>
    </Modal>
  );
};

export default EmployeeEditModal;

```


==================== File: .\src\components\employee\EmployeeForm.jsx ====================

// src/components/employee/EmployeeForm.jsx

import React, { useState, useEffect } from 'react';

const EmployeeForm = ({ initialData, onSubmit, onCancel, isLoading }) => {
  const [formData, setFormData] = useState(initialData);

  useEffect(() => {
    setFormData(initialData);
  }, [initialData]);

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData((prev) => ({ ...prev, [name]: value }));
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    onSubmit(formData);
  };

  return (
    <form onSubmit={handleSubmit}>
      <div className="row">
        <div className="col-md-6 mb-3">
          <label className="form-label">Họ tên</label>
          <input name="fullName" value={formData.fullName} onChange={handleChange} className="form-control" required />
        </div>
        <div className="col-md-6 mb-3">
          <label className="form-label">Số điện thoại</label>
          <input name="phoneNumber" value={formData.phoneNumber} onChange={handleChange} className="form-control" required />
        </div>
      </div>
      <div className="row">
        <div className="col-md-6 mb-3">
          <label className="form-label">Giới tính</label>
          <select name="gender" value={formData.gender} onChange={handleChange} className="form-select">
            <option value="Nam">Nam</option>
            <option value="Nữ">Nữ</option>
          </select>
        </div>
        <div className="col-md-6 mb-3">
          <label className="form-label">Lương/giờ</label>
          <input type="number" name="hourlyRate" value={formData.hourlyRate} onChange={handleChange} className="form-control" required />
        </div>
      </div>
      <div className="row">
        <div className="col-md-6 mb-3">
          <label className="form-label">Số tài khoản</label>
          <input name="bankAccount" value={formData.bankAccount} onChange={handleChange} className="form-control" />
        </div>
        <div className="col-md-6 mb-3">
          <label className="form-label">Ngân hàng</label>
          <input name="bankName" value={formData.bankName} onChange={handleChange} className="form-control" />
        </div>
      </div>
      <div className="mb-3">
        <label className="form-label">Trạng thái</label>
        <select name="status" value={formData.status} onChange={handleChange} className="form-select">
          <option value="active">Hoạt động</option>
          <option value="inactive">Ngưng hoạt động</option>
        </select>
      </div>
      <div className="modal-footer">
        <button type="button" className="btn btn-secondary" onClick={onCancel} disabled={isLoading}>Hủy</button>
        <button type="submit" className="btn btn-primary" disabled={isLoading}>
          {isLoading ? 'Đang lưu...' : 'Lưu'}
        </button>
      </div>
    </form>
  );
};

export default EmployeeForm;

```


==================== File: .\src\components\employee\EmployeeList.jsx ====================

import React, { useState, useEffect } from 'react';
import { ApiClient } from '../../services/api';
import { useNotification } from '../../hooks/useNotification';
import EmployeeTable from './EmployeeTable';
import Loading from '../common/Loading';

const EmployeeList = () => {
  const [employees, setEmployees] = useState([]);
  const [filteredEmployees, setFilteredEmployees] = useState([]);
  const [loading, setLoading] = useState(true);
  const [searchTerm, setSearchTerm] = useState('');
  const [statusFilter, setStatusFilter] = useState('');
  const { showNotification } = useNotification();

  useEffect(() => {
    loadEmployees();
  }, []);

  useEffect(() => {
    filterEmployees();
  }, [employees, searchTerm, statusFilter]);

  const loadEmployees = async () => {
    try {
      setLoading(true);
      console.log('🔍 FRONTEND: Starting loadEmployees...');
      
      const response = await ApiClient.get('/api/employees');
      
      // 🚨 DEBUG: In ra toàn bộ response để xem cấu trúc
      console.log('🔍 RAW RESPONSE FROM BACKEND:', response);
      console.log('🔍 Response type:', typeof response);
      console.log('🔍 Response keys:', Object.keys(response || {}));
      
      // Kiểm tra từng thuộc tính
      if (response?.data) {
        console.log('🔍 response.data:', response.data);
        console.log('🔍 response.data type:', typeof response.data);
        console.log('🔍 response.data is Array:', Array.isArray(response.data));
        
        if (Array.isArray(response.data) && response.data.length > 0) {
          console.log('🔍 First employee in response.data:', response.data[0]);
          console.log('🔍 First employee keys:', Object.keys(response.data[0] || {}));
        }
      }
      
      if (response?.success) {
        console.log('🔍 response.success:', response.success);
      }
      
      // Xử lý dữ liệu dựa trên cấu trúc response
      let employeeData = [];
      
      if (response && response.success && Array.isArray(response.data)) {
        // Trường hợp API trả về { success: true, data: [...] }
        employeeData = response.data;
        console.log('✅ Using response.data (structured format)');
      } else if (Array.isArray(response)) {
        // Trường hợp API trả về trực tiếp array
        employeeData = response;
        console.log('✅ Using response directly (array format)');
      } else if (response && Array.isArray(response.employees)) {
        // Trường hợp API trả về { employees: [...] }
        employeeData = response.employees;
        console.log('✅ Using response.employees');
      } else {
        console.warn('⚠️ Unknown response format, using empty array');
        employeeData = [];
      }
      
      console.log('🔍 Final employeeData to set:', employeeData);
      console.log('🔍 Final employeeData length:', employeeData.length);
      
      setEmployees(employeeData);
      
    } catch (error) {
      console.error('❌ Error loading employees:', error);
      console.error('❌ Error details:', {
        message: error.message,
        response: error.response?.data,
        status: error.response?.status
      });
      
      // Set empty array on error
      setEmployees([]);
      showNotification('Lỗi khi tải danh sách nhân viên', 'error');
    } finally {
      setLoading(false);
    }
  };

  const filterEmployees = () => {
    // Đảm bảo employees luôn là array trước khi filter
    const safeEmployees = Array.isArray(employees) ? employees : [];
    let filtered = safeEmployees;

    if (searchTerm) {
      filtered = filtered.filter(employee => {
        // Safe check cho từng property
        const fullName = employee?.fullName || '';
        const employeeId = employee?.employeeId || '';
        const phoneNumber = employee?.phoneNumber || '';
        
        return (
          fullName.toLowerCase().includes(searchTerm.toLowerCase()) ||
          employeeId.toLowerCase().includes(searchTerm.toLowerCase()) ||
          phoneNumber.includes(searchTerm)
        );
      });
    }

    if (statusFilter) {
      filtered = filtered.filter(employee => employee?.status === statusFilter);
    }

    setFilteredEmployees(filtered);
  };

  const handleEdit = async (employeeId) => {
    // TODO: Implement edit functionality
    console.log('Edit employee:', employeeId);
    showNotification('Chức năng chỉnh sửa đang được phát triển', 'info');
  };

  const handleDelete = async (employeeId) => {
    const employee = employees.find(emp => emp?.id === employeeId);
    if (!employee) return;

    const confirmed = window.confirm(`Bạn có chắc chắn muốn xóa nhân viên "${employee.fullName || 'N/A'}"?`);
    if (!confirmed) return;

    try {
      await ApiClient.delete(`/api/employees/${employeeId}`);
      
      // Remove from local state
      setEmployees(employees.filter(emp => emp?.id !== employeeId));
      showNotification('Xóa nhân viên thành công', 'success');
      
    } catch (error) {
      console.error('Error deleting employee:', error);
      showNotification('Lỗi khi xóa nhân viên', 'error');
    }
  };

  const handleAddWorkHistory = (employeeId, employeeName) => {
    // TODO: Implement add work history functionality
    console.log('Add work history for:', employeeId, employeeName);
    showNotification('Chức năng thêm work history đang được phát triển', 'info');
  };

  const handleViewWorkHistory = (employeeId) => {
    // TODO: Implement view work history functionality
    console.log('View work history for:', employeeId);
    showNotification('Chức năng xem work history đang được phát triển', 'info');
  };

  const handleRefresh = async () => {
    await loadEmployees();
    showNotification('Đã làm mới danh sách nhân viên', 'success');
  };

  if (loading) {
    return <Loading text="Đang tải danh sách nhân viên..." />;
  }

  return (
    <div className="employee-list">
      {/* Search and Filter Controls */}
      <div className="row mb-3">
        <div className="col-md-8">
          <input
            type="text"
            className="form-control"
            placeholder="Tìm kiếm nhân viên (tên, mã NV, số ĐT)..."
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            id="employeeSearch"
          />
        </div>
        <div className="col-md-3">
          <select
            className="form-select"
            value={statusFilter}
            onChange={(e) => setStatusFilter(e.target.value)}
            id="employeeStatusFilter"
          >
            <option value="">Tất cả trạng thái</option>
            <option value="active">Hoạt động</option>
            <option value="inactive">Ngưng hoạt động</option>
          </select>
        </div>
        <div className="col-md-1">
          <button 
            className="btn btn-outline-secondary"
            onClick={handleRefresh}
            title="Làm mới"
          >
            <i className="fas fa-sync-alt"></i>
          </button>
        </div>
      </div>

      {/* Employee Count */}
      <div className="mb-3">
        <small className="text-muted">
          Hiển thị {filteredEmployees.length} / {employees.length} nhân viên
        </small>
      </div>

      {/* Debug Info - Remove this in production */}
      <div className="mb-3 p-2 bg-light border rounded">
        <small className="text-muted">
          <strong>DEBUG:</strong> employees type: {typeof employees}, isArray: {Array.isArray(employees).toString()}, length: {Array.isArray(employees) ? employees.length : 'N/A'}
        </small>
      </div>

      {/* Employee Table */}
      <EmployeeTable
        employees={filteredEmployees}
        onEdit={handleEdit}
        onDelete={handleDelete}
        onAddWorkHistory={handleAddWorkHistory}
        onViewWorkHistory={handleViewWorkHistory}
      />
    </div>
  );
};

export default EmployeeList;

```


==================== File: .\src\components\employee\EmployeeTable.jsx ====================

import React from 'react';

const EmployeeTable = ({ 
  employees, 
  onEdit, 
  onDelete, 
  onAddWorkHistory, 
  onViewWorkHistory 
}) => {
  // Kiểm tra và đảm bảo employees luôn là array
  const employeeList = React.useMemo(() => {
    if (!employees) {
      return [];
    }
    
    // Nếu employees là object có data property (từ API response)
    if (employees.data && Array.isArray(employees.data)) {
      return employees.data;
    }
    
    // Nếu employees đã là array
    if (Array.isArray(employees)) {
      return employees;
    }
    
    // Fallback: trả về empty array
    console.warn('EmployeeTable: employees prop is not an array:', typeof employees, employees);
    return [];
  }, [employees]);

  if (!employeeList || employeeList.length === 0) {
    return (
      <div className="text-center py-4">
        <i className="fas fa-users fa-3x text-muted mb-3"></i>
        <p className="text-muted">Không có nhân viên nào</p>
      </div>
    );
  }

  return (
    <div className="table-responsive">
      <table className="table table-striped table-hover">
        <thead className="table-dark">
          <tr>
            <th>Mã NV</th>
            <th>Họ tên</th>
            <th>Số ĐT</th>
            <th>Giới tính</th>
            <th>Lương/giờ</th>
            <th>Tài khoản</th>
            <th>Ngân hàng</th>
            <th>Trạng thái</th>
            <th>Thao tác</th>
          </tr>
        </thead>
        <tbody id="employeeTableBody">
          {employeeList.map((employee, index) => {
            // Đảm bảo mỗi employee có đủ thuộc tính
            const safeEmployee = {
              id: employee?.id || `emp_${index}`,
              employeeId: employee?.employeeId || 'N/A',
              fullName: employee?.fullName || 'N/A',
              phoneNumber: employee?.phoneNumber || 'N/A',
              gender: employee?.gender || 'N/A',
              hourlyRate: employee?.hourlyRate || 0,
              bankAccount: employee?.bankAccount || 'N/A',
              bankName: employee?.bankName || 'N/A',
              status: employee?.status || 'inactive'
            };

            return (
              <tr key={safeEmployee.id}>
                <td>{safeEmployee.employeeId}</td>
                <td>{safeEmployee.fullName}</td>
                <td>{safeEmployee.phoneNumber}</td>
                <td>{safeEmployee.gender}</td>
                <td>
                  {safeEmployee.hourlyRate && safeEmployee.hourlyRate > 0
                    ? safeEmployee.hourlyRate.toLocaleString('vi-VN') + ' VNĐ'
                    : 'N/A'
                  }
                </td>
                <td>{safeEmployee.bankAccount}</td>
                <td>{safeEmployee.bankName}</td>
                <td>
                  <span className={`badge ${
                    safeEmployee.status === 'active' 
                      ? 'bg-success' 
                      : 'bg-secondary'
                  }`}>
                    {safeEmployee.status === 'active' 
                      ? 'Hoạt động' 
                      : 'Ngưng hoạt động'
                    }
                  </span>
                </td>
                <td>
                  <div className="btn-group" role="group">
                    {onAddWorkHistory && (
                      <button
                        className="btn btn-sm btn-success"
                        onClick={() => onAddWorkHistory(safeEmployee.employeeId, safeEmployee.fullName)}
                        title="Thêm work history"
                      >
                        <i className="fas fa-plus"></i>
                      </button>
                    )}
                    
                    {onViewWorkHistory && (
                      <button
                        className="btn btn-sm btn-info"
                        onClick={() => onViewWorkHistory(safeEmployee.employeeId)}
                        title="Xem lịch sử"
                      >
                        <i className="fas fa-history"></i>
                      </button>
                    )}
                    
                    {onEdit && (
                      <button
                        className="btn btn-sm btn-primary"
                        onClick={() => onEdit(safeEmployee.id)}
                        title="Chỉnh sửa"
                      >
                        <i className="fas fa-edit"></i>
                      </button>
                    )}
                    
                    {onDelete && (
                      <button
                        className="btn btn-sm btn-danger"
                        onClick={() => {
                          if (window.confirm(`Bạn có chắc chắn muốn xóa nhân viên "${safeEmployee.fullName}"?`)) {
                            onDelete(safeEmployee.id);
                          }
                        }}
                        title="Xóa"
                      >
                        <i className="fas fa-trash"></i>
                      </button>
                    )}
                  </div>
                </td>
              </tr>
            );
          })}
        </tbody>
      </table>
    </div>
  );
};

export default EmployeeTable;

```


==================== File: .\src\components\employee\RecruitmentModal.jsx ====================

// src/components/employee/RecruitmentModal.jsx
import React, { useState, useEffect } from 'react';
import { employeeService } from '../../services/employee';
import { useNotification } from '../../hooks/useNotification';
import Loading from '../common/Loading';

const RecruitmentModal = ({ isOpen, onClose, onRecruitmentSelected, selectedRecruitment = null }) => {
  const [recruitmentRequests, setRecruitmentRequests] = useState([]);
  const [loading, setLoading] = useState(false);
  const [selectedItem, setSelectedItem] = useState(null);
  const [searchTerm, setSearchTerm] = useState('');
  const { showNotification } = useNotification();

  useEffect(() => {
    if (isOpen) {
      loadRecruitmentRequests();
      // Set selected item từ props
      setSelectedItem(selectedRecruitment);
    }
  }, [isOpen, selectedRecruitment]);

  // ✅ THÊM: Helper function để extract requestNo từ structure phức tạp
  const extractRequestNo = (requestNoData) => {
    if (!requestNoData) return '';
    
    console.log('🔍 RECRUITMENT MODAL: extractRequestNo input:', requestNoData);
    console.log('🔍 RECRUITMENT MODAL: requestNoData type:', typeof requestNoData);
    
    // Nếu là object với structure { "link": "...", "text": "202507140017" }
    if (typeof requestNoData === 'object' && requestNoData !== null) {
      if (requestNoData.text) {
        console.log('🔍 RECRUITMENT MODAL: Found text property:', requestNoData.text);
        return requestNoData.text;
      }
      
      // Nếu là object nhưng có key khác
      if (requestNoData.value) {
        console.log('🔍 RECRUITMENT MODAL: Found value property:', requestNoData.value);
        return requestNoData.value;
      }
      
      // Nếu object có toString() method
      console.log('🔍 RECRUITMENT MODAL: Converting object to string');
      return requestNoData.toString();
    }
    
    // Nếu là string trực tiếp
    if (typeof requestNoData === 'string') {
      console.log('🔍 RECRUITMENT MODAL: Direct string:', requestNoData);
      return requestNoData;
    }
    
    // Fallback
    console.log('🔍 RECRUITMENT MODAL: Using fallback conversion');
    return requestNoData?.toString() || '';
  };

  // ✅ THÊM: Helper function để extract tên người yêu cầu
  const extractRequesterName = (requesterData) => {
    if (!requesterData) return '';
    
    console.log('🔍 RECRUITMENT MODAL: extractRequesterName input:', requesterData);
    
    // Nếu là array [{ "name": "236LH.Nguyễn Huy Thành", ... }]
    if (Array.isArray(requesterData)) {
      return requesterData.map(user => 
        user.name || user.en_name || user.id || 'Unknown'
      ).join(', ');
    }
    
    // Nếu là object { "name": "236LH.Nguyễn Huy Thành", ... }
    if (typeof requesterData === 'object' && requesterData !== null) {
      return requesterData.name || requesterData.en_name || requesterData.id || 'Unknown';
    }
    
    // Nếu là string trực tiếp
    return requesterData.toString();
  };

  const loadRecruitmentRequests = async () => {
    try {
      setLoading(true);
      console.log('🔍 RECRUITMENT MODAL: Loading recruitment requests...');
      
      const response = await employeeService.getApprovedRecruitmentRequests();
      console.log('🔍 RECRUITMENT MODAL: Raw API response:', response);
      
      if (response.success && Array.isArray(response.data)) {
        // ✅ THÊM: Process data để extract requestNo và requester đúng cách
        const processedData = response.data.map((item, index) => {
          console.log(`🔍 RECRUITMENT MODAL: Processing item ${index}:`, item);
          
          const processedItem = {
            ...item,
            requestNo: extractRequestNo(item.requestNo),
            requester: extractRequesterName(item.requester)
          };
          
          console.log(`🔍 RECRUITMENT MODAL: Processed item ${index}:`, processedItem);
          return processedItem;
        });
        
        console.log('🔍 RECRUITMENT MODAL: Final processed data:', processedData);
        setRecruitmentRequests(processedData);
        
        // Debug first item
        if (processedData.length > 0) {
          console.log('🔍 RECRUITMENT MODAL: First item structure:', processedData[0]);
          console.log('🔍 RECRUITMENT MODAL: First item requestNo type:', typeof processedData[0].requestNo);
          console.log('🔍 RECRUITMENT MODAL: First item requestNo value:', processedData[0].requestNo);
        }
        
      } else {
        throw new Error(response.message || 'Lỗi khi tải dữ liệu');
      }
    } catch (error) {
      console.error('❌ RECRUITMENT MODAL: Error loading recruitment requests:', error);
      showNotification('Lỗi khi tải dữ liệu tuyển dụng. Sử dụng dữ liệu mẫu.', 'warning');
      setRecruitmentRequests(getMockData());
    } finally {
      setLoading(false);
    }
  };

  const getMockData = () => {
    return [
      {
        id: '1',
        requestNo: '202507140017',
        requester: '236LH.Nguyễn Huy Thành',
        status: 'Đang tuyển dụng',
        department: '116 Cầu Giấy',
        quantity: '2',
        gender: 'Nam/Nữ',
        fromDate: '2025-07-14',
        toDate: '2025-08-14',
        position: 'Nhân viên bán hàng'
      },
      {
        id: '2',
        requestNo: '202507140018',
        requester: '225VVN.Nguyễn Trọng Hoàng An',
        status: 'Đang tuyển dụng', 
        department: 'Trâm Trỗi',
        quantity: '1',
        gender: 'Nữ',
        fromDate: '2025-07-14',
        toDate: '2025-08-14',
        position: 'Thu ngân'
      }
    ];
  };

  const filteredData = recruitmentRequests.filter(item =>
    item.requestNo?.toLowerCase().includes(searchTerm.toLowerCase()) ||
    item.department?.toLowerCase().includes(searchTerm.toLowerCase()) ||
    item.requester?.toLowerCase().includes(searchTerm.toLowerCase()) ||
    item.position?.toLowerCase().includes(searchTerm.toLowerCase())
  );

  // Handle single selection
  const handleItemSelect = (item) => {
    console.log('🔍 RECRUITMENT MODAL: handleItemSelect called with:', item);
    setSelectedItem(selectedItem?.requestNo === item.requestNo ? null : item);
  };

  const handleConfirm = () => {
    if (!selectedItem) {
      showNotification('Vui lòng chọn một đề xuất tuyển dụng', 'warning');
      return;
    }
    
    console.log('🔍 RECRUITMENT MODAL: selectedItem before confirm:', selectedItem);
    console.log('🔍 RECRUITMENT MODAL: selectedItem.requestNo:', selectedItem.requestNo);
    console.log('🔍 RECRUITMENT MODAL: typeof selectedItem.requestNo:', typeof selectedItem.requestNo);
    
    // ✅ SỬA: Kiểm tra requestNo có hợp lệ không
    if (!selectedItem.requestNo || selectedItem.requestNo === 'undefined') {
      console.error('❌ RECRUITMENT MODAL: Invalid requestNo:', selectedItem.requestNo);
      showNotification('Đề xuất tuyển dụng không hợp lệ. Vui lòng chọn lại.', 'error');
      return;
    }
    
    // ✅ SỬA: Tạo object với requestNo đã được extract
    const processedItem = {
      ...selectedItem,
      requestNo: selectedItem.requestNo // Đã được extract trong loadRecruitmentRequests
    };
    
    console.log('🔍 RECRUITMENT MODAL: Final processed item for callback:', processedItem);
    
    // Gửi về component cha
    onRecruitmentSelected(processedItem); // ✅ SỬA: Gửi object thay vì array
    onClose();
  };

  const handleCancel = () => {
    setSelectedItem(selectedRecruitment);
    setSearchTerm(''); // Clear search term
    onClose();
  };

  if (!isOpen) return null;

  return (
    <div className="modal fade show" style={{ display: 'block' }} tabIndex="-1">
      <div className="modal-dialog modal-xl">
        <div className="modal-content">
          <div className="modal-header">
            <h5 className="modal-title">
              <i className="fas fa-clipboard-list me-2"></i>
              Chọn đề xuất tuyển dụng
            </h5>
            <button
              type="button"
              className="btn-close"
              onClick={handleCancel}
            ></button>
          </div>

          <div className="modal-body">
            {/* Search */}
            <div className="row mb-3">
              <div className="col-12">
                <div className="input-group">
                  <span className="input-group-text">
                    <i className="fas fa-search"></i>
                  </span>
                  <input
                    type="text"
                    className="form-control"
                    placeholder="Tìm kiếm theo Request No, Phòng ban, Người yêu cầu, Vị trí..."
                    value={searchTerm}
                    onChange={(e) => setSearchTerm(e.target.value)}
                  />
                  {searchTerm && (
                    <button
                      className="btn btn-outline-secondary"
                      type="button"
                      onClick={() => setSearchTerm('')}
                    >
                      <i className="fas fa-times"></i>
                    </button>
                  )}
                </div>
              </div>
            </div>

            {/* Selected Info */}
            {selectedItem && (
              <div className="alert alert-info">
                <i className="fas fa-info-circle me-2"></i>
                Đã chọn: <strong>{selectedItem.requestNo}</strong> - {selectedItem.position} ({selectedItem.department})
              </div>
            )}

            {/* Content */}
            {loading ? (
              <Loading text="Đang tải danh sách đề xuất..." />
            ) : (
              <div className="table-responsive" style={{ maxHeight: '400px', overflowY: 'auto' }}>
                <table className="table table-striped table-hover">
                  <thead className="table-dark sticky-top">
                    <tr>
                      <th width="50">
                        <i className="fas fa-check"></i>
                      </th>
                      <th>Request No.</th>
                      <th>Vị trí tuyển dụng</th>
                      <th>Người yêu cầu</th>
                      <th>Phòng ban</th>
                      <th>Số lượng</th>
                      <th>Giới tính</th>
                      <th>Thời gian</th>
                      <th>Trạng thái</th>
                    </tr>
                  </thead>
                  <tbody>
                    {filteredData.map((item) => {
                      const isSelected = selectedItem?.requestNo === item.requestNo;
                      
                      return (
                        <tr 
                          key={item.id || item.requestNo}
                          className={isSelected ? 'table-primary' : ''}
                          style={{ cursor: 'pointer' }}
                          onClick={() => handleItemSelect(item)}
                        >
                          <td>
                            <input
                              type="radio"
                              className="form-check-input"
                              checked={isSelected}
                              onChange={() => handleItemSelect(item)}
                            />
                          </td>
                          <td>
                            <strong className="text-primary">{item.requestNo}</strong>
                          </td>
                          <td>
                            <span className="badge bg-info">{item.position || 'N/A'}</span>
                          </td>
                          <td>{item.requester}</td>
                          <td>
                            <span className="badge bg-secondary">{item.department}</span>
                          </td>
                          <td className="text-center">
                            <span className="badge bg-warning text-dark">{item.quantity}</span>
                          </td>
                          <td>
                            <span className="badge bg-light text-dark">{item.gender}</span>
                          </td>
                          <td>
                            <small>
                              {item.fromDate}<br/>
                              đến {item.toDate}
                            </small>
                          </td>
                          <td>
                            <span className={`badge ${
                              item.status === 'Đang tuyển dụng' ? 'bg-success' : 'bg-warning'
                            }`}>
                              {item.status}
                            </span>
                          </td>
                        </tr>
                      );
                    })}
                  </tbody>
                </table>

                {filteredData.length === 0 && (
                  <div className="text-center py-4">
                    <i className="fas fa-search fa-3x text-muted mb-3"></i>
                    <p className="text-muted">
                      {searchTerm ? 'Không tìm thấy đề xuất phù hợp' : 'Chưa có đề xuất tuyển dụng nào'}
                    </p>
                  </div>
                )}
              </div>
            )}
          </div>

          <div className="modal-footer">
            <button
              type="button"
              className="btn btn-secondary"
              onClick={handleCancel}
            >
              <i className="fas fa-times me-2"></i>
              Hủy
            </button>
            <button
              type="button"
              className="btn btn-primary"
              onClick={handleConfirm}
              disabled={!selectedItem || loading}
            >
              <i className="fas fa-check me-2"></i>
              Xác nhận{selectedItem ? ` (${selectedItem.requestNo})` : ''}
            </button>
          </div>
        </div>
      </div>
    </div>
  );
};

export default RecruitmentModal;

```


==================== File: .\src\components\employee\WorkHistoryModal.jsx ====================

// src/components/employee/WorkHistoryModal.jsx  
import React, { useState, useEffect } from 'react';
import { getEmployeeWorkHistory } from '../../services/employee.js';
import { useNotification } from '../../hooks/useNotification';
import Modal from '../common/Modal';
import Loading from '../common/Loading';

const WorkHistoryModal = ({ isOpen, onClose, employeeId, employeeName, workHistory }) => {
  const [workHistoryData, setWorkHistoryData] = useState([]);
  const [loading, setLoading] = useState(false);
  const { showNotification } = useNotification();

  useEffect(() => {
    if (isOpen && employeeId && !workHistory) {
      fetchWorkHistory();
    } else if (workHistory) {
      setWorkHistoryData(workHistory);
    }
  }, [isOpen, employeeId, workHistory]);

  const fetchWorkHistory = async () => {
    setLoading(true);
    try {
      const response = await getEmployeeWorkHistory(employeeId);
      
      if (response.success) {
        setWorkHistoryData(response.data || []);
      } else {
        showNotification(response.message || 'Lỗi khi tải work history', 'error');
      }
    } catch (error) {
      console.error('❌ Error fetching work history:', error);
      showNotification(error.message || 'Lỗi kết nối đến server', 'error');
    } finally {
      setLoading(false);
    }
  };

  if (!isOpen) return null;

  return (
    <Modal 
      isOpen={isOpen} 
      onClose={onClose}
      title={`Lịch sử làm việc - ${employeeName || employeeId}`}
      size="lg"
    >
      {loading ? (
        <Loading />
      ) : (
        <div>
          {workHistoryData.length === 0 ? (
            <div className="text-center py-4">
              <i className="fas fa-history fa-3x text-muted mb-3"></i>
              <p className="text-muted">Không có lịch sử làm việc</p>
            </div>
          ) : (
            <div className="table-responsive">
              <table className="table table-striped">
                <thead className="table-dark">
                  <tr>
                    <th>Request No.</th>
                    <th>Mã nhân viên</th>
                    <th>Thời gian</th>
                  </tr>
                </thead>
                <tbody>
                  {workHistoryData.map((item, index) => (
                    <tr key={item.id || index}>
                      <td>
                        <span className="badge bg-primary">{item.requestNo}</span>
                      </td>
                      <td>{item.employeeId}</td>
                      <td>
                        <small className="text-muted">
                          {item.createdAt ? new Date(item.createdAt).toLocaleString('vi-VN') : 'N/A'}
                        </small>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          )}
          
          <div className="d-flex justify-content-end mt-3">
            <button type="button" className="btn btn-secondary" onClick={onClose}>
              Đóng
            </button>
          </div>
        </div>
      )}
    </Modal>
  );
};

export default WorkHistoryModal;

```


==================== File: .\src\components\layout\Layout.jsx ====================

import React, { useEffect } from 'react';
import { Outlet, useLocation } from 'react-router-dom';
import { useAuth } from '../../hooks/useAuth';
import ResponsiveNavigation from './ResponsiveNavigation';

const Layout = () => {
  const { user } = useAuth();
  const location = useLocation();

  useEffect(() => {
    // Initialize tooltips when location changes
    if (typeof window !== 'undefined' && window.bootstrap) {
      const tooltipTriggerList = [].slice.call(
        document.querySelectorAll('[data-bs-toggle="tooltip"]')
      );
      tooltipTriggerList.map(tooltipTriggerEl => {
        return new window.bootstrap.Tooltip(tooltipTriggerEl);
      });
    }
  }, [location]);

  if (!user) {
    return (
      <div className="d-flex justify-content-center align-items-center min-vh-100">
        <div className="spinner-border" role="status">
          <span className="visually-hidden">Loading...</span>
        </div>
      </div>
    );
  }

  return (
    <div className="d-flex">
      <ResponsiveNavigation />
      
      {/* Main content */}
      <div className="flex-grow-1">
        <main className="container-fluid py-4">
          <Outlet />
        </main>
      </div>

      {/* ✅ BƯỚC 2: Xóa bỏ Alert Container khỏi đây */}
      {/* Div đã được di chuyển ra App.jsx */}
    </div>
  );
};

export default Layout;

```


==================== File: .\src\components\layout\ResponsiveNavigation.jsx ====================

import React, { useState, useEffect } from 'react';
import { useLocation } from 'react-router-dom';
import { useAuth } from '../../hooks/useAuth';
import { useNotification } from '../../hooks/useNotification';

const ResponsiveNavigation = () => {
  const [isMobile, setIsMobile] = useState(false);
  const [sidebarOpen, setSidebarOpen] = useState(false);
  const [dropdownOpen, setDropdownOpen] = useState(false);
  
  const { user, logout } = useAuth();
  const { showNotification } = useNotification();
  const location = useLocation();

  // Detect mobile screen
  useEffect(() => {
    const checkScreenSize = () => {
      setIsMobile(window.innerWidth < 768);
    };
    
    checkScreenSize();
    window.addEventListener('resize', checkScreenSize);
    return () => window.removeEventListener('resize', checkScreenSize);
  }, []);

  // Menu items configuration
  const menuItems = [

    {
      path: '/employee-management',
      icon: 'fas fa-users-cog',
      label: 'Quản lý nhân viên',
      roles: ['admin', 'hr']
    },
    {
      path: '/hr-dashboard',
      icon: 'fas fa-chart-bar',
      label: 'HR Dashboard',
      roles: ['admin', 'hr']
    },
    {
      path: '/attendance-logs',
      icon: 'fas fa-clock',
      label: 'Bản ghi chấm công',
      roles: ['admin', 'hr', 'sales_manager', 'finance_manager', 'director']
    }
  ];

  const filteredMenuItems = menuItems.filter(item => 
    item.roles.includes(user?.role)
  );

  const isActiveRoute = (path) => {
    return location.pathname === path || location.pathname.startsWith(path + '/');
  };

  const handleLogout = async () => {
    try {
      await logout();
      showNotification('Đăng xuất thành công!', 'success');
    } catch (error) {
      console.error('Logout error:', error);
      showNotification('Lỗi khi đăng xuất', 'error');
    }
  };

  // Desktop Navigation (Always visible sidebar)
  const DesktopNavigation = () => (
    <div className="d-none d-md-flex">
      {/* Desktop Sidebar */}
      <div className="bg-light border-end" style={{ width: '280px', minHeight: '100vh' }}>
        {/* Brand Header */}
        <div className="p-3 border-bottom">
          <div className="d-flex align-items-center">
            <div className="rounded-circle bg-primary d-flex align-items-center justify-content-center me-2" 
                 style={{ width: '40px', height: '40px' }}>
              <i className="fas fa-user text-white"></i>
            </div>
            <div>
              <div className="fw-semibold">{user?.fullName}</div>
              <small className="text-muted">{getRoleDisplayName(user?.role)}</small>
            </div>
          </div>
        </div>

        {/* Navigation Menu */}
        <nav className="flex-grow-1 p-2">
          {filteredMenuItems.map((item, index) => (
            <a
              key={index}
              href={item.path}
              className={`nav-link d-flex align-items-center rounded mb-1 p-3 ${
                isActiveRoute(item.path) ? 'active bg-primary text-white' : 'text-dark'
              }`}
            >
              <i className={`${item.icon} me-2`}></i>
              <span>{item.label}</span>
            </a>
          ))}
        </nav>

        {/* User Actions */}
        <div className="border-top p-3">
          <button 
            className="btn btn-outline-danger w-100"
            onClick={handleLogout}
          >
            <i className="fas fa-sign-out-alt me-2"></i>
            Đăng xuất
          </button>
        </div>
      </div>
    </div>
  );

  // Mobile Navigation (Top navbar + collapsible menu)
  const MobileNavigation = () => (
    <div className="d-md-none">
      {/* Mobile Top Bar */}
      <nav className="navbar navbar-dark bg-dark">
        <div className="container-fluid">
          <a className="navbar-brand" href="/dashboard">
            <i className="fas fa-users me-2"></i>
            HR Management
          </a>
          
          <button
            className="navbar-toggler"
            type="button"
            onClick={() => setSidebarOpen(!sidebarOpen)}
          >
            <span className="navbar-toggler-icon"></span>
          </button>
        </div>
      </nav>

      {/* Mobile Sidebar Overlay */}
      {sidebarOpen && (
        <>
          {/* Backdrop */}
          <div 
            className="position-fixed top-0 start-0 w-100 h-100 bg-dark bg-opacity-50"
            style={{ zIndex: 1040 }}
            onClick={() => setSidebarOpen(false)}
          ></div>
          
          {/* Mobile Sidebar */}
          <div 
            className="position-fixed top-0 start-0 bg-light h-100"
            style={{ width: '280px', zIndex: 1050 }}
          >
            {/* Mobile Header */}
            <div className="p-3 border-bottom d-flex justify-content-between align-items-center">
              <div className="d-flex align-items-center">
                <div className="rounded-circle bg-primary d-flex align-items-center justify-content-center me-2" 
                     style={{ width: '32px', height: '32px' }}>
                  <i className="fas fa-user text-white"></i>
                </div>
                <div>
                  <div className="fw-semibold small">{user?.fullName}</div>
                  <small className="text-muted">{getRoleDisplayName(user?.role)}</small>
                </div>
              </div>
              <button 
                className="btn btn-sm btn-outline-secondary"
                onClick={() => setSidebarOpen(false)}
              >
                <i className="fas fa-times"></i>
              </button>
            </div>

            {/* Mobile Menu */}
            <nav className="p-2">
              {filteredMenuItems.map((item, index) => (
                <a
                  key={index}
                  href={item.path}
                  className={`nav-link d-flex align-items-center rounded mb-1 p-3 ${
                    isActiveRoute(item.path) ? 'active bg-primary text-white' : 'text-dark'
                  }`}
                  onClick={() => setSidebarOpen(false)}
                >
                  <i className={`${item.icon} me-2`}></i>
                  <span>{item.label}</span>
                </a>
              ))}
            </nav>

            {/* Mobile User Actions */}
            <div className="position-absolute bottom-0 w-100 border-top p-3">
              <button 
                className="btn btn-outline-danger w-100"
                onClick={handleLogout}
              >
                <i className="fas fa-sign-out-alt me-2"></i>
                Đăng xuất
              </button>
            </div>
          </div>
        </>
      )}
    </div>
  );

  const getRoleDisplayName = (role) => {
    const roleMap = {
      'admin': 'Administrator',
      'hr': 'HR Manager',
      'sales_manager': 'Sales Manager',
      'finance_manager': 'Finance Manager',
      'director': 'Director'
    };
    return roleMap[role] || 'Nhân viên';
  };

  if (!user) return null;

  return (
    <>
      <DesktopNavigation />
      <MobileNavigation />
    </>
  );
};

export default ResponsiveNavigation;

```


==================== File: .\src\components\masterdata\PositionManager.jsx ====================

import React, { useState, useEffect } from 'react';
import { ApiClient } from '../../services/api';
import { useNotification } from '../../hooks/useNotification';
import Loading from '../common/Loading';

const PositionManager = () => {
  const [positions, setPositions] = useState([]);
  const [loading, setLoading] = useState(true);
  const [formData, setFormData] = useState({
    positionName: '',
    description: ''
  });
  const [editingPosition, setEditingPosition] = useState(null);
  const { showNotification } = useNotification();

  useEffect(() => {
    loadPositions();
  }, []);

  const loadPositions = async () => {
    try {
      setLoading(true);
      const data = await ApiClient.get('/api/employees/positions');
      setPositions(data);
    } catch (error) {
      console.error('Error loading positions:', error);
      showNotification('Lỗi khi tải danh sách vị trí', 'error');
    } finally {
      setLoading(false);
    }
  };

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    
    if (!formData.positionName.trim()) {
      showNotification('Vui lòng nhập tên vị trí!', 'error');
      return;
    }

    try {
      if (editingPosition) {
        await ApiClient.put(`/api/employees/positions/${editingPosition.id}`, formData);
        showNotification('Cập nhật vị trí thành công', 'success');
      } else {
        await ApiClient.post('/api/employees/positions', formData);
        showNotification('Thêm vị trí thành công', 'success');
      }
      
      setFormData({ positionName: '', description: '' });
      setEditingPosition(null);
      await loadPositions();
    } catch (error) {
      console.error('Error saving position:', error);
      showNotification('Lỗi khi lưu vị trí', 'error');
    }
  };

  const handleEdit = (position) => {
    setEditingPosition(position);
    setFormData({
      positionName: position.positionName,
      description: position.description || ''
    });
  };

  const handleDelete = async (position) => {
    const confirmed = window.confirm(`Bạn có chắc chắn muốn xóa vị trí "${position.positionName}"?`);
    if (!confirmed) return;

    try {
      await ApiClient.delete(`/api/employees/positions/${position.id}`);
      showNotification('Xóa vị trí thành công', 'success');
      await loadPositions();
    } catch (error) {
      console.error('Error deleting position:', error);
      showNotification('Lỗi khi xóa vị trí', 'error');
    }
  };

  const handleCancel = () => {
    setEditingPosition(null);
    setFormData({ positionName: '', description: '' });
  };

  if (loading) {
    return <Loading text="Đang tải danh sách vị trí..." />;
  }

  return (
    <div className="position-manager">
      <div className="row">
        <div className="col-md-4">
          <div className="card">
            <div className="card-header">
              <h5>{editingPosition ? 'Chỉnh sửa' : 'Thêm'} vị trí</h5>
            </div>
            <div className="card-body">
              <form onSubmit={handleSubmit}>
                <div className="mb-3">
                  <label className="form-label">
                    Tên vị trí <span className="text-danger">*</span>
                  </label>
                  <input
                    type="text"
                    className="form-control"
                    name="positionName"
                    value={formData.positionName}
                    onChange={handleInputChange}
                    required
                  />
                </div>
                
                <div className="mb-3">
                  <label className="form-label">Mô tả</label>
                  <textarea
                    className="form-control"
                    name="description"
                    value={formData.description}
                    onChange={handleInputChange}
                    rows="3"
                    placeholder="Mô tả về vị trí công việc..."
                  />
                </div>
                
                <div className="d-grid gap-2">
                  <button type="submit" className="btn btn-primary">
                    {editingPosition ? 'Cập nhật' : 'Thêm'} vị trí
                  </button>
                  {editingPosition && (
                    <button 
                      type="button" 
                      className="btn btn-secondary"
                      onClick={handleCancel}
                    >
                      Hủy
                    </button>
                  )}
                </div>
              </form>
            </div>
          </div>
        </div>
        
        <div className="col-md-8">
          <div className="card">
            <div className="card-header">
              <h5>Danh sách vị trí</h5>
            </div>
            <div className="card-body">
              {positions.length === 0 ? (
                <div className="text-center py-4">
                  <i className="fas fa-briefcase fa-3x text-muted mb-3"></i>
                  <p className="text-muted">Chưa có vị trí nào</p>
                </div>
              ) : (
                <div className="table-responsive">
                  <table className="table table-striped table-hover">
                    <thead className="table-dark">
                      <tr>
                        <th>Tên vị trí</th>
                        <th>Mô tả</th>
                        <th>Trạng thái</th>
                        <th>Thao tác</th>
                      </tr>
                    </thead>
                    <tbody>
                      {positions.map(position => (
                        <tr key={position.id}>
                          <td>
                            <strong>{position.positionName}</strong>
                          </td>
                          <td>
                            <span className="text-muted">
                              {position.description || 'Không có mô tả'}
                            </span>
                          </td>
                          <td>
                            <span className={`badge ${
                              position.status === 'active' 
                                ? 'bg-success' 
                                : 'bg-secondary'
                            }`}>
                              {position.status === 'active' 
                                ? 'Hoạt động' 
                                : 'Ngưng hoạt động'
                              }
                            </span>
                          </td>
                          <td>
                            <div className="btn-group" role="group">
                              <button
                                className="btn btn-sm btn-primary"
                                onClick={() => handleEdit(position)}
                                title="Chỉnh sửa"
                              >
                                <i className="fas fa-edit"></i>
                              </button>
                              <button
                                className="btn btn-sm btn-danger"
                                onClick={() => handleDelete(position)}
                                title="Xóa"
                              >
                                <i className="fas fa-trash"></i>
                              </button>
                            </div>
                          </td>
                        </tr>
                      ))}
                    </tbody>
                  </table>
                </div>
              )}
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default PositionManager;

```


==================== File: .\src\components\masterdata\StoreManager.jsx ====================

import React, { useState, useEffect } from 'react';
import { ApiClient } from '../../services/api';
import { useNotification } from '../../hooks/useNotification';
import Loading from '../common/Loading';

const StoreManager = () => {
  const [stores, setStores] = useState([]);
  const [loading, setLoading] = useState(true);
  const [formData, setFormData] = useState({
    storeName: '',
    address: ''
  });
  const [editingStore, setEditingStore] = useState(null);
  const { showNotification } = useNotification();

  useEffect(() => {
    loadStores();
  }, []);

  const loadStores = async () => {
    try {
      setLoading(true);
      const data = await ApiClient.get('/api/employees/stores');
      setStores(data);
    } catch (error) {
      console.error('Error loading stores:', error);
      showNotification('Lỗi khi tải danh sách cửa hàng', 'error');
    } finally {
      setLoading(false);
    }
  };

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    
    if (!formData.storeName.trim() || !formData.address.trim()) {
      showNotification('Vui lòng điền đầy đủ thông tin!', 'error');
      return;
    }

    try {
      if (editingStore) {
        await ApiClient.put(`/api/employees/stores/${editingStore.id}`, formData);
        showNotification('Cập nhật cửa hàng thành công', 'success');
      } else {
        await ApiClient.post('/api/employees/stores', formData);
        showNotification('Thêm cửa hàng thành công', 'success');
      }
      
      setFormData({ storeName: '', address: '' });
      setEditingStore(null);
      await loadStores();
    } catch (error) {
      console.error('Error saving store:', error);
      showNotification('Lỗi khi lưu cửa hàng', 'error');
    }
  };

  const handleEdit = (store) => {
    setEditingStore(store);
    setFormData({
      storeName: store.storeName,
      address: store.address
    });
  };

  const handleDelete = async (store) => {
    const confirmed = window.confirm(`Bạn có chắc chắn muốn xóa cửa hàng "${store.storeName}"?`);
    if (!confirmed) return;

    try {
      await ApiClient.delete(`/api/employees/stores/${store.id}`);
      showNotification('Xóa cửa hàng thành công', 'success');
      await loadStores();
    } catch (error) {
      console.error('Error deleting store:', error);
      showNotification('Lỗi khi xóa cửa hàng', 'error');
    }
  };

  const handleCancel = () => {
    setEditingStore(null);
    setFormData({ storeName: '', address: '' });
  };

  if (loading) {
    return <Loading text="Đang tải danh sách cửa hàng..." />;
  }

  return (
    <div className="store-manager">
      <div className="row">
        <div className="col-md-4">
          <div className="card">
            <div className="card-header">
              <h5>{editingStore ? 'Chỉnh sửa' : 'Thêm'} cửa hàng</h5>
            </div>
            <div className="card-body">
              <form onSubmit={handleSubmit}>
                <div className="mb-3">
                  <label className="form-label">
                    Tên cửa hàng <span className="text-danger">*</span>
                  </label>
                  <input
                    type="text"
                    className="form-control"
                    name="storeName"
                    value={formData.storeName}
                    onChange={handleInputChange}
                    required
                  />
                </div>
                
                <div className="mb-3">
                  <label className="form-label">
                    Địa chỉ <span className="text-danger">*</span>
                  </label>
                  <textarea
                    className="form-control"
                    name="address"
                    value={formData.address}
                    onChange={handleInputChange}
                    rows="3"
                    required
                  />
                </div>
                
                <div className="d-grid gap-2">
                  <button type="submit" className="btn btn-primary">
                    {editingStore ? 'Cập nhật' : 'Thêm'} cửa hàng
                  </button>
                  {editingStore && (
                    <button 
                      type="button" 
                      className="btn btn-secondary"
                      onClick={handleCancel}
                    >
                      Hủy
                    </button>
                  )}
                </div>
              </form>
            </div>
          </div>
        </div>
        
        <div className="col-md-8">
          <div className="card">
            <div className="card-header">
              <h5>Danh sách cửa hàng</h5>
            </div>
            <div className="card-body">
              {stores.length === 0 ? (
                <div className="text-center py-4">
                  <i className="fas fa-store fa-3x text-muted mb-3"></i>
                  <p className="text-muted">Chưa có cửa hàng nào</p>
                </div>
              ) : (
                <div className="table-responsive">
                  <table className="table table-striped table-hover">
                    <thead className="table-dark">
                      <tr>
                        <th>Tên cửa hàng</th>
                        <th>Địa chỉ</th>
                        <th>Trạng thái</th>
                        <th>Thao tác</th>
                      </tr>
                    </thead>
                    <tbody>
                      {stores.map(store => (
                        <tr key={store.id}>
                          <td>{store.storeName}</td>
                          <td>{store.address}</td>
                          <td>
                            <span className={`badge ${
                              store.status === 'active' 
                                ? 'bg-success' 
                                : 'bg-secondary'
                            }`}>
                              {store.status === 'active' 
                                ? 'Hoạt động' 
                                : 'Ngưng hoạt động'
                              }
                            </span>
                          </td>
                          <td>
                            <div className="btn-group" role="group">
                              <button
                                className="btn btn-sm btn-primary"
                                onClick={() => handleEdit(store)}
                                title="Chỉnh sửa"
                              >
                                <i className="fas fa-edit"></i>
                              </button>
                              <button
                                className="btn btn-sm btn-danger"
                                onClick={() => handleDelete(store)}
                                title="Xóa"
                              >
                                <i className="fas fa-trash"></i>
                              </button>
                            </div>
                          </td>
                        </tr>
                      ))}
                    </tbody>
                  </table>
                </div>
              )}
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default StoreManager;

```


==================== File: .\src\contexts\AppContext.jsx ====================


```


==================== File: .\src\contexts\AuthContext.jsx ====================

import React, { createContext, useContext, useState, useEffect } from 'react';
import { ApiClient } from '../services/api.js';

const AuthContext = createContext();

export const AuthProvider = ({ children }) => {
  const [user, setUser] = useState(null);
  const [loading, setLoading] = useState(true);
  const [initialized, setInitialized] = useState(false);

  useEffect(() => {
    initializeAuth();
  }, []);

  const initializeAuth = async () => {
    try {
      setLoading(true);
      // ✅ SỬA: Thay thế checkAuth() bằng việc gọi trực tiếp getProfile từ ApiClient
      const response = await ApiClient.get('/api/auth/profile');
      if (response.success && response.data.user) {
        setUser(response.data.user);
      } else {
        setUser(null);
      }
    } catch (error) {
      console.warn('Auth initialization: Not logged in.');
      setUser(null);
    } finally {
      setInitialized(true);
      setLoading(false);
    }
  };

  // Hàm checkAuth cũ có thể xóa hoặc giữ lại nếu cần
  const checkAuth = async () => {
    try {
      const response = await ApiClient.get('/api/auth/profile');
      return response.success ? response.data.user : null;
    } catch (error) {
      return null;
    }
  };

  const login = async (credentials) => {
    try {
      setLoading(true);
      const response = await ApiClient.post('/api/auth/login', credentials);
      
      // ✅ SỬA LOGIC KIỂM TRA TẠI ĐÂY
      // Kiểm tra `response.data.user` thay vì `response.user`
      if (response.success && response.data && response.data.user) {
        setUser(response.data.user);
        return response.data; // Trả về `response.data` để LoginPage có thể sử dụng
      } else {
        // Ném lỗi với thông điệp từ server nếu có
        throw new Error(response.message || 'Login failed: Invalid response structure');
      }
    } catch (error) {
      console.error('Login error:', error);
      // Đảm bảo ném lại lỗi để component gọi có thể bắt được
      throw error;
    } finally {
      setLoading(false);
    }
  };

  const logout = async () => {
    try {
      setLoading(true);
      await ApiClient.post('/api/auth/logout');
      setUser(null);
      // Chuyển hướng về trang login một cách an toàn
      window.location.assign('/login');
    } catch (error) {
      console.error('Logout error:', error);
      // Vẫn xóa user và chuyển hướng dù API có lỗi
      setUser(null);
      window.location.assign('/login');
    } finally {
      setLoading(false);
    }
  };

  const updateUserInfo = (userData) => {
    setUser(prevUser => ({
      ...prevUser,
      ...userData
    }));
  };

  const hasRole = (requiredRoles) => {
    if (!user) return false;
    if (typeof requiredRoles === 'string') {
      return user.role === requiredRoles;
    }
    if (Array.isArray(requiredRoles)) {
      return requiredRoles.includes(user.role);
    }
    return false;
  };

  const value = {
    user,
    loading,
    initialized,
    login,
    logout,
    checkAuth,
    updateUserInfo,
    hasRole,
  };

  return (
    <AuthContext.Provider value={value}>
      {children}
    </AuthContext.Provider>
  );
};

export const useAuth = () => {
  const context = useContext(AuthContext);
  if (!context) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
};

export default AuthContext;

```


==================== File: .\src\contexts\NotificationContext.jsx ====================

import React, { createContext, useContext, useCallback } from 'react';

const NotificationContext = createContext();

export const NotificationProvider = ({ children }) => {
  const showNotification = useCallback((message, type = 'info', duration = 5000) => {
    const alertContainer = document.getElementById('alert-container');
    if (!alertContainer) {
      console.warn('Alert container not found');
      return;
    }
    
    const alertId = `alert-${Date.now()}`;
    const alertDiv = document.createElement('div');
    alertDiv.id = alertId;
    alertDiv.className = `alert alert-${type === 'error' ? 'danger' : type} alert-dismissible fade show`;
    alertDiv.style.marginBottom = '10px';
    
    alertDiv.innerHTML = `
      <div class="d-flex align-items-center">
        <i class="fas fa-${getIconByType(type)} me-2"></i>
        <div class="flex-grow-1">${message}</div>
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
      </div>
    `;
    
    alertContainer.appendChild(alertDiv);
    
    // Auto remove after duration
    setTimeout(() => {
      const element = document.getElementById(alertId);
      if (element && element.parentNode) {
        element.parentNode.removeChild(element);
      }
    }, duration);
  }, []);

  const getIconByType = (type) => {
    switch (type) {
      case 'success': return 'check-circle';
      case 'error': 
      case 'danger': return 'exclamation-triangle';
      case 'warning': return 'exclamation-circle';
      case 'info': return 'info-circle';
      default: return 'info-circle';
    }
  };

  const clearNotifications = useCallback(() => {
    const alertContainer = document.getElementById('alert-container');
    if (alertContainer) {
      alertContainer.innerHTML = '';
    }
  }, []);

  const value = {
    showNotification,
    clearNotifications
  };

  return (
    <NotificationContext.Provider value={value}>
      {children}
    </NotificationContext.Provider>
  );
};

export const useNotification = () => {
  const context = useContext(NotificationContext);
  if (!context) {
    throw new Error('useNotification must be used within a NotificationProvider');
  }
  return context;
};

export { NotificationContext };
export default NotificationContext;


```


==================== File: .\src\hooks\useApi.js ====================

import { useState, useEffect } from 'react';
import { ApiClient } from '../services/api.js';

export const useApi = (url, options = {}) => {
  const [data, setData] = useState(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);

  useEffect(() => {
    if (!url) return;
    
    const fetchData = async () => {
      try {
        setLoading(true);
        setError(null);
        
        const response = await ApiClient.get(url, options);
        
        if (response.success && response.data) {
          setData(response.data);
        } else {
          setData(response.data || []);
        }
      } catch (err) {
        console.error('useApi error:', err);
        setError(err);
        setData([]);
      } finally {
        setLoading(false);
      }
    };

    fetchData();
  }, [url]);

  return { data, loading, error };
};

```


==================== File: .\src\hooks\useAttendance.js ====================

export const useAttendanceStats = () => {
    const [stats, setStats] = useState({
        totalAttendanceLogs: 0,
        todayLogs: 0,
        thisWeekLogs: 0
    });
    const [loading, setLoading] = useState(false);
    
    const fetchStats = async () => {
        setLoading(true);
        try {
            const response = await api.get('/attendance/stats');
            if (response.data.success) {
                setStats(response.data.data);
            }
        } catch (error) {
            console.error('Error fetching attendance stats:', error);
        } finally {
            setLoading(false);
        }
    };
    
    return { stats, loading, fetchStats };
};

```


==================== File: .\src\hooks\useAuth.js ====================

import { useContext } from 'react';
import AuthContext from '../contexts/AuthContext';

export const useAuth = () => {
  const context = useContext(AuthContext);
  
  if (!context) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  
  return context;
};

export default useAuth;

```


==================== File: .\src\hooks\useEmployees.js ====================

// src/hooks/useEmployees.js - ĐÃ REFACTOR

import { useState, useEffect, useCallback } from 'react';
import { employeeService } from '../services/employee.js';
import { useNotification } from './useNotification.js';

/**
 * Hook tùy chỉnh để quản lý dữ liệu và logic của Nhân viên.
 * @returns {object} Trạng thái và các hàm xử lý.
 */
export const useEmployees = () => {
  const [employees, setEmployees] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const { showNotification } = useNotification();

  /**
   * Hàm để tải danh sách nhân viên từ server.
   * Sử dụng useCallback để tránh việc tạo lại hàm một cách không cần thiết.
   */
  const fetchEmployees = useCallback(async () => {
    console.log('HOOK: Bắt đầu tải danh sách nhân viên...');
    setLoading(true);
    setError(null);
    try {
      const response = await employeeService.getAll();
      if (response.success) {
        setEmployees(response.data || []);
        console.log('HOOK: Tải danh sách nhân viên thành công.', response.data);
      } else {
        throw new Error(response.message || 'Không thể tải danh sách nhân viên.');
      }
    } catch (err) {
      console.error('HOOK: Lỗi khi tải danh sách nhân viên:', err);
      setError(err.message);
      showNotification(err.message, 'error');
    } finally {
      setLoading(false);
    }
  }, [showNotification]); // Phụ thuộc vào showNotification

  // Tự động gọi fetchEmployees khi component được mount lần đầu
  useEffect(() => {
    fetchEmployees();
  }, [fetchEmployees]); // Phụ thuộc vào hàm fetchEmployees đã được useCallback

  /**
   * Hàm để thêm một nhân viên mới.
   */
  const addEmployee = async (employeeData) => {
    setLoading(true);
    try {
      const response = await employeeService.create(employeeData);
      if (response.success) {
        showNotification('Thêm nhân viên mới thành công!', 'success');
        await fetchEmployees(); // Tải lại danh sách để cập nhật
        return true; // Báo hiệu thành công để đóng modal
      } else {
        throw new Error(response.message || 'Thêm nhân viên thất bại.');
      }
    } catch (err) {
      console.error('HOOK: Lỗi khi thêm nhân viên:', err);
      showNotification(err.message, 'error');
      setLoading(false);
      return false; // Báo hiệu thất bại
    }
  };

  /**
   * Hàm để cập nhật thông tin nhân viên.
   */
  const updateEmployee = async (id, employeeData) => {
    setLoading(true);
    try {
      const response = await employeeService.update(id, employeeData);
      if (response.success) {
        showNotification('Cập nhật thông tin nhân viên thành công!', 'success');
        await fetchEmployees(); // Tải lại danh sách
        return true;
      } else {
        throw new Error(response.message || 'Cập nhật thất bại.');
      }
    } catch (err) {
      console.error('HOOK: Lỗi khi cập nhật nhân viên:', err);
      showNotification(err.message, 'error');
      setLoading(false);
      return false;
    }
  };

  /**
   * Hàm để xóa nhân viên.
   */
  const deleteEmployee = async (id) => {
    setLoading(true);
    try {
      const response = await employeeService.remove(id);
      if (response.success) {
        showNotification('Xóa nhân viên thành công!', 'success');
        await fetchEmployees(); // Tải lại danh sách
        return true;
      } else {
        throw new Error(response.message || 'Xóa nhân viên thất bại.');
      }
    } catch (err) {
      console.error('HOOK: Lỗi khi xóa nhân viên:', err);
      showNotification(err.message, 'error');
      setLoading(false);
      return false;
    }
  };

  // Trả về state và các hàm để component có thể sử dụng
  return {
    employees,
    loading,
    error,
    addEmployee,
    updateEmployee,
    deleteEmployee,
    refreshEmployees: fetchEmployees, // Cung cấp hàm để refresh thủ công nếu cần
  };
};

```


==================== File: .\src\hooks\useNotification.js ====================

import { useContext } from 'react';
import { NotificationContext } from '../contexts/NotificationContext';

export const useNotification = () => {
  const context = useContext(NotificationContext);
  if (!context) {
    throw new Error('useNotification must be used within a NotificationProvider');
  }
  return context;
};

export default useNotification;

```


==================== File: .\src\pages\AttendanceLogsPage.jsx ====================

import React, { useState, useEffect } from 'react';
import { ApiClient } from '../services/api';
import { useNotification } from '../hooks/useNotification';
import Loading from '../components/common/Loading';
import AttendanceFilters from '../components/attendance/AttendanceFilters';
import AttendanceLogs from '../components/attendance/AttendanceLogs';
import EmployeeHours from '../components/attendance/EmployeeHours';

const AttendanceLogsPage = () => {
  const [employees, setEmployees] = useState([]);
  const [logs, setLogs] = useState([]);
  const [employeeHours, setEmployeeHours] = useState({});
  const [loading, setLoading] = useState(true);
  const [filters, setFilters] = useState({});
  const { showNotification } = useNotification();

  useEffect(() => {
    loadInitialData();
  }, []);

  const loadInitialData = async () => {
    try {
      setLoading(true);
      await Promise.all([
        loadEmployees(),
        loadAttendanceLogs(),
        loadEmployeeHours()
      ]);
    } catch (error) {
      console.error('Error loading initial data:', error);
      showNotification('Lỗi khi tải dữ liệu chấm công', 'error');
    } finally {
      setLoading(false);
    }
  };

  const loadEmployees = async () => {
    try {
      const data = await ApiClient.get('/api/employees');
      setEmployees(data);
    } catch (error) {
      console.error('Error loading employees:', error);
      showNotification('Lỗi khi tải danh sách nhân viên', 'error');
    }
  };

  const loadAttendanceLogs = async (filterParams = {}) => {
    try {
      const data = await ApiClient.get('/api/attendance/logs', filterParams);
      setLogs(data);
    } catch (error) {
      console.error('Error loading attendance logs:', error);
      showNotification('Lỗi khi tải bản ghi chấm công', 'error');
    }
  };

  const loadEmployeeHours = async () => {
    try {
      const data = await ApiClient.get('/api/attendance/employee-hours');
      setEmployeeHours(data);
    } catch (error) {
      console.error('Error loading employee hours:', error);
      showNotification('Lỗi khi tải tổng giờ công', 'error');
    }
  };

  const handleFilterChange = async (newFilters) => {
    setFilters(newFilters);
    await loadAttendanceLogs(newFilters);
  };

  const handleClearFilters = async () => {
    setFilters({});
    await loadAttendanceLogs();
  };

  const handleRefresh = async () => {
    await loadInitialData();
    showNotification('Đã cập nhật dữ liệu chấm công', 'success');
  };

  if (loading) {
    return <Loading fullScreen text="Đang tải dữ liệu chấm công..." />;
  }

  return (
    <div className="attendance-logs-page">
      {/* Header */}
      <div className="d-flex justify-content-between align-items-center mb-4">
        <div>
          <h1>Bản ghi chấm công</h1>
          <p className="text-muted mb-0">Xem và quản lý bản ghi chấm công của nhân viên</p>
        </div>
        <button 
          className="btn btn-outline-primary"
          onClick={handleRefresh}
        >
          <i className="fas fa-sync-alt me-2"></i>
          Làm mới
        </button>
      </div>

      {/* Filters */}
      <div className="card mb-4">
        <div className="card-header">
          <h5 className="mb-0">Bộ lọc</h5>
        </div>
        <div className="card-body">
          <AttendanceFilters
            employees={employees}
            filters={filters}
            onFilterChange={handleFilterChange}
            onClearFilters={handleClearFilters}
          />
        </div>
      </div>

      {/* Statistics */}
      <div className="row mb-4">
        <div className="col-md-4">
          <div className="card text-center bg-primary text-white">
            <div className="card-body">
              <h3 id="logCount">{logs.length}</h3>
              <p className="mb-0">Tổng bản ghi</p>
            </div>
          </div>
        </div>
        <div className="col-md-4">
          <div className="card text-center bg-success text-white">
            <div className="card-body">
              <h3>{employees.filter(emp => emp.status === 'active').length}</h3>
              <p className="mb-0">Nhân viên hoạt động</p>
            </div>
          </div>
        </div>
        <div className="col-md-4">
          <div className="card text-center bg-info text-white">
            <div className="card-body">
              <h3>{Object.keys(employeeHours).length}</h3>
              <p className="mb-0">Nhân viên có giờ công</p>
            </div>
          </div>
        </div>
      </div>

      {/* Content Tabs */}
      <ul className="nav nav-tabs mb-4">
        <li className="nav-item">
          <a className="nav-link active" data-bs-toggle="tab" href="#logs-tab">
            <i className="fas fa-list me-2"></i>
            Bản ghi chấm công
          </a>
        </li>
        <li className="nav-item">
          <a className="nav-link" data-bs-toggle="tab" href="#hours-tab">
            <i className="fas fa-clock me-2"></i>
            Tổng giờ công
          </a>
        </li>
      </ul>

      <div className="tab-content">
        {/* Attendance Logs Tab */}
        <div className="tab-pane fade show active" id="logs-tab">
          <div className="card">
            <div className="card-header">
              <h5 className="mb-0">Chi tiết bản ghi chấm công</h5>
            </div>
            <div className="card-body">
              <AttendanceLogs logs={logs} />
            </div>
          </div>
        </div>

        {/* Employee Hours Tab */}
        <div className="tab-pane fade" id="hours-tab">
          <div className="card">
            <div className="card-header">
              <h5 className="mb-0">Tổng giờ công theo nhân viên</h5>
            </div>
            <div className="card-body">
              <EmployeeHours 
                employees={employees}
                employeeHours={employeeHours}
              />
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default AttendanceLogsPage;

```


==================== File: .\src\pages\EmployeeManagementPage.jsx ====================

// src/pages/EmployeeManagementPage.jsx

import React, { useState, useMemo } from 'react';
import { useEmployees } from '../hooks/useEmployees';

// Import các components con
import EmployeeList from '../components/employee/EmployeeList.jsx';
import EmployeeEditModal from '../components/employee/EmployeeEditModal.jsx';
import EmployeeAddForm from '../components/employee/EmployeeAddForm.jsx'; // ✅ Import form mới
import Loading from '../components/common/Loading.jsx';
import { Alert } from '../components/common/Alert.jsx';

const EmployeeManagementPage = () => {
  const {
    employees,
    loading,
    error,
    addEmployee,
    updateEmployee,
    deleteEmployee,
    refreshEmployees, // Lấy hàm refresh từ hook
  } = useEmployees();

  // State cho modal chỉnh sửa và ô tìm kiếm
  const [isEditModalOpen, setIsEditModalOpen] = useState(false);
  const [selectedEmployee, setSelectedEmployee] = useState(null);
  const [searchTerm, setSearchTerm] = useState('');

  // ✅ Logic tìm kiếm được gom về một nơi duy nhất
  const filteredEmployees = useMemo(() => {
    if (!searchTerm) return employees;
    return employees.filter(
      (employee) =>
        employee.fullName.toLowerCase().includes(searchTerm.toLowerCase()) ||
        employee.employeeId.toLowerCase().includes(searchTerm.toLowerCase())
    );
  }, [employees, searchTerm]);

  // Các hàm xử lý cho Sửa và Xóa (giữ nguyên)
  const handleOpenEditModal = (employee) => {
    setSelectedEmployee(employee);
    setIsEditModalOpen(true);
  };

  const handleUpdateEmployee = async (employeeData) => {
    if (!selectedEmployee) return;
    const success = await updateEmployee(selectedEmployee.id, employeeData);
    if (success) {
      setIsEditModalOpen(false);
      setSelectedEmployee(null);
    }
  };

  const handleDeleteEmployee = async (id) => {
    await deleteEmployee(id);
  };

  // ✅ Hàm xử lý cho Thêm mới, gọi thẳng hàm từ hook
  const handleAddEmployee = async (formData) => {
    // Hook 'addEmployee' đã bao gồm loading, notification và refresh lại list
    await addEmployee(formData);
  };

  return (
    <div className="container-fluid mt-4">
      <div className="page-header d-flex justify-content-between align-items-center mb-3">
        <h2>Quản lý Nhân viên</h2>
        {/* Nút refresh để tải lại dữ liệu khi cần */}
        <button className="btn btn-outline-secondary" onClick={refreshEmployees} disabled={loading}>
          <i className="bi bi-arrow-clockwise me-2"></i>Làm mới
        </button>
      </div>
      
      {/* ✅ Bố cục 2 cột */}
      <div className="row">
        {/* Cột trái: Form thêm nhân viên */}
        <div className="col-lg-5">
          <EmployeeAddForm onSave={handleAddEmployee} isLoading={loading} />
        </div>

        {/* Cột phải: Danh sách và tìm kiếm */}
        <div className="col-lg-7">
          <div className="card">
            <div className="card-header">
              <h5 className="card-title mb-0">Danh sách nhân viên</h5>
            </div>
            <div className="card-body">
              {/* ✅ Chỉ có một ô tìm kiếm ở đây */}
              <div className="mb-3">
                <input
                  type="text"
                  className="form-control"
                  placeholder="Tìm kiếm theo tên hoặc mã nhân viên..."
                  value={searchTerm}
                  onChange={(e) => setSearchTerm(e.target.value)}
                />
              </div>

              {/* Hiển thị trạng thái Loading và Error */}
              {loading && !error && <Loading />}
              {error && <Alert message={`Lỗi: ${error}`} type="danger" onRetry={refreshEmployees} />}
              
              {!loading && !error && (
                <EmployeeList
                  employees={filteredEmployees}
                  onEdit={handleOpenEditModal}
                  onDelete={handleDeleteEmployee}
                />
              )}
            </div>
          </div>
        </div>
      </div>

      {/* Modal chỉnh sửa vẫn được giữ lại */}
      {isEditModalOpen && selectedEmployee && (
        <EmployeeEditModal
          isOpen={isEditModalOpen}
          onClose={() => setIsEditModalOpen(false)}
          onSave={handleUpdateEmployee}
          employee={selectedEmployee}
        />
      )}
    </div>
  );
};

export default EmployeeManagementPage;

```


==================== File: .\src\pages\HRDashboardPage.jsx ====================

import React, { useState, useEffect } from 'react';
import { useAuth } from '../hooks/useAuth';
import { ApiClient } from '../services/api';
import { useNotification } from '../hooks/useNotification';
import Loading from '../components/common/Loading';

const HRDashboardPage = () => {
  const [stats, setStats] = useState({
    totalEmployees: 0,
    activeEmployees: 0,
    inactiveEmployees: 0,
    totalAttendanceLogs: 0,
    todayLogs: 0,
  });
  const [loading, setLoading] = useState(true);
  const { user } = useAuth();
  const { showNotification } = useNotification();

  useEffect(() => {
    checkPermissions();
    loadStats();
    // eslint-disable-next-line
  }, []);

  const checkPermissions = () => {
    if (!user || (user.role !== 'hr' && user.role !== 'admin')) {
      showNotification('Bạn không có quyền truy cập trang này', 'error');
      window.location.href = '/dashboard';
    }
  };

  // **Lưu ý QUAN TRỌNG: Phải dùng đúng endpoint `/api/dashboard/stats`**
  const loadStats = async () => {
    setLoading(true);
    try {
      console.log('🔍 HRDashboard: Loading stats...');
      // ĐỔI endpoint
      const response = await ApiClient.get('/api/dashboard/stats');
      console.log('📨 HRDashboard: Raw response:', response);

      if (response.success && response.data) {
        // Gộp stats employee và attendance
        const employee = response.data.employee || {};
        const attendance = response.data.attendance || {};

        const statsObj = {
          totalEmployees: employee.totalEmployees || 0,
          activeEmployees: employee.activeEmployees || 0,
          inactiveEmployees:
            (employee.totalEmployees || 0) - (employee.activeEmployees || 0),
          totalAttendanceLogs: attendance.totalAttendanceLogs || 0,
          todayLogs: attendance.todayLogs || 0,
        };

        console.log('✅ HRDashboard: Setting stats to:', statsObj);
        setStats(statsObj);
      } else {
        showNotification(
          response.message || 'Không thể tải dữ liệu thống kê',
          'warning'
        );
      }
    } catch (error) {
      console.error('❌ HRDashboard: Error loading stats:', error);
      showNotification('Lỗi khi tải thống kê HR', 'error');
    } finally {
      setLoading(false);
    }
  };

  const handleRefresh = async () => {
    await loadStats();
    showNotification('Đã cập nhật dữ liệu HR dashboard', 'success');
  };

  // DEBUG info
  console.log('🎯 HRDashboard render - Current stats:', stats); // eslint-disable-line
  console.log('🎯 HRDashboard render - Loading:', loading); // eslint-disable-line

  if (loading) {
    return <Loading fullScreen text="Đang tải HR dashboard..." />;
  }

  return (
    <div className="hr-dashboard-page">
      {/* DEBUG INFO - Có thể xoá sau */}
      <div
        style={{
          background: '#f8f9fa',
          border: '1px solid #dee2e6',
          borderRadius: '0.25rem',
          padding: '1rem',
          marginBottom: '1rem',
        }}
      >
        <h6 className="text-muted mb-2">🐛 DEBUG INFO (HR Dashboard):</h6>
        <small className="d-block">Raw stats: {JSON.stringify(stats)}</small>
        <small className="d-block">Total Employees: {stats.totalEmployees}</small>
        <small className="d-block">Active Employees: {stats.activeEmployees}</small>
        <small className="d-block">Inactive Employees: {stats.inactiveEmployees}</small>
        <small className="d-block">Total Attendance Logs: {stats.totalAttendanceLogs}</small>
        <small className="d-block">Today Logs: {stats.todayLogs}</small>
      </div>

      {/* Header */}
      <div className="d-flex justify-content-between align-items-center mb-4">
        <div>
          <h1>HR Dashboard</h1>
          <p className="text-muted mb-0">Dashboard dành cho bộ phận nhân sự</p>
        </div>
        <button
          className="btn btn-outline-primary"
          onClick={handleRefresh}
          disabled={loading}
        >
          <i className={`fas fa-sync-alt me-2 ${loading ? 'fa-spin' : ''}`}></i>
          Làm mới
        </button>
      </div>

      {/* Stats Cards */}
      <div className="row mb-4">
        <div className="col-md-3 mb-3">
          <div className="card text-center bg-primary text-white h-100">
            <div className="card-body">
              <i className="fas fa-users fa-3x mb-3"></i>
              <h2>{stats.totalEmployees}</h2>
              <p className="mb-0">Tổng nhân viên</p>
            </div>
          </div>
        </div>

        <div className="col-md-3 mb-3">
          <div className="card text-center bg-success text-white h-100">
            <div className="card-body">
              <i className="fas fa-user-check fa-3x mb-3"></i>
              <h2>{stats.activeEmployees}</h2>
              <p className="mb-0">Nhân viên hoạt động</p>
            </div>
          </div>
        </div>

        <div className="col-md-3 mb-3">
          <div className="card text-center bg-warning text-white h-100">
            <div className="card-body">
              <i className="fas fa-user-times fa-3x mb-3"></i>
              <h2>{stats.inactiveEmployees}</h2>
              <p className="mb-0">Không hoạt động</p>
            </div>
          </div>
        </div>

        <div className="col-md-3 mb-3">
          <div className="card text-center bg-info text-white h-100">
            <div className="card-body">
              <i className="fas fa-clock fa-3x mb-3"></i>
              <h2>{stats.totalAttendanceLogs}</h2>
              <p className="mb-0">Tổng chấm công</p>
            </div>
          </div>
        </div>
      </div>

      {/* Management Actions */}
      <div className="row mb-4">
        <div className="col-md-6">
          <div className="card">
            <div className="card-header">
              <h5 className="mb-0">Quản lý nhân sự</h5>
            </div>
            <div className="card-body">
              <div className="d-grid gap-2">
                <a href="/employee-management" className="btn btn-primary">
                  <i className="fas fa-users-cog me-2"></i>
                  Quản lý nhân viên
                </a>
                <a href="/attendance-logs" className="btn btn-info">
                  <i className="fas fa-clock me-2"></i>
                  Xem chấm công
                </a>
                <button className="btn btn-success" onClick={handleRefresh}>
                  <i className="fas fa-sync-alt me-2"></i>
                  Cập nhật dữ liệu
                </button>
              </div>
            </div>
          </div>
        </div>

        <div className="col-md-6">
          <div className="card">
            <div className="card-header">
              <h5 className="mb-0">Công cụ HR</h5>
            </div>
            <div className="card-body">
              <div className="d-grid gap-2">
                <button className="btn btn-outline-primary" disabled>
                  <i className="fas fa-user-plus me-2"></i>
                  Tuyển dụng (Sắp có)
                </button>
                <button className="btn btn-outline-secondary" disabled>
                  <i className="fas fa-file-export me-2"></i>
                  Xuất báo cáo (Sắp có)
                </button>
                <a href="/dashboard" className="btn btn-outline-info">
                  <i className="fas fa-tachometer-alt me-2"></i>
                  Dashboard chính
                </a>
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* HR Reports Section */}
      <div className="row">
        <div className="col-12">
          <div className="card">
            <div className="card-header">
              <h5 className="mb-0">Báo cáo HR</h5>
            </div>
            <div className="card-body">
              <div className="row">
                <div className="col-md-4 text-center">
                  <div className="p-3">
                    <i className="fas fa-chart-bar fa-2x text-primary mb-2"></i>
                    <h6>Báo cáo nhân sự</h6>
                    <button className="btn btn-sm btn-primary" disabled>
                      Xem báo cáo (Sắp có)
                    </button>
                  </div>
                </div>
                <div className="col-md-4 text-center">
                  <div className="p-3">
                    <i className="fas fa-chart-line fa-2x text-success mb-2"></i>
                    <h6>Báo cáo chấm công</h6>
                    <button className="btn btn-sm btn-success" disabled>
                      Xem báo cáo (Sắp có)
                    </button>
                  </div>
                </div>
                <div className="col-md-4 text-center">
                  <div className="p-3">
                    <i className="fas fa-chart-pie fa-2x text-info mb-2"></i>
                    <h6>Báo cáo tổng hợp</h6>
                    <button className="btn btn-sm btn-info" disabled>
                      Xem báo cáo (Sắp có)
                    </button>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default HRDashboardPage;

```


==================== File: .\src\pages\LoginPage.jsx ====================

import React, { useState, useEffect } from 'react';
import { Navigate } from 'react-router-dom';
import { useAuth } from '../hooks/useAuth';
import { useNotification } from '../hooks/useNotification';
import Loading from '../components/common/Loading';

const LoginPage = () => {
  const [credentials, setCredentials] = useState({
    username: '',
    password: ''
  });
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [errors, setErrors] = useState({});
  
  const { user, login, loading } = useAuth();
  const { showNotification } = useNotification();

  useEffect(() => {
    // Clear any existing alerts
    const alertContainer = document.getElementById('alert-container');
    if (alertContainer) {
      alertContainer.innerHTML = '';
    }
  }, []);

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setCredentials(prev => ({
      ...prev,
      [name]: value
    }));
    
    // Clear error when user starts typing
    if (errors[name]) {
      setErrors(prev => ({
        ...prev,
        [name]: ''
      }));
    }
  };

  const validateForm = () => {
    const newErrors = {};
    
    if (!credentials.username.trim()) {
      newErrors.username = 'Vui lòng nhập tên đăng nhập';
    }
    
    if (!credentials.password.trim()) {
      newErrors.password = 'Vui lòng nhập mật khẩu';
    }
    
    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    
    if (!validateForm()) {
      showNotification('Vui lòng điền đầy đủ thông tin!', 'error');
      return;
    }

    setIsSubmitting(true);
    
    try {
      const response = await login(credentials);
      
      showNotification('Đăng nhập thành công!', 'success');
      
      // Redirect based on role after short delay
      setTimeout(() => {
        if (response.user.role === 'hr' || response.user.role === 'admin') {
          window.location.href = '/hr-dashboard';
        } else {
          window.location.href = '/dashboard';
        }
      }, 1000);
      
    } catch (error) {
      console.error('Login error:', error);
      showNotification('Tên đăng nhập hoặc mật khẩu không đúng!', 'error');
    } finally {
      setIsSubmitting(false);
    }
  };

  // Redirect if already logged in
  if (user) {
    const redirectPath = user.role === 'hr' || user.role === 'admin' ? '/hr-dashboard' : '/dashboard';
    return <Navigate to={redirectPath} replace />;
  }

  // Show loading during auth check
  if (loading) {
    return (
      <div className="d-flex justify-content-center align-items-center min-vh-100">
        <Loading />
      </div>
    );
  }

  return (
    <div className="min-vh-100 d-flex align-items-center justify-content-center bg-light">
      <div className="container">
        <div className="row justify-content-center">
          <div className="col-md-6 col-lg-4">
            <div className="card shadow">
              <div className="card-body p-4">
                <div className="text-center mb-4">
                  <h2 className="card-title">Đăng nhập</h2>
                  <p className="text-muted">Hệ thống quản lý nhân sự</p>
                </div>

                <form onSubmit={handleSubmit} noValidate>
                  <div className="mb-3">
                    <label htmlFor="username" className="form-label">
                      Tên đăng nhập <span className="text-danger">*</span>
                    </label>
                    <input
                      type="text"
                      className={`form-control ${errors.username ? 'is-invalid' : ''}`}
                      id="username"
                      name="username"
                      value={credentials.username}
                      onChange={handleInputChange}
                      placeholder="Nhập tên đăng nhập"
                      disabled={isSubmitting}
                      required
                    />
                    {errors.username && (
                      <div className="invalid-feedback">
                        {errors.username}
                      </div>
                    )}
                  </div>

                  <div className="mb-4">
                    <label htmlFor="password" className="form-label">
                      Mật khẩu <span className="text-danger">*</span>
                    </label>
                    <input
                      type="password"
                      className={`form-control ${errors.password ? 'is-invalid' : ''}`}
                      id="password"
                      name="password"
                      value={credentials.password}
                      onChange={handleInputChange}
                      placeholder="Nhập mật khẩu"
                      disabled={isSubmitting}
                      required
                    />
                    {errors.password && (
                      <div className="invalid-feedback">
                        {errors.password}
                      </div>
                    )}
                  </div>

                  <button
                    type="submit"
                    className="btn btn-primary w-100"
                    disabled={isSubmitting}
                  >
                    {isSubmitting ? (
                      <>
                        <span className="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                        Đang đăng nhập...
                      </>
                    ) : (
                      'Đăng nhập'
                    )}
                  </button>
                </form>

                {/* Demo credentials info */}
                <div className="mt-4 p-3 bg-light rounded">
                  <small className="text-muted">
                    <strong>Tài khoản demo:</strong><br />
                    Admin: admin / admin123<br />
                    HR: hr / hr123<br />
                    Sales: sales / sales123
                  </small>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default LoginPage;

```


==================== File: .\src\services\api.js ====================

// API helper functions - converted from vanilla JS
export class ApiClient {
  static async request(url, options = {}) {
    try {
      const response = await fetch(url, {
        headers: {
          'Content-Type': 'application/json',
          ...options.headers
        },
        credentials: 'include',
        ...options
      });

      // ✅ THÊM: Log request details để debug
      console.log('API Request:', {
        url,
        method: options.method || 'GET',
        body: options.body,
        status: response.status,
        statusText: response.statusText
      });

      if (!response.ok) {
        let errorData;
        try {
          errorData = await response.json();
          // ✅ THÊM: Log full error response
          console.error('Server error response:', errorData);
        } catch (parseError) {
          console.error('Could not parse error response:', parseError);
          errorData = { error: `HTTP ${response.status}: ${response.statusText}` };
        }
        
        // ✅ SỬA: Trả về object chứa đầy đủ thông tin lỗi
        throw new Error(JSON.stringify({
          status: response.status,
          message: errorData.message || errorData.error || 'Request failed',
          details: errorData
        }));
      }

      const data = await response.json();
      console.log('API Response:', data);
      return data;
    } catch (error) {
      console.error('API request error:', error);
      throw error;
    }
  }

  static async get(url, params = {}) {
    const queryString = new URLSearchParams(params).toString();
    const fullUrl = queryString ? `${url}?${queryString}` : url;
    return this.request(fullUrl);
  }

  static async post(url, data) {
    return this.request(url, {
      method: 'POST',
      body: JSON.stringify(data)
    });
  }

  static async put(url, data) {
    return this.request(url, {
      method: 'PUT',
      body: JSON.stringify(data)
    });
  }

  static async delete(url) {
    return this.request(url, {
      method: 'DELETE'
    });
  }
}

export default ApiClient;

```


==================== File: .\src\services\auth.js ====================


```


==================== File: .\src\services\employee.js ====================

import { ApiClient } from './api.js';

/**
 * Service layer để quản lý các API liên quan đến Nhân viên.
 */
export const employeeService = {
  /**
   * Lấy danh sách tất cả nhân viên.
   * @returns {Promise<object>} Response từ API.
   */
  getAll() {
    console.log('SERVICE (FE): Gọi API lấy danh sách nhân viên...');
    return ApiClient.get('/api/employees');
  },

  /**
   * Thêm một nhân viên mới.
   * @param {object} employeeData - Dữ liệu của nhân viên mới.
   * @returns {Promise<object>} Response từ API.
   */
  create(employeeData) {
    console.log('SERVICE (FE): Gọi API thêm nhân viên mới...', employeeData);
    return ApiClient.post('/api/employees', employeeData);
  },

  /**
   * Cập nhật thông tin một nhân viên.
   * @param {string} id - ID của nhân viên (record_id từ Lark).
   * @param {object} employeeData - Dữ liệu cần cập nhật.
   * @returns {Promise<object>} Response từ API.
   */
  update(id, employeeData) {
    console.log(`SERVICE (FE): Gọi API cập nhật nhân viên ID: ${id}...`, employeeData);
    return ApiClient.put(`/api/employees/${id}`, employeeData);
  },

  /**
   * Xóa một nhân viên.
   * @param {string} id - ID của nhân viên (record_id từ Lark).
   * @returns {Promise<object>} Response từ API.
   */
  remove(id) {
    console.log(`SERVICE (FE): Gọi API xóa nhân viên ID: ${id}...`);
    return ApiClient.delete(`/api/employees/${id}`);
  },

  /**
   * Lấy danh sách các đề xuất tuyển dụng đã được duyệt.
   * @returns {Promise<object>} Response từ API.
   */
  getApprovedRecruitmentRequests() {
    console.log('SERVICE (FE): Gọi API lấy danh sách đề xuất tuyển dụng...');
    
    return ApiClient.get('/api/recruitment', {
      params: {
        status: 'Đang tuyển dụng'
      }
    });
  }
};

```


==================== File: .\src\styles\components.css ====================


```


==================== File: .\src\styles\globals.css ====================

/* Global styles for React app */
.loading {
  position: relative;
}

.loading::after {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: rgba(255, 255, 255, 0.8);
  display: flex;
  justify-content: center;
  align-items: center;
  z-index: 1000;
}

.min-vh-100 {
  min-height: 100vh;
}

/* Alert container */
#alert-container {
  position: fixed;
  top: 20px;
  right: 20px;
  z-index: 1055;
  min-width: 300px;
}

/* Table enhancements */
.table-hover tbody tr:hover {
  background-color: rgba(0, 0, 0, 0.075);
}

/* Button groups */
.btn-group .btn {
  margin-right: 2px;
}

.btn-group .btn:last-child {
  margin-right: 0;
}

/* Form enhancements */
.is-invalid {
  border-color: #dc3545;
}

.is-valid {
  border-color: #198754;
}

/* Modal enhancements */
.modal-backdrop {
  backdrop-filter: blur(2px);
}

/* Work history entries */
.work-history-entry {
  background: #f8f9fa;
  border-left: 4px solid #007bff;
}

/* Recruitment table */
.recruitment-row.table-primary {
  background-color: rgba(13, 110, 253, 0.1) !important;
}

/* Loading spinner */
.spinner-border-sm {
  width: 1rem;
  height: 1rem;
}

/* Responsive adjustments */
@media (max-width: 768px) {
  .btn-group {
    flex-direction: column;
  }
  
  .btn-group .btn {
    margin-right: 0;
    margin-bottom: 2px;
  }
  
  .table-responsive {
    font-size: 0.875rem;
  }
}

```


================================================================================
3. THỐNG KÊ TỔNG QUAN:
----------------------------------------
📊 Tổng số file đã phân tích: 93
📊 Tổng số dòng code (ước tính): 15523

================================================================================
Báo cáo được tạo thành công!
================================================================================
