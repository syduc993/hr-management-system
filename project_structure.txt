📂 Cấu trúc thư mục: .
==================================================
📄 .dockerignore
  === Nội dung .dockerignore ===
# Các thư mục dependencies cục bộ
node_modules/
server/node_modules/

# Thư mục build (sẽ được tạo bên trong container)
dist/
build/

# Các file cấu hình và log của môi trường local
# Dòng '.env' đã được xóa để cho phép Docker sao chép file cấu hình này
.env.*
npm-debug.log*
yarn-debug.log*
yarn-error.log*
cookies.txt
project_analysis.txt

# File Jupyter Notebook (nếu có)
Getcode.ipynb

# Thư mục hệ thống của Git và các IDE
.git
.gitignore
.idea
.vscode
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?

  === Kết thúc .dockerignore ===
📄 Dockerfile
  === Nội dung Dockerfile ===
# ==============================================================================
# STAGE 1: Build Frontend (React)
# ==============================================================================
# Sử dụng một Node.js image làm base để build
FROM node:20-alpine AS builder

# Thiết lập thư mục làm việc trong container
WORKDIR /app

# Sao chép các file quản lý package và cài đặt dependencies
# Điều này tận dụng Docker layer caching, chỉ cài lại khi package.json thay đổi
COPY package.json package-lock.json ./
RUN npm install

# Sao chép toàn bộ source code của project vào container
COPY . .

# Chạy lệnh build của Vite để tạo ra các file static cho frontend
# Các file này sẽ được lưu trong thư mục /app/dist
RUN npm run build

# ==============================================================================
# STAGE 2: Production Image
# ==============================================================================
# Bắt đầu một stage mới từ một base image Node.js gọn nhẹ
FROM node:20-alpine

# Thiết lập thư mục làm việc cho môi trường production
WORKDIR /app

# Sao chép các file quản lý package từ stage trước
COPY package.json package-lock.json ./

# --- BẮT ĐẦU PHẦN ĐÃ SỬA ---
# Sao chép file .env vào trong image.
# Lệnh này sẽ hoạt động sau khi bạn đã xóa dòng '.env' khỏi file .dockerignore.
# Nhờ có file này, lệnh dotenv.config() trong server.js sẽ có thể đọc được các biến môi trường.
COPY .env .
# --- KẾT THÚC PHẦN ĐÃ SỬA ---

# Chỉ cài đặt các dependencies cần thiết cho production (bỏ qua devDependencies)
RUN npm install --omit=dev

# Sao chép mã nguồn của server từ thư mục local
COPY --chown=node:node ./server ./server

# Sao chép thư mục build của frontend từ stage "builder"
# Kết quả build của React sẽ được đặt vào thư mục /app/dist
COPY --chown=node:node --from=builder /app/dist ./dist

# Mở cổng 8080 mà server Express đang lắng nghe
EXPOSE 8080

# Chuyển sang người dùng "node" không có quyền root để tăng cường bảo mật
USER node

# Lệnh mặc định để khởi chạy serv...
  === Kết thúc Dockerfile ===
📄 Getcode.ipynb
  === Nội dung Getcode.ipynb ===
{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "68a6e605",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "3f21e831",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Đã lưu cấu trúc vào file project_structure.txt\n",
      "\n",
      "Preview:\n",
      "📂 Cấu trúc thư mục: .\n",
      "==================================================\n",
      "📄 .dockerignore\n",
      "  === Nội dung .dockerignore ===\n",
      "# Các thư mục dependencies cục bộ\n",
      "node_modules/\n",
      "server/node_modules/\n",
      "\n",
      "# Thư mục build (sẽ được tạo bên trong container)\n",
      "dist/\n",
      "build/\n",
      "\n",
      "# Các file cấu hình và log của môi trường local\n",
      "# Dòng '.env' đã được xóa để cho phép Docker sao chép file cấu hình này\n",
      ".env.*\n",
      "npm-debug.log*\n",
      "yarn-debug.log*\n",
      "yarn-error.log*\n",
      "cookies.txt\n",
      "project_analysis.txt\n",
      "\n",
      "# File Jupyter Notebook (nếu có)\n",
      "Getcode.ipynb\n",
      "\n",
      "# Thư mục hệ thống của Git và các IDE\n",
      ".git\n",
      ".gitignore\n",
      ".idea\n",
      ".vscode\n",
      "*.suo\n",
      "*.ntvs*\n",
      "*.njsproj\n",
      "*.sln\n",
      "*.sw?\n",
      "\n",
      "  === Kết thúc .dockerignore ===\n",
      "📄 Dockerfile\n",
      "  === Nội dung Dockerfile ===\n",
      "# ==============================================================================\n",
      "# STAGE 1: Build Frontend (React)\n",
      "# ==============================================================================\n",
      "# Sử dụng một Node.js image làm base để build\n",
      "FROM node:20-alpine AS builder\n",
      "\n",
      "# Thiết lập thư mục làm việc tron...\n"
     ]
    }
   ],
   "source": [
    "import os\n",
    "import fnmatch\n",
  ...
  === Kết thúc Getcode.ipynb ===
📄 Readme.md
  === Nội dung Readme.md ===
HỆ THỐNG QUẢN LÝ NHÂN SỰ (HR Management System)
Đây là tài liệu hướng dẫn về kiến trúc, luồng hoạt động và cách phát triển các tính năng mới cho dự án.

1. Luồng Hoạt Động Của Một Tính Năng (Ví dụ: Thêm Nhân Viên Mới)
Tính năng "Thêm nhân viên mới" là một ví dụ điển hình cho thấy sự tương tác giữa Frontend và Backend. Luồng dữ liệu đi từ giao diện người dùng, qua các tầng xử lý ở client, gửi yêu cầu đến server, server xử lý và lưu vào "database" (Lark Bitable), sau đó trả kết quả về cho client.

a. Phía Frontend (React)
Giao diện người dùng (src/components/employee/EmployeeAddForm.jsx)

Người dùng nhập thông tin (Họ tên, SĐT, Giới tính, Ngân hàng...) vào các ô input trong form.

Người dùng nhấn vào nút "Chọn Đề xuất Tuyển dụng", một modal (RecruitmentModal.jsx) hiện lên để chọn.

Trạng thái của form được quản lý bởi useState trong component.

Xử lý sự kiện (src/components/employee/EmployeeAddForm.jsx)

Khi người dùng nhấn nút "Lưu Nhân viên", hàm handleSubmit được kích hoạt.

Hàm này thực hiện validation cơ bản, sau đó đóng gói dữ liệu (bao gồm thông tin cá nhân và workHistoryData) thành một đối tượng payload.

Gọi Hook (src/pages/EmployeeManagementPage.jsx)

EmployeeAddForm gọi hàm onSave được truyền từ trang cha là EmployeeManagementPage.

Hàm onSave này chính là handleAddEmployee được cung cấp bởi hook useEmployees.

Xử lý logic trong Hook (src/hooks/useEmployees.js)

Hook useEmployees nhận payload và gọi hàm addEmployee từ tầng service của client.

Nó quản lý trạng thái loading và hiển thị thông báo (thành công/thất bại) thông qua useNotification.

Tầng Service Client (src/services/employee.js)

Hàm addEmployee trong file này tạo và gửi một yêu cầu HTTP POST đến API của server tại endpoint /api/employees bằng axios (thông qua ApiClient).

b. Phía Backend (Node.js/Express)
Tiếp nhận yêu cầu (server/server.js)

Server Express nhận yêu cầu POST tại /api/employees.

Định tuyến (server/routes/employees.js)

Router xử lý endpoint /api/employees. Nó áp dụng các middlew...
  === Kết thúc Readme.md ===
📄 cookies.txt
  === Nội dung cookies.txt ===
# Netscape HTTP Cookie File
# https://curl.se/docs/http-cookies.html
# This file was generated by libcurl! Edit at your own risk.


  === Kết thúc cookies.txt ===
📄 index.html
  === Nội dung index.html ===
<!DOCTYPE html>
<html lang="vi">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Chấm công thời vụ</title>
</head>
<body>
  <div id="root"></div>
  <div id="alert-container"></div>
  <script type="module" src="/src/main.jsx"></script>
</body>
</html>

  === Kết thúc index.html ===
📄 package-lock.json
  (File quá lớn)
📄 package.json
  === Nội dung package.json ===
{
  "name": "hr-management-system-react",
  "version": "1.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "preview": "vite preview",
    "server": "node server/server.js"
  },
  "dependencies": {
    "@fortawesome/fontawesome-free": "^6.7.2",
    "axios": "^1.10.0",
    "bootstrap": "^5.3.7",
    "cors": "^2.8.5",
    "dotenv": "^16.6.1",
    "express": "^4.21.2",
    "express-session": "^1.18.2",
    "jspdf": "^3.0.1",
    "jspdf-autotable": "^5.0.2",
    "react": "^18.3.1",
    "react-dom": "^18.3.1",
    "react-router-dom": "^6.30.1"
  },
  "devDependencies": {
    "@types/react": "^18.0.28",
    "@types/react-dom": "^18.0.11",
    "@vitejs/plugin-react": "^3.1.0",
    "eslint": "^8.38.0",
    "eslint-plugin-react": "^7.32.2",
    "eslint-plugin-react-hooks": "^4.6.0",
    "eslint-plugin-react-refresh": "^0.3.4",
    "vite": "^4.5.14"
  }
}

  === Kết thúc package.json ===
📄 project_analysis.txt
  (File quá lớn)
📄 project_structure.txt
  (File quá lớn)
📁 public/
  📁 fonts/
    📄 Roboto-Bold.ttf
      (File quá lớn)
    📄 Roboto-Regular.ttf
      (File quá lớn)
📁 server/
  📁 config/
    📄 database.js
      === Nội dung database.js ===
// Demo users data (in production, use real database)
const users = {
    admin: {
        id: 'admin',
        username: 'admin',
        password: 'atino2025',
        role: 'admin',
        fullName: 'System Admin'
    },
    hr: {
        id: 'hr',
        username: 'hr',
        password: 'hr123',
        role: 'hr',
        fullName: 'HR Manager'
    },
    sales: {
        id: 'sales',
        username: 'sales',
        password: 'sales123',
        role: 'sales_manager',
        fullName: 'Sales Manager'
    },
    finance: {
        id: 'finance',
        username: 'finance',
        password: 'finance123',
        role: 'finance_manager',
        fullName: 'Finance Manager'
    },
    director: {
        id: 'director',
        username: 'director',
        password: 'director123',
        role: 'director',
        fullName: 'Director'
    }
};

const roles = {
    admin: 'Admin',
    hr: 'HR',
    sales_manager: 'Trưởng phòng kinh doanh',
    finance_manager: 'Trưởng phòng tài chính kế toán',
    director: 'Tổng giám đốc'
};

export {
    users,
    roles
};

      === Kết thúc database.js ===
    📄 lark-config.js
      === Nội dung lark-config.js ===
// server/config/lark-config.js
export const validateLarkConfig = () => {
    const requiredVars = [
        'LARK_APP_ID',
        'LARK_APP_SECRET', 
        'LARK_BASE_ID',
        'LARK_EMPLOYEE_TABLE_ID',
        'LARK_ATTENDANCE_TABLE_ID',
        'LARK_RECRUITMENT_TABLE_ID',
        'LARK_STORE_TABLE_ID',
        'LARK_POSITION_TABLE_ID',
        'LARK_WORK_HISTORY_TABLE_ID',
        'LARK_HOURS_SUMMARY_TABLE_ID'
    ];

    const missing = requiredVars.filter(key => !process.env[key]);
    
    if (missing.length > 0) {
        throw new Error(`❌ Missing Lark configuration: ${missing.join(', ')}`);
    }
    
    console.log('✅ Lark configuration validated');
};

export const larkConfig = {
    appId: process.env.LARK_APP_ID,
    appSecret: process.env.LARK_APP_SECRET,
    baseId: process.env.LARK_BASE_ID,
    tables: {
        employee: process.env.LARK_EMPLOYEE_TABLE_ID,
        attendance: process.env.LARK_ATTENDANCE_TABLE_ID,
        recruitment: process.env.LARK_RECRUITMENT_TABLE_ID,
        store: process.env.LARK_STORE_TABLE_ID,
        position: process.env.LARK_POSITION_TABLE_ID,
        workHistory: process.env.LARK_WORK_HISTORY_TABLE_ID,
        hoursSummary: process.env.LARK_HOURS_SUMMARY_TABLE_ID
    }
};
      === Kết thúc lark-config.js ===
  📁 controllers/
    📄 attendanceController.js
      === Nội dung attendanceController.js ===
// server/controllers/attendanceController.js
import larkServiceManager from '../services/lark-service-manager.js';
import { formatResponse } from '../services/utils/response-formatter.js';


/* ======================= Lấy danh sách bản ghi chấm công ======================= */
/**
 * GET: Lấy danh sách các bản ghi chấm công (attendance logs) dựa trên filter từ query parameters.
 * - Trả về data bản ghi chấm công dạng list.
 * - Xử lý lỗi và gửi error message nếu có vấn đề.
 */
export const getAttendanceLogs = async (req, res) => {
    try {
        const filters = req.query;
        const attendanceService = larkServiceManager.getService('attendance');
        const logs = await attendanceService.getAttendanceLogs(filters);
        
        res.json(formatResponse(true, 'Lấy bản ghi chấm công thành công', logs));
    } catch (error) {
        console.error('❌ Controller: getAttendanceLogs failed:', error);
        res.status(500).json(formatResponse(
            false, 
            `Lỗi khi lấy bản ghi chấm công: ${error.message}`, 
            null, 
            'ATTENDANCE_LOAD_FAILED'
        ));
    }
};


/* ======================= Thêm bản ghi chấm công mới ======================= */
/**
 * POST: Thêm một bản ghi chấm công mới cho nhân viên.
 * - Nhận attendanceData từ body request (employeeId, type, position).
 * - Validate dữ liệu (đầy đủ, hợp lệ).
 * - Gọi service để lưu bản ghi mới vào hệ thống.
 * - Trả kết quả thành công/thất bại cho client.
 */
export const addAttendanceLog = async (req, res) => {
    try {
        const attendanceData = req.body;
        
        // Validate required fields
        if (!attendanceData.employeeId || !attendanceData.type || !attendanceData.position) {
            return res.status(400).json(formatResponse(
                false, 
                'Thiếu thông tin bắt buộc: employeeId, type (Checkin/Checkout), position', 
                null, 
                'VALIDATION_ERROR'
            ));
        }

        // Valida...
      === Kết thúc attendanceController.js ===
    📄 authController.js
      === Nội dung authController.js ===
// server/controllers/authController.js
import larkServiceManager from '../services/lark-service-manager.js';
import { formatResponse } from '../services/utils/response-formatter.js';

/**
 * Xử lý đăng nhập người dùng.
 * Controller gọi đến AuthService để xác thực.
 * @route POST /api/auth/login
 */
const login = async (req, res) => {
    try {
        const { username, password } = req.body;
        const authService = larkServiceManager.getService('auth');

        // Gọi service để xử lý logic đăng nhập
        const result = await authService.login({ username, password });

        // Nếu service trả về thành công, tạo session
        if (result.success) {
            req.session.user = {
                id: result.user.id,
                username: result.user.username,
                role: result.user.role,
                fullName: result.user.fullName
            };
            
            // Trả về response thành công với thông tin user
            res.json(formatResponse(true, result.message, { user: req.session.user }));
        } else {
            // Trường hợp service xử lý nhưng không thành công (ít xảy ra với logic hiện tại)
             res.status(401).json(formatResponse(false, result.message, null, 'LOGIN_FAILED'));
        }

    } catch (error) {
        // Bắt lỗi do service throw (ví dụ: sai credentials)
        console.error('❌ Controller: login failed:', error.message);
        res.status(401).json(formatResponse(false, 'Tên đăng nhập hoặc mật khẩu không đúng.', null, 'INVALID_CREDENTIALS'));
    }
};

/**
 * Xử lý đăng xuất người dùng.
 * @route POST /api/auth/logout
 */
const logout = (req, res) => {
    req.session.destroy((err) => {
        if (err) {
            console.error('❌ Controller: logout failed:', err);
            return res.status(500).json(formatResponse(false, 'Không thể đăng xuất', null, 'LOGOUT_ERROR'));
        }
        res.clearCookie('connect.sid'); // Xóa cookie session phía client
        res.json(formatResponse...
      === Kết thúc authController.js ===
    📄 dashboardController.js
      === Nội dung dashboardController.js ===
// server/controllers/dashboardController.js
import larkServiceManager from '../services/lark-service-manager.js';
import { formatResponse } from '../services/utils/response-formatter.js';
import TimezoneService from '../core/timezone-service.js';

/**
 * Controller để lấy dữ liệu thống kê cho dashboard.
 * Hàm này sẽ được gọi khi có request đến endpoint tương ứng.
 * @param {object} req - Đối tượng request của Express.
 * @param {object} res - Đối tượng response của Express.
 */
export const getDashboardStats = async (req, res) => {
    try {
        // Service 'employee' để xử lý các nghiệp vụ liên quan đến nhân viên.
        const employeeService = larkServiceManager.getService('employee');
        // Service 'attendance' để xử lý các nghiệp vụ liên quan đến chấm công.
        const attendanceService = larkServiceManager.getService('attendance');

        // Khởi tạo đối tượng để lưu trữ thống kê nhân viên với giá trị mặc định. Việc này đảm bảo rằng dù có lỗi xảy ra, cấu trúc dữ liệu trả về vẫn nhất quán.
        let employeeStats = {
            totalEmployees: 0,
            activeEmployees: 0,
            error: null
        };

        let attendanceStats = {
            totalAttendanceLogs: 0,
            todayLogs: 0,
            error: null
        };

        // --- Bắt đầu lấy thống kê nhân viên ---
        try {
            // Gọi hàm từ service để lấy danh sách tất cả nhân viên. 'await' được sử dụng vì đây là một thao tác bất đồng bộ.
            const employees = await employeeService.getAllEmployees();

            // Tính toán và cập nhật các số liệu thống kê.
            employeeStats = {
                totalEmployees: employees.length,
                activeEmployees: employees.filter(emp => emp.status === 'active').length,
                error: null
            };
        } catch (error) {
            console.error('❌ Employee stats error:', error);
            employeeStats.error = 'Không thể tải thống kê nhân viên';
        }

        // --- ...
      === Kết thúc dashboardController.js ===
    📄 employeeController.js
      === Nội dung employeeController.js ===
// server/controllers/employeeController.js
import larkServiceManager from '../services/lark-service-manager.js';
import { formatResponse } from '../services/utils/response-formatter.js';
import CacheService from '../services/core/cache-service.js';
class EmployeeController {



    /* =================================================================================== */
    /* ======================= API Chính - Quản lý Nhân viên ======================= */
    /* =================================================================================== */



    /* ======================= Quản lý danh sách nhân viên ======================= */
    /**
     * GET: Lấy danh sách tất cả nhân viên trong hệ thống.
     * - Trả về array chứa thông tin cơ bản của tất cả nhân viên.
     * - Không có filter, pagination (lấy tất cả).
     * @route GET /api/employees
     */
    async getAllEmployees(req, res) {
        try {
            const employeeService = larkServiceManager.getService('employee');
            const employees = await employeeService.getAllEmployees();

            res.json(formatResponse(true, 'Lấy danh sách nhân viên thành công', employees));
        } catch (error) {
            console.error('❌ CONTROLLER: Lỗi khi lấy danh sách nhân viên:', error);
            res.status(500).json(formatResponse(
                false, 
                `Không thể tải danh sách nhân viên: ${error.message}`, 
                null, 
                'EMPLOYEE_LOAD_FAILED'
            ));
        }
    }


    /**
     * GET: Tìm kiếm nhân viên dựa trên một chuỗi truy vấn.
     * @route GET /api/employees/search
     */
    async searchEmployees(req, res) {
        try {
            const { q } = req.query;
            const employees = await larkServiceManager.searchEmployees(q);
            res.json(formatResponse(true, 'Tìm kiếm thành công', employees));
        } catch (error) {
            console.error('❌ Controller: searchEmployees failed:', error);
            res.status(5...
      === Kết thúc employeeController.js ===
    📄 positionController.js
      === Nội dung positionController.js ===
// server/controllers/positionController.js
import larkServiceManager from '../services/lark-service-manager.js';
import { formatResponse } from '../services/utils/response-formatter.js';

// ==================== POSITION MANAGEMENT ====================
export const getPositions = async (req, res) => {
    try {
        const positions = await larkServiceManager.getAllPositions();
        res.json(formatResponse(true, 'Lấy danh sách vị trí thành công', positions));
    } catch (error) {
        console.error('❌ Controller: getPositions failed:', error);
        res.status(500).json(formatResponse(false, `Lỗi khi tải danh sách vị trí: ${error.message}`, null, 'POSITION_LOAD_FAILED'));
    }
};

export const addPosition = async (req, res) => {
    try {
        const { positionName, description } = req.body;
        // (Validation sẽ được thêm vào ở bước sau)
        const position = {
            positionName,
            description: description || '',
            status: 'active',
            //createdAt: new Date().toISOString()
            createdAt: TimezoneService.getCurrentVietnamDate().toISOString()
        };
        const result = await larkServiceManager.addPosition(position);
        res.json(formatResponse(true, 'Thêm vị trí thành công', { position: result }));
    } catch (error) {
        console.error('❌ Controller: addPosition failed:', error);
        res.status(500).json(formatResponse(false, `Lỗi khi thêm vị trí: ${error.message}`, null, 'POSITION_ADD_FAILED'));
    }
};

export const updatePosition = async (req, res) => {
    try {
        const { id } = req.params;
        //const updatedData = { ...req.body, updatedAt: new Date().toISOString() };
        const updatedData = { ...req.body, updatedAt: TimezoneService.getCurrentVietnamDate().toISOString() };
        const result = await larkServiceManager.updatePosition(id, updatedData);
        res.json(formatResponse(true, 'Cập nhật vị trí thành công', { position: result }));
    } catch (error)...
      === Kết thúc positionController.js ===
    📄 recruitmentController.js
      === Nội dung recruitmentController.js ===
// import larkServiceManager from '../services/lark-service-manager.js';
// import { formatResponse } from '../services/utils/response-formatter.js';
// import CacheService from '../services/core/cache-service.js';
// import LarkClient from '../services/core/lark-client.js';




// // =================================================================
// // HÀM PHỤ TRỢ (HELPER FUNCTIONS)
// // =================================================================


// export const getRecruitmentRequests = async (req, res) => {
//     try {
//         const filters = req.query;
//         const recruitmentService = larkServiceManager.getService('recruitment');
//         const requests = await recruitmentService.getRecruitmentRequests(filters);

//         res.json(formatResponse(true, 'Lấy danh sách đề xuất thành công', requests));
//     } catch (error) {
//         console.error('❌ Controller: getRecruitmentRequests failed:', error);
//         res.status(500).json(formatResponse(
//             false, 
//             `Lỗi khi lấy danh sách đề xuất: ${error.message}`, 
//             null, 
//             'RECRUITMENT_LOAD_FAILED'
//         ));
//     }
// };

// export const getRecruitmentHoursSummary = async (req, res) => {
//     try {
        
//         // ✅ SỬA: Luôn clear cache để đảm bảo realtime data

//         CacheService.delete('hours_summary_table_data');
//         CacheService.delete('work_history_all');
//         CacheService.delete('recruitment_requests_{}'); // Clear recruitment cache nếu có
        
//         const recruitmentService = larkServiceManager.getService('recruitment');
//         const hoursSummary = await recruitmentService.getRecruitmentHoursSummary();


//         res.json(formatResponse(true, 'Lấy tổng hợp giờ công theo tuyển dụng thành công', {
//             summary: hoursSummary,
//             totalRequests: hoursSummary.length,
//             totalEmployees: hoursSummary.reduce((sum, req) => sum + req.totalEmployees, 0),
//    ...
      === Kết thúc recruitmentController.js ===
    📄 storeController.js
      === Nội dung storeController.js ===
// server/controllers/storeController.js
import larkServiceManager from '../services/lark-service-manager.js';
import { formatResponse } from '../services/utils/response-formatter.js';

// ==================== STORE MANAGEMENT ====================
export const getStores = async (req, res) => {
    try {
        const stores = await larkServiceManager.getAllStores();
        res.json(formatResponse(true, 'Lấy danh sách cửa hàng thành công', stores));
    } catch (error) {
        console.error('❌ Controller: getStores failed:', error);
        res.status(500).json(formatResponse(false, `Lỗi khi tải danh sách cửa hàng: ${error.message}`, null, 'STORE_LOAD_FAILED'));
    }
};

export const addStore = async (req, res) => {
    try {
        const { storeName, address } = req.body;
        // (Validation sẽ được thêm vào ở bước sau)
        const store = {
            storeName,
            address,
            status: 'active',
            //createdAt: new Date().toISOString()
            createdAt: TimezoneService.getCurrentVietnamDate().toISOString()
        };
        const result = await larkServiceManager.addStore(store);
        res.json(formatResponse(true, 'Thêm cửa hàng thành công', { store: result }));
    } catch (error) {
        console.error('❌ Controller: addStore failed:', error);
        res.status(500).json(formatResponse(false, `Lỗi khi thêm cửa hàng: ${error.message}`, null, 'STORE_ADD_FAILED'));
    }
};

export const updateStore = async (req, res) => {
    try {
        const { id } = req.params;
        //const updatedData = { ...req.body, updatedAt: new Date().toISOString() };
        const updatedData = { ...req.body, updatedAt: TimezoneService.getCurrentVietnamDate().toISOString() };
        const result = await larkServiceManager.updateStore(id, updatedData);
        res.json(formatResponse(true, 'Cập nhật cửa hàng thành công', { store: result }));
    } catch (error) {
        console.error('❌ Controller: updateStore failed:', error);
       ...
      === Kết thúc storeController.js ===
  📁 middleware/
    📄 auth.js
      === Nội dung auth.js ===
const authenticateUser = (req, res, next) => {
    if (!req.session || !req.session.user) {
        return res.status(401).json({ error: 'Unauthorized' });
    }
    req.user = req.session.user;
    next();
};

const authorizeRoles = (...roles) => {
    return (req, res, next) => {
        if (!req.user || !roles.includes(req.user.role)) {
            return res.status(403).json({ error: 'Forbidden' });
        }
        next();
    };
};

export {
    authenticateUser,
    authorizeRoles
};

      === Kết thúc auth.js ===
    📄 validation.js
      === Nội dung validation.js ===
// server/middleware/validation.js
import { formatResponse } from '../services/utils/response-formatter.js';
import { EmployeeValidator } from '../services/employees/index.js';
import { MasterDataValidator } from '../services/master-data/index.js';

class ValidationMiddleware {
    // Middleware để validate dữ liệu nhân viên mới
    static validateAddEmployee(req, res, next) {
    // ✅ Tạo employeeData giống logic trong controller
    const { fullName, phoneNumber, gender, bankAccount, bankName, workHistoryData } = req.body;
    const hourlyRate = (workHistoryData && workHistoryData[0]?.hourlyRate) || 0;
    
    const employeeDataForValidation = {
        fullName,
        phoneNumber, 
        gender,
        hourlyRate: parseFloat(hourlyRate),
        bankAccount,
        bankName
    };

    // Validate employee data với data đã xử lý
    const employeeErrors = EmployeeValidator.validateEmployeeData(employeeDataForValidation);
    if (employeeErrors.length > 0) {
        return res.status(400).json(formatResponse(false, employeeErrors.join(', '), null, 'VALIDATION_ERROR'));
    }

    // Validate work history
    const workHistoryErrors = EmployeeValidator.validateWorkHistoryData(req.body.workHistoryData || []);
    if (workHistoryErrors.length > 0) {
        return res.status(400).json(formatResponse(false, workHistoryErrors.join(', '), null, 'VALIDATION_ERROR'));
    }
    
    next();
    }


    // Middleware để validate dữ liệu khi cập nhật nhân viên (có thể khác với khi thêm mới)
    static validateUpdateEmployee(req, res, next) {
        const errors = EmployeeValidator.validateEmployeeData(req.body);
        if (errors.length > 0) {
            return res.status(400).json(formatResponse(false, errors.join(', '), null, 'VALIDATION_ERROR'));
        }
        next();
    }
    
    // Middleware để validate dữ liệu cửa hàng
    static validateStore(req, res, next) {
        const errors = MasterDataValidator.validateStoreData(req.body);
         if (errors...
      === Kết thúc validation.js ===
  📁 routes/
    📄 attendance.js
      === Nội dung attendance.js ===
// server/routes/attendance.js
import express from 'express';
import { 
    getAttendanceLogs,
    addAttendanceLog,
    getEmployeeHours,
    getAttendanceStats,
    getEmployeeDetailedHours
} from '../controllers/attendanceController.js';
import { authenticateUser } from '../middleware/auth.js';

const router = express.Router();

// ✅ CÁC ENDPOINT HIỆN TẠI
router.get('/logs', authenticateUser, getAttendanceLogs);
router.post('/logs', authenticateUser, addAttendanceLog);
router.get('/employee-hours', authenticateUser, getEmployeeHours);

// ✅ CÁC ENDPOINT MỚI
router.get('/stats', authenticateUser, getAttendanceStats);
router.get('/employee/:employeeId/detailed', authenticateUser, getEmployeeDetailedHours);

export default router;

      === Kết thúc attendance.js ===
    📄 auth.js
      === Nội dung auth.js ===
import express from 'express';
import { login, logout, getProfile } from '../controllers/authController.js';
import { authenticateUser } from '../middleware/auth.js';

const router = express.Router();

router.post('/login', login);
router.post('/logout', logout);
router.get('/profile', authenticateUser, getProfile);

export default router;

      === Kết thúc auth.js ===
    📄 dashboard.js
      === Nội dung dashboard.js ===
import express from 'express';
import { getDashboardStats } from '../controllers/dashboardController.js';
import { authenticateUser } from '../middleware/auth.js';

const router = express.Router();

router.get('/stats', authenticateUser, getDashboardStats);

export default router;

      === Kết thúc dashboard.js ===
    📄 employees.js
      === Nội dung employees.js ===
// server/routes/employees.js
import express from 'express';
import { 
    getAllEmployees, 
    addEmployee, 
    updateEmployee, 
    deleteEmployee, 
    searchEmployees, 
    getEmployeeWorkHistory, 
    addWorkHistory,
    updateWorkHistory,
    deleteWorkHistory
} from '../controllers/employeeController.js';
import { authenticateUser, authorizeRoles } from '../middleware/auth.js';
import ValidationMiddleware from '../middleware/validation.js';

const router = express.Router();

// ==================== EMPLOYEE ROUTES ====================
// GET routes should come before parameterized routes
router.get('/search', authenticateUser, searchEmployees);
router.get('/', authenticateUser, getAllEmployees);

// Employee CRUD operations
router.post('/', authenticateUser, authorizeRoles('hr', 'admin'), ValidationMiddleware.validateAddEmployee, addEmployee);
router.put('/:id', authenticateUser, authorizeRoles('hr', 'admin'), ValidationMiddleware.validateUpdateEmployee, updateEmployee);
router.delete('/:id', authenticateUser, authorizeRoles('hr', 'admin'), deleteEmployee);

// ==================== WORK HISTORY ROUTES ====================
// Work history routes - SỬA ĐỂ TƯƠNG THÍCH VỚI CLIENT
router.get('/:employeeId/work-history', authenticateUser, getEmployeeWorkHistory);
router.post('/work-history', authenticateUser, authorizeRoles('hr', 'admin'), addWorkHistory);

// ✅ THÊM MỚI: Routes cho sửa và xóa work history
router.put('/work-history/:id', authenticateUser, authorizeRoles('hr', 'admin'), updateWorkHistory);
router.delete('/work-history/:id', authenticateUser, authorizeRoles('hr', 'admin'), deleteWorkHistory);

// ==================== ERROR HANDLING ====================
// Handle 404 for unmatched routes
router.use('*', (req, res) => {
    res.status(404).json({
        success: false,
        error: 'Route not found',
        path: req.originalUrl
    });
});

export default router;

      === Kết thúc employees.js ===
    📄 masterData.js
      === Nội dung masterData.js ===
// server/routes/masterData.js
import express from 'express';
import { authenticateUser, authorizeRoles } from '../middleware/auth.js';
import { getStores, addStore, updateStore, deleteStore } from '../controllers/storeController.js';
import { getPositions, addPosition, updatePosition, deletePosition } from '../controllers/positionController.js';
import ValidationMiddleware from '../middleware/validation.js';

const router = express.Router();

// ==================== STORE ROUTES ====================
router.get('/stores', authenticateUser, getStores);
router.post('/stores', authenticateUser, authorizeRoles('hr', 'admin'), ValidationMiddleware.validateStore, addStore);
router.put('/stores/:id', authenticateUser, authorizeRoles('hr', 'admin'), ValidationMiddleware.validateStore, updateStore);
router.delete('/stores/:id', authenticateUser, authorizeRoles('hr', 'admin'), deleteStore);

// ==================== POSITION ROUTES ====================
router.get('/positions', authenticateUser, getPositions);
router.post('/positions', authenticateUser, authorizeRoles('hr', 'admin'), ValidationMiddleware.validatePosition, addPosition);
router.put('/positions/:id', authenticateUser, authorizeRoles('hr', 'admin'), ValidationMiddleware.validatePosition, updatePosition);
router.delete('/positions/:id', authenticateUser, authorizeRoles('hr', 'admin'), deletePosition);

export default router;

      === Kết thúc masterData.js ===
    📄 recruitment.js
      === Nội dung recruitment.js ===
// server/routes/recruitment.js
import express from 'express';
import { 
    getRecruitmentRequests,
    getRecruitmentHoursSummary,
    getDetailedHoursForRequest,
    getDailyComparisonForRequest    
} from '../controllers/recruitmentController.js';
import { authenticateUser } from '../middleware/auth.js';

const router = express.Router();

router.get('/', authenticateUser, getRecruitmentRequests);
router.get('/hours-summary', authenticateUser, getRecruitmentHoursSummary);
router.get('/detailed-hours/:requestNo', authenticateUser, getDetailedHoursForRequest);
router.get('/daily-comparison/:requestNo', authenticateUser, getDailyComparisonForRequest);

export default router;

      === Kết thúc recruitment.js ===
  📄 server.js
    === Nội dung server.js ===
// server/server.js
import dotenv from 'dotenv';

// Configure dotenv FIRST
dotenv.config();

// Import các modules AFTER đã config dotenv
import express from 'express';
import cors from 'cors';
import session from 'express-session';
import path from 'path';
import { fileURLToPath } from 'url';

// ES6 module equivalent of __dirname
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Import service manager AFTER dotenv config
import larkServiceManager from './services/lark-service-manager.js';

// Import routes
import authRoutes from './routes/auth.js';
import employeeRoutes from './routes/employees.js';
import attendanceRoutes from './routes/attendance.js';
import recruitmentRoutes from './routes/recruitment.js';
import masterDataRoutes from './routes/masterData.js';
import dashboardRoutes from './routes/dashboard.js';

const app = express();
const PORT = process.env.PORT || 8080;

// Middleware
// Trong môi trường container, server và client sẽ cùng một nguồn gốc,
// nhưng cấu hình CORS này vẫn tốt cho môi trường phát triển local.
app.use(cors({
    origin: 'http://localhost:3000',
    credentials: true
}));

app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// Session configuration
app.use(session({
    secret: process.env.SESSION_SECRET || 'your-secret-key',
    resave: false,
    saveUninitialized: false,
    cookie: { secure: false, maxAge: 24 * 60 * 60 * 1000 } // Trong production nên set secure: true nếu dùng HTTPS
}));

// API Routes - Tất cả các route API của bạn vẫn giữ nguyên
app.use('/api/auth', authRoutes);
app.use('/api/employees', employeeRoutes);
app.use('/api/attendance', attendanceRoutes);
app.use('/api/recruitment', recruitmentRoutes);
app.use('/api/master-data', masterDataRoutes);
app.use('/api/dashboard', dashboardRoutes);

// Health check endpoint
app.get('/api/health', (req, res) => {
    res.json({
        status: 'OK',
        timestamp: new Date().toISOString(),
      ...
    === Kết thúc server.js ===
  📁 services/
    📁 attendance/
      📄 attendance-service.js
        === Nội dung attendance-service.js ===
// server/services/attendance/attendance-service.js
import BaseService from '../core/base-service.js';
import LarkClient from '../core/lark-client.js';
import CacheService from '../core/cache-service.js';
import TimezoneService from '../core/timezone-service.js'; // ✅ THÊM: Import TimezoneService

/**
 * @class AttendanceService
 * @description Quản lý tất cả các nghiệp vụ liên quan đến chấm công,
 * bao gồm lấy dữ liệu từ Lark Base, thêm bản ghi mới, và tính toán giờ làm.
 */
class AttendanceService extends BaseService {
    constructor() {
        super();
        this.baseId = process.env.LARK_BASE_ID;
        this.tableId = process.env.LARK_ATTENDANCE_TABLE_ID;
    }

    async initializeService() {
        console.log('Initializing Attendance Service...');
    }

    // =================================================================
    //  PUBLIC API METHODS - CÁC HÀM CUNG CẤP RA BÊN NGOÀI
    // =================================================================

    /** Lấy danh sách bản ghi chấm công từ Lark Bitable, có hỗ trợ cache và bộ lọc.
     * @param {object} [filters={}] - Các bộ lọc để truy vấn.
     * @param {string} [filters.employeeId] - Lọc theo Mã nhân viên.
     * @param {string} [filters.dateFrom] - Lọc từ ngày (YYYY-MM-DD).
     * @param {string} [filters.dateTo] - Lọc đến ngày (YYYY-MM-DD).
     * @returns {Promise<Array<object>>} - Mảng các bản ghi chấm công đã được chuyển đổi.
     */
    async getAttendanceLogs(filters = {}) {
        const cacheKey = `attendance_logs_${JSON.stringify(filters)}`;
        let logs = CacheService.get(cacheKey);
        
        if (logs) {
            console.log(`✅ ATTENDANCE: Loaded ${logs.length} records from cache.`);
            return logs;
        }

        try {
            
            // Xây dựng các tham số cho API
            const params = {};
            if (filters.employeeId) {
                // Lark filter syntax: CurrentValue.[Tên cột] = "Giá trị"
                params.filter = `Curre...
        === Kết thúc attendance-service.js ===
      📄 attendance-validator.js
        === Nội dung attendance-validator.js ===
// Attendance validation service
class AttendanceValidator {
    static validateAttendanceData(attendanceData) {
        const errors = [];

        // Required fields validation
        if (!attendanceData.employeeId) {
            errors.push('Employee ID là bắt buộc');
        }

        if (!attendanceData.date) {
            errors.push('Ngày là bắt buộc');
        } else if (!this.isValidDate(attendanceData.date)) {
            errors.push('Ngày không hợp lệ');
        }

        if (!attendanceData.timeIn) {
            errors.push('Thời gian vào là bắt buộc');
        } else if (!this.isValidTime(attendanceData.timeIn)) {
            errors.push('Thời gian vào không hợp lệ');
        }

        if (!attendanceData.timeOut) {
            errors.push('Thời gian ra là bắt buộc');
        } else if (!this.isValidTime(attendanceData.timeOut)) {
            errors.push('Thời gian ra không hợp lệ');
        }

        // Check if time out is after time in
        if (attendanceData.timeIn && attendanceData.timeOut) {
            if (!this.isTimeOutAfterTimeIn(attendanceData.timeIn, attendanceData.timeOut)) {
                errors.push('Thời gian ra phải sau thời gian vào');
            }
        }

        return errors;
    }

    static isValidDate(dateString) {
        const date = new Date(dateString);
        return date instanceof Date && !isNaN(date);
    }

    static isValidTime(timeString) {
        const timeRegex = /^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$/;
        return timeRegex.test(timeString);
    }

    static isTimeOutAfterTimeIn(timeIn, timeOut) {
        const inTime = new Date(`1970-01-01T${timeIn}`);
        const outTime = new Date(`1970-01-01T${timeOut}`);
        return outTime > inTime;
    }
}

export default AttendanceValidator;

        === Kết thúc attendance-validator.js ===
      📄 index.js
        === Nội dung index.js ===
// Attendance services exports
export { default as AttendanceService } from './attendance-service.js';
export { default as AttendanceValidator } from './attendance-validator.js';
        === Kết thúc index.js ===
    📁 auth/
      📄 auth-service.js
        === Nội dung auth-service.js ===
// Authentication service
import BaseService from '../core/base-service.js';
import { users } from '../../config/database.js';

class AuthService extends BaseService {
    constructor() {
        super();
        this.activeSessions = new Map();
    }

    async validateCredentials(username, password) {
        const user = users[username];
        if (!user || user.password !== password) {
            throw new Error('Invalid credentials');
        }
        return user;
    }

    createSession(user) {
        const sessionData = {
            id: user.id,
            username: user.username,
            role: user.role,
            fullName: user.fullName,
            loginTime: new Date().toISOString()
        };
        
        this.activeSessions.set(user.id, sessionData);
        return sessionData;
    }

    validateSession(sessionId) {
        return this.activeSessions.get(sessionId);
    }

    destroySession(sessionId) {
        return this.activeSessions.delete(sessionId);
    }

    async login(credentials) {
        const { username, password } = credentials;
        
        const user = await this.validateCredentials(username, password);
        const sessionData = this.createSession(user);
        
        return {
            success: true,
            user: sessionData,
            message: 'Login successful'
        };
    }

    async logout(sessionId) {
        const destroyed = this.destroySession(sessionId);
        return {
            success: destroyed,
            message: destroyed ? 'Logout successful' : 'Session not found'
        };
    }

    getActiveUsers() {
        return Array.from(this.activeSessions.values());
    }
}

export default AuthService;

        === Kết thúc auth-service.js ===
      📄 index.js
        === Nội dung index.js ===
// Auth services exports
export { default as AuthService } from './auth-service.js';
export { default as SessionService } from './session-service.js';

        === Kết thúc index.js ===
      📄 session-service.js
        === Nội dung session-service.js ===
// Session management service
import BaseService from '../core/base-service.js';

class SessionService extends BaseService {
    constructor() {
        super();
        this.sessions = new Map();
        this.sessionTimeout = 24 * 60 * 60 * 1000; // 24 hours
    }

    createSession(user, req) {
        const sessionId = this.generateId('sess_');
        const sessionData = {
            id: sessionId,
            userId: user.id,
            user: user,
            createdAt: new Date().toISOString(),
            lastAccessed: new Date().toISOString(),
            ipAddress: req.ip || req.connection.remoteAddress,
            userAgent: req.get('User-Agent')
        };

        this.sessions.set(sessionId, sessionData);
        return sessionData;
    }

    getSession(sessionId) {
        const session = this.sessions.get(sessionId);
        if (!session) return null;

        // Check if session is expired
        const now = Date.now();
        const lastAccessed = new Date(session.lastAccessed).getTime();
        if (now - lastAccessed > this.sessionTimeout) {
            this.destroySession(sessionId);
            return null;
        }

        // Update last accessed
        session.lastAccessed = new Date().toISOString();
        this.sessions.set(sessionId, session);
        
        return session;
    }

    destroySession(sessionId) {
        return this.sessions.delete(sessionId);
    }

    cleanupExpiredSessions() {
        const now = Date.now();
        for (const [sessionId, session] of this.sessions.entries()) {
            const lastAccessed = new Date(session.lastAccessed).getTime();
            if (now - lastAccessed > this.sessionTimeout) {
                this.destroySession(sessionId);
            }
        }
    }

    getActiveSessions() {
        return Array.from(this.sessions.values());
    }

    getUserSessions(userId) {
        return Array.from(this.sessions.values()).filter(session => session.userId === userId);
    }
}

export d...
        === Kết thúc session-service.js ===
    📁 core/
      📄 base-service.js
        === Nội dung base-service.js ===
// Abstract base class for all services
import { formatResponse } from '../utils/response-formatter.js';

export default class BaseService {
    constructor() {
        this.initialized = false;
        this.cache = new Map();
    }

    async init() {
        if (!this.initialized) {
            await this.initializeService();
            this.initialized = true;
        }
    }

    async initializeService() {
        // Override in subclasses
    }

    formatResponse(success, message, data = null, errorCode = null) {
        return formatResponse(success, message, data, errorCode);
    }

    validateRequired(data, fields) {
        const errors = [];
        fields.forEach(field => {
            if (!data[field]) {
                errors.push(`${field} là bắt buộc`);
            }
        });
        return errors;
    }

    generateId(prefix = '') {
        return `${prefix}${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
    }

    async handleError(error, operation) {
        console.error(`Error in ${operation}:`, error);
        throw error;
    }
}

        === Kết thúc base-service.js ===
      📄 cache-service.js
        === Nội dung cache-service.js ===
// server/services/core/cache-service.js
class CacheService {
    constructor() {
        this.cache = new Map();
        this.ttl = new Map();
    }

    set(key, value, ttlMs = 300000) { // 5 minutes default
        this.cache.set(key, value);
        this.ttl.set(key, Date.now() + ttlMs);
    }

    get(key) {
        const expiry = this.ttl.get(key);
        if (expiry && Date.now() > expiry) {
            this.delete(key);
            return null;
        }
        return this.cache.get(key);
    }

    delete(key) {
        this.cache.delete(key);
        this.ttl.delete(key);
    }

    clear() {
        this.cache.clear();
        this.ttl.clear();
    }

    has(key) {
        const expiry = this.ttl.get(key);
        if (expiry && Date.now() > expiry) {
            this.delete(key);
            return false;
        }
        return this.cache.has(key);
    }

    size() {
        return this.cache.size;
    }

    cleanup() {
        const now = Date.now();
        for (const [key, expiry] of this.ttl.entries()) {
            if (now > expiry) {
                this.delete(key);
            }
        }
    }
}

export default new CacheService();

        === Kết thúc cache-service.js ===
      📄 index.js
        === Nội dung index.js ===
// Core services exports
export { default as BaseService } from './base-service.js';
export { default as LarkClient } from './lark-client.js';
export { default as CacheService } from './cache-service.js';

        === Kết thúc index.js ===
      📄 lark-client.js
        === Nội dung lark-client.js ===
// server/services/core/lark-client.js
import axios from 'axios';

class LarkClient {
    constructor() {
        // Không load env vars tại constructor
        this.baseURL = 'https://open.larksuite.com/open-apis';
        this.tenantAccessToken = null;
        this.tokenExpiry = null;
    }

    // Getter methods để load env vars khi cần
    get appId() {
        return process.env.LARK_APP_ID;
    }

    get appSecret() {
        return process.env.LARK_APP_SECRET;
    }

    async getTenantAccessToken() {
        
        if (!this.appId || !this.appSecret) {
            throw new Error('Lark credentials not configured properly');
        }
        
        if (this.tenantAccessToken && this.tokenExpiry > Date.now()) {
            return this.tenantAccessToken;
        }

        try {
            const payload = {
                app_id: this.appId,
                app_secret: this.appSecret
            };
            const response = await axios.post(`${this.baseURL}/auth/v3/tenant_access_token/internal`, payload);

            if (response.data.code === 0) {
                this.tenantAccessToken = response.data.tenant_access_token;
                this.tokenExpiry = Date.now() + (response.data.expire - 300) * 1000;
                return this.tenantAccessToken;
            } else {
                console.error('❌ Lark auth error:', response.data);
                throw new Error(`Lark Auth Error: ${response.data.msg}`);
            }
        } catch (error) {
            console.error('❌ Error getting tenant access token:', {
                message: error.message,
                response: error.response?.data,
                status: error.response?.status
            });
            throw error;
        }
    }

    async request(endpoint, options = {}) {
        
        const token = await this.getTenantAccessToken();
        
        const config = {
            ...options,
            headers: {
                'Authorization': `Bearer ${token}`,
   ...
        === Kết thúc lark-client.js ===
      📄 timezone-service.js
        === Nội dung timezone-service.js ===
// server/services/core/timezone-service.js

/**
 * @file TimezoneService - Service tập trung xử lý timezone cho toàn bộ ứng dụng
 * @description Chuẩn hóa việc xử lý thời gian về GMT+7 (Vietnam timezone)
 * để đảm bảo consistency và tránh code trùng lặp
 */

class TimezoneService {
    // Constants
    static VIETNAM_OFFSET_MS = 7 * 60 * 60 * 1000; // GMT+7 offset in milliseconds
    static VIETNAM_TIMEZONE = 'Asia/Ho_Chi_Minh';
    
    // =================================================================
    // CORE CONVERSION METHODS - CÁC HÀM CHUYỂN ĐỔI CƠ BẢN
    // =================================================================

    /**
     * Chuyển đổi bất kỳ giá trị thời gian nào về Date object với GMT+7
     * @param {Date|string|number} dateValue - Giá trị thời gian cần chuyển đổi
     * @returns {Date} Date object đã được điều chỉnh về GMT+7
     */
    static toVietnamTime(dateValue) {
        if (!dateValue) {
            console.warn('⚠️ TimezoneService: dateValue is null/undefined');
            return new Date();
        }

        let date;
        
        try {
            // Handle different input types
            if (dateValue instanceof Date) {
                date = new Date(dateValue);
            } else if (typeof dateValue === 'number') {
                // Assume timestamp in milliseconds
                date = new Date(dateValue);
            } else if (typeof dateValue === 'string') {
                date = new Date(dateValue);
            } else {
                console.warn('⚠️ TimezoneService: Unknown dateValue type:', typeof dateValue);
                return new Date();
            }

            // Validate date
            if (isNaN(date.getTime())) {
                console.warn('⚠️ TimezoneService: Invalid date created from:', dateValue);
                return new Date();
            }

            // Apply Vietnam timezone offset
            return new Date(date.getTime() + this.VIETNAM_OFFSET_MS);
            
        } ...
        === Kết thúc timezone-service.js ===
    📁 employees/
      📄 employee-service.js
        === Nội dung employee-service.js ===
// Employee management service
import BaseService from '../core/base-service.js';
import LarkClient from '../core/lark-client.js';
import CacheService from '../core/cache-service.js';
import WorkHistoryService from './work-history-service.js';


/**
 * @class EmployeeService
 * @description Quản lý các nghiệp vụ liên quan đến thông tin nhân viên,
 * bao gồm CRUD (tạo, đọc, cập nhật, xóa) và các chức năng tìm kiếm, kiểm tra.
 */
class EmployeeService extends BaseService {
    constructor() {
        super();
        this.tableName = 'employees';
        this.baseId = process.env.LARK_BASE_ID;
        this.tableId = process.env.LARK_EMPLOYEE_TABLE_ID;
        this.workHistoryService = new WorkHistoryService();
    }

    async initializeService() {
        // Initialize Lark Base connection
        console.log('Initializing Employee Service...');
        await this.workHistoryService.initializeService();
    }

    // =================================================================
    //  PUBLIC API METHODS - CÁC HÀM CUNG CẤP RA BÊN NGOÀI
    // =================================================================


    /**
     * Lấy toàn bộ danh sách nhân viên từ Lark, có hỗ trợ cache.
     * @returns {Promise<Array<object>>} - Mảng các đối tượng nhân viên.
     */
    async getAllEmployees() {
        try {

            const response = await LarkClient.getAllRecords(
                `/bitable/v1/apps/${this.baseId}/tables/${this.tableId}/records`
            );

            let employees = this.transformEmployeeData(response.data?.items || []);
            return employees;
        } catch (error) {
            console.error('❌ EMPLOYEE: Error fetching employees from Lark:', error.message);
            throw error;
        }
    }


    /**
     * Lấy thông tin một nhân viên bằng record_id của Lark, có hỗ trợ cache.
     * @param {string} id - Record ID của nhân viên trong Lark.
     * @returns {Promise<object|null>} - Đối tượng nhân viên hoặc null nếu không tìm thấ...
        === Kết thúc employee-service.js ===
      📄 employee-validator.js
        === Nội dung employee-validator.js ===
// Employee validation service
class EmployeeValidator {
    static validateEmployeeData(employeeData) {
        const errors = [];

        // Required fields validation
        if (!employeeData.fullName || employeeData.fullName.trim().length < 2) {
            errors.push('Họ tên phải có ít nhất 2 ký tự');
        }

        if (!employeeData.phoneNumber || !this.isValidPhoneNumber(employeeData.phoneNumber)) {
            errors.push('Số điện thoại không hợp lệ');
        }

        if (!employeeData.gender || !['Nam', 'Nữ'].includes(employeeData.gender)) {
            errors.push('Giới tính phải là Nam hoặc Nữ');
        }

        if (!employeeData.bankAccount || employeeData.bankAccount.trim().length < 6) {
            errors.push('Số tài khoản phải có ít nhất 6 ký tự');
        }

        if (!employeeData.bankName || employeeData.bankName.trim().length < 2) {
            errors.push('Tên ngân hàng là bắt buộc');
        }

        return errors;
    }

    static isValidPhoneNumber(phoneNumber) {
        const phoneRegex = /^[0-9]{10,11}$/;
        return phoneRegex.test(phoneNumber);
    }

    static validateWorkHistoryData(workHistoryData) {
        const errors = [];

        if (!Array.isArray(workHistoryData) || workHistoryData.length === 0) {
            errors.push('Phải có ít nhất một work history entry');
        }

        const requestNos = workHistoryData.map(item => item.requestNo);
        const uniqueRequestNos = [...new Set(requestNos)];
        
        if (requestNos.length !== uniqueRequestNos.length) {
            errors.push('Không được trùng lặp Request No');
        }

        workHistoryData.forEach((item, index) => {
            if (!item.requestNo || item.requestNo.trim().length === 0) {
                errors.push(`Work history entry ${index + 1}: Request No là bắt buộc`);
            }
        });

        return errors;
    }
}

export default EmployeeValidator;

        === Kết thúc employee-validator.js ===
      📄 index.js
        === Nội dung index.js ===
// Employee services exports
export { default as EmployeeService } from './employee-service.js';
export { default as WorkHistoryService } from './work-history-service.js';
export { default as EmployeeValidator } from './employee-validator.js';

        === Kết thúc index.js ===
      📄 work-history-service.js
        (File quá lớn)
    📄 index.js
      === Nội dung index.js ===
// Main services export file
export * from './core/index.js';
export * from './auth/index.js';
export * from './employee/index.js';
export * from './attendance/index.js';
export * from './recruitment/index.js';
export * from './master-data/index.js';
export * from './utils/index.js';

// Export service factory for easy access
export { default as ServiceFactory } from './utils/service-factory.js';

      === Kết thúc index.js ===
    📄 lark-service-manager.js
      === Nội dung lark-service-manager.js ===
// server/services/lark-service-manager.js
import { EmployeeService, WorkHistoryService } from './employees/index.js';
import { AttendanceService } from './attendance/index.js';
import { RecruitmentService } from './recruitment/index.js';
import { StoreService, PositionService } from './master-data/index.js';
import { AuthService, SessionService } from './auth/index.js';
import { validateLarkConfig } from '../config/lark-config.js';

class LarkServiceManager {
    constructor() {
        this.services = {};
        this.initialized = false;
    }

    async init() {
        if (this.initialized) return;

        try {
            console.log('🚀 Initializing Lark Service Manager...');
            
            // Validate configuration first
            validateLarkConfig();
            
            // Initialize all services
            this.services.employee = new EmployeeService();
            this.services.workHistory = new WorkHistoryService();
            this.services.attendance = new AttendanceService();
            this.services.recruitment = new RecruitmentService();
            this.services.store = new StoreService();
            this.services.position = new PositionService();
            this.services.auth = new AuthService();
            this.services.session = new SessionService();

            // Initialize each service
            await Promise.all([
                this.services.employee.init(),
                this.services.workHistory.init(),
                this.services.attendance.init(),
                this.services.recruitment.init(),
                this.services.store.init(),
                this.services.position.init(),
                this.services.auth.init(),
                this.services.session.init()
            ]);

            this.initialized = true;
            console.log('✅ All Lark services initialized successfully');
            
        } catch (error) {
            console.error('❌ Lark Service Manager initialization failed...
      === Kết thúc lark-service-manager.js ===
    📁 master-data/
      📄 index.js
        === Nội dung index.js ===
// Master data services exports
export { default as StoreService } from './store-service.js';
export { default as PositionService } from './position-service.js';
export { default as MasterDataValidator } from './master-data-validator.js';

        === Kết thúc index.js ===
      📄 master-data-validator.js
        === Nội dung master-data-validator.js ===
// Master data validation service
class MasterDataValidator {
    static validateStoreData(storeData) {
        const errors = [];

        // Required fields validation
        if (!storeData.storeName || storeData.storeName.trim().length < 2) {
            errors.push('Tên cửa hàng phải có ít nhất 2 ký tự');
        }

        if (!storeData.address || storeData.address.trim().length < 5) {
            errors.push('Địa chỉ phải có ít nhất 5 ký tự');
        }

        // Status validation
        if (storeData.status && !['active', 'inactive'].includes(storeData.status)) {
            errors.push('Trạng thái phải là active hoặc inactive');
        }

        return errors;
    }

    static validatePositionData(positionData) {
        const errors = [];

        // Required fields validation
        if (!positionData.positionName || positionData.positionName.trim().length < 2) {
            errors.push('Tên vị trí phải có ít nhất 2 ký tự');
        }

        // Description validation (optional but if provided must be reasonable)
        if (positionData.description && positionData.description.trim().length < 3) {
            errors.push('Mô tả phải có ít nhất 3 ký tự nếu được cung cấp');
        }

        // Status validation
        if (positionData.status && !['active', 'inactive'].includes(positionData.status)) {
            errors.push('Trạng thái phải là active hoặc inactive');
        }

        return errors;
    }

    static validateMasterDataBatch(dataArray, type) {
        const errors = [];
        const names = [];

        dataArray.forEach((item, index) => {
            // Validate individual item
            let itemErrors = [];
            if (type === 'store') {
                itemErrors = this.validateStoreData(item);
            } else if (type === 'position') {
                itemErrors = this.validatePositionData(item);
            }

            if (itemErrors.length > 0) {
                errors.push(`Item ${index + 1}: ${itemErrors.joi...
        === Kết thúc master-data-validator.js ===
      📄 position-service.js
        === Nội dung position-service.js ===
// Position management service
import BaseService from '../core/base-service.js';
import LarkClient from '../core/lark-client.js';
import CacheService from '../core/cache-service.js';

class PositionService extends BaseService {
    constructor() {
        super();
        this.baseId = process.env.LARK_BASE_ID;
        this.tableId = process.env.LARK_POSITION_TABLE_ID;
    }

    async initializeService() {
        console.log('Initializing Position Service...');
    }

    async getAllPositions() {
        const cacheKey = 'positions_all';
        let positions = CacheService.get(cacheKey);
        
        if (!positions) {
            try {
                const response = await LarkClient.get(`/bitable/v1/apps/${this.baseId}/tables/${this.tableId}/records`);
                positions = this.transformPositionData(response.data?.items || []);
                CacheService.set(cacheKey, positions, 300000); // 5 minutes
            } catch (error) {
                console.error('Error fetching positions from Lark:', error);
                positions = this.getMockPositions();
            }
        }
        
        return positions;
    }

    async addPosition(positionData) {
        try {
            const transformedData = this.transformPositionForLark(positionData);
            
            const response = await LarkClient.post(`/bitable/v1/apps/${this.baseId}/tables/${this.tableId}/records`, {
                fields: transformedData
            });

            // Clear cache
            CacheService.delete('positions_all');
            
            return this.transformPositionData([response.data])[0];
        } catch (error) {
            await this.handleError(error, 'addPosition');
            throw error;
        }
    }

    async updatePosition(id, positionData) {
        try {
            const transformedData = this.transformPositionForLark(positionData);
            
            const response = await LarkClient.put(`/bitable/v1/apps/${this.baseId}...
        === Kết thúc position-service.js ===
      📄 store-service.js
        === Nội dung store-service.js ===
// Store management service
import BaseService from '../core/base-service.js';
import LarkClient from '../core/lark-client.js';
import CacheService from '../core/cache-service.js';

class StoreService extends BaseService {
    constructor() {
        super();
        this.baseId = process.env.LARK_BASE_ID;
        this.tableId = process.env.LARK_STORE_TABLE_ID;
    }

    async initializeService() {
        console.log('Initializing Store Service...');
    }

    async getAllStores() {
        const cacheKey = 'stores_all';
        let stores = CacheService.get(cacheKey);
        
        if (!stores) {
            try {
                const response = await LarkClient.get(`/bitable/v1/apps/${this.baseId}/tables/${this.tableId}/records`);
                stores = this.transformStoreData(response.data?.items || []);
                CacheService.set(cacheKey, stores, 300000); // 5 minutes
            } catch (error) {
                console.error('Error fetching stores from Lark:', error);
                stores = this.getMockStores();
            }
        }
        
        return stores;
    }

    async addStore(storeData) {
        try {
            const transformedData = this.transformStoreForLark(storeData);
            
            const response = await LarkClient.post(`/bitable/v1/apps/${this.baseId}/tables/${this.tableId}/records`, {
                fields: transformedData
            });

            // Clear cache
            CacheService.delete('stores_all');
            
            return this.transformStoreData([response.data])[0];
        } catch (error) {
            await this.handleError(error, 'addStore');
            throw error;
        }
    }

    async updateStore(id, storeData) {
        try {
            const transformedData = this.transformStoreForLark(storeData);
            
            const response = await LarkClient.put(`/bitable/v1/apps/${this.baseId}/tables/${this.tableId}/records/${id}`, {
                fields: transformedD...
        === Kết thúc store-service.js ===
    📁 recruitment/
      📄 index.js
        === Nội dung index.js ===
// Recruitment services exports
export { default as RecruitmentService } from './recruitment-service.js';
export { default as RecruitmentValidator } from './recruitment-validator.js';

        === Kết thúc index.js ===
      📄 recruitment-service.js
        === Nội dung recruitment-service.js ===
// //hr-management-system\server\services\recruitment\recruitment-service.js

// // Recruitment service
// import BaseService from '../core/base-service.js';
// import LarkClient from '../core/lark-client.js';
// import CacheService from '../core/cache-service.js';
// import larkServiceManager from '../lark-service-manager.js';
// import { larkConfig } from '../../config/lark-config.js';

// // **HÀM TIỆN ÍCH ĐỊNH DẠNG NGÀY**
// const formatDate = (dateValue) => {
//     if (!dateValue) return null;
//     const date = new Date(dateValue);
//     if (isNaN(date.getTime())) return null;

//     const day = String(date.getDate()).padStart(2, '0');
//     const month = String(date.getMonth() + 1).padStart(2, '0');
//     const year = date.getFullYear();
//     return `${day}/${month}/${year}`;
// };

// class RecruitmentService extends BaseService {
//     constructor() {
//         super();
//         this.baseId = process.env.LARK_BASE_ID;
//         this.tableId = process.env.LARK_RECRUITMENT_TABLE_ID;
//         this.hoursSummaryTableId = process.env.LARK_HOURS_SUMMARY_TABLE_ID;
//     }

//     async initializeService() {
//         console.log('Initializing Recruitment Service...');
//     }


//     async getRecruitmentRequests(filters = {}) {
//         try {
            
//             const response = await LarkClient.getAllRecords(
//                 `/bitable/v1/apps/${this.baseId}/tables/${this.tableId}/records`
//             );

//             let requests = this.transformRecruitmentData(response.data?.items || []);

            
//             // ✅ SỬA: Filter ở application level - chỉ lấy chính xác "Approved" và "Under Review"
//             if (filters.status) {
//                 const statusArray = Array.isArray(filters.status) 
//                     ? filters.status 
//                     : filters.status.split(',').map(s => s.trim());
            
                
//                 requests = requests.filter(request => {
//                     ...
        === Kết thúc recruitment-service.js ===
      📄 recruitment-validator.js
        === Nội dung recruitment-validator.js ===
// Recruitment validation service
class RecruitmentValidator {
    static validateRecruitmentData(requestData) {
        const errors = [];

        // Required fields validation
        if (!requestData.requestNo) {
            errors.push('Request No là bắt buộc');
        }

        if (!requestData.requester) {
            errors.push('Requester là bắt buộc');
        }

        if (!requestData.department) {
            errors.push('Department là bắt buộc');
        }

        if (!requestData.quantity || requestData.quantity <= 0) {
            errors.push('Quantity phải lớn hơn 0');
        }

        if (!requestData.gender) {
            errors.push('Gender là bắt buộc');
        }

        if (!requestData.fromDate) {
            errors.push('From Date là bắt buộc');
        } else if (!this.isValidDate(requestData.fromDate)) {
            errors.push('From Date không hợp lệ');
        }

        if (!requestData.toDate) {
            errors.push('To Date là bắt buộc');
        } else if (!this.isValidDate(requestData.toDate)) {
            errors.push('To Date không hợp lệ');
        }

        // Check if toDate is after fromDate
        if (requestData.fromDate && requestData.toDate) {
            if (!this.isToDateAfterFromDate(requestData.fromDate, requestData.toDate)) {
                errors.push('To Date phải sau From Date');
            }
        }

        return errors;
    }

    static isValidDate(dateString) {
        const date = new Date(dateString);
        return date instanceof Date && !isNaN(date);
    }

    static isToDateAfterFromDate(fromDate, toDate) {
        const from = new Date(fromDate);
        const to = new Date(toDate);
        return to >= from;
    }
}

export default RecruitmentValidator;

        === Kết thúc recruitment-validator.js ===
    📁 utils/
      📄 error-handler.js
        === Nội dung error-handler.js ===
// Centralized error handling utilities
import ResponseFormatter from './response-formatter.js';

class ErrorHandler {
    static handleLarkError(error) {
        if (error.response?.data?.code) {
            const larkCode = error.response.data.code;
            const larkMessage = error.response.data.msg || 'Lark API Error';
            
            switch (larkCode) {
                case 99991663:
                    return ResponseFormatter.formatError('App access token invalid', 'LARK_AUTH_ERROR');
                case 99991664:
                    return ResponseFormatter.formatError('Tenant access token invalid', 'LARK_AUTH_ERROR');
                case 99991665:
                    return ResponseFormatter.formatError('User access token invalid', 'LARK_AUTH_ERROR');
                case 230002:
                    return ResponseFormatter.formatError('Base not found', 'LARK_BASE_NOT_FOUND');
                case 230003:
                    return ResponseFormatter.formatError('Table not found', 'LARK_TABLE_NOT_FOUND');
                case 230004:
                    return ResponseFormatter.formatError('Record not found', 'LARK_RECORD_NOT_FOUND');
                case 1254006:
                    return ResponseFormatter.formatError('Rate limit exceeded', 'LARK_RATE_LIMIT');
                default:
                    return ResponseFormatter.formatError(`Lark API Error: ${larkMessage}`, 'LARK_API_ERROR');
            }
        }
        
        return ResponseFormatter.formatError('Unknown Lark API error', 'LARK_UNKNOWN_ERROR');
    }

    static handleValidationError(errors) {
        const message = Array.isArray(errors) ? errors.join(', ') : errors;
        return ResponseFormatter.formatError(message, 'VALIDATION_ERROR');
    }

    static handleDatabaseError(error) {
        console.error('Database error:', error);
        
        if (error.code === 'ECONNREFUSED') {
            return ResponseFormatter.formatError('Database connection failed', 'D...
        === Kết thúc error-handler.js ===
      📄 index.js
        === Nội dung index.js ===
// Utilities services exports
export { default as ResponseFormatter, formatResponse } from './response-formatter.js';
export { default as ServiceFactory } from './service-factory.js';
export { default as ErrorHandler } from './error-handler.js';

// Re-export commonly used functions
export {
    getEmployeeService,
    getWorkHistoryService,
    getAttendanceService,
    getRecruitmentService,
    getStoreService,
    getPositionService,
    getAuthService,
    getSessionService
} from './service-factory.js';

        === Kết thúc index.js ===
      📄 response-formatter.js
        === Nội dung response-formatter.js ===
// Response formatting utilities
class ResponseFormatter {
    static formatResponse(success, message, data = null, errorCode = null) {
        const response = {
            success,
            message,
            timestamp: new Date().toISOString()
        };

        if (success && data) {
            response.data = data;
        }

        if (!success && errorCode) {
            response.errorCode = errorCode;
        }

        return response;
    }

    static formatSuccess(message, data = null) {
        return this.formatResponse(true, message, data);
    }

    static formatError(message, errorCode = null) {
        return this.formatResponse(false, message, null, errorCode);
    }

    static formatValidationError(errors) {
        return this.formatResponse(false, 'Validation failed', null, 'VALIDATION_ERROR');
    }

    static formatNotFound(resource) {
        return this.formatResponse(false, `${resource} not found`, null, 'NOT_FOUND');
    }

    static formatUnauthorized(message = 'Unauthorized access') {
        return this.formatResponse(false, message, null, 'UNAUTHORIZED');
    }

    static formatForbidden(message = 'Forbidden access') {
        return this.formatResponse(false, message, null, 'FORBIDDEN');
    }

    static formatServerError(message = 'Internal server error') {
        return this.formatResponse(false, message, null, 'SERVER_ERROR');
    }

    static formatPaginatedResponse(data, pagination) {
        return this.formatResponse(true, 'Success', {
            items: data,
            pagination: {
                page: pagination.page || 1,
                limit: pagination.limit || 10,
                total: pagination.total || 0,
                pages: Math.ceil((pagination.total || 0) / (pagination.limit || 10))
            }
        });
    }

    static formatBatchResponse(results) {
        const successCount = results.filter(r => r.success).length;
        const failureCount = results.length - successCount;

      ...
        === Kết thúc response-formatter.js ===
      📄 service-factory.js
        === Nội dung service-factory.js ===
// Service factory for dependency injection
import { EmployeeService } from '../employee/index.js';
import { WorkHistoryService } from '../employee/index.js';
import { AttendanceService } from '../attendance/index.js';
import { RecruitmentService } from '../recruitment/index.js';
import { StoreService, PositionService } from '../master-data/index.js';
import { AuthService, SessionService } from '../auth/index.js';

class ServiceFactory {
    constructor() {
        this.services = new Map();
        this.singletons = new Map();
    }

    // Register a service class
    register(name, ServiceClass, singleton = true) {
        this.services.set(name, { ServiceClass, singleton });
    }

    // Get service instance
    get(name) {
        const serviceConfig = this.services.get(name);
        if (!serviceConfig) {
            throw new Error(`Service '${name}' not found`);
        }

        const { ServiceClass, singleton } = serviceConfig;

        if (singleton) {
            if (!this.singletons.has(name)) {
                this.singletons.set(name, new ServiceClass());
            }
            return this.singletons.get(name);
        }

        return new ServiceClass();
    }

    // Initialize all services
    async initialize() {
        for (const [name, config] of this.services.entries()) {
            const service = this.get(name);
            if (service.init && typeof service.init === 'function') {
                await service.init();
            }
        }
    }

    // Clear all singleton instances
    clear() {
        this.singletons.clear();
    }

    // Get all service names
    getServiceNames() {
        return Array.from(this.services.keys());
    }

    // Check if service exists
    has(name) {
        return this.services.has(name);
    }
}

// Create and configure the global service factory
const serviceFactory = new ServiceFactory();

// Register core services
serviceFactory.register('employee', EmployeeService, true);
serviceFactory.r...
        === Kết thúc service-factory.js ===
📁 src/
  📄 App.jsx
    === Nội dung App.jsx ===
import React, { useEffect, useState } from 'react';
import { Routes, Route, Navigate, useLocation } from 'react-router-dom';
import { useAuth } from './hooks/useAuth';
import { useNotification } from './hooks/useNotification';

// Components - Thành phần giao diện
import Layout from './components/layout/Layout';
import Loading from './components/common/Loading';
import ProtectedRoute from './components/auth/ProtectedRoute';

// Pages - Các trang chính
import LoginPage from './pages/LoginPage';
import EmployeeManagementPage from './pages/EmployeeManagementPage';
import AttendanceLogsPage from './pages/AttendanceLogsPage';
import HRDashboardPage from './pages/HRDashboardPage';

// Global styles - Styles toàn cục
import './styles/globals.css';

const App = () => {
  const [loading, setLoading] = useState(true);
  const [initialized, setInitialized] = useState(false);
  const { user, checkAuth, loading: authLoading } = useAuth();
  const { showNotification } = useNotification();
  const location = useLocation();

  useEffect(() => {

  const initializeApp = async () => {
    try {
      console.log('🚀 Bắt đầu khởi tạo ứng dụng React...');
      
      initializeGlobalUtilities();
      
      if (isProtectedPage()) {
        console.log('🔐 Đang kiểm tra xác thực...');
        const authUser = await checkAuth();
        if (!authUser && !isPublicPage()) {
          console.log('❌ Xác thực thất bại cho trang được bảo vệ');
          // ✅ SỬA: Đặt initialized = true để redirect về login
          setInitialized(true);
          return;
        }
        console.log('✅ Hoàn thành kiểm tra xác thực');
      }
      
      setInitialized(true);
      console.log('✅ Khởi tạo ứng dụng React thành công');
      
    } catch (error) {
      console.error('❌ Lỗi khởi tạo ứng dụng:', error);
      
      // ✅ SỬA: Luôn set initialized = true để cho phép render Routes
      setInitialized(true);
      
      // Chỉ hiện notification, không chặn ứng dụng
      if (error.name === 'Typ...
    === Kết thúc App.jsx ===
  📁 components/
    📁 attendance/
      📄 AttendanceFilters.jsx
        === Nội dung AttendanceFilters.jsx ===
import React from 'react';

const AttendanceFilters = ({ 
  employees, 
  filters, 
  onFilterChange, 
  onClearFilters 
}) => {
  const handleFilterSubmit = (e) => {
    e.preventDefault();
    const formData = new FormData(e.target);
    const newFilters = {
      employeeId: formData.get('employeeId'),
      dateFrom: formData.get('dateFrom'),
      dateTo: formData.get('dateTo')
    };
    
    // Remove empty filters
    Object.keys(newFilters).forEach(key => {
      if (!newFilters[key]) delete newFilters[key];
    });
    
    onFilterChange(newFilters);
  };

  return (
    <form onSubmit={handleFilterSubmit} id="filterForm">
      <div className="row">
        <div className="col-md-4">
          <label className="form-label">Nhân viên</label>
          <select 
            className="form-select" 
            name="employeeId"
            defaultValue={filters.employeeId || ''}
          >
            <option value="">Tất cả nhân viên</option>
            {employees.map(employee => (
              <option key={employee.id} value={employee.employeeId}>
                {employee.employeeId} - {employee.fullName}
              </option>
            ))}
          </select>
        </div>
        
        <div className="col-md-3">
          <label className="form-label">Từ ngày</label>
          <input 
            type="date" 
            className="form-control" 
            name="dateFrom"
            defaultValue={filters.dateFrom || ''}
          />
        </div>
        
        <div className="col-md-3">
          <label className="form-label">Đến ngày</label>
          <input 
            type="date" 
            className="form-control" 
            name="dateTo"
            defaultValue={filters.dateTo || ''}
          />
        </div>
        
        <div className="col-md-2">
          <label className="form-label">&nbsp;</label>
          <div className="d-grid gap-2">
            <button type="submit" className="btn btn-primary">
             ...
        === Kết thúc AttendanceFilters.jsx ===
      📄 AttendanceLogs.jsx
        === Nội dung AttendanceLogs.jsx ===
// src/components/attendance/AttendanceLogs.jsx
import React, { useState } from 'react';

const AttendanceLogs = ({ logs, employees }) => {
  const [sortField, setSortField] = useState('timestamp');
  const [sortDirection, setSortDirection] = useState('desc');
  const [positionFilter, setPositionFilter] = useState('');

  // ✅ THÊM: Hàm sắp xếp logs
  const sortedLogs = [...logs].sort((a, b) => {
    let aValue = a[sortField];
    let bValue = b[sortField];
    
    if (sortField === 'timestamp') {
      aValue = new Date(aValue);
      bValue = new Date(bValue);
    }
    
    if (sortDirection === 'asc') {
      return aValue > bValue ? 1 : -1;
    } else {
      return aValue < bValue ? 1 : -1;
    }
  });

  // ✅ THÊM: Lọc theo vị trí
  const filteredLogs = positionFilter 
    ? sortedLogs.filter(log => log.position === positionFilter)
    : sortedLogs;

  // ✅ THÊM: Lấy danh sách vị trí unique
  const positions = [...new Set(logs.map(log => log.position))].filter(Boolean);

  // ✅ THÊM: Hàm lấy tên nhân viên từ mã
  const getEmployeeName = (employeeId) => {
    const employee = employees?.find(emp => emp.employeeId === employeeId);
    return employee?.fullName || employeeId;
  };

  // ✅ THÊM: Hàm format timestamp Unix
  const formatTimestamp = (timestamp) => {
    if (!timestamp) return 'N/A';
    const date = new Date(timestamp);
    return date.toLocaleString('vi-VN');
  };

  // ✅ THÊM: Hàm lấy icon cho loại chấm công
  const getTypeIcon = (type) => {
    return type === 'Checkin' 
      ? <i className="fas fa-sign-in-alt text-success"></i>
      : <i className="fas fa-sign-out-alt text-danger"></i>;
  };

  // ✅ THÊM: Hàm lấy badge color cho vị trí
  const getPositionBadgeClass = (position) => {
    switch (position) {
      case 'Nhân viên Mascot': return 'bg-info text-dark';
      case 'Nhân viên Bán hàng': return 'bg-success';
      case 'Nhân viên Thu ngân': return 'bg-primary';
      case 'Nhân viên Tiếp đón': return 'bg-secondary';
      default: re...
        === Kết thúc AttendanceLogs.jsx ===
      📄 EmployeeHours.jsx
        === Nội dung EmployeeHours.jsx ===
// import React, { useState, useEffect } from 'react';
// import { useAttendance } from '../../hooks/useAttendance';
// import { useNotification } from '../../hooks/useNotification';
// import Loading from '../common/Loading';
// import Alert from '../common/Alert';

// function EmployeeHours() {
//     const [employeeHours, setEmployeeHours] = useState([]);
//     const [filteredData, setFilteredData] = useState([]);
//     const [loading, setLoading] = useState(true);
//     const [error, setError] = useState(null);
//     const [stats, setStats] = useState(null);

//     // Bộ lọc đơn giản, không có "Lỗi" hay "Cảnh báo"
//     const [filters, setFilters] = useState({
//         employeeId: '',
//         position: '',
//         dateFrom: '',
//         dateTo: ''
//     });

//     const { getEmployeeHours } = useAttendance();
//     const { showNotification } = useNotification();

//     useEffect(() => {
//         loadEmployeeHours();
//     }, []);

//     useEffect(() => {
//         applyFilters();
//     }, [employeeHours, filters]);

//     const loadEmployeeHours = async () => {
//         try {
//             setLoading(true);
//             setError(null);
//             const response = await getEmployeeHours();

//             if (response.success) {
//                 setEmployeeHours(response.data.employeeHours || []);
//                 setStats(response.data.summary || null);
//             } else {
//                 throw new Error(response.message || 'Failed to load employee hours');
//             }
//         } catch (err) {
//             setError(err.message);
//             showNotification('Lỗi khi tải dữ liệu giờ công: ' + err.message, 'error');
//         } finally {
//             setLoading(false);
//         }
//     };

//     const applyFilters = () => {
//         let filtered = [...employeeHours];

//         // Tìm kiếm theo mã NV hoặc tên
//         if (filters.employeeId.trim()) {
//             const searchTerm = filters.em...
        === Kết thúc EmployeeHours.jsx ===
      📄 LarkAttendanceEmbed.jsx
        === Nội dung LarkAttendanceEmbed.jsx ===
import React from 'react';

// URL của Lark Base view bạn muốn nhúng
const LARK_EMBED_URL = "https://atino-vietnam.sg.larksuite.com/base/Ey3EbVD9vacAHvs8cVvlHxkKg2r?table=tblU9YY1t4TwxXLh&view=vewpWpbNQv";

const LarkAttendanceEmbed = () => {
  return (
    // Container đảm bảo iframe chiếm hết không gian được cấp và có chiều cao tối thiểu
    <div 
      className="h-full w-full" 
      style={{ minHeight: 'calc(100vh - 250px)' }} // Điều chỉnh chiều cao để phù hợp layout
    >
      <iframe
        src={LARK_EMBED_URL}
        title="Bảng Chấm Công từ Lark Base"
        style={{
          width: '100%',
          height: '100%',
          border: 'none',
          borderRadius: '8px' // Bo góc cho iframe
        }}
        loading="lazy"
        allow="fullscreen"
      >
        Trình duyệt của bạn không hỗ trợ iframe.
      </iframe>
    </div>
  );
};

export default LarkAttendanceEmbed;

        === Kết thúc LarkAttendanceEmbed.jsx ===
    📁 auth/
      📄 LoginForm.jsx
      📄 ProtectedRoute.jsx
        === Nội dung ProtectedRoute.jsx ===
import React from 'react';
import { Navigate, useLocation } from 'react-router-dom';
import { useAuth } from '../../hooks/useAuth';
import Loading from '../common/Loading';

const ProtectedRoute = ({ children, requiredRoles = [] }) => {
  const { user, loading } = useAuth();
  const location = useLocation();

  if (loading) {
    return <Loading fullScreen text="Đang kiểm tra quyền truy cập..." />;
  }

  if (!user) {
    return <Navigate to="/login" state={{ from: location }} replace />;
  }

  // Check role-based access
  if (requiredRoles.length > 0 && !requiredRoles.includes(user.role)) {
    return (
      <div className="container mt-5">
        <div className="alert alert-danger">
          <h4>Không có quyền truy cập</h4>
          <p>Bạn không có quyền truy cập vào trang này.</p>
          <button 
            className="btn btn-primary" 
            onClick={() => window.history.back()}
          >
            Quay lại
          </button>
        </div>
      </div>
    );
  }

  return children;
};

export default ProtectedRoute;

        === Kết thúc ProtectedRoute.jsx ===
    📁 common/
      📄 Alert.jsx
        === Nội dung Alert.jsx ===
import React, { useState, useEffect } from 'react';

// Hàm helper để lấy icon dựa trên loại thông báo
const getIconByType = (type) => {
    switch (type) {
        case 'success': return 'fa-check-circle';
        case 'error': return 'fa-times-circle';
        case 'warning': return 'fa-exclamation-triangle';
        case 'info': return 'fa-info-circle';
        default: return 'fa-info-circle';
    }
};

const Alert = ({ notification, onClose }) => {
    // ✅ THÊM: Guard clause để tránh lỗi destructuring khi notification = undefined
    if (!notification) {
        console.warn('Alert component received undefined notification');
        return null;
    }

    // ✅ SỬA: Thêm default values để tránh crash
    const { 
        id = 'unknown', 
        message = 'Thông báo không xác định', 
        type = 'info',
        duration 
    } = notification;

    const [isExiting, setIsExiting] = useState(false);

    useEffect(() => {
        // Tự động đóng sau một khoảng thời gian nếu có
        if (duration) {
            const timer = setTimeout(() => {
                handleClose();
            }, duration);
            return () => clearTimeout(timer);
        }
    }, [duration]); // ✅ SỬA: Sử dụng duration đã destructured

    const handleClose = () => {
        setIsExiting(true);
        // Đợi animation fade-out hoàn thành rồi mới gỡ component khỏi state
        setTimeout(() => {
            // ✅ THÊM: Kiểm tra onClose tồn tại trước khi gọi
            if (onClose) {
                onClose(id);
            }
        }, 400); // Phải khớp với thời gian transition trong CSS
    };

    return (
        <div className={`alert-toast ${type} ${isExiting ? '' : 'show'}`}>
            <i className={`fas ${getIconByType(type)} alert-toast-icon`}></i>
            <div className="alert-toast-content">
                <div className="alert-toast-message">{message}</div>
            </div>
            <button className="alert-toast-close" onClick={handleClose}>
        ...
        === Kết thúc Alert.jsx ===
      📄 Loading.jsx
        === Nội dung Loading.jsx ===
import React from 'react';

const Loading = ({ 
  size = 'medium', 
  text = 'Đang tải...', 
  overlay = false,
  fullScreen = false 
}) => {
  const getSizeClass = () => {
    switch (size) {
      case 'small': return 'spinner-border-sm';
      case 'large': return 'spinner-border spinner-border-lg';
      default: return 'spinner-border';
    }
  };

  const LoadingSpinner = () => (
    <div className="d-flex flex-column align-items-center justify-content-center p-3">
      <div className={`${getSizeClass()} text-primary`} role="status">
        <span className="visually-hidden">Loading...</span>
      </div>
      {text && (
        <div className="mt-2 text-muted small">
          {text}
        </div>
      )}
    </div>
  );

  if (fullScreen) {
    return (
      <div 
        className="position-fixed top-0 start-0 w-100 h-100 d-flex align-items-center justify-content-center"
        style={{ 
          backgroundColor: 'rgba(255, 255, 255, 0.9)', 
          zIndex: 9999 
        }}
      >
        <div className="text-center">
          <div className="spinner-border spinner-border-lg text-primary" role="status">
            <span className="visually-hidden">Loading...</span>
          </div>
          <div className="mt-3 h5 text-muted">{text}</div>
        </div>
      </div>
    );
  }

  if (overlay) {
    return (
      <div 
        className="position-absolute top-0 start-0 w-100 h-100 d-flex align-items-center justify-content-center"
        style={{ 
          backgroundColor: 'rgba(255, 255, 255, 0.8)', 
          zIndex: 1000 
        }}
      >
        <LoadingSpinner />
      </div>
    );
  }

  return <LoadingSpinner />;
};

// Loading wrapper component for conditional loading states
export const LoadingWrapper = ({ loading, children, ...loadingProps }) => {
  if (loading) {
    return <Loading {...loadingProps} />;
  }
  return children;
};

// Inline loading component for buttons
export const ButtonLoading = ({ loading, children, disabled,...
        === Kết thúc Loading.jsx ===
      📄 Modal.jsx
        === Nội dung Modal.jsx ===
// src/components/common/Modal.jsx
import React from 'react';

const Modal = ({ isOpen, onClose, title, children, size = 'md' }) => {
  if (!isOpen) return null;

  const handleBackdropClick = (e) => {
    if (e.target === e.currentTarget) {
      onClose();
    }
  };

  return (
    <div 
      className="modal fade show d-block" 
      style={{ backgroundColor: 'rgba(0,0,0,0.5)' }}
      onClick={handleBackdropClick}
    >
      <div className={`modal-dialog modal-${size} modal-dialog-centered`}>
        <div className="modal-content">
          <div className="modal-header">
            <h5 className="modal-title">{title}</h5>
            <button 
              type="button" 
              className="btn-close" 
              onClick={onClose}
            ></button>
          </div>
          <div className="modal-body">
            {children}
          </div>
        </div>
      </div>
    </div>
  );
};

export default Modal;

        === Kết thúc Modal.jsx ===
      📄 Table.jsx
    📁 dashboard/
      📄 Dashboard.jsx
        === Nội dung Dashboard.jsx ===
// // src/components/dashboard/Dashboard.jsx
// import React, { useState, useEffect } from 'react';
// import { useAuth } from '../../hooks/useAuth';
// import { ApiClient } from '../../services/api';
// import Loading from '../common/Loading';
// import { useNotification } from '../../hooks/useNotification';

// const Dashboard = () => {
//   const [stats, setStats] = useState({});
//   const [loading, setLoading] = useState(true);
//   const { user } = useAuth();
//   const { showNotification } = useNotification();

//   useEffect(() => {
//     loadStats();
    
//     // Auto refresh every 5 minutes
//     const interval = setInterval(loadStats, 5 * 60 * 1000);
//     return () => clearInterval(interval);
//   }, []);

//   const loadStats = async () => {
//     try {
//       console.log('🔍 Dashboard: Loading stats...');
//       const response = await ApiClient.get('/api/employees/stats');
      
//       console.log('📨 Dashboard: Raw response:', response);
//       console.log('✅ Dashboard: Response success:', response.success);
//       console.log('📊 Dashboard: Response data:', response.data);
      
//       // ✅ FIX: Sử dụng response.data thay vì response
//       if (response.success && response.data) {
//         console.log('✅ Dashboard: Setting stats to:', response.data);
//         setStats(response.data);
//       } else {
//         console.warn('⚠️ Dashboard: API returned success: false');
//         showNotification('Không thể tải dữ liệu thống kê', 'warning');
//       }
      
//     } catch (error) {
//       console.error('❌ Dashboard: Error loading stats:', error);
//       showNotification('Lỗi khi tải thống kê dashboard', 'error');
//     } finally {
//       setLoading(false);
//     }
//   };

//   const handleRefresh = async () => {
//     setLoading(true);
//     await loadStats();
//     showNotification('Đã cập nhật dữ liệu dashboard', 'success');
//   };

//   // ✅ DEBUG: Log current stats state
//   console.log('🎯 Dashboard render ...
        === Kết thúc Dashboard.jsx ===
      📄 HRDashboard.jsx
      📄 StatsCard.jsx
    📁 employee/
      📄 AddWorkHistoryModal.jsx
        === Nội dung AddWorkHistoryModal.jsx ===
import React, { useState } from 'react';

// Import các thành phần và services cần thiết
import Modal from '../common/Modal.jsx';
import RecruitmentModal from './RecruitmentModal.jsx';
import { ButtonLoading } from '../common/Loading.jsx';
import { useNotification } from '../../hooks/useNotification';
import { addWorkHistory } from '../../services/employee.js';

/**
 * Modal để thêm một bản ghi Lịch sử công việc cho nhân viên.
 * Nó cho phép người dùng chọn một "Đề xuất tuyển dụng" đã có sẵn.
 * Logic được điều chỉnh để luôn làm việc với một mảng các đề xuất,
 * nhưng RecruitmentModal được cấu hình để chỉ cho phép chọn một.
 *
 * @param {object} props
 * @param {boolean} props.isOpen - Cờ để điều khiển việc hiển thị modal.
 * @param {Function} props.onClose - Hàm để đóng modal.
 * @param {object} props.employee - Đối tượng nhân viên đang được thêm lịch sử.
 * @param {Function} props.onSave - Hàm callback được gọi sau khi lưu thành công.
 */
const AddWorkHistoryModal = ({ isOpen, onClose, employee, onSave }) => {
  // Nếu không có thông tin nhân viên, không render gì cả để tránh lỗi.
  if (!employee) return null;

  // State quản lý đề xuất dưới dạng MẢNG để đồng nhất logic.
  const [selectedRecruitments, setSelectedRecruitments] = useState([]);
  const [isRecruitmentModalOpen, setIsRecruitmentModalOpen] = useState(false);
  const [isLoading, setIsLoading] = useState(false);
  
  // ✅ THÊM: State cho các trường mới
  const [workHistoryData, setWorkHistoryData] = useState({
    fromDate: '',
    toDate: '',
    hourlyRate: ''
  });
  
  const { showNotification } = useNotification();

  /**
   * Xử lý khi người dùng chọn một đề xuất từ RecruitmentModal.
   * Dù RecruitmentModal có singleSelect=true, nó vẫn được thiết kế để trả về một mảng.
   * @param {Array<object>} recruitmentObject - Mảng chứa đề xuất đã chọn.
   */
  const handleRecruitmentSelect = (recruitmentObject) => {
    // Luôn nhận về một mảng, kể cả khi chỉ có một lựa chọn.
    setSelectedRecruitments(rec...
        === Kết thúc AddWorkHistoryModal.jsx ===
      📄 EmployeeAddForm.jsx
        === Nội dung EmployeeAddForm.jsx ===
// src/components/employee/EmployeeAddForm.jsx

import React, { useState, useRef, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { useNotification } from '../../hooks/useNotification';
import RecruitmentModal from './RecruitmentModal';

const EmployeeAddForm = ({ onSave, isLoading: externalLoading }) => {
  const navigate = useNavigate();
  const { showNotification } = useNotification();
  const fullNameInputRef = useRef(null);

  const [isSubmitting, setIsSubmitting] = useState(false);
  const [selectedRecruitment, setSelectedRecruitment] = useState(null);
  const [isModalOpen, setIsModalOpen] = useState(false);

  const initialFormData = {
    fullName: '',
    phoneNumber: '',
    gender: 'Nam',
    bankAccount: '',
    bankName: '',
  };

  const initialWorkHistoryData = {
    fromDate: '',
    toDate: '',
    hourlyRate: ''
  };

  const [formData, setFormData] = useState(initialFormData);
  const [workHistoryData, setWorkHistoryData] = useState(initialWorkHistoryData);

  const handleChange = e => {
    const { name, value } = e.target;
    setFormData(prev => ({ ...prev, [name]: value }));
  };

  const handleWorkHistoryChange = e => {
    const { name, value } = e.target;
    setWorkHistoryData(prev => ({ ...prev, [name]: value }));
  };

  const resetForm = () => {
    setFormData(initialFormData);
    setWorkHistoryData(initialWorkHistoryData);
    setSelectedRecruitment(null);
    fullNameInputRef.current?.focus();
  };

  const handleSelectRecruitment = request => {
    setSelectedRecruitment(request);
    setIsModalOpen(false);
  };

  const handleRemoveRecruitment = () => {
    setSelectedRecruitment(null);
    setWorkHistoryData(initialWorkHistoryData);
  };

  const validateWorkHistory = () => {
    const errors = [];
    if (!workHistoryData.fromDate) errors.push('Từ ngày là bắt buộc');
    if (!workHistoryData.toDate) errors.push('Đến ngày là bắt buộc');

    if (workHistoryData.fromDate && workHistoryData.toDate) ...
        === Kết thúc EmployeeAddForm.jsx ===
      📄 EmployeeEditModal.jsx
        === Nội dung EmployeeEditModal.jsx ===
import React, { useState, useEffect } from 'react';
import { useNotification } from '../../hooks/useNotification';
import Modal from '../common/Modal.jsx';
import { ButtonLoading } from '../common/Loading.jsx';

const EmployeeEditModal = ({ isOpen, onClose, onSave, employee }) => {
    const [formData, setFormData] = useState({
    fullName: '',
    phoneNumber: '',
    gender: 'Nam',
    bankAccount: '',
    bankName: '',
    status: 'active',
  });
  //const [formData, setFormData] = useState({});
  const [loading, setLoading] = useState(false);
  const { showNotification } = useNotification();

  // Khi modal mở hoặc nhân viên được chọn thay đổi, cập nhật state của form
  useEffect(() => {
    if (employee) {
      setFormData({
        fullName: employee.fullName || '',
        phoneNumber: employee.phoneNumber || '',
        gender: employee.gender || 'Nam',
        bankAccount: employee.bankAccount || '',
        bankName: employee.bankName || '',
        status: employee.status || 'active',
      });
    }
  }, [employee]);

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData((prev) => ({ ...prev, [name]: value }));
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    try {
      // Gọi hàm onSave được truyền từ EmployeeManagementPage. Hàm này sẽ gọi hook useEmployees để thực sự cập nhật dữ liệu.
      const success = await onSave(formData);
      // if (success) {
      //   // Component cha (EmployeeManagementPage) sẽ tự xử lý việc đóng modal.
      // } else {
      //   // Nếu onSave trả về false, hiển thị thông báo lỗi chung.
      //   showNotification('Cập nhật thất bại. Vui lòng thử lại.', 'error');
      // }
    } catch (error) {
      console.error('Lỗi khi submit form sửa nhân viên:', error);
      showNotification(error.message || 'Lỗi hệ thống khi cập nhật.', 'error');
    } finally {
      setLoading(false);
    }
  };

  if (!isOpen || !employee) return null;

  return ...
        === Kết thúc EmployeeEditModal.jsx ===
      📄 EmployeeForm.jsx
        === Nội dung EmployeeForm.jsx ===
// src/components/employee/EmployeeForm.jsx

import React, { useState, useEffect } from 'react';

const EmployeeForm = ({ initialData, onSubmit, onCancel, isLoading }) => {
  const [formData, setFormData] = useState(initialData);

  useEffect(() => {
    setFormData(initialData);
  }, [initialData]);

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData((prev) => ({ ...prev, [name]: value }));
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    onSubmit(formData);
  };

  return (
    <form onSubmit={handleSubmit}>
      <div className="row">
        <div className="col-md-6 mb-3">
          <label className="form-label">Họ tên</label>
          <input name="fullName" value={formData.fullName} onChange={handleChange} className="form-control" required />
        </div>
        <div className="col-md-6 mb-3">
          <label className="form-label">Số điện thoại</label>
          <input name="phoneNumber" value={formData.phoneNumber} onChange={handleChange} className="form-control" required />
        </div>
      </div>
      <div className="row">
        <div className="col-md-6 mb-3">
          <label className="form-label">Giới tính</label>
          <select name="gender" value={formData.gender} onChange={handleChange} className="form-select">
            <option value="Nam">Nam</option>
            <option value="Nữ">Nữ</option>
          </select>
        </div>
        <div className="col-md-6 mb-3">
          <label className="form-label">Lương/giờ</label>
          <input type="number" name="hourlyRate" value={formData.hourlyRate} onChange={handleChange} className="form-control" required />
        </div>
      </div>
      <div className="row">
        <div className="col-md-6 mb-3">
          <label className="form-label">Số tài khoản</label>
          <input name="bankAccount" value={formData.bankAccount} onChange={handleChange} className="form-control" />
        </div>
        <div className="col-md-6 mb-3">...
        === Kết thúc EmployeeForm.jsx ===
      📄 EmployeeList.jsx
        === Nội dung EmployeeList.jsx ===
import React from 'react';
import EmployeeTable from './EmployeeTable';

const EmployeeList = ({ 
  employees, 
  onEdit, 
  onDelete, 
  onAddWorkHistory, 
  onManageWorkHistory // ✅ THAY ĐỔI: Đổi tên từ onViewWorkHistory thành onManageWorkHistory
}) => {
  return (
    <div className="employee-list">
      <div className="mb-3">
        <small className="text-muted">
          Hiển thị {employees.length} kết quả
        </small>
      </div>
      <EmployeeTable
        employees={employees}
        onEdit={onEdit}
        onDelete={onDelete}
        onAddWorkHistory={onAddWorkHistory}
        onManageWorkHistory={onManageWorkHistory} // ✅ THAY ĐỔI: Truyền prop mới xuống EmployeeTable
      />
    </div>
  );
};

export default EmployeeList;

        === Kết thúc EmployeeList.jsx ===
      📄 EmployeeTable.jsx
        === Nội dung EmployeeTable.jsx ===
import React from 'react';

const EmployeeTable = ({ 
  employees, 
  onEdit, 
  onDelete, 
  onAddWorkHistory, 
  onManageWorkHistory
}) => {

  // ✅ Giữ lại phần hiển thị thông báo thân thiện khi không có dữ liệu từ code của bạn.
  if (!employees || employees.length === 0) {
    return (
      <div className="text-center py-5">
        <p className="text-muted">Không có dữ liệu nhân viên để hiển thị.</p>
        <p className="text-muted small">Hãy thử thay đổi bộ lọc hoặc thêm nhân viên mới.</p>
      </div>
    );
  }

  return (
    <div className="table-responsive">
      <table className="table table-hover table-striped align-middle">
        <thead className="table-dark">
          <tr>
            <th>Mã NV</th>
            <th>Họ tên</th>
            <th>Số ĐT</th>
            <th>Giới tính</th>
            <th>Tài khoản</th>
            <th>Ngân hàng</th>
            <th>Trạng thái</th>
            <th className="text-center" style={{ minWidth: '180px' }}>Thao tác</th> {/* ✅ TĂNG chiều rộng cho thêm nút */}
          </tr>
        </thead>
        <tbody>
          {employees.map((employee) => (
            <tr key={employee.id}>
              <td>{employee.employeeId || 'N/A'}</td>
              <td>{employee.fullName || 'N/A'}</td>
              <td>{employee.phoneNumber || 'N/A'}</td>
              <td>{employee.gender || 'N/A'}</td>
              <td>{employee.bankAccount || 'N/A'}</td>
              <td>{employee.bankName || 'N/A'}</td>
              <td>
                <span className={`badge ${employee.status === 'active' ? 'bg-success' : 'bg-secondary'}`}>
                  {employee.status === 'active' ? 'Hoạt động' : 'Ngưng'}
                </span>
              </td>
              <td className="text-center">
                <div className="btn-group" role="group">
                  {/* ✅ GIỮ LẠI: Nút Thêm Work History */}
                  {onAddWorkHistory && (
                    <button
                      className="btn btn-sm btn-succe...
        === Kết thúc EmployeeTable.jsx ===
      📄 RecruitmentModal.jsx
        === Nội dung RecruitmentModal.jsx ===
import React, { useState, useEffect } from 'react';
import { getApprovedRecruitmentRequests } from '../../services/employee.js';
import { useNotification } from '../../hooks/useNotification';
import Loading from '../common/Loading';

const RecruitmentModal = ({ isOpen, onClose, onRecruitmentSelected, selectedRecruitment = null }) => {
  const [recruitmentRequests, setRecruitmentRequests] = useState([]);
  const [loading, setLoading] = useState(false);
  const [selectedItem, setSelectedItem] = useState(null);
  const [searchTerm, setSearchTerm] = useState('');
  const { showNotification } = useNotification();

  useEffect(() => {
    if (isOpen) {
      loadRecruitmentRequests();
      setSelectedItem(selectedRecruitment);
    }
  }, [isOpen, selectedRecruitment]);

  const loadRecruitmentRequests = async () => {
    try {
      setLoading(true);
      const data = await getApprovedRecruitmentRequests();
      setRecruitmentRequests(data || []);
    } catch (err) {
      showNotification('Lỗi khi tải dữ liệu tuyển dụng.', 'warning');
      setRecruitmentRequests(getMockData());
    } finally {
      setLoading(false);
    }
  };

  const getMockData = () => [
    {
      id: '1',
      requestNo: '202507140017',
      requester: '236LH.Nguyễn Huy Thành',
      status: 'Đang tuyển dụng',
      department: '116 Cầu Giấy',
      quantity: '2',
      gender: 'Nam/Nữ',
      fromDate: '2025-07-14',
      toDate: '2025-08-14',
      position: 'Nhân viên bán hàng'
    },
    {
      id: '2',
      requestNo: '202507140018',
      requester: '225VVN.Nguyễn Trọng Hoàng An',
      status: 'Đang tuyển dụng',
      department: 'Trâm Trỗi',
      quantity: '1',
      gender: 'Nữ',
      fromDate: '2025-07-14',
      toDate: '2025-08-14',
      position: 'Thu ngân'
    }
  ];

  const filteredData = recruitmentRequests.filter(item =>
    item.requestNo?.toLowerCase().includes(searchTerm.toLowerCase()) ||
    item.department?.toLowerCase().includes(searchTerm.toLowerCase()) ||
    ...
        === Kết thúc RecruitmentModal.jsx ===
      📄 WorkHistoryModal.jsx
        === Nội dung WorkHistoryModal.jsx ===
import React, { useState, useEffect } from 'react';
import { getWorkHistory, addWorkHistory, updateWorkHistory, deleteWorkHistory } from '../../services/employee.js';
import { useNotification } from '../../hooks/useNotification';
import Modal from '../common/Modal.jsx';
import Loading from '../common/Loading.jsx';
import RecruitmentModal from './RecruitmentModal.jsx';
import { ButtonLoading } from '../common/Loading.jsx';

const WorkHistoryModal = ({ isOpen, onClose, employeeId, employeeName, workHistory,onDataChanged  }) => {
  // ===== STATE MANAGEMENT =====
  const [workHistoryData, setWorkHistoryData] = useState([]);
  const [loading, setLoading] = useState(false);
  const [mode, setMode] = useState('view'); // 'view' | 'add' | 'edit'
  const [selectedWorkHistory, setSelectedWorkHistory] = useState(null);
  const [isRecruitmentModalOpen, setIsRecruitmentModalOpen] = useState(false);
  const [selectedRecruitment, setSelectedRecruitment] = useState(null);
  const [saving, setSaving] = useState(false);
  
  // Form data cho add/edit
  const [formData, setFormData] = useState({
    fromDate: '',
    toDate: '',
    hourlyRate: ''
  });

  const { showNotification } = useNotification();

  // ===== EFFECTS =====
  useEffect(() => {
    if (isOpen && employeeId && !workHistory) {
      fetchWorkHistory();
    } else if (workHistory) {
      setWorkHistoryData(workHistory);
    }
    // Reset về view mode khi mở modal
    setMode('view');
    resetForm();
  }, [isOpen, employeeId, workHistory]);

  // ===== DATA FETCHING =====
  const fetchWorkHistory = async () => {
    setLoading(true);
    try {
      const response = await getWorkHistory(employeeId);
      setWorkHistoryData(response || []);
    } catch (error) {
      console.error('Lỗi khi tải lịch sử công việc:', error);
      showNotification(error.message || 'Lỗi kết nối đến server', 'error');
    } finally {
      setLoading(false);
    }
  };

  // ===== FORM HANDLING =====
  const resetForm = () => {
    se...
        === Kết thúc WorkHistoryModal.jsx ===
    📁 layout/
      📄 Layout.jsx
        === Nội dung Layout.jsx ===
import React, { useEffect } from 'react';
import { Outlet, useLocation } from 'react-router-dom';
import { useAuth } from '../../hooks/useAuth';
import ResponsiveNavigation from './ResponsiveNavigation';

const Layout = () => {
  const { user } = useAuth();
  const location = useLocation();

  useEffect(() => {
    // Initialize tooltips when location changes
    if (typeof window !== 'undefined' && window.bootstrap) {
      const tooltipTriggerList = [].slice.call(
        document.querySelectorAll('[data-bs-toggle="tooltip"]')
      );
      tooltipTriggerList.map(tooltipTriggerEl => {
        return new window.bootstrap.Tooltip(tooltipTriggerEl);
      });
    }
  }, [location]);

  if (!user) {
    return (
      <div className="d-flex justify-content-center align-items-center min-vh-100">
        <div className="spinner-border" role="status">
          <span className="visually-hidden">Loading...</span>
        </div>
      </div>
    );
  }

  return (
    <div className="d-flex">
      <ResponsiveNavigation />
      
      {/* Main content */}
      <div className="flex-grow-1">
        <main className="container-fluid py-4">
          <Outlet />
        </main>
      </div>

      {/* ✅ BƯỚC 2: Xóa bỏ Alert Container khỏi đây */}
      {/* Div đã được di chuyển ra App.jsx */}
    </div>
  );
};

export default Layout;

        === Kết thúc Layout.jsx ===
      📄 ResponsiveNavigation.jsx
        === Nội dung ResponsiveNavigation.jsx ===
import React, { useState, useEffect } from 'react';
import { useLocation, Link } from 'react-router-dom'; // ✅ THÊM Link
import { useAuth } from '../../hooks/useAuth';
import { useNotification } from '../../hooks/useNotification';

const ResponsiveNavigation = () => {
  const [isMobile, setIsMobile] = useState(false);
  const [sidebarOpen, setSidebarOpen] = useState(false);
  const [dropdownOpen, setDropdownOpen] = useState(false);
  
  const { user, logout } = useAuth();
  const { showNotification } = useNotification();
  const location = useLocation();

  // Detect mobile screen
  useEffect(() => {
    const checkScreenSize = () => {
      setIsMobile(window.innerWidth < 768);
    };
    
    checkScreenSize();
    window.addEventListener('resize', checkScreenSize);
    return () => window.removeEventListener('resize', checkScreenSize);
  }, []);

  // ✅ SỬA: Menu items configuration - THÊM 'sales' vào attendance-logs
  const menuItems = [
    {
      path: '/employee-management',
      icon: 'fas fa-users-cog',
      label: 'Quản lý nhân viên',
      roles: ['admin', 'hr']
    },
    {
      path: '/hr-dashboard',
      icon: 'fas fa-chart-bar',
      label: 'HR Dashboard',
      roles: ['admin', 'hr']
    },
    {
      path: '/attendance-logs',
      icon: 'fas fa-clock',
      label: 'Bản ghi chấm công',
      roles: ['admin', 'hr', 'sales', 'sales_manager', 'finance_manager', 'director'] // ✅ THÊM 'sales'
    }
  ];

  const filteredMenuItems = menuItems.filter(item => 
    item.roles.includes(user?.role)
  );

  const isActiveRoute = (path) => {
    return location.pathname === path || location.pathname.startsWith(path + '/');
  };

  const handleLogout = async () => {
    try {
      await logout();
      showNotification('Đăng xuất thành công!', 'success');
    } catch (error) {
      console.error('Logout error:', error);
      showNotification('Lỗi khi đăng xuất', 'error');
    }
  };

  // Desktop Navigation (Always visible sidebar)
  const DesktopNavig...
        === Kết thúc ResponsiveNavigation.jsx ===
    📁 masterdata/
      📄 PositionManager.jsx
        === Nội dung PositionManager.jsx ===
import React, { useState, useEffect } from 'react';
import { ApiClient } from '../../services/api';
import { useNotification } from '../../hooks/useNotification';
import Loading from '../common/Loading';

const PositionManager = () => {
  const [positions, setPositions] = useState([]);
  const [loading, setLoading] = useState(true);
  const [formData, setFormData] = useState({
    positionName: '',
    description: ''
  });
  const [editingPosition, setEditingPosition] = useState(null);
  const { showNotification } = useNotification();

  useEffect(() => {
    loadPositions();
  }, []);

  const loadPositions = async () => {
    try {
      setLoading(true);
      const data = await ApiClient.get('/api/employees/positions');
      setPositions(data);
    } catch (error) {
      console.error('Error loading positions:', error);
      showNotification('Lỗi khi tải danh sách vị trí', 'error');
    } finally {
      setLoading(false);
    }
  };

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    
    if (!formData.positionName.trim()) {
      showNotification('Vui lòng nhập tên vị trí!', 'error');
      return;
    }

    try {
      if (editingPosition) {
        await ApiClient.put(`/api/employees/positions/${editingPosition.id}`, formData);
        showNotification('Cập nhật vị trí thành công', 'success');
      } else {
        await ApiClient.post('/api/employees/positions', formData);
        showNotification('Thêm vị trí thành công', 'success');
      }
      
      setFormData({ positionName: '', description: '' });
      setEditingPosition(null);
      await loadPositions();
    } catch (error) {
      console.error('Error saving position:', error);
      showNotification('Lỗi khi lưu vị trí', 'error');
    }
  };

  const handleEdit = (position) => {
    setEditingPosition(position);
    setForm...
        === Kết thúc PositionManager.jsx ===
      📄 StoreManager.jsx
        === Nội dung StoreManager.jsx ===
import React, { useState, useEffect } from 'react';
import { ApiClient } from '../../services/api';
import { useNotification } from '../../hooks/useNotification';
import Loading from '../common/Loading';

const StoreManager = () => {
  const [stores, setStores] = useState([]);
  const [loading, setLoading] = useState(true);
  const [formData, setFormData] = useState({
    storeName: '',
    address: ''
  });
  const [editingStore, setEditingStore] = useState(null);
  const { showNotification } = useNotification();

  useEffect(() => {
    loadStores();
  }, []);

  const loadStores = async () => {
    try {
      setLoading(true);
      const data = await ApiClient.get('/api/employees/stores');
      setStores(data);
    } catch (error) {
      console.error('Error loading stores:', error);
      showNotification('Lỗi khi tải danh sách cửa hàng', 'error');
    } finally {
      setLoading(false);
    }
  };

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    
    if (!formData.storeName.trim() || !formData.address.trim()) {
      showNotification('Vui lòng điền đầy đủ thông tin!', 'error');
      return;
    }

    try {
      if (editingStore) {
        await ApiClient.put(`/api/employees/stores/${editingStore.id}`, formData);
        showNotification('Cập nhật cửa hàng thành công', 'success');
      } else {
        await ApiClient.post('/api/employees/stores', formData);
        showNotification('Thêm cửa hàng thành công', 'success');
      }
      
      setFormData({ storeName: '', address: '' });
      setEditingStore(null);
      await loadStores();
    } catch (error) {
      console.error('Error saving store:', error);
      showNotification('Lỗi khi lưu cửa hàng', 'error');
    }
  };

  const handleEdit = (store) => {
    setEditingStore(store);
    setFormData({
      storeName: store.store...
        === Kết thúc StoreManager.jsx ===
  📁 contexts/
    📄 AppContext.jsx
    📄 AuthContext.jsx
      === Nội dung AuthContext.jsx ===
import React, { createContext, useContext, useState, useEffect } from 'react';
import { ApiClient } from '../services/api.js';

const AuthContext = createContext();

export const AuthProvider = ({ children }) => {
  const [user, setUser] = useState(null);
  const [loading, setLoading] = useState(true);
  const [initialized, setInitialized] = useState(false);

  useEffect(() => {
    initializeAuth();
  }, []);

  const initializeAuth = async () => {
    try {
      setLoading(true);
      // ✅ SỬA: Thay thế checkAuth() bằng việc gọi trực tiếp getProfile từ ApiClient
      const response = await ApiClient.get('/api/auth/profile');
      if (response.success && response.data.user) {
        setUser(response.data.user);
      } else {
        setUser(null);
      }
    } catch (error) {
      console.warn('Auth initialization: Not logged in.');
      setUser(null);
    } finally {
      setInitialized(true);
      setLoading(false);
    }
  };

  // Hàm checkAuth cũ có thể xóa hoặc giữ lại nếu cần
  const checkAuth = async () => {
    try {
      const response = await ApiClient.get('/api/auth/profile');
      return response.success ? response.data.user : null;
    } catch (error) {
      return null;
    }
  };

  const login = async (credentials) => {
    try {
      setLoading(true);
      const response = await ApiClient.post('/api/auth/login', credentials);
      
      // ✅ SỬA LOGIC KIỂM TRA TẠI ĐÂY
      // Kiểm tra `response.data.user` thay vì `response.user`
      if (response.success && response.data && response.data.user) {
        setUser(response.data.user);
        return response.data; // Trả về `response.data` để LoginPage có thể sử dụng
      } else {
        // Ném lỗi với thông điệp từ server nếu có
        throw new Error(response.message || 'Login failed: Invalid response structure');
      }
    } catch (error) {
      console.error('Login error:', error);
      // Đảm bảo ném lại lỗi để component gọi có thể bắt được
      throw error;
    } fin...
      === Kết thúc AuthContext.jsx ===
    📄 NotificationContext.jsx
      === Nội dung NotificationContext.jsx ===
import React, { createContext, useState, useCallback, useContext } from 'react';
import ReactDOM from 'react-dom';
import Alert from '../components/common/Alert';
import '../styles/notifications.css';

// FIX: Thêm "export" vào đây. Đây là thay đổi quan trọng nhất.
export const NotificationContext = createContext(null);

export const NotificationProvider = ({ children }) => {
    const [notifications, setNotifications] = useState([]);

    const showNotification = useCallback((message, type = 'info', duration = 5000) => {
        const newNotification = {
            id: Date.now() + Math.random(),
            message,
            type,
            duration,
        };
        // Thêm thông báo mới vào đầu danh sách để hiện trên cùng
        setNotifications(prev => [newNotification, ...prev]);
    }, []);

    const removeNotification = useCallback((id) => {
        setNotifications(prev => prev.filter(n => n.id !== id));
    }, []);

    // Giá trị mà Context sẽ cung cấp cho các component con
    const value = {
        showNotification,
    };
    
    // Logic render thông báo qua Portal
    const alertContainer = document.getElementById('alert-container');
    if (!alertContainer) {
        console.error('LỖI NGHIÊM TRỌNG: Không tìm thấy thẻ <div id="alert-container"> trong DOM. Thông báo sẽ không hiển thị.');
        // Vẫn render children để ứng dụng không bị sập
        return (
             <NotificationContext.Provider value={value}>
                {children}
            </NotificationContext.Provider>
        );
    }

    return (
        <NotificationContext.Provider value={value}>
            {children}
            {/* Render các Alert vào portal */}
            {ReactDOM.createPortal(
                <div className="notification-container">
                    {notifications.map((notification) => (
                        <Alert
                            key={notification.id}
                            notification={notification}
                 ...
      === Kết thúc NotificationContext.jsx ===
  📁 hooks/
    📄 useApi.js
      === Nội dung useApi.js ===
import { useState, useEffect } from 'react';
import { ApiClient } from '../services/api.js';

export const useApi = (url, options = {}) => {
  const [data, setData] = useState(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);

  useEffect(() => {
    if (!url) return;
    
    const fetchData = async () => {
      try {
        setLoading(true);
        setError(null);
        
        const response = await ApiClient.get(url, options);
        
        if (response.success && response.data) {
          setData(response.data);
        } else {
          setData(response.data || []);
        }
      } catch (err) {
        console.error('useApi error:', err);
        setError(err);
        setData([]);
      } finally {
        setLoading(false);
      }
    };

    fetchData();
  }, [url]);

  return { data, loading, error };
};

      === Kết thúc useApi.js ===
    📄 useAttendance.js
      === Nội dung useAttendance.js ===
// src/hooks/useAttendance.js
import { useState, useCallback } from 'react';
import { useNotification } from './useNotification';
import api from '../services/api';

export function useAttendance() {
    const [loading, setLoading] = useState(false);
    const [error, setError] = useState(null);
    const { showNotification } = useNotification();

    // ✅ CẬP NHẬT: Lấy logs chấm công với filters nâng cao
    const getAttendanceLogs = useCallback(async (filters = {}) => {
        try {
            setLoading(true);
            setError(null);
            
            console.log('🔄 useAttendance: Getting attendance logs with filters:', filters);
            
            const response = await api.get('/attendance/logs', {
                params: filters
            });
            
            console.log('✅ useAttendance: Attendance logs loaded:', response.data.data?.length || 0, 'records');
            
            return {
                success: true,
                data: response.data.data || [],
                message: response.data.message
            };
            
        } catch (error) {
            console.error('❌ useAttendance: Error getting attendance logs:', error);
            const errorMessage = error.response?.data?.message || 'Lỗi khi tải logs chấm công';
            setError(errorMessage);
            
            return {
                success: false,
                data: [],
                message: errorMessage
            };
        } finally {
            setLoading(false);
        }
    }, []);

    // ✅ CẬP NHẬT: Lấy tổng giờ công với format mới  
    const getEmployeeHours = useCallback(async () => {
        try {
            setLoading(true);
            setError(null);
            
            console.log('📊 useAttendance: Getting employee hours...');
            
            const response = await api.get('/api/attendance/employee-hours');
            
            console.log('🔍 useAttendance RAW RESPONSE:', response);
       ...
      === Kết thúc useAttendance.js ===
    📄 useAuth.js
      === Nội dung useAuth.js ===
import { useContext } from 'react';
import AuthContext from '../contexts/AuthContext';

export const useAuth = () => {
  const context = useContext(AuthContext);
  
  if (!context) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  
  return context;
};

export default useAuth;

      === Kết thúc useAuth.js ===
    📄 useEmployees.js
      === Nội dung useEmployees.js ===
// src/hooks/useEmployees.js

import { useState, useEffect, useCallback } from 'react';
import { 
  getEmployees, 
  addEmployee, 
  updateEmployee, 
  deleteEmployee 
} from '../services/employee.js';
import { useNotification } from './useNotification.js';

/**
 * Hook tùy chỉnh để quản lý dữ liệu và logic của Nhân viên.
 * @returns {object} Trạng thái và các hàm xử lý.
 */
export const useEmployees = () => {
  const [employees, setEmployees] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const { showNotification } = useNotification();

  const fetchEmployees = useCallback(async () => {
    console.log('HOOK: Bắt đầu tải danh sách nhân viên...');
    setLoading(true);
    setError(null);
    try {
      const response = await getEmployees();
      if (response.success) {
        setEmployees(response.data || []);
        console.log('HOOK: Tải danh sách nhân viên thành công.');
      } else {
        // Xử lý trường hợp server trả về success: false nhưng không phải lỗi HTTP
        throw new Error(response.message || 'Lỗi không xác định từ server.');
      }
    } catch (err) {
      // Bắt lỗi được ném từ service (do lỗi mạng, 500, hoặc success: false)
      const errorMessage = err.message || 'Không thể tải danh sách nhân viên.';
      console.error('HOOK: Lỗi khi tải danh sách nhân viên:', errorMessage);

      const userMessage = `Không thể tải dữ liệu. Lỗi: ${errorMessage}. Vui lòng liên hệ phòng CNTT để được hỗ trợ.`;
      
      setError(userMessage);
      showNotification(userMessage, 'error');
      
      // Đảm bảo danh sách nhân viên là mảng rỗng khi có lỗi để tránh crash UI
      setEmployees([]); 
    } finally {
      setLoading(false);
    }
  }, [showNotification]);

  // Tự động gọi fetchEmployees khi component được mount
  useEffect(() => {
    fetchEmployees();
  }, [fetchEmployees]);

  // Hàm thêm nhân viên mới
  const handleAddEmployee = async (employeeData) => {
    try {
     ...
      === Kết thúc useEmployees.js ===
    📄 useNotification.js
      === Nội dung useNotification.js ===
import { useContext } from 'react';
import { NotificationContext } from '../contexts/NotificationContext';

export const useNotification = () => {
  const context = useContext(NotificationContext);
  if (!context) {
    throw new Error('useNotification must be used within a NotificationProvider');
  }
  return context;
};

      === Kết thúc useNotification.js ===
  📄 main.jsx
    === Nội dung main.jsx ===
import React from 'react';
import ReactDOM from 'react-dom/client';
import { BrowserRouter } from 'react-router-dom';
import App from './App.jsx';
import { AuthProvider } from './contexts/AuthContext.jsx';
import { NotificationProvider } from './contexts/NotificationContext.jsx';

// Import Bootstrap CSS và FontAwesome
import 'bootstrap/dist/css/bootstrap.min.css';
import 'bootstrap/dist/js/bootstrap.bundle.min.js';
import '@fortawesome/fontawesome-free/css/all.min.css';
import './styles/globals.css';

// Global error handler
window.addEventListener('error', (e) => {
  console.error('Global error:', e.error);
  console.error('Error details:', {
    message: e.message,
    filename: e.filename,
    lineno: e.lineno,
    colno: e.colno
  });
});

// Global unhandled promise rejection handler
window.addEventListener('unhandledrejection', (e) => {
  console.error('Unhandled promise rejection:', e.reason);
  console.error('Promise:', e.promise);
});

// Initialize tooltips when DOM is ready
document.addEventListener('DOMContentLoaded', () => {
  if (typeof window.bootstrap !== 'undefined') {
    const tooltipTriggerList = [].slice.call(
      document.querySelectorAll('[data-bs-toggle="tooltip"]')
    );
    tooltipTriggerList.map(tooltipTriggerEl => {
      return new window.bootstrap.Tooltip(tooltipTriggerEl);
    });
  }
});

ReactDOM.createRoot(document.getElementById('root')).render(
  <React.StrictMode>
    <BrowserRouter>
      <AuthProvider>
        <NotificationProvider>
          <App />
        </NotificationProvider>
      </AuthProvider>
    </BrowserRouter>
  </React.StrictMode>
);

    === Kết thúc main.jsx ===
  📁 pages/
    📄 AttendanceLogsPage.jsx
      === Nội dung AttendanceLogsPage.jsx ===
import { formatDateTimeForCSV, formatTimeForCSV } from '../utils/dateUtils';
import React, { useState, useEffect } from 'react';
import { ApiClient } from '../services/api';
import { useNotification } from '../hooks/useNotification';
import Loading from '../components/common/Loading';


const LARK_LOGS_URL = "https://atino-vietnam.sg.larksuite.com/base/Ey3EbVD9vacAHvs8cVvlHxkKg2r?table=tblU9YY1t4TwxXLh&view=vewpWpbNQv";
const LARK_HOURS_URL = "https://atino-vietnam.sg.larksuite.com/base/Ey3EbVD9vacAHvs8cVvlHxkKg2r?table=tblV2dGhT2O7w30b&view=vewDULr7HU";

const AttendanceLogsPage = () => {
  const [logs, setLogs] = useState([]);
  const [employees, setEmployees] = useState([]);
  const [stores, setStores] = useState([]);
  const [recruitmentRequests, setRecruitmentRequests] = useState([]);
  const [recruitmentHours, setRecruitmentHours] = useState([]);
  const [loading, setLoading] = useState(true);
  const [activeTab, setActiveTab] = useState('logs');
  const [loadingRecruitment, setLoadingRecruitment] = useState(false);
  const { showNotification } = useNotification();
  
  // ==================================================================
  // BƯỚC 1 (SỬA ĐỔI): Thêm state để quản lý giá trị tìm kiếm
  // ==================================================================
  const [searchQuery, setSearchQuery] = useState('');


  useEffect(() => {
    loadInitialData();
  }, []);

  useEffect(() => {
    if (activeTab === 'recruitment') {
      console.log('📊 Tab recruitment được chọn, đang refresh data...');
      loadRecruitmentHours(true);
    }
  }, [activeTab]);

  const loadInitialData = async () => {
    try {
      setLoading(true);
      await Promise.all([
        loadEmployees(),
        loadAttendanceLogs(),
        loadStores(),
        loadRecruitmentRequests(),
        loadRecruitmentHours(true)
      ]);
    } catch (error) {
      console.error('Error loading initial data:', error);
      showNotification('Lỗi khi tải dữ liệu chấm công', 'error')...
      === Kết thúc AttendanceLogsPage.jsx ===
    📄 EmployeeManagementPage.jsx
      === Nội dung EmployeeManagementPage.jsx ===
import React, { useState, useMemo } from 'react';
import { useEmployees } from '../hooks/useEmployees';

// Import các components con
import EmployeeList from '../components/employee/EmployeeList.jsx';
import EmployeeAddForm from '../components/employee/EmployeeAddForm.jsx';
import EmployeeEditModal from '../components/employee/EmployeeEditModal.jsx';
// ✅ THÊM: Import các modal cho Work History
import AddWorkHistoryModal from '../components/employee/AddWorkHistoryModal.jsx';
import WorkHistoryModal from '../components/employee/WorkHistoryModal.jsx';
import Loading from '../components/common/Loading.jsx';
import Alert from '../components/common/Alert.jsx';

const EmployeeManagementPage = () => {
  const {
    employees,
    loading,
    error,
    addEmployee,
    updateEmployee,
    deleteEmployee,
    refreshEmployees,
  } = useEmployees();

  // State cho modal chỉnh sửa
  const [isEditModalOpen, setIsEditModalOpen] = useState(false);
  const [selectedEmployee, setSelectedEmployee] = useState(null);

  // ✅ CẬP NHẬT: State cho các modal Work History
  const [isAddWorkHistoryModalOpen, setAddWorkHistoryModalOpen] = useState(false);
  const [isManageWorkHistoryModalOpen, setManageWorkHistoryModalOpen] = useState(false); // ✅ THAY ĐỔI: Đổi tên từ isViewWorkHistoryModalOpen
  const [employeeForHistory, setEmployeeForHistory] = useState(null);
  
  // State cho tìm kiếm và bộ lọc
  const [searchTerm, setSearchTerm] = useState('');
  const [statusFilter, setStatusFilter] = useState('');

  const filteredEmployees = useMemo(() => {
    // ... (Giữ nguyên logic lọc)
    let filtered = employees;
    if (searchTerm) {
      const lowerCaseSearchTerm = searchTerm.toLowerCase();
      filtered = filtered.filter(
        (employee) =>
          employee.fullName.toLowerCase().includes(lowerCaseSearchTerm) ||
          employee.employeeId.toLowerCase().includes(lowerCaseSearchTerm) ||
          (employee.phoneNumber && employee.phoneNumber.includes(searchTerm))
      );
    }...
      === Kết thúc EmployeeManagementPage.jsx ===
    📄 HRDashboardPage.jsx
      === Nội dung HRDashboardPage.jsx ===
import React, { useState, useEffect } from 'react';
import { useAuth } from '../hooks/useAuth';
import { ApiClient } from '../services/api';
import { useNotification } from '../hooks/useNotification';
import Loading from '../components/common/Loading';

const HRDashboardPage = () => {
  const [stats, setStats] = useState({
    totalEmployees: 0,
    activeEmployees: 0,
    inactiveEmployees: 0,
    totalAttendanceLogs: 0,
    todayLogs: 0,
  });
  const [loading, setLoading] = useState(true);
  const { user } = useAuth();
  const { showNotification } = useNotification();

  useEffect(() => {
    checkPermissions();
    loadStats();
    // eslint-disable-next-line
  }, []);

  const checkPermissions = () => {
    if (!user || (user.role !== 'hr' && user.role !== 'admin')) {
      showNotification('Bạn không có quyền truy cập trang này', 'error');
      window.location.href = '/dashboard';
    }
  };

  // **Lưu ý QUAN TRỌNG: Phải dùng đúng endpoint `/api/dashboard/stats`**
  const loadStats = async () => {
    setLoading(true);
    try {
      console.log('🔍 HRDashboard: Loading stats...');
      // ĐỔI endpoint
      const response = await ApiClient.get('/api/dashboard/stats');
      console.log('📨 HRDashboard: Raw response:', response);

      if (response.success && response.data) {
        // Gộp stats employee và attendance
        const employee = response.data.employee || {};
        const attendance = response.data.attendance || {};

        const statsObj = {
          totalEmployees: employee.totalEmployees || 0,
          activeEmployees: employee.activeEmployees || 0,
          inactiveEmployees:
            (employee.totalEmployees || 0) - (employee.activeEmployees || 0),
          totalAttendanceLogs: attendance.totalAttendanceLogs || 0,
          todayLogs: attendance.todayLogs || 0,
        };

        console.log('✅ HRDashboard: Setting stats to:', statsObj);
        setStats(statsObj);
      } else {
        showNotification(
          response.mess...
      === Kết thúc HRDashboardPage.jsx ===
    📄 LoginPage.jsx
      === Nội dung LoginPage.jsx ===
import React, { useState, useEffect } from 'react';
import { Navigate, useNavigate } from 'react-router-dom';
import { useAuth } from '../hooks/useAuth';
import { useNotification } from '../hooks/useNotification';
import Loading from '../components/common/Loading';

const LoginPage = () => {
  const [credentials, setCredentials] = useState({
    username: '',
    password: ''
  });
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [errors, setErrors] = useState({});
  
  // ✅ THÊM: State để đánh dấu khi đang thực hiện quick access
  const [isQuickAccess, setIsQuickAccess] = useState(false);
  
  const { user, login, loading } = useAuth();
  const { showNotification } = useNotification();
  const navigate = useNavigate();

  useEffect(() => {
    // Clear any existing alerts
    const alertContainer = document.getElementById('alert-container');
    if (alertContainer) {
      alertContainer.innerHTML = '';
    }
  }, []);

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setCredentials(prev => ({
      ...prev,
      [name]: value
    }));
    
    // Clear error when user starts typing
    if (errors[name]) {
      setErrors(prev => ({
        ...prev,
        [name]: ''
      }));
    }
  };

  const validateForm = () => {
    const newErrors = {};
    
    if (!credentials.username.trim()) {
      newErrors.username = 'Vui lòng nhập tên đăng nhập';
    }
    
    if (!credentials.password.trim()) {
      newErrors.password = 'Vui lòng nhập mật khẩu';
    }
    
    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    
    if (!validateForm()) {
      showNotification('Vui lòng điền đầy đủ thông tin!', 'error');
      return;
    }

    setIsSubmitting(true);
    
    try {
      const response = await login(credentials);
      
      console.log('✅ Regular login response:', response);
      console.log('👤 User role:', response?.da...
      === Kết thúc LoginPage.jsx ===
  📁 services/
    📄 api.js
      === Nội dung api.js ===
// API helper functions - converted from vanilla JS
export class ApiClient {
  static async request(url, options = {}) {
    try {
      const response = await fetch(url, {
        headers: {
          'Content-Type': 'application/json',
          ...options.headers
        },
        credentials: 'include',
        ...options
      });

      // ✅ THÊM: Log request details để debug
      console.log('API Request:', {
        url,
        method: options.method || 'GET',
        body: options.body,
        status: response.status,
        statusText: response.statusText
      });

      if (!response.ok) {
        let errorData;
        try {
          errorData = await response.json();
          // ✅ THÊM: Log full error response
          console.error('Server error response:', errorData);
        } catch (parseError) {
          console.error('Could not parse error response:', parseError);
          errorData = { error: `HTTP ${response.status}: ${response.statusText}` };
        }
        
        // ✅ SỬA: Trả về object chứa đầy đủ thông tin lỗi
        throw new Error(JSON.stringify({
          status: response.status,
          message: errorData.message || errorData.error || 'Request failed',
          details: errorData
        }));
      }

      const data = await response.json();
      console.log('API Response:', data);
      return data;
    } catch (error) {
      console.error('API request error:', error);
      throw error;
    }
  }

  static async get(url, params = {}) {
    const queryString = new URLSearchParams(params).toString();
    const fullUrl = queryString ? `${url}?${queryString}` : url;
    return this.request(fullUrl);
  }

  static async post(url, data) {
    return this.request(url, {
      method: 'POST',
      body: JSON.stringify(data)
    });
  }

  static async put(url, data) {
    return this.request(url, {
      method: 'PUT',
      body: JSON.stringify(data)
    });
  }

  static async delete(url) {
    return this.request(ur...
      === Kết thúc api.js ===
    📄 auth.js
    📄 employee.js
      === Nội dung employee.js ===
// src/services/employee.js

import { ApiClient } from './api.js';

const handleError = (error, context) => {
    const message = error.response?.data?.message || error.message || `Lỗi không xác định khi ${context}.`;
    console.error(`❌ Lỗi Service API (${context}):`, message);
    throw new Error(message);
};

export const getEmployees = async () => {
    try {
        console.log('📡 SERVICE (FE): Gọi API lấy danh sách nhân viên...');
        const response = await ApiClient.get('/api/employees');
        
        // ✅ SỬA: Debug chi tiết response structure
        console.log('🔍 EMPLOYEE SERVICE: Raw axios response:', response);
        console.log('🔍 EMPLOYEE SERVICE: Response data type:', typeof response.data);
        console.log('🔍 EMPLOYEE SERVICE: Response data keys:', response.data ? Object.keys(response.data) : 'NULL');
        console.log('🔍 EMPLOYEE SERVICE: Response data:', response.data);
        
        if (!response.data) {
            throw new Error('Server không trả về dữ liệu');
        }
        
        // ✅ SỬA: Xử lý cả 2 trường hợp response structure
        
        // Trường hợp 1: Standard structure {success, data, message}
        if (typeof response.data.success !== 'undefined') {
            console.log('✅ EMPLOYEE SERVICE: Found standard structure');
            console.log('  - success:', response.data.success);
            console.log('  - message:', response.data.message);
            console.log('  - data type:', Array.isArray(response.data.data) ? 'array' : typeof response.data.data);
            console.log('  - data length:', response.data.data?.length);
            
            if (!response.data.success) {
                throw new Error(response.data.message || 'Server trả về lỗi');
            }
            
            return response.data; // Trả về {success: true, data: [...], message: "..."}
        }
        
        // Trường hợp 2: Backend trả về array trực tiếp
        if (Array.isArray(response.data)) {
        ...
      === Kết thúc employee.js ===
  📁 styles/
    📄 components.css
    📄 globals.css
      === Nội dung globals.css ===
/* Global styles for React app */
.loading {
  position: relative;
}

.loading::after {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: rgba(255, 255, 255, 0.8);
  display: flex;
  justify-content: center;
  align-items: center;
  z-index: 1000;
}

.min-vh-100 {
  min-height: 100vh;
}

/* Alert container */
#alert-container {
  position: fixed;
  top: 20px;
  right: 20px;
  z-index: 1055;
  min-width: 300px;
}

/* Table enhancements */
.table-hover tbody tr:hover {
  background-color: rgba(0, 0, 0, 0.075);
}

/* Button groups */
.btn-group .btn {
  margin-right: 2px;
}

.btn-group .btn:last-child {
  margin-right: 0;
}

/* Form enhancements */
.is-invalid {
  border-color: #dc3545;
}

.is-valid {
  border-color: #198754;
}

/* Modal enhancements */
.modal-backdrop {
  backdrop-filter: blur(2px);
}

/* Work history entries */
.work-history-entry {
  background: #f8f9fa;
  border-left: 4px solid #007bff;
}

/* Recruitment table */
.recruitment-row.table-primary {
  background-color: rgba(13, 110, 253, 0.1) !important;
}

/* Loading spinner */
.spinner-border-sm {
  width: 1rem;
  height: 1rem;
}

/* Responsive adjustments */
@media (max-width: 768px) {
  .btn-group {
    flex-direction: column;
  }
  
  .btn-group .btn {
    margin-right: 0;
    margin-bottom: 2px;
  }
  
  .table-responsive {
    font-size: 0.875rem;
  }
}

      === Kết thúc globals.css ===
    📄 notifications.css
      === Nội dung notifications.css ===
/* CSS cho hệ thống thông báo "toast" */
.notification-container {
    position: fixed;
    top: 20px;
    right: 20px;
    z-index: 9999;
    display: flex;
    flex-direction: column;
    gap: 12px;
    max-width: 380px;
}

.alert-toast {
    padding: 16px;
    border-radius: 8px;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
    display: flex;
    align-items: flex-start; /* Canh lề trên cho icon và text */
    color: #fff;
    opacity: 0;
    transform: translateX(110%);
    transition: all 0.4s cubic-bezier(0.21, 1.02, 0.73, 1);
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;
    font-size: 15px;
}

.alert-toast.show {
    opacity: 1;
    transform: translateX(0);
}

.alert-toast-icon {
    margin-right: 12px;
    font-size: 20px;
    flex-shrink: 0;
    line-height: 1.4;
}

.alert-toast-content {
    flex-grow: 1;
}

.alert-toast-message {
    font-weight: 500;
    line-height: 1.4;
}

.alert-toast-close {
    margin-left: 16px;
    background: none;
    border: none;
    color: inherit;
    font-size: 22px;
    cursor: pointer;
    opacity: 0.7;
    padding: 0;
    line-height: 1;
}

.alert-toast-close:hover {
    opacity: 1;
}

/* Các loại thông báo */
.alert-toast.success { background-color: #28a745; }
.alert-toast.error { background-color: #dc3545; }
.alert-toast.warning { background-color: #ffc107; color: #212529; }
.alert-toast.info { background-color: #0d6efd; }

      === Kết thúc notifications.css ===
  📁 utils/
    📄 dateUtils.js
      === Nội dung dateUtils.js ===
// src/utils/dateUtils.js

export const convertExcelSerialToDate = (serialNumber) => {
    if (!serialNumber || typeof serialNumber !== 'number') return null;
    try {
        const excelEpoch = new Date(Date.UTC(1899, 11, 30, 0, 0, 0, 0));
        const msPerDay = 24 * 60 * 60 * 1000;
        const msOffset = serialNumber * msPerDay;
        return new Date(excelEpoch.getTime() + msOffset);
    } catch (error) {
        console.error('Error converting Excel serial number:', error);
        return null;
    }
};

export const formatDateTimeForCSV = (serialNumber) => {
    const date = convertExcelSerialToDate(serialNumber);
    if (!date) return 'Invalid Date';
    const y = date.getUTCFullYear(), m = String(date.getUTCMonth()+1).padStart(2,'0');
    const d = String(date.getUTCDate()).padStart(2,'0');
    const h = String(date.getUTCHours()).padStart(2,'0');
    const mi = String(date.getUTCMinutes()).padStart(2,'0');
    const s = String(date.getUTCSeconds()).padStart(2,'0');
    return `${y}-${m}-${d} ${h}:${mi}:${s}`;
};

export const formatTimeForCSV = (serialNumber) => {
    const date = convertExcelSerialToDate(serialNumber);
    if (!date) return 'Invalid Time';
    const h = String(date.getUTCHours()).padStart(2,'0');
    const mi = String(date.getUTCMinutes()).padStart(2,'0');
    const s = String(date.getUTCSeconds()).padStart(2,'0');
    return `${h}:${mi}:${s}`;
};

      === Kết thúc dateUtils.js ===
📄 vite.config.js
  === Nội dung vite.config.js ===
// vite.config.js
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'

export default defineConfig({
  plugins: [react()],
  server: {
    host: '0.0.0.0',
    port: 3000,
    proxy: {
      '/api': {
        target: 'http://localhost:8080',
        changeOrigin: true,
      }
    }
  }
})

  === Kết thúc vite.config.js ===